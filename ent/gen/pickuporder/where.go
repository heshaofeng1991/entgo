// Code generated by ent, DO NOT EDIT.

package pickuporder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// RequestedPickupAt applies equality check predicate on the "requested_pickup_at" field. It's identical to RequestedPickupAtEQ.
func RequestedPickupAt(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestedPickupAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// SenderAddressInfo applies equality check predicate on the "sender_address_info" field. It's identical to SenderAddressInfoEQ.
func SenderAddressInfo(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddressInfo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// RequestedPickupAtEQ applies the EQ predicate on the "requested_pickup_at" field.
func RequestedPickupAtEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtNEQ applies the NEQ predicate on the "requested_pickup_at" field.
func RequestedPickupAtNEQ(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtIn applies the In predicate on the "requested_pickup_at" field.
func RequestedPickupAtIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequestedPickupAt), v...))
	})
}

// RequestedPickupAtNotIn applies the NotIn predicate on the "requested_pickup_at" field.
func RequestedPickupAtNotIn(vs ...time.Time) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequestedPickupAt), v...))
	})
}

// RequestedPickupAtGT applies the GT predicate on the "requested_pickup_at" field.
func RequestedPickupAtGT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtGTE applies the GTE predicate on the "requested_pickup_at" field.
func RequestedPickupAtGTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtLT applies the LT predicate on the "requested_pickup_at" field.
func RequestedPickupAtLT(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtLTE applies the LTE predicate on the "requested_pickup_at" field.
func RequestedPickupAtLTE(v time.Time) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestedPickupAt), v))
	})
}

// RequestedPickupAtIsNil applies the IsNil predicate on the "requested_pickup_at" field.
func RequestedPickupAtIsNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestedPickupAt)))
	})
}

// RequestedPickupAtNotNil applies the NotNil predicate on the "requested_pickup_at" field.
func RequestedPickupAtNotNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestedPickupAt)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// SenderAddressInfoEQ applies the EQ predicate on the "sender_address_info" field.
func SenderAddressInfoEQ(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoNEQ applies the NEQ predicate on the "sender_address_info" field.
func SenderAddressInfoNEQ(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoIn applies the In predicate on the "sender_address_info" field.
func SenderAddressInfoIn(vs ...string) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSenderAddressInfo), v...))
	})
}

// SenderAddressInfoNotIn applies the NotIn predicate on the "sender_address_info" field.
func SenderAddressInfoNotIn(vs ...string) predicate.PickupOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSenderAddressInfo), v...))
	})
}

// SenderAddressInfoGT applies the GT predicate on the "sender_address_info" field.
func SenderAddressInfoGT(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoGTE applies the GTE predicate on the "sender_address_info" field.
func SenderAddressInfoGTE(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoLT applies the LT predicate on the "sender_address_info" field.
func SenderAddressInfoLT(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoLTE applies the LTE predicate on the "sender_address_info" field.
func SenderAddressInfoLTE(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoContains applies the Contains predicate on the "sender_address_info" field.
func SenderAddressInfoContains(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoHasPrefix applies the HasPrefix predicate on the "sender_address_info" field.
func SenderAddressInfoHasPrefix(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoHasSuffix applies the HasSuffix predicate on the "sender_address_info" field.
func SenderAddressInfoHasSuffix(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoIsNil applies the IsNil predicate on the "sender_address_info" field.
func SenderAddressInfoIsNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSenderAddressInfo)))
	})
}

// SenderAddressInfoNotNil applies the NotNil predicate on the "sender_address_info" field.
func SenderAddressInfoNotNil() predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSenderAddressInfo)))
	})
}

// SenderAddressInfoEqualFold applies the EqualFold predicate on the "sender_address_info" field.
func SenderAddressInfoEqualFold(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSenderAddressInfo), v))
	})
}

// SenderAddressInfoContainsFold applies the ContainsFold predicate on the "sender_address_info" field.
func SenderAddressInfoContainsFold(v string) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSenderAddressInfo), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PickupOrder) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PickupOrder) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PickupOrder) predicate.PickupOrder {
	return predicate.PickupOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
