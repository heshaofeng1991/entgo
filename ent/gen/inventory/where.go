// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// StorageQty applies equality check predicate on the "storage_qty" field. It's identical to StorageQtyEQ.
func StorageQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageQty), v))
	})
}

// AvailableQty applies equality check predicate on the "available_qty" field. It's identical to AvailableQtyEQ.
func AvailableQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableQty), v))
	})
}

// PrepareShipQty applies equality check predicate on the "prepare_ship_qty" field. It's identical to PrepareShipQtyEQ.
func PrepareShipQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShelveQty applies equality check predicate on the "prepare_shelve_qty" field. It's identical to PrepareShelveQtyEQ.
func PrepareShelveQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepareShelveQty), v))
	})
}

// QuicktronStorageQty applies equality check predicate on the "quicktron_storage_qty" field. It's identical to QuicktronStorageQtyEQ.
func QuicktronStorageQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronAvailableQty applies equality check predicate on the "quicktron_available_qty" field. It's identical to QuicktronAvailableQtyEQ.
func QuicktronAvailableQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronPrepareOutboundQty applies equality check predicate on the "quicktron_prepare_outbound_qty" field. It's identical to QuicktronPrepareOutboundQtyEQ.
func QuicktronPrepareOutboundQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareShelveQty applies equality check predicate on the "quicktron_prepare_shelve_qty" field. It's identical to QuicktronPrepareShelveQtyEQ.
func QuicktronPrepareShelveQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// NormalStorageQty applies equality check predicate on the "normal_storage_qty" field. It's identical to NormalStorageQtyEQ.
func NormalStorageQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalStorageQty), v))
	})
}

// NormalAvailableQty applies equality check predicate on the "normal_available_qty" field. It's identical to NormalAvailableQtyEQ.
func NormalAvailableQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalPrepareOutboundQty applies equality check predicate on the "normal_prepare_outbound_qty" field. It's identical to NormalPrepareOutboundQtyEQ.
func NormalPrepareOutboundQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareShelveQty applies equality check predicate on the "normal_prepare_shelve_qty" field. It's identical to NormalPrepareShelveQtyEQ.
func NormalPrepareShelveQty(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...int64) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...int64) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDGT applies the GT predicate on the "warehouse_id" field.
func WarehouseIDGT(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDGTE applies the GTE predicate on the "warehouse_id" field.
func WarehouseIDGTE(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLT applies the LT predicate on the "warehouse_id" field.
func WarehouseIDLT(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLTE applies the LTE predicate on the "warehouse_id" field.
func WarehouseIDLTE(v int64) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarehouseID), v))
	})
}

// StorageQtyEQ applies the EQ predicate on the "storage_qty" field.
func StorageQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageQty), v))
	})
}

// StorageQtyNEQ applies the NEQ predicate on the "storage_qty" field.
func StorageQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorageQty), v))
	})
}

// StorageQtyIn applies the In predicate on the "storage_qty" field.
func StorageQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStorageQty), v...))
	})
}

// StorageQtyNotIn applies the NotIn predicate on the "storage_qty" field.
func StorageQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStorageQty), v...))
	})
}

// StorageQtyGT applies the GT predicate on the "storage_qty" field.
func StorageQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorageQty), v))
	})
}

// StorageQtyGTE applies the GTE predicate on the "storage_qty" field.
func StorageQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorageQty), v))
	})
}

// StorageQtyLT applies the LT predicate on the "storage_qty" field.
func StorageQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorageQty), v))
	})
}

// StorageQtyLTE applies the LTE predicate on the "storage_qty" field.
func StorageQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorageQty), v))
	})
}

// AvailableQtyEQ applies the EQ predicate on the "available_qty" field.
func AvailableQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableQty), v))
	})
}

// AvailableQtyNEQ applies the NEQ predicate on the "available_qty" field.
func AvailableQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailableQty), v))
	})
}

// AvailableQtyIn applies the In predicate on the "available_qty" field.
func AvailableQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvailableQty), v...))
	})
}

// AvailableQtyNotIn applies the NotIn predicate on the "available_qty" field.
func AvailableQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvailableQty), v...))
	})
}

// AvailableQtyGT applies the GT predicate on the "available_qty" field.
func AvailableQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailableQty), v))
	})
}

// AvailableQtyGTE applies the GTE predicate on the "available_qty" field.
func AvailableQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailableQty), v))
	})
}

// AvailableQtyLT applies the LT predicate on the "available_qty" field.
func AvailableQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailableQty), v))
	})
}

// AvailableQtyLTE applies the LTE predicate on the "available_qty" field.
func AvailableQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailableQty), v))
	})
}

// PrepareShipQtyEQ applies the EQ predicate on the "prepare_ship_qty" field.
func PrepareShipQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShipQtyNEQ applies the NEQ predicate on the "prepare_ship_qty" field.
func PrepareShipQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShipQtyIn applies the In predicate on the "prepare_ship_qty" field.
func PrepareShipQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrepareShipQty), v...))
	})
}

// PrepareShipQtyNotIn applies the NotIn predicate on the "prepare_ship_qty" field.
func PrepareShipQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrepareShipQty), v...))
	})
}

// PrepareShipQtyGT applies the GT predicate on the "prepare_ship_qty" field.
func PrepareShipQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShipQtyGTE applies the GTE predicate on the "prepare_ship_qty" field.
func PrepareShipQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShipQtyLT applies the LT predicate on the "prepare_ship_qty" field.
func PrepareShipQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShipQtyLTE applies the LTE predicate on the "prepare_ship_qty" field.
func PrepareShipQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrepareShipQty), v))
	})
}

// PrepareShelveQtyEQ applies the EQ predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepareShelveQty), v))
	})
}

// PrepareShelveQtyNEQ applies the NEQ predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepareShelveQty), v))
	})
}

// PrepareShelveQtyIn applies the In predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrepareShelveQty), v...))
	})
}

// PrepareShelveQtyNotIn applies the NotIn predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrepareShelveQty), v...))
	})
}

// PrepareShelveQtyGT applies the GT predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrepareShelveQty), v))
	})
}

// PrepareShelveQtyGTE applies the GTE predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrepareShelveQty), v))
	})
}

// PrepareShelveQtyLT applies the LT predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrepareShelveQty), v))
	})
}

// PrepareShelveQtyLTE applies the LTE predicate on the "prepare_shelve_qty" field.
func PrepareShelveQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrepareShelveQty), v))
	})
}

// QuicktronStorageQtyEQ applies the EQ predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronStorageQtyNEQ applies the NEQ predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronStorageQtyIn applies the In predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuicktronStorageQty), v...))
	})
}

// QuicktronStorageQtyNotIn applies the NotIn predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuicktronStorageQty), v...))
	})
}

// QuicktronStorageQtyGT applies the GT predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronStorageQtyGTE applies the GTE predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronStorageQtyLT applies the LT predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronStorageQtyLTE applies the LTE predicate on the "quicktron_storage_qty" field.
func QuicktronStorageQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuicktronStorageQty), v))
	})
}

// QuicktronAvailableQtyEQ applies the EQ predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronAvailableQtyNEQ applies the NEQ predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronAvailableQtyIn applies the In predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuicktronAvailableQty), v...))
	})
}

// QuicktronAvailableQtyNotIn applies the NotIn predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuicktronAvailableQty), v...))
	})
}

// QuicktronAvailableQtyGT applies the GT predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronAvailableQtyGTE applies the GTE predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronAvailableQtyLT applies the LT predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronAvailableQtyLTE applies the LTE predicate on the "quicktron_available_qty" field.
func QuicktronAvailableQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuicktronAvailableQty), v))
	})
}

// QuicktronPrepareOutboundQtyEQ applies the EQ predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareOutboundQtyNEQ applies the NEQ predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareOutboundQtyIn applies the In predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuicktronPrepareOutboundQty), v...))
	})
}

// QuicktronPrepareOutboundQtyNotIn applies the NotIn predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuicktronPrepareOutboundQty), v...))
	})
}

// QuicktronPrepareOutboundQtyGT applies the GT predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareOutboundQtyGTE applies the GTE predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareOutboundQtyLT applies the LT predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareOutboundQtyLTE applies the LTE predicate on the "quicktron_prepare_outbound_qty" field.
func QuicktronPrepareOutboundQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuicktronPrepareOutboundQty), v))
	})
}

// QuicktronPrepareShelveQtyEQ applies the EQ predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// QuicktronPrepareShelveQtyNEQ applies the NEQ predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// QuicktronPrepareShelveQtyIn applies the In predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuicktronPrepareShelveQty), v...))
	})
}

// QuicktronPrepareShelveQtyNotIn applies the NotIn predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuicktronPrepareShelveQty), v...))
	})
}

// QuicktronPrepareShelveQtyGT applies the GT predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// QuicktronPrepareShelveQtyGTE applies the GTE predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// QuicktronPrepareShelveQtyLT applies the LT predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// QuicktronPrepareShelveQtyLTE applies the LTE predicate on the "quicktron_prepare_shelve_qty" field.
func QuicktronPrepareShelveQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuicktronPrepareShelveQty), v))
	})
}

// NormalStorageQtyEQ applies the EQ predicate on the "normal_storage_qty" field.
func NormalStorageQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalStorageQty), v))
	})
}

// NormalStorageQtyNEQ applies the NEQ predicate on the "normal_storage_qty" field.
func NormalStorageQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNormalStorageQty), v))
	})
}

// NormalStorageQtyIn applies the In predicate on the "normal_storage_qty" field.
func NormalStorageQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNormalStorageQty), v...))
	})
}

// NormalStorageQtyNotIn applies the NotIn predicate on the "normal_storage_qty" field.
func NormalStorageQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNormalStorageQty), v...))
	})
}

// NormalStorageQtyGT applies the GT predicate on the "normal_storage_qty" field.
func NormalStorageQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNormalStorageQty), v))
	})
}

// NormalStorageQtyGTE applies the GTE predicate on the "normal_storage_qty" field.
func NormalStorageQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNormalStorageQty), v))
	})
}

// NormalStorageQtyLT applies the LT predicate on the "normal_storage_qty" field.
func NormalStorageQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNormalStorageQty), v))
	})
}

// NormalStorageQtyLTE applies the LTE predicate on the "normal_storage_qty" field.
func NormalStorageQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNormalStorageQty), v))
	})
}

// NormalAvailableQtyEQ applies the EQ predicate on the "normal_available_qty" field.
func NormalAvailableQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalAvailableQtyNEQ applies the NEQ predicate on the "normal_available_qty" field.
func NormalAvailableQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalAvailableQtyIn applies the In predicate on the "normal_available_qty" field.
func NormalAvailableQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNormalAvailableQty), v...))
	})
}

// NormalAvailableQtyNotIn applies the NotIn predicate on the "normal_available_qty" field.
func NormalAvailableQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNormalAvailableQty), v...))
	})
}

// NormalAvailableQtyGT applies the GT predicate on the "normal_available_qty" field.
func NormalAvailableQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalAvailableQtyGTE applies the GTE predicate on the "normal_available_qty" field.
func NormalAvailableQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalAvailableQtyLT applies the LT predicate on the "normal_available_qty" field.
func NormalAvailableQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalAvailableQtyLTE applies the LTE predicate on the "normal_available_qty" field.
func NormalAvailableQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNormalAvailableQty), v))
	})
}

// NormalPrepareOutboundQtyEQ applies the EQ predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareOutboundQtyNEQ applies the NEQ predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareOutboundQtyIn applies the In predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNormalPrepareOutboundQty), v...))
	})
}

// NormalPrepareOutboundQtyNotIn applies the NotIn predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNormalPrepareOutboundQty), v...))
	})
}

// NormalPrepareOutboundQtyGT applies the GT predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareOutboundQtyGTE applies the GTE predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareOutboundQtyLT applies the LT predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareOutboundQtyLTE applies the LTE predicate on the "normal_prepare_outbound_qty" field.
func NormalPrepareOutboundQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNormalPrepareOutboundQty), v))
	})
}

// NormalPrepareShelveQtyEQ applies the EQ predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// NormalPrepareShelveQtyNEQ applies the NEQ predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyNEQ(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// NormalPrepareShelveQtyIn applies the In predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNormalPrepareShelveQty), v...))
	})
}

// NormalPrepareShelveQtyNotIn applies the NotIn predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyNotIn(vs ...int32) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNormalPrepareShelveQty), v...))
	})
}

// NormalPrepareShelveQtyGT applies the GT predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyGT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// NormalPrepareShelveQtyGTE applies the GTE predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyGTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// NormalPrepareShelveQtyLT applies the LT predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyLT(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// NormalPrepareShelveQtyLTE applies the LTE predicate on the "normal_prepare_shelve_qty" field.
func NormalPrepareShelveQtyLTE(v int32) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNormalPrepareShelveQty), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Inventory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(func(s *sql.Selector) {
		p(s.Not())
	})
}
