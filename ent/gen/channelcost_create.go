// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
)

// ChannelCostCreate is the builder for creating a ChannelCost entity.
type ChannelCostCreate struct {
	config
	mutation *ChannelCostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccc *ChannelCostCreate) SetCreatedAt(t time.Time) *ChannelCostCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableCreatedAt(t *time.Time) *ChannelCostCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *ChannelCostCreate) SetUpdatedAt(t time.Time) *ChannelCostCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableUpdatedAt(t *time.Time) *ChannelCostCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *ChannelCostCreate) SetDeletedAt(t time.Time) *ChannelCostCreate {
	ccc.mutation.SetDeletedAt(t)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableDeletedAt(t *time.Time) *ChannelCostCreate {
	if t != nil {
		ccc.SetDeletedAt(*t)
	}
	return ccc
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (ccc *ChannelCostCreate) SetChannelCostBatchID(i int64) *ChannelCostCreate {
	ccc.mutation.SetChannelCostBatchID(i)
	return ccc
}

// SetChannelID sets the "channel_id" field.
func (ccc *ChannelCostCreate) SetChannelID(i int64) *ChannelCostCreate {
	ccc.mutation.SetChannelID(i)
	return ccc
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableChannelID(i *int64) *ChannelCostCreate {
	if i != nil {
		ccc.SetChannelID(*i)
	}
	return ccc
}

// SetMode sets the "mode" field.
func (ccc *ChannelCostCreate) SetMode(i int8) *ChannelCostCreate {
	ccc.mutation.SetMode(i)
	return ccc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableMode(i *int8) *ChannelCostCreate {
	if i != nil {
		ccc.SetMode(*i)
	}
	return ccc
}

// SetCountryCode sets the "country_code" field.
func (ccc *ChannelCostCreate) SetCountryCode(s string) *ChannelCostCreate {
	ccc.mutation.SetCountryCode(s)
	return ccc
}

// SetZone sets the "zone" field.
func (ccc *ChannelCostCreate) SetZone(s string) *ChannelCostCreate {
	ccc.mutation.SetZone(s)
	return ccc
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableZone(s *string) *ChannelCostCreate {
	if s != nil {
		ccc.SetZone(*s)
	}
	return ccc
}

// SetStartWeight sets the "start_weight" field.
func (ccc *ChannelCostCreate) SetStartWeight(i int) *ChannelCostCreate {
	ccc.mutation.SetStartWeight(i)
	return ccc
}

// SetEndWeight sets the "end_weight" field.
func (ccc *ChannelCostCreate) SetEndWeight(i int) *ChannelCostCreate {
	ccc.mutation.SetEndWeight(i)
	return ccc
}

// SetFirstWeight sets the "first_weight" field.
func (ccc *ChannelCostCreate) SetFirstWeight(i int) *ChannelCostCreate {
	ccc.mutation.SetFirstWeight(i)
	return ccc
}

// SetNillableFirstWeight sets the "first_weight" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableFirstWeight(i *int) *ChannelCostCreate {
	if i != nil {
		ccc.SetFirstWeight(*i)
	}
	return ccc
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (ccc *ChannelCostCreate) SetFirstWeightFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetFirstWeightFee(f)
	return ccc
}

// SetNillableFirstWeightFee sets the "first_weight_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableFirstWeightFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetFirstWeightFee(*f)
	}
	return ccc
}

// SetUnitWeight sets the "unit_weight" field.
func (ccc *ChannelCostCreate) SetUnitWeight(i int) *ChannelCostCreate {
	ccc.mutation.SetUnitWeight(i)
	return ccc
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (ccc *ChannelCostCreate) SetUnitWeightFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetUnitWeightFee(f)
	return ccc
}

// SetNillableUnitWeightFee sets the "unit_weight_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableUnitWeightFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetUnitWeightFee(*f)
	}
	return ccc
}

// SetFuelFee sets the "fuel_fee" field.
func (ccc *ChannelCostCreate) SetFuelFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetFuelFee(f)
	return ccc
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableFuelFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetFuelFee(*f)
	}
	return ccc
}

// SetProcessingFee sets the "processing_fee" field.
func (ccc *ChannelCostCreate) SetProcessingFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetProcessingFee(f)
	return ccc
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableProcessingFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetProcessingFee(*f)
	}
	return ccc
}

// SetRegistrationFee sets the "registration_fee" field.
func (ccc *ChannelCostCreate) SetRegistrationFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetRegistrationFee(f)
	return ccc
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableRegistrationFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetRegistrationFee(*f)
	}
	return ccc
}

// SetMiscFee sets the "misc_fee" field.
func (ccc *ChannelCostCreate) SetMiscFee(f float64) *ChannelCostCreate {
	ccc.mutation.SetMiscFee(f)
	return ccc
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableMiscFee(f *float64) *ChannelCostCreate {
	if f != nil {
		ccc.SetMiscFee(*f)
	}
	return ccc
}

// SetMinNormalDays sets the "min_normal_days" field.
func (ccc *ChannelCostCreate) SetMinNormalDays(i int) *ChannelCostCreate {
	ccc.mutation.SetMinNormalDays(i)
	return ccc
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableMinNormalDays(i *int) *ChannelCostCreate {
	if i != nil {
		ccc.SetMinNormalDays(*i)
	}
	return ccc
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (ccc *ChannelCostCreate) SetMaxNormalDays(i int) *ChannelCostCreate {
	ccc.mutation.SetMaxNormalDays(i)
	return ccc
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableMaxNormalDays(i *int) *ChannelCostCreate {
	if i != nil {
		ccc.SetMaxNormalDays(*i)
	}
	return ccc
}

// SetStatus sets the "status" field.
func (ccc *ChannelCostCreate) SetStatus(i int8) *ChannelCostCreate {
	ccc.mutation.SetStatus(i)
	return ccc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableStatus(i *int8) *ChannelCostCreate {
	if i != nil {
		ccc.SetStatus(*i)
	}
	return ccc
}

// SetAverageDays sets the "average_days" field.
func (ccc *ChannelCostCreate) SetAverageDays(i int) *ChannelCostCreate {
	ccc.mutation.SetAverageDays(i)
	return ccc
}

// SetNillableAverageDays sets the "average_days" field if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableAverageDays(i *int) *ChannelCostCreate {
	if i != nil {
		ccc.SetAverageDays(*i)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *ChannelCostCreate) SetID(i int64) *ChannelCostCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// SetChannelsID sets the "channels" edge to the Channel entity by ID.
func (ccc *ChannelCostCreate) SetChannelsID(id int64) *ChannelCostCreate {
	ccc.mutation.SetChannelsID(id)
	return ccc
}

// SetNillableChannelsID sets the "channels" edge to the Channel entity by ID if the given value is not nil.
func (ccc *ChannelCostCreate) SetNillableChannelsID(id *int64) *ChannelCostCreate {
	if id != nil {
		ccc = ccc.SetChannelsID(*id)
	}
	return ccc
}

// SetChannels sets the "channels" edge to the Channel entity.
func (ccc *ChannelCostCreate) SetChannels(c *Channel) *ChannelCostCreate {
	return ccc.SetChannelsID(c.ID)
}

// Mutation returns the ChannelCostMutation object of the builder.
func (ccc *ChannelCostCreate) Mutation() *ChannelCostMutation {
	return ccc.mutation
}

// Save creates the ChannelCost in the database.
func (ccc *ChannelCostCreate) Save(ctx context.Context) (*ChannelCost, error) {
	var (
		err  error
		node *ChannelCost
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelCost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelCostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *ChannelCostCreate) SaveX(ctx context.Context) *ChannelCost {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *ChannelCostCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *ChannelCostCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *ChannelCostCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := channelcost.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := channelcost.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.Mode(); !ok {
		v := channelcost.DefaultMode
		ccc.mutation.SetMode(v)
	}
	if _, ok := ccc.mutation.Zone(); !ok {
		v := channelcost.DefaultZone
		ccc.mutation.SetZone(v)
	}
	if _, ok := ccc.mutation.FirstWeight(); !ok {
		v := channelcost.DefaultFirstWeight
		ccc.mutation.SetFirstWeight(v)
	}
	if _, ok := ccc.mutation.FirstWeightFee(); !ok {
		v := channelcost.DefaultFirstWeightFee
		ccc.mutation.SetFirstWeightFee(v)
	}
	if _, ok := ccc.mutation.UnitWeightFee(); !ok {
		v := channelcost.DefaultUnitWeightFee
		ccc.mutation.SetUnitWeightFee(v)
	}
	if _, ok := ccc.mutation.FuelFee(); !ok {
		v := channelcost.DefaultFuelFee
		ccc.mutation.SetFuelFee(v)
	}
	if _, ok := ccc.mutation.ProcessingFee(); !ok {
		v := channelcost.DefaultProcessingFee
		ccc.mutation.SetProcessingFee(v)
	}
	if _, ok := ccc.mutation.RegistrationFee(); !ok {
		v := channelcost.DefaultRegistrationFee
		ccc.mutation.SetRegistrationFee(v)
	}
	if _, ok := ccc.mutation.MiscFee(); !ok {
		v := channelcost.DefaultMiscFee
		ccc.mutation.SetMiscFee(v)
	}
	if _, ok := ccc.mutation.MinNormalDays(); !ok {
		v := channelcost.DefaultMinNormalDays
		ccc.mutation.SetMinNormalDays(v)
	}
	if _, ok := ccc.mutation.MaxNormalDays(); !ok {
		v := channelcost.DefaultMaxNormalDays
		ccc.mutation.SetMaxNormalDays(v)
	}
	if _, ok := ccc.mutation.Status(); !ok {
		v := channelcost.DefaultStatus
		ccc.mutation.SetStatus(v)
	}
	if _, ok := ccc.mutation.AverageDays(); !ok {
		v := channelcost.DefaultAverageDays
		ccc.mutation.SetAverageDays(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *ChannelCostCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ChannelCost.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ChannelCost.updated_at"`)}
	}
	if _, ok := ccc.mutation.ChannelCostBatchID(); !ok {
		return &ValidationError{Name: "channel_cost_batch_id", err: errors.New(`gen: missing required field "ChannelCost.channel_cost_batch_id"`)}
	}
	if v, ok := ccc.mutation.ChannelCostBatchID(); ok {
		if err := channelcost.ChannelCostBatchIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_cost_batch_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_cost_batch_id": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.ChannelID(); ok {
		if err := channelcost.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_id": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`gen: missing required field "ChannelCost.mode"`)}
	}
	if _, ok := ccc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`gen: missing required field "ChannelCost.country_code"`)}
	}
	if v, ok := ccc.mutation.CountryCode(); ok {
		if err := channelcost.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.country_code": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.Zone(); !ok {
		return &ValidationError{Name: "zone", err: errors.New(`gen: missing required field "ChannelCost.zone"`)}
	}
	if _, ok := ccc.mutation.StartWeight(); !ok {
		return &ValidationError{Name: "start_weight", err: errors.New(`gen: missing required field "ChannelCost.start_weight"`)}
	}
	if _, ok := ccc.mutation.EndWeight(); !ok {
		return &ValidationError{Name: "end_weight", err: errors.New(`gen: missing required field "ChannelCost.end_weight"`)}
	}
	if _, ok := ccc.mutation.FirstWeight(); !ok {
		return &ValidationError{Name: "first_weight", err: errors.New(`gen: missing required field "ChannelCost.first_weight"`)}
	}
	if _, ok := ccc.mutation.FirstWeightFee(); !ok {
		return &ValidationError{Name: "first_weight_fee", err: errors.New(`gen: missing required field "ChannelCost.first_weight_fee"`)}
	}
	if _, ok := ccc.mutation.UnitWeight(); !ok {
		return &ValidationError{Name: "unit_weight", err: errors.New(`gen: missing required field "ChannelCost.unit_weight"`)}
	}
	if _, ok := ccc.mutation.FuelFee(); !ok {
		return &ValidationError{Name: "fuel_fee", err: errors.New(`gen: missing required field "ChannelCost.fuel_fee"`)}
	}
	if _, ok := ccc.mutation.ProcessingFee(); !ok {
		return &ValidationError{Name: "processing_fee", err: errors.New(`gen: missing required field "ChannelCost.processing_fee"`)}
	}
	if _, ok := ccc.mutation.RegistrationFee(); !ok {
		return &ValidationError{Name: "registration_fee", err: errors.New(`gen: missing required field "ChannelCost.registration_fee"`)}
	}
	if _, ok := ccc.mutation.MiscFee(); !ok {
		return &ValidationError{Name: "misc_fee", err: errors.New(`gen: missing required field "ChannelCost.misc_fee"`)}
	}
	if _, ok := ccc.mutation.MinNormalDays(); !ok {
		return &ValidationError{Name: "min_normal_days", err: errors.New(`gen: missing required field "ChannelCost.min_normal_days"`)}
	}
	if _, ok := ccc.mutation.MaxNormalDays(); !ok {
		return &ValidationError{Name: "max_normal_days", err: errors.New(`gen: missing required field "ChannelCost.max_normal_days"`)}
	}
	if _, ok := ccc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "ChannelCost.status"`)}
	}
	if _, ok := ccc.mutation.AverageDays(); !ok {
		return &ValidationError{Name: "average_days", err: errors.New(`gen: missing required field "ChannelCost.average_days"`)}
	}
	return nil
}

func (ccc *ChannelCostCreate) sqlSave(ctx context.Context) (*ChannelCost, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ccc *ChannelCostCreate) createSpec() (*ChannelCost, *sqlgraph.CreateSpec) {
	var (
		_node = &ChannelCost{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: channelcost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcost.FieldID,
			},
		}
	)
	_spec.Schema = ccc.schemaConfig.ChannelCost
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(channelcost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(channelcost.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ccc.mutation.ChannelCostBatchID(); ok {
		_spec.SetField(channelcost.FieldChannelCostBatchID, field.TypeInt64, value)
		_node.ChannelCostBatchID = value
	}
	if value, ok := ccc.mutation.Mode(); ok {
		_spec.SetField(channelcost.FieldMode, field.TypeInt8, value)
		_node.Mode = value
	}
	if value, ok := ccc.mutation.CountryCode(); ok {
		_spec.SetField(channelcost.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := ccc.mutation.Zone(); ok {
		_spec.SetField(channelcost.FieldZone, field.TypeString, value)
		_node.Zone = value
	}
	if value, ok := ccc.mutation.StartWeight(); ok {
		_spec.SetField(channelcost.FieldStartWeight, field.TypeInt, value)
		_node.StartWeight = value
	}
	if value, ok := ccc.mutation.EndWeight(); ok {
		_spec.SetField(channelcost.FieldEndWeight, field.TypeInt, value)
		_node.EndWeight = value
	}
	if value, ok := ccc.mutation.FirstWeight(); ok {
		_spec.SetField(channelcost.FieldFirstWeight, field.TypeInt, value)
		_node.FirstWeight = value
	}
	if value, ok := ccc.mutation.FirstWeightFee(); ok {
		_spec.SetField(channelcost.FieldFirstWeightFee, field.TypeFloat64, value)
		_node.FirstWeightFee = value
	}
	if value, ok := ccc.mutation.UnitWeight(); ok {
		_spec.SetField(channelcost.FieldUnitWeight, field.TypeInt, value)
		_node.UnitWeight = value
	}
	if value, ok := ccc.mutation.UnitWeightFee(); ok {
		_spec.SetField(channelcost.FieldUnitWeightFee, field.TypeFloat64, value)
		_node.UnitWeightFee = value
	}
	if value, ok := ccc.mutation.FuelFee(); ok {
		_spec.SetField(channelcost.FieldFuelFee, field.TypeFloat64, value)
		_node.FuelFee = value
	}
	if value, ok := ccc.mutation.ProcessingFee(); ok {
		_spec.SetField(channelcost.FieldProcessingFee, field.TypeFloat64, value)
		_node.ProcessingFee = value
	}
	if value, ok := ccc.mutation.RegistrationFee(); ok {
		_spec.SetField(channelcost.FieldRegistrationFee, field.TypeFloat64, value)
		_node.RegistrationFee = value
	}
	if value, ok := ccc.mutation.MiscFee(); ok {
		_spec.SetField(channelcost.FieldMiscFee, field.TypeFloat64, value)
		_node.MiscFee = value
	}
	if value, ok := ccc.mutation.MinNormalDays(); ok {
		_spec.SetField(channelcost.FieldMinNormalDays, field.TypeInt, value)
		_node.MinNormalDays = value
	}
	if value, ok := ccc.mutation.MaxNormalDays(); ok {
		_spec.SetField(channelcost.FieldMaxNormalDays, field.TypeInt, value)
		_node.MaxNormalDays = value
	}
	if value, ok := ccc.mutation.Status(); ok {
		_spec.SetField(channelcost.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := ccc.mutation.AverageDays(); ok {
		_spec.SetField(channelcost.FieldAverageDays, field.TypeInt, value)
		_node.AverageDays = value
	}
	if nodes := ccc.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ccc.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChannelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelCost.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelCostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccc *ChannelCostCreate) OnConflict(opts ...sql.ConflictOption) *ChannelCostUpsertOne {
	ccc.conflict = opts
	return &ChannelCostUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *ChannelCostCreate) OnConflictColumns(columns ...string) *ChannelCostUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &ChannelCostUpsertOne{
		create: ccc,
	}
}

type (
	// ChannelCostUpsertOne is the builder for "upsert"-ing
	//  one ChannelCost node.
	ChannelCostUpsertOne struct {
		create *ChannelCostCreate
	}

	// ChannelCostUpsert is the "OnConflict" setter.
	ChannelCostUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostUpsert) SetUpdatedAt(v time.Time) *ChannelCostUpsert {
	u.Set(channelcost.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateUpdatedAt() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelCostUpsert) SetDeletedAt(v time.Time) *ChannelCostUpsert {
	u.Set(channelcost.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateDeletedAt() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelCostUpsert) ClearDeletedAt() *ChannelCostUpsert {
	u.SetNull(channelcost.FieldDeletedAt)
	return u
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (u *ChannelCostUpsert) SetChannelCostBatchID(v int64) *ChannelCostUpsert {
	u.Set(channelcost.FieldChannelCostBatchID, v)
	return u
}

// UpdateChannelCostBatchID sets the "channel_cost_batch_id" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateChannelCostBatchID() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldChannelCostBatchID)
	return u
}

// AddChannelCostBatchID adds v to the "channel_cost_batch_id" field.
func (u *ChannelCostUpsert) AddChannelCostBatchID(v int64) *ChannelCostUpsert {
	u.Add(channelcost.FieldChannelCostBatchID, v)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostUpsert) SetChannelID(v int64) *ChannelCostUpsert {
	u.Set(channelcost.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateChannelID() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldChannelID)
	return u
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *ChannelCostUpsert) ClearChannelID() *ChannelCostUpsert {
	u.SetNull(channelcost.FieldChannelID)
	return u
}

// SetMode sets the "mode" field.
func (u *ChannelCostUpsert) SetMode(v int8) *ChannelCostUpsert {
	u.Set(channelcost.FieldMode, v)
	return u
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateMode() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldMode)
	return u
}

// AddMode adds v to the "mode" field.
func (u *ChannelCostUpsert) AddMode(v int8) *ChannelCostUpsert {
	u.Add(channelcost.FieldMode, v)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelCostUpsert) SetCountryCode(v string) *ChannelCostUpsert {
	u.Set(channelcost.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateCountryCode() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldCountryCode)
	return u
}

// SetZone sets the "zone" field.
func (u *ChannelCostUpsert) SetZone(v string) *ChannelCostUpsert {
	u.Set(channelcost.FieldZone, v)
	return u
}

// UpdateZone sets the "zone" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateZone() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldZone)
	return u
}

// SetStartWeight sets the "start_weight" field.
func (u *ChannelCostUpsert) SetStartWeight(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldStartWeight, v)
	return u
}

// UpdateStartWeight sets the "start_weight" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateStartWeight() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldStartWeight)
	return u
}

// AddStartWeight adds v to the "start_weight" field.
func (u *ChannelCostUpsert) AddStartWeight(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldStartWeight, v)
	return u
}

// SetEndWeight sets the "end_weight" field.
func (u *ChannelCostUpsert) SetEndWeight(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldEndWeight, v)
	return u
}

// UpdateEndWeight sets the "end_weight" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateEndWeight() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldEndWeight)
	return u
}

// AddEndWeight adds v to the "end_weight" field.
func (u *ChannelCostUpsert) AddEndWeight(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldEndWeight, v)
	return u
}

// SetFirstWeight sets the "first_weight" field.
func (u *ChannelCostUpsert) SetFirstWeight(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldFirstWeight, v)
	return u
}

// UpdateFirstWeight sets the "first_weight" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateFirstWeight() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldFirstWeight)
	return u
}

// AddFirstWeight adds v to the "first_weight" field.
func (u *ChannelCostUpsert) AddFirstWeight(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldFirstWeight, v)
	return u
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (u *ChannelCostUpsert) SetFirstWeightFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldFirstWeightFee, v)
	return u
}

// UpdateFirstWeightFee sets the "first_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateFirstWeightFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldFirstWeightFee)
	return u
}

// AddFirstWeightFee adds v to the "first_weight_fee" field.
func (u *ChannelCostUpsert) AddFirstWeightFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldFirstWeightFee, v)
	return u
}

// SetUnitWeight sets the "unit_weight" field.
func (u *ChannelCostUpsert) SetUnitWeight(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldUnitWeight, v)
	return u
}

// UpdateUnitWeight sets the "unit_weight" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateUnitWeight() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldUnitWeight)
	return u
}

// AddUnitWeight adds v to the "unit_weight" field.
func (u *ChannelCostUpsert) AddUnitWeight(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldUnitWeight, v)
	return u
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (u *ChannelCostUpsert) SetUnitWeightFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldUnitWeightFee, v)
	return u
}

// UpdateUnitWeightFee sets the "unit_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateUnitWeightFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldUnitWeightFee)
	return u
}

// AddUnitWeightFee adds v to the "unit_weight_fee" field.
func (u *ChannelCostUpsert) AddUnitWeightFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldUnitWeightFee, v)
	return u
}

// ClearUnitWeightFee clears the value of the "unit_weight_fee" field.
func (u *ChannelCostUpsert) ClearUnitWeightFee() *ChannelCostUpsert {
	u.SetNull(channelcost.FieldUnitWeightFee)
	return u
}

// SetFuelFee sets the "fuel_fee" field.
func (u *ChannelCostUpsert) SetFuelFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldFuelFee, v)
	return u
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateFuelFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldFuelFee)
	return u
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *ChannelCostUpsert) AddFuelFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldFuelFee, v)
	return u
}

// SetProcessingFee sets the "processing_fee" field.
func (u *ChannelCostUpsert) SetProcessingFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldProcessingFee, v)
	return u
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateProcessingFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldProcessingFee)
	return u
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *ChannelCostUpsert) AddProcessingFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldProcessingFee, v)
	return u
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *ChannelCostUpsert) SetRegistrationFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldRegistrationFee, v)
	return u
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateRegistrationFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldRegistrationFee)
	return u
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *ChannelCostUpsert) AddRegistrationFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldRegistrationFee, v)
	return u
}

// SetMiscFee sets the "misc_fee" field.
func (u *ChannelCostUpsert) SetMiscFee(v float64) *ChannelCostUpsert {
	u.Set(channelcost.FieldMiscFee, v)
	return u
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateMiscFee() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldMiscFee)
	return u
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *ChannelCostUpsert) AddMiscFee(v float64) *ChannelCostUpsert {
	u.Add(channelcost.FieldMiscFee, v)
	return u
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelCostUpsert) SetMinNormalDays(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldMinNormalDays, v)
	return u
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateMinNormalDays() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldMinNormalDays)
	return u
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelCostUpsert) AddMinNormalDays(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldMinNormalDays, v)
	return u
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelCostUpsert) SetMaxNormalDays(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldMaxNormalDays, v)
	return u
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateMaxNormalDays() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldMaxNormalDays)
	return u
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelCostUpsert) AddMaxNormalDays(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldMaxNormalDays, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ChannelCostUpsert) SetStatus(v int8) *ChannelCostUpsert {
	u.Set(channelcost.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateStatus() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ChannelCostUpsert) AddStatus(v int8) *ChannelCostUpsert {
	u.Add(channelcost.FieldStatus, v)
	return u
}

// SetAverageDays sets the "average_days" field.
func (u *ChannelCostUpsert) SetAverageDays(v int) *ChannelCostUpsert {
	u.Set(channelcost.FieldAverageDays, v)
	return u
}

// UpdateAverageDays sets the "average_days" field to the value that was provided on create.
func (u *ChannelCostUpsert) UpdateAverageDays() *ChannelCostUpsert {
	u.SetExcluded(channelcost.FieldAverageDays)
	return u
}

// AddAverageDays adds v to the "average_days" field.
func (u *ChannelCostUpsert) AddAverageDays(v int) *ChannelCostUpsert {
	u.Add(channelcost.FieldAverageDays, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelcost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelCostUpsertOne) UpdateNewValues() *ChannelCostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channelcost.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channelcost.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelCostUpsertOne) Ignore() *ChannelCostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelCostUpsertOne) DoNothing() *ChannelCostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCostCreate.OnConflict
// documentation for more info.
func (u *ChannelCostUpsertOne) Update(set func(*ChannelCostUpsert)) *ChannelCostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelCostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostUpsertOne) SetUpdatedAt(v time.Time) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateUpdatedAt() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelCostUpsertOne) SetDeletedAt(v time.Time) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateDeletedAt() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelCostUpsertOne) ClearDeletedAt() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (u *ChannelCostUpsertOne) SetChannelCostBatchID(v int64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetChannelCostBatchID(v)
	})
}

// AddChannelCostBatchID adds v to the "channel_cost_batch_id" field.
func (u *ChannelCostUpsertOne) AddChannelCostBatchID(v int64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddChannelCostBatchID(v)
	})
}

// UpdateChannelCostBatchID sets the "channel_cost_batch_id" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateChannelCostBatchID() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateChannelCostBatchID()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostUpsertOne) SetChannelID(v int64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateChannelID() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *ChannelCostUpsertOne) ClearChannelID() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearChannelID()
	})
}

// SetMode sets the "mode" field.
func (u *ChannelCostUpsertOne) SetMode(v int8) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMode(v)
	})
}

// AddMode adds v to the "mode" field.
func (u *ChannelCostUpsertOne) AddMode(v int8) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateMode() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMode()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelCostUpsertOne) SetCountryCode(v string) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateCountryCode() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateCountryCode()
	})
}

// SetZone sets the "zone" field.
func (u *ChannelCostUpsertOne) SetZone(v string) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetZone(v)
	})
}

// UpdateZone sets the "zone" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateZone() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateZone()
	})
}

// SetStartWeight sets the "start_weight" field.
func (u *ChannelCostUpsertOne) SetStartWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetStartWeight(v)
	})
}

// AddStartWeight adds v to the "start_weight" field.
func (u *ChannelCostUpsertOne) AddStartWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddStartWeight(v)
	})
}

// UpdateStartWeight sets the "start_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateStartWeight() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateStartWeight()
	})
}

// SetEndWeight sets the "end_weight" field.
func (u *ChannelCostUpsertOne) SetEndWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetEndWeight(v)
	})
}

// AddEndWeight adds v to the "end_weight" field.
func (u *ChannelCostUpsertOne) AddEndWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddEndWeight(v)
	})
}

// UpdateEndWeight sets the "end_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateEndWeight() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateEndWeight()
	})
}

// SetFirstWeight sets the "first_weight" field.
func (u *ChannelCostUpsertOne) SetFirstWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFirstWeight(v)
	})
}

// AddFirstWeight adds v to the "first_weight" field.
func (u *ChannelCostUpsertOne) AddFirstWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFirstWeight(v)
	})
}

// UpdateFirstWeight sets the "first_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateFirstWeight() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFirstWeight()
	})
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (u *ChannelCostUpsertOne) SetFirstWeightFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFirstWeightFee(v)
	})
}

// AddFirstWeightFee adds v to the "first_weight_fee" field.
func (u *ChannelCostUpsertOne) AddFirstWeightFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFirstWeightFee(v)
	})
}

// UpdateFirstWeightFee sets the "first_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateFirstWeightFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFirstWeightFee()
	})
}

// SetUnitWeight sets the "unit_weight" field.
func (u *ChannelCostUpsertOne) SetUnitWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUnitWeight(v)
	})
}

// AddUnitWeight adds v to the "unit_weight" field.
func (u *ChannelCostUpsertOne) AddUnitWeight(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddUnitWeight(v)
	})
}

// UpdateUnitWeight sets the "unit_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateUnitWeight() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUnitWeight()
	})
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (u *ChannelCostUpsertOne) SetUnitWeightFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUnitWeightFee(v)
	})
}

// AddUnitWeightFee adds v to the "unit_weight_fee" field.
func (u *ChannelCostUpsertOne) AddUnitWeightFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddUnitWeightFee(v)
	})
}

// UpdateUnitWeightFee sets the "unit_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateUnitWeightFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUnitWeightFee()
	})
}

// ClearUnitWeightFee clears the value of the "unit_weight_fee" field.
func (u *ChannelCostUpsertOne) ClearUnitWeightFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearUnitWeightFee()
	})
}

// SetFuelFee sets the "fuel_fee" field.
func (u *ChannelCostUpsertOne) SetFuelFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFuelFee(v)
	})
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *ChannelCostUpsertOne) AddFuelFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFuelFee(v)
	})
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateFuelFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFuelFee()
	})
}

// SetProcessingFee sets the "processing_fee" field.
func (u *ChannelCostUpsertOne) SetProcessingFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetProcessingFee(v)
	})
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *ChannelCostUpsertOne) AddProcessingFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddProcessingFee(v)
	})
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateProcessingFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateProcessingFee()
	})
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *ChannelCostUpsertOne) SetRegistrationFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetRegistrationFee(v)
	})
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *ChannelCostUpsertOne) AddRegistrationFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddRegistrationFee(v)
	})
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateRegistrationFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateRegistrationFee()
	})
}

// SetMiscFee sets the "misc_fee" field.
func (u *ChannelCostUpsertOne) SetMiscFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMiscFee(v)
	})
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *ChannelCostUpsertOne) AddMiscFee(v float64) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMiscFee(v)
	})
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateMiscFee() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMiscFee()
	})
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelCostUpsertOne) SetMinNormalDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMinNormalDays(v)
	})
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelCostUpsertOne) AddMinNormalDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMinNormalDays(v)
	})
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateMinNormalDays() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMinNormalDays()
	})
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelCostUpsertOne) SetMaxNormalDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMaxNormalDays(v)
	})
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelCostUpsertOne) AddMaxNormalDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMaxNormalDays(v)
	})
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateMaxNormalDays() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMaxNormalDays()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelCostUpsertOne) SetStatus(v int8) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelCostUpsertOne) AddStatus(v int8) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateStatus() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateStatus()
	})
}

// SetAverageDays sets the "average_days" field.
func (u *ChannelCostUpsertOne) SetAverageDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetAverageDays(v)
	})
}

// AddAverageDays adds v to the "average_days" field.
func (u *ChannelCostUpsertOne) AddAverageDays(v int) *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddAverageDays(v)
	})
}

// UpdateAverageDays sets the "average_days" field to the value that was provided on create.
func (u *ChannelCostUpsertOne) UpdateAverageDays() *ChannelCostUpsertOne {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateAverageDays()
	})
}

// Exec executes the query.
func (u *ChannelCostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelCostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelCostUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelCostUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelCostCreateBulk is the builder for creating many ChannelCost entities in bulk.
type ChannelCostCreateBulk struct {
	config
	builders []*ChannelCostCreate
	conflict []sql.ConflictOption
}

// Save creates the ChannelCost entities in the database.
func (cccb *ChannelCostCreateBulk) Save(ctx context.Context) ([]*ChannelCost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*ChannelCost, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelCostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *ChannelCostCreateBulk) SaveX(ctx context.Context) []*ChannelCost {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *ChannelCostCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *ChannelCostCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelCost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelCostUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cccb *ChannelCostCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelCostUpsertBulk {
	cccb.conflict = opts
	return &ChannelCostUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *ChannelCostCreateBulk) OnConflictColumns(columns ...string) *ChannelCostUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &ChannelCostUpsertBulk{
		create: cccb,
	}
}

// ChannelCostUpsertBulk is the builder for "upsert"-ing
// a bulk of ChannelCost nodes.
type ChannelCostUpsertBulk struct {
	create *ChannelCostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelcost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelCostUpsertBulk) UpdateNewValues() *ChannelCostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channelcost.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channelcost.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelCost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelCostUpsertBulk) Ignore() *ChannelCostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelCostUpsertBulk) DoNothing() *ChannelCostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCostCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelCostUpsertBulk) Update(set func(*ChannelCostUpsert)) *ChannelCostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelCostUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostUpsertBulk) SetUpdatedAt(v time.Time) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateUpdatedAt() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelCostUpsertBulk) SetDeletedAt(v time.Time) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateDeletedAt() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelCostUpsertBulk) ClearDeletedAt() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (u *ChannelCostUpsertBulk) SetChannelCostBatchID(v int64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetChannelCostBatchID(v)
	})
}

// AddChannelCostBatchID adds v to the "channel_cost_batch_id" field.
func (u *ChannelCostUpsertBulk) AddChannelCostBatchID(v int64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddChannelCostBatchID(v)
	})
}

// UpdateChannelCostBatchID sets the "channel_cost_batch_id" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateChannelCostBatchID() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateChannelCostBatchID()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostUpsertBulk) SetChannelID(v int64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateChannelID() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *ChannelCostUpsertBulk) ClearChannelID() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearChannelID()
	})
}

// SetMode sets the "mode" field.
func (u *ChannelCostUpsertBulk) SetMode(v int8) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMode(v)
	})
}

// AddMode adds v to the "mode" field.
func (u *ChannelCostUpsertBulk) AddMode(v int8) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMode(v)
	})
}

// UpdateMode sets the "mode" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateMode() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMode()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelCostUpsertBulk) SetCountryCode(v string) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateCountryCode() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateCountryCode()
	})
}

// SetZone sets the "zone" field.
func (u *ChannelCostUpsertBulk) SetZone(v string) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetZone(v)
	})
}

// UpdateZone sets the "zone" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateZone() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateZone()
	})
}

// SetStartWeight sets the "start_weight" field.
func (u *ChannelCostUpsertBulk) SetStartWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetStartWeight(v)
	})
}

// AddStartWeight adds v to the "start_weight" field.
func (u *ChannelCostUpsertBulk) AddStartWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddStartWeight(v)
	})
}

// UpdateStartWeight sets the "start_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateStartWeight() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateStartWeight()
	})
}

// SetEndWeight sets the "end_weight" field.
func (u *ChannelCostUpsertBulk) SetEndWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetEndWeight(v)
	})
}

// AddEndWeight adds v to the "end_weight" field.
func (u *ChannelCostUpsertBulk) AddEndWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddEndWeight(v)
	})
}

// UpdateEndWeight sets the "end_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateEndWeight() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateEndWeight()
	})
}

// SetFirstWeight sets the "first_weight" field.
func (u *ChannelCostUpsertBulk) SetFirstWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFirstWeight(v)
	})
}

// AddFirstWeight adds v to the "first_weight" field.
func (u *ChannelCostUpsertBulk) AddFirstWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFirstWeight(v)
	})
}

// UpdateFirstWeight sets the "first_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateFirstWeight() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFirstWeight()
	})
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (u *ChannelCostUpsertBulk) SetFirstWeightFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFirstWeightFee(v)
	})
}

// AddFirstWeightFee adds v to the "first_weight_fee" field.
func (u *ChannelCostUpsertBulk) AddFirstWeightFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFirstWeightFee(v)
	})
}

// UpdateFirstWeightFee sets the "first_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateFirstWeightFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFirstWeightFee()
	})
}

// SetUnitWeight sets the "unit_weight" field.
func (u *ChannelCostUpsertBulk) SetUnitWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUnitWeight(v)
	})
}

// AddUnitWeight adds v to the "unit_weight" field.
func (u *ChannelCostUpsertBulk) AddUnitWeight(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddUnitWeight(v)
	})
}

// UpdateUnitWeight sets the "unit_weight" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateUnitWeight() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUnitWeight()
	})
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (u *ChannelCostUpsertBulk) SetUnitWeightFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetUnitWeightFee(v)
	})
}

// AddUnitWeightFee adds v to the "unit_weight_fee" field.
func (u *ChannelCostUpsertBulk) AddUnitWeightFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddUnitWeightFee(v)
	})
}

// UpdateUnitWeightFee sets the "unit_weight_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateUnitWeightFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateUnitWeightFee()
	})
}

// ClearUnitWeightFee clears the value of the "unit_weight_fee" field.
func (u *ChannelCostUpsertBulk) ClearUnitWeightFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.ClearUnitWeightFee()
	})
}

// SetFuelFee sets the "fuel_fee" field.
func (u *ChannelCostUpsertBulk) SetFuelFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetFuelFee(v)
	})
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *ChannelCostUpsertBulk) AddFuelFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddFuelFee(v)
	})
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateFuelFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateFuelFee()
	})
}

// SetProcessingFee sets the "processing_fee" field.
func (u *ChannelCostUpsertBulk) SetProcessingFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetProcessingFee(v)
	})
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *ChannelCostUpsertBulk) AddProcessingFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddProcessingFee(v)
	})
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateProcessingFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateProcessingFee()
	})
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *ChannelCostUpsertBulk) SetRegistrationFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetRegistrationFee(v)
	})
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *ChannelCostUpsertBulk) AddRegistrationFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddRegistrationFee(v)
	})
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateRegistrationFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateRegistrationFee()
	})
}

// SetMiscFee sets the "misc_fee" field.
func (u *ChannelCostUpsertBulk) SetMiscFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMiscFee(v)
	})
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *ChannelCostUpsertBulk) AddMiscFee(v float64) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMiscFee(v)
	})
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateMiscFee() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMiscFee()
	})
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelCostUpsertBulk) SetMinNormalDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMinNormalDays(v)
	})
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelCostUpsertBulk) AddMinNormalDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMinNormalDays(v)
	})
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateMinNormalDays() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMinNormalDays()
	})
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelCostUpsertBulk) SetMaxNormalDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetMaxNormalDays(v)
	})
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelCostUpsertBulk) AddMaxNormalDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddMaxNormalDays(v)
	})
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateMaxNormalDays() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateMaxNormalDays()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelCostUpsertBulk) SetStatus(v int8) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelCostUpsertBulk) AddStatus(v int8) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateStatus() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateStatus()
	})
}

// SetAverageDays sets the "average_days" field.
func (u *ChannelCostUpsertBulk) SetAverageDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.SetAverageDays(v)
	})
}

// AddAverageDays adds v to the "average_days" field.
func (u *ChannelCostUpsertBulk) AddAverageDays(v int) *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.AddAverageDays(v)
	})
}

// UpdateAverageDays sets the "average_days" field to the value that was provided on create.
func (u *ChannelCostUpsertBulk) UpdateAverageDays() *ChannelCostUpsertBulk {
	return u.Update(func(s *ChannelCostUpsert) {
		s.UpdateAverageDays()
	})
}

// Exec executes the query.
func (u *ChannelCostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ChannelCostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelCostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
