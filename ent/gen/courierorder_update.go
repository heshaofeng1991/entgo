// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/courierorder"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// CourierOrderUpdate is the builder for updating CourierOrder entities.
type CourierOrderUpdate struct {
	config
	hooks     []Hook
	mutation  *CourierOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CourierOrderUpdate builder.
func (cou *CourierOrderUpdate) Where(ps ...predicate.CourierOrder) *CourierOrderUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetUpdatedAt sets the "updated_at" field.
func (cou *CourierOrderUpdate) SetUpdatedAt(t time.Time) *CourierOrderUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// SetDeletedAt sets the "deleted_at" field.
func (cou *CourierOrderUpdate) SetDeletedAt(t time.Time) *CourierOrderUpdate {
	cou.mutation.SetDeletedAt(t)
	return cou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableDeletedAt(t *time.Time) *CourierOrderUpdate {
	if t != nil {
		cou.SetDeletedAt(*t)
	}
	return cou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cou *CourierOrderUpdate) ClearDeletedAt() *CourierOrderUpdate {
	cou.mutation.ClearDeletedAt()
	return cou
}

// SetOrderID sets the "order_id" field.
func (cou *CourierOrderUpdate) SetOrderID(i int64) *CourierOrderUpdate {
	cou.mutation.ResetOrderID()
	cou.mutation.SetOrderID(i)
	return cou
}

// AddOrderID adds i to the "order_id" field.
func (cou *CourierOrderUpdate) AddOrderID(i int64) *CourierOrderUpdate {
	cou.mutation.AddOrderID(i)
	return cou
}

// SetOrderNumber sets the "order_number" field.
func (cou *CourierOrderUpdate) SetOrderNumber(s string) *CourierOrderUpdate {
	cou.mutation.SetOrderNumber(s)
	return cou
}

// SetCourierPlatform sets the "courier_platform" field.
func (cou *CourierOrderUpdate) SetCourierPlatform(s string) *CourierOrderUpdate {
	cou.mutation.SetCourierPlatform(s)
	return cou
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableCourierPlatform(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetCourierPlatform(*s)
	}
	return cou
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (cou *CourierOrderUpdate) SetShippingMethodCode(s string) *CourierOrderUpdate {
	cou.mutation.SetShippingMethodCode(s)
	return cou
}

// SetNillableShippingMethodCode sets the "shipping_method_code" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableShippingMethodCode(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetShippingMethodCode(*s)
	}
	return cou
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (cou *CourierOrderUpdate) SetShippingMethodName(s string) *CourierOrderUpdate {
	cou.mutation.SetShippingMethodName(s)
	return cou
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableShippingMethodName(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetShippingMethodName(*s)
	}
	return cou
}

// SetTrackingURL sets the "tracking_url" field.
func (cou *CourierOrderUpdate) SetTrackingURL(s string) *CourierOrderUpdate {
	cou.mutation.SetTrackingURL(s)
	return cou
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableTrackingURL(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetTrackingURL(*s)
	}
	return cou
}

// SetTrackingNumber sets the "tracking_number" field.
func (cou *CourierOrderUpdate) SetTrackingNumber(s string) *CourierOrderUpdate {
	cou.mutation.SetTrackingNumber(s)
	return cou
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableTrackingNumber(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetTrackingNumber(*s)
	}
	return cou
}

// SetWaybillNumber sets the "waybill_number" field.
func (cou *CourierOrderUpdate) SetWaybillNumber(s string) *CourierOrderUpdate {
	cou.mutation.SetWaybillNumber(s)
	return cou
}

// SetNillableWaybillNumber sets the "waybill_number" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableWaybillNumber(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetWaybillNumber(*s)
	}
	return cou
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (cou *CourierOrderUpdate) SetCourierOrderNumber(s string) *CourierOrderUpdate {
	cou.mutation.SetCourierOrderNumber(s)
	return cou
}

// SetNillableCourierOrderNumber sets the "courier_order_number" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableCourierOrderNumber(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetCourierOrderNumber(*s)
	}
	return cou
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (cou *CourierOrderUpdate) SetShippingLabelURL(s string) *CourierOrderUpdate {
	cou.mutation.SetShippingLabelURL(s)
	return cou
}

// SetNillableShippingLabelURL sets the "shipping_label_url" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableShippingLabelURL(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetShippingLabelURL(*s)
	}
	return cou
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (cou *CourierOrderUpdate) SetTotalItemsPrice(f float64) *CourierOrderUpdate {
	cou.mutation.ResetTotalItemsPrice()
	cou.mutation.SetTotalItemsPrice(f)
	return cou
}

// SetNillableTotalItemsPrice sets the "total_items_price" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableTotalItemsPrice(f *float64) *CourierOrderUpdate {
	if f != nil {
		cou.SetTotalItemsPrice(*f)
	}
	return cou
}

// AddTotalItemsPrice adds f to the "total_items_price" field.
func (cou *CourierOrderUpdate) AddTotalItemsPrice(f float64) *CourierOrderUpdate {
	cou.mutation.AddTotalItemsPrice(f)
	return cou
}

// SetCurrency sets the "currency" field.
func (cou *CourierOrderUpdate) SetCurrency(s string) *CourierOrderUpdate {
	cou.mutation.SetCurrency(s)
	return cou
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableCurrency(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetCurrency(*s)
	}
	return cou
}

// ClearCurrency clears the value of the "currency" field.
func (cou *CourierOrderUpdate) ClearCurrency() *CourierOrderUpdate {
	cou.mutation.ClearCurrency()
	return cou
}

// SetPackageCount sets the "package_count" field.
func (cou *CourierOrderUpdate) SetPackageCount(i int) *CourierOrderUpdate {
	cou.mutation.ResetPackageCount()
	cou.mutation.SetPackageCount(i)
	return cou
}

// SetNillablePackageCount sets the "package_count" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillablePackageCount(i *int) *CourierOrderUpdate {
	if i != nil {
		cou.SetPackageCount(*i)
	}
	return cou
}

// AddPackageCount adds i to the "package_count" field.
func (cou *CourierOrderUpdate) AddPackageCount(i int) *CourierOrderUpdate {
	cou.mutation.AddPackageCount(i)
	return cou
}

// SetWeight sets the "weight" field.
func (cou *CourierOrderUpdate) SetWeight(i int) *CourierOrderUpdate {
	cou.mutation.ResetWeight()
	cou.mutation.SetWeight(i)
	return cou
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableWeight(i *int) *CourierOrderUpdate {
	if i != nil {
		cou.SetWeight(*i)
	}
	return cou
}

// AddWeight adds i to the "weight" field.
func (cou *CourierOrderUpdate) AddWeight(i int) *CourierOrderUpdate {
	cou.mutation.AddWeight(i)
	return cou
}

// SetReceiverAddress sets the "receiver_address" field.
func (cou *CourierOrderUpdate) SetReceiverAddress(s string) *CourierOrderUpdate {
	cou.mutation.SetReceiverAddress(s)
	return cou
}

// SetNillableReceiverAddress sets the "receiver_address" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableReceiverAddress(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetReceiverAddress(*s)
	}
	return cou
}

// ClearReceiverAddress clears the value of the "receiver_address" field.
func (cou *CourierOrderUpdate) ClearReceiverAddress() *CourierOrderUpdate {
	cou.mutation.ClearReceiverAddress()
	return cou
}

// SetSenderAddress sets the "sender_address" field.
func (cou *CourierOrderUpdate) SetSenderAddress(s string) *CourierOrderUpdate {
	cou.mutation.SetSenderAddress(s)
	return cou
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableSenderAddress(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetSenderAddress(*s)
	}
	return cou
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (cou *CourierOrderUpdate) ClearSenderAddress() *CourierOrderUpdate {
	cou.mutation.ClearSenderAddress()
	return cou
}

// SetItems sets the "items" field.
func (cou *CourierOrderUpdate) SetItems(s string) *CourierOrderUpdate {
	cou.mutation.SetItems(s)
	return cou
}

// SetNillableItems sets the "items" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableItems(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetItems(*s)
	}
	return cou
}

// ClearItems clears the value of the "items" field.
func (cou *CourierOrderUpdate) ClearItems() *CourierOrderUpdate {
	cou.mutation.ClearItems()
	return cou
}

// SetRequestData sets the "request_data" field.
func (cou *CourierOrderUpdate) SetRequestData(s string) *CourierOrderUpdate {
	cou.mutation.SetRequestData(s)
	return cou
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableRequestData(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetRequestData(*s)
	}
	return cou
}

// ClearRequestData clears the value of the "request_data" field.
func (cou *CourierOrderUpdate) ClearRequestData() *CourierOrderUpdate {
	cou.mutation.ClearRequestData()
	return cou
}

// SetResponseData sets the "response_data" field.
func (cou *CourierOrderUpdate) SetResponseData(s string) *CourierOrderUpdate {
	cou.mutation.SetResponseData(s)
	return cou
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableResponseData(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetResponseData(*s)
	}
	return cou
}

// ClearResponseData clears the value of the "response_data" field.
func (cou *CourierOrderUpdate) ClearResponseData() *CourierOrderUpdate {
	cou.mutation.ClearResponseData()
	return cou
}

// SetResultCode sets the "result_code" field.
func (cou *CourierOrderUpdate) SetResultCode(s string) *CourierOrderUpdate {
	cou.mutation.SetResultCode(s)
	return cou
}

// SetNillableResultCode sets the "result_code" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableResultCode(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetResultCode(*s)
	}
	return cou
}

// ClearResultCode clears the value of the "result_code" field.
func (cou *CourierOrderUpdate) ClearResultCode() *CourierOrderUpdate {
	cou.mutation.ClearResultCode()
	return cou
}

// SetMessage sets the "message" field.
func (cou *CourierOrderUpdate) SetMessage(s string) *CourierOrderUpdate {
	cou.mutation.SetMessage(s)
	return cou
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableMessage(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetMessage(*s)
	}
	return cou
}

// ClearMessage clears the value of the "message" field.
func (cou *CourierOrderUpdate) ClearMessage() *CourierOrderUpdate {
	cou.mutation.ClearMessage()
	return cou
}

// SetEnMessage sets the "en_message" field.
func (cou *CourierOrderUpdate) SetEnMessage(s string) *CourierOrderUpdate {
	cou.mutation.SetEnMessage(s)
	return cou
}

// SetNillableEnMessage sets the "en_message" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableEnMessage(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetEnMessage(*s)
	}
	return cou
}

// ClearEnMessage clears the value of the "en_message" field.
func (cou *CourierOrderUpdate) ClearEnMessage() *CourierOrderUpdate {
	cou.mutation.ClearEnMessage()
	return cou
}

// SetStatus sets the "status" field.
func (cou *CourierOrderUpdate) SetStatus(s string) *CourierOrderUpdate {
	cou.mutation.SetStatus(s)
	return cou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cou *CourierOrderUpdate) SetNillableStatus(s *string) *CourierOrderUpdate {
	if s != nil {
		cou.SetStatus(*s)
	}
	return cou
}

// Mutation returns the CourierOrderMutation object of the builder.
func (cou *CourierOrderUpdate) Mutation() *CourierOrderMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CourierOrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cou.defaults()
	if len(cou.hooks) == 0 {
		affected, err = cou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourierOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cou.mutation = mutation
			affected, err = cou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cou.hooks) - 1; i >= 0; i-- {
			if cou.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CourierOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CourierOrderUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CourierOrderUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *CourierOrderUpdate) defaults() {
	if _, ok := cou.mutation.UpdatedAt(); !ok {
		v := courierorder.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cou *CourierOrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CourierOrderUpdate {
	cou.modifiers = append(cou.modifiers, modifiers...)
	return cou
}

func (cou *CourierOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   courierorder.Table,
			Columns: courierorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: courierorder.FieldID,
			},
		},
	}
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(courierorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.DeletedAt(); ok {
		_spec.SetField(courierorder.FieldDeletedAt, field.TypeTime, value)
	}
	if cou.mutation.DeletedAtCleared() {
		_spec.ClearField(courierorder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cou.mutation.OrderID(); ok {
		_spec.SetField(courierorder.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedOrderID(); ok {
		_spec.AddField(courierorder.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.OrderNumber(); ok {
		_spec.SetField(courierorder.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := cou.mutation.CourierPlatform(); ok {
		_spec.SetField(courierorder.FieldCourierPlatform, field.TypeString, value)
	}
	if value, ok := cou.mutation.ShippingMethodCode(); ok {
		_spec.SetField(courierorder.FieldShippingMethodCode, field.TypeString, value)
	}
	if value, ok := cou.mutation.ShippingMethodName(); ok {
		_spec.SetField(courierorder.FieldShippingMethodName, field.TypeString, value)
	}
	if value, ok := cou.mutation.TrackingURL(); ok {
		_spec.SetField(courierorder.FieldTrackingURL, field.TypeString, value)
	}
	if value, ok := cou.mutation.TrackingNumber(); ok {
		_spec.SetField(courierorder.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := cou.mutation.WaybillNumber(); ok {
		_spec.SetField(courierorder.FieldWaybillNumber, field.TypeString, value)
	}
	if value, ok := cou.mutation.CourierOrderNumber(); ok {
		_spec.SetField(courierorder.FieldCourierOrderNumber, field.TypeString, value)
	}
	if value, ok := cou.mutation.ShippingLabelURL(); ok {
		_spec.SetField(courierorder.FieldShippingLabelURL, field.TypeString, value)
	}
	if value, ok := cou.mutation.TotalItemsPrice(); ok {
		_spec.SetField(courierorder.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := cou.mutation.AddedTotalItemsPrice(); ok {
		_spec.AddField(courierorder.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := cou.mutation.Currency(); ok {
		_spec.SetField(courierorder.FieldCurrency, field.TypeString, value)
	}
	if cou.mutation.CurrencyCleared() {
		_spec.ClearField(courierorder.FieldCurrency, field.TypeString)
	}
	if value, ok := cou.mutation.PackageCount(); ok {
		_spec.SetField(courierorder.FieldPackageCount, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedPackageCount(); ok {
		_spec.AddField(courierorder.FieldPackageCount, field.TypeInt, value)
	}
	if value, ok := cou.mutation.Weight(); ok {
		_spec.SetField(courierorder.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedWeight(); ok {
		_spec.AddField(courierorder.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cou.mutation.ReceiverAddress(); ok {
		_spec.SetField(courierorder.FieldReceiverAddress, field.TypeString, value)
	}
	if cou.mutation.ReceiverAddressCleared() {
		_spec.ClearField(courierorder.FieldReceiverAddress, field.TypeString)
	}
	if value, ok := cou.mutation.SenderAddress(); ok {
		_spec.SetField(courierorder.FieldSenderAddress, field.TypeString, value)
	}
	if cou.mutation.SenderAddressCleared() {
		_spec.ClearField(courierorder.FieldSenderAddress, field.TypeString)
	}
	if value, ok := cou.mutation.Items(); ok {
		_spec.SetField(courierorder.FieldItems, field.TypeString, value)
	}
	if cou.mutation.ItemsCleared() {
		_spec.ClearField(courierorder.FieldItems, field.TypeString)
	}
	if value, ok := cou.mutation.RequestData(); ok {
		_spec.SetField(courierorder.FieldRequestData, field.TypeString, value)
	}
	if cou.mutation.RequestDataCleared() {
		_spec.ClearField(courierorder.FieldRequestData, field.TypeString)
	}
	if value, ok := cou.mutation.ResponseData(); ok {
		_spec.SetField(courierorder.FieldResponseData, field.TypeString, value)
	}
	if cou.mutation.ResponseDataCleared() {
		_spec.ClearField(courierorder.FieldResponseData, field.TypeString)
	}
	if value, ok := cou.mutation.ResultCode(); ok {
		_spec.SetField(courierorder.FieldResultCode, field.TypeString, value)
	}
	if cou.mutation.ResultCodeCleared() {
		_spec.ClearField(courierorder.FieldResultCode, field.TypeString)
	}
	if value, ok := cou.mutation.Message(); ok {
		_spec.SetField(courierorder.FieldMessage, field.TypeString, value)
	}
	if cou.mutation.MessageCleared() {
		_spec.ClearField(courierorder.FieldMessage, field.TypeString)
	}
	if value, ok := cou.mutation.EnMessage(); ok {
		_spec.SetField(courierorder.FieldEnMessage, field.TypeString, value)
	}
	if cou.mutation.EnMessageCleared() {
		_spec.ClearField(courierorder.FieldEnMessage, field.TypeString)
	}
	if value, ok := cou.mutation.Status(); ok {
		_spec.SetField(courierorder.FieldStatus, field.TypeString, value)
	}
	_spec.Node.Schema = cou.schemaConfig.CourierOrder
	ctx = internal.NewSchemaConfigContext(ctx, cou.schemaConfig)
	_spec.AddModifiers(cou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courierorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CourierOrderUpdateOne is the builder for updating a single CourierOrder entity.
type CourierOrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CourierOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (couo *CourierOrderUpdateOne) SetUpdatedAt(t time.Time) *CourierOrderUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// SetDeletedAt sets the "deleted_at" field.
func (couo *CourierOrderUpdateOne) SetDeletedAt(t time.Time) *CourierOrderUpdateOne {
	couo.mutation.SetDeletedAt(t)
	return couo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *CourierOrderUpdateOne {
	if t != nil {
		couo.SetDeletedAt(*t)
	}
	return couo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (couo *CourierOrderUpdateOne) ClearDeletedAt() *CourierOrderUpdateOne {
	couo.mutation.ClearDeletedAt()
	return couo
}

// SetOrderID sets the "order_id" field.
func (couo *CourierOrderUpdateOne) SetOrderID(i int64) *CourierOrderUpdateOne {
	couo.mutation.ResetOrderID()
	couo.mutation.SetOrderID(i)
	return couo
}

// AddOrderID adds i to the "order_id" field.
func (couo *CourierOrderUpdateOne) AddOrderID(i int64) *CourierOrderUpdateOne {
	couo.mutation.AddOrderID(i)
	return couo
}

// SetOrderNumber sets the "order_number" field.
func (couo *CourierOrderUpdateOne) SetOrderNumber(s string) *CourierOrderUpdateOne {
	couo.mutation.SetOrderNumber(s)
	return couo
}

// SetCourierPlatform sets the "courier_platform" field.
func (couo *CourierOrderUpdateOne) SetCourierPlatform(s string) *CourierOrderUpdateOne {
	couo.mutation.SetCourierPlatform(s)
	return couo
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableCourierPlatform(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetCourierPlatform(*s)
	}
	return couo
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (couo *CourierOrderUpdateOne) SetShippingMethodCode(s string) *CourierOrderUpdateOne {
	couo.mutation.SetShippingMethodCode(s)
	return couo
}

// SetNillableShippingMethodCode sets the "shipping_method_code" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableShippingMethodCode(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetShippingMethodCode(*s)
	}
	return couo
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (couo *CourierOrderUpdateOne) SetShippingMethodName(s string) *CourierOrderUpdateOne {
	couo.mutation.SetShippingMethodName(s)
	return couo
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableShippingMethodName(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetShippingMethodName(*s)
	}
	return couo
}

// SetTrackingURL sets the "tracking_url" field.
func (couo *CourierOrderUpdateOne) SetTrackingURL(s string) *CourierOrderUpdateOne {
	couo.mutation.SetTrackingURL(s)
	return couo
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableTrackingURL(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetTrackingURL(*s)
	}
	return couo
}

// SetTrackingNumber sets the "tracking_number" field.
func (couo *CourierOrderUpdateOne) SetTrackingNumber(s string) *CourierOrderUpdateOne {
	couo.mutation.SetTrackingNumber(s)
	return couo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableTrackingNumber(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetTrackingNumber(*s)
	}
	return couo
}

// SetWaybillNumber sets the "waybill_number" field.
func (couo *CourierOrderUpdateOne) SetWaybillNumber(s string) *CourierOrderUpdateOne {
	couo.mutation.SetWaybillNumber(s)
	return couo
}

// SetNillableWaybillNumber sets the "waybill_number" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableWaybillNumber(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetWaybillNumber(*s)
	}
	return couo
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (couo *CourierOrderUpdateOne) SetCourierOrderNumber(s string) *CourierOrderUpdateOne {
	couo.mutation.SetCourierOrderNumber(s)
	return couo
}

// SetNillableCourierOrderNumber sets the "courier_order_number" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableCourierOrderNumber(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetCourierOrderNumber(*s)
	}
	return couo
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (couo *CourierOrderUpdateOne) SetShippingLabelURL(s string) *CourierOrderUpdateOne {
	couo.mutation.SetShippingLabelURL(s)
	return couo
}

// SetNillableShippingLabelURL sets the "shipping_label_url" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableShippingLabelURL(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetShippingLabelURL(*s)
	}
	return couo
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (couo *CourierOrderUpdateOne) SetTotalItemsPrice(f float64) *CourierOrderUpdateOne {
	couo.mutation.ResetTotalItemsPrice()
	couo.mutation.SetTotalItemsPrice(f)
	return couo
}

// SetNillableTotalItemsPrice sets the "total_items_price" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableTotalItemsPrice(f *float64) *CourierOrderUpdateOne {
	if f != nil {
		couo.SetTotalItemsPrice(*f)
	}
	return couo
}

// AddTotalItemsPrice adds f to the "total_items_price" field.
func (couo *CourierOrderUpdateOne) AddTotalItemsPrice(f float64) *CourierOrderUpdateOne {
	couo.mutation.AddTotalItemsPrice(f)
	return couo
}

// SetCurrency sets the "currency" field.
func (couo *CourierOrderUpdateOne) SetCurrency(s string) *CourierOrderUpdateOne {
	couo.mutation.SetCurrency(s)
	return couo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableCurrency(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetCurrency(*s)
	}
	return couo
}

// ClearCurrency clears the value of the "currency" field.
func (couo *CourierOrderUpdateOne) ClearCurrency() *CourierOrderUpdateOne {
	couo.mutation.ClearCurrency()
	return couo
}

// SetPackageCount sets the "package_count" field.
func (couo *CourierOrderUpdateOne) SetPackageCount(i int) *CourierOrderUpdateOne {
	couo.mutation.ResetPackageCount()
	couo.mutation.SetPackageCount(i)
	return couo
}

// SetNillablePackageCount sets the "package_count" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillablePackageCount(i *int) *CourierOrderUpdateOne {
	if i != nil {
		couo.SetPackageCount(*i)
	}
	return couo
}

// AddPackageCount adds i to the "package_count" field.
func (couo *CourierOrderUpdateOne) AddPackageCount(i int) *CourierOrderUpdateOne {
	couo.mutation.AddPackageCount(i)
	return couo
}

// SetWeight sets the "weight" field.
func (couo *CourierOrderUpdateOne) SetWeight(i int) *CourierOrderUpdateOne {
	couo.mutation.ResetWeight()
	couo.mutation.SetWeight(i)
	return couo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableWeight(i *int) *CourierOrderUpdateOne {
	if i != nil {
		couo.SetWeight(*i)
	}
	return couo
}

// AddWeight adds i to the "weight" field.
func (couo *CourierOrderUpdateOne) AddWeight(i int) *CourierOrderUpdateOne {
	couo.mutation.AddWeight(i)
	return couo
}

// SetReceiverAddress sets the "receiver_address" field.
func (couo *CourierOrderUpdateOne) SetReceiverAddress(s string) *CourierOrderUpdateOne {
	couo.mutation.SetReceiverAddress(s)
	return couo
}

// SetNillableReceiverAddress sets the "receiver_address" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableReceiverAddress(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetReceiverAddress(*s)
	}
	return couo
}

// ClearReceiverAddress clears the value of the "receiver_address" field.
func (couo *CourierOrderUpdateOne) ClearReceiverAddress() *CourierOrderUpdateOne {
	couo.mutation.ClearReceiverAddress()
	return couo
}

// SetSenderAddress sets the "sender_address" field.
func (couo *CourierOrderUpdateOne) SetSenderAddress(s string) *CourierOrderUpdateOne {
	couo.mutation.SetSenderAddress(s)
	return couo
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableSenderAddress(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetSenderAddress(*s)
	}
	return couo
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (couo *CourierOrderUpdateOne) ClearSenderAddress() *CourierOrderUpdateOne {
	couo.mutation.ClearSenderAddress()
	return couo
}

// SetItems sets the "items" field.
func (couo *CourierOrderUpdateOne) SetItems(s string) *CourierOrderUpdateOne {
	couo.mutation.SetItems(s)
	return couo
}

// SetNillableItems sets the "items" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableItems(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetItems(*s)
	}
	return couo
}

// ClearItems clears the value of the "items" field.
func (couo *CourierOrderUpdateOne) ClearItems() *CourierOrderUpdateOne {
	couo.mutation.ClearItems()
	return couo
}

// SetRequestData sets the "request_data" field.
func (couo *CourierOrderUpdateOne) SetRequestData(s string) *CourierOrderUpdateOne {
	couo.mutation.SetRequestData(s)
	return couo
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableRequestData(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetRequestData(*s)
	}
	return couo
}

// ClearRequestData clears the value of the "request_data" field.
func (couo *CourierOrderUpdateOne) ClearRequestData() *CourierOrderUpdateOne {
	couo.mutation.ClearRequestData()
	return couo
}

// SetResponseData sets the "response_data" field.
func (couo *CourierOrderUpdateOne) SetResponseData(s string) *CourierOrderUpdateOne {
	couo.mutation.SetResponseData(s)
	return couo
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableResponseData(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetResponseData(*s)
	}
	return couo
}

// ClearResponseData clears the value of the "response_data" field.
func (couo *CourierOrderUpdateOne) ClearResponseData() *CourierOrderUpdateOne {
	couo.mutation.ClearResponseData()
	return couo
}

// SetResultCode sets the "result_code" field.
func (couo *CourierOrderUpdateOne) SetResultCode(s string) *CourierOrderUpdateOne {
	couo.mutation.SetResultCode(s)
	return couo
}

// SetNillableResultCode sets the "result_code" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableResultCode(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetResultCode(*s)
	}
	return couo
}

// ClearResultCode clears the value of the "result_code" field.
func (couo *CourierOrderUpdateOne) ClearResultCode() *CourierOrderUpdateOne {
	couo.mutation.ClearResultCode()
	return couo
}

// SetMessage sets the "message" field.
func (couo *CourierOrderUpdateOne) SetMessage(s string) *CourierOrderUpdateOne {
	couo.mutation.SetMessage(s)
	return couo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableMessage(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetMessage(*s)
	}
	return couo
}

// ClearMessage clears the value of the "message" field.
func (couo *CourierOrderUpdateOne) ClearMessage() *CourierOrderUpdateOne {
	couo.mutation.ClearMessage()
	return couo
}

// SetEnMessage sets the "en_message" field.
func (couo *CourierOrderUpdateOne) SetEnMessage(s string) *CourierOrderUpdateOne {
	couo.mutation.SetEnMessage(s)
	return couo
}

// SetNillableEnMessage sets the "en_message" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableEnMessage(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetEnMessage(*s)
	}
	return couo
}

// ClearEnMessage clears the value of the "en_message" field.
func (couo *CourierOrderUpdateOne) ClearEnMessage() *CourierOrderUpdateOne {
	couo.mutation.ClearEnMessage()
	return couo
}

// SetStatus sets the "status" field.
func (couo *CourierOrderUpdateOne) SetStatus(s string) *CourierOrderUpdateOne {
	couo.mutation.SetStatus(s)
	return couo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (couo *CourierOrderUpdateOne) SetNillableStatus(s *string) *CourierOrderUpdateOne {
	if s != nil {
		couo.SetStatus(*s)
	}
	return couo
}

// Mutation returns the CourierOrderMutation object of the builder.
func (couo *CourierOrderUpdateOne) Mutation() *CourierOrderMutation {
	return couo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CourierOrderUpdateOne) Select(field string, fields ...string) *CourierOrderUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CourierOrder entity.
func (couo *CourierOrderUpdateOne) Save(ctx context.Context) (*CourierOrder, error) {
	var (
		err  error
		node *CourierOrder
	)
	couo.defaults()
	if len(couo.hooks) == 0 {
		node, err = couo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourierOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			couo.mutation = mutation
			node, err = couo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(couo.hooks) - 1; i >= 0; i-- {
			if couo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = couo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, couo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CourierOrder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourierOrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CourierOrderUpdateOne) SaveX(ctx context.Context) *CourierOrder {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CourierOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CourierOrderUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *CourierOrderUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdatedAt(); !ok {
		v := courierorder.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (couo *CourierOrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CourierOrderUpdateOne {
	couo.modifiers = append(couo.modifiers, modifiers...)
	return couo
}

func (couo *CourierOrderUpdateOne) sqlSave(ctx context.Context) (_node *CourierOrder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   courierorder.Table,
			Columns: courierorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: courierorder.FieldID,
			},
		},
	}
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "CourierOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, courierorder.FieldID)
		for _, f := range fields {
			if !courierorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != courierorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(courierorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.DeletedAt(); ok {
		_spec.SetField(courierorder.FieldDeletedAt, field.TypeTime, value)
	}
	if couo.mutation.DeletedAtCleared() {
		_spec.ClearField(courierorder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := couo.mutation.OrderID(); ok {
		_spec.SetField(courierorder.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedOrderID(); ok {
		_spec.AddField(courierorder.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.OrderNumber(); ok {
		_spec.SetField(courierorder.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := couo.mutation.CourierPlatform(); ok {
		_spec.SetField(courierorder.FieldCourierPlatform, field.TypeString, value)
	}
	if value, ok := couo.mutation.ShippingMethodCode(); ok {
		_spec.SetField(courierorder.FieldShippingMethodCode, field.TypeString, value)
	}
	if value, ok := couo.mutation.ShippingMethodName(); ok {
		_spec.SetField(courierorder.FieldShippingMethodName, field.TypeString, value)
	}
	if value, ok := couo.mutation.TrackingURL(); ok {
		_spec.SetField(courierorder.FieldTrackingURL, field.TypeString, value)
	}
	if value, ok := couo.mutation.TrackingNumber(); ok {
		_spec.SetField(courierorder.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := couo.mutation.WaybillNumber(); ok {
		_spec.SetField(courierorder.FieldWaybillNumber, field.TypeString, value)
	}
	if value, ok := couo.mutation.CourierOrderNumber(); ok {
		_spec.SetField(courierorder.FieldCourierOrderNumber, field.TypeString, value)
	}
	if value, ok := couo.mutation.ShippingLabelURL(); ok {
		_spec.SetField(courierorder.FieldShippingLabelURL, field.TypeString, value)
	}
	if value, ok := couo.mutation.TotalItemsPrice(); ok {
		_spec.SetField(courierorder.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := couo.mutation.AddedTotalItemsPrice(); ok {
		_spec.AddField(courierorder.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := couo.mutation.Currency(); ok {
		_spec.SetField(courierorder.FieldCurrency, field.TypeString, value)
	}
	if couo.mutation.CurrencyCleared() {
		_spec.ClearField(courierorder.FieldCurrency, field.TypeString)
	}
	if value, ok := couo.mutation.PackageCount(); ok {
		_spec.SetField(courierorder.FieldPackageCount, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedPackageCount(); ok {
		_spec.AddField(courierorder.FieldPackageCount, field.TypeInt, value)
	}
	if value, ok := couo.mutation.Weight(); ok {
		_spec.SetField(courierorder.FieldWeight, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedWeight(); ok {
		_spec.AddField(courierorder.FieldWeight, field.TypeInt, value)
	}
	if value, ok := couo.mutation.ReceiverAddress(); ok {
		_spec.SetField(courierorder.FieldReceiverAddress, field.TypeString, value)
	}
	if couo.mutation.ReceiverAddressCleared() {
		_spec.ClearField(courierorder.FieldReceiverAddress, field.TypeString)
	}
	if value, ok := couo.mutation.SenderAddress(); ok {
		_spec.SetField(courierorder.FieldSenderAddress, field.TypeString, value)
	}
	if couo.mutation.SenderAddressCleared() {
		_spec.ClearField(courierorder.FieldSenderAddress, field.TypeString)
	}
	if value, ok := couo.mutation.Items(); ok {
		_spec.SetField(courierorder.FieldItems, field.TypeString, value)
	}
	if couo.mutation.ItemsCleared() {
		_spec.ClearField(courierorder.FieldItems, field.TypeString)
	}
	if value, ok := couo.mutation.RequestData(); ok {
		_spec.SetField(courierorder.FieldRequestData, field.TypeString, value)
	}
	if couo.mutation.RequestDataCleared() {
		_spec.ClearField(courierorder.FieldRequestData, field.TypeString)
	}
	if value, ok := couo.mutation.ResponseData(); ok {
		_spec.SetField(courierorder.FieldResponseData, field.TypeString, value)
	}
	if couo.mutation.ResponseDataCleared() {
		_spec.ClearField(courierorder.FieldResponseData, field.TypeString)
	}
	if value, ok := couo.mutation.ResultCode(); ok {
		_spec.SetField(courierorder.FieldResultCode, field.TypeString, value)
	}
	if couo.mutation.ResultCodeCleared() {
		_spec.ClearField(courierorder.FieldResultCode, field.TypeString)
	}
	if value, ok := couo.mutation.Message(); ok {
		_spec.SetField(courierorder.FieldMessage, field.TypeString, value)
	}
	if couo.mutation.MessageCleared() {
		_spec.ClearField(courierorder.FieldMessage, field.TypeString)
	}
	if value, ok := couo.mutation.EnMessage(); ok {
		_spec.SetField(courierorder.FieldEnMessage, field.TypeString, value)
	}
	if couo.mutation.EnMessageCleared() {
		_spec.ClearField(courierorder.FieldEnMessage, field.TypeString)
	}
	if value, ok := couo.mutation.Status(); ok {
		_spec.SetField(courierorder.FieldStatus, field.TypeString, value)
	}
	_spec.Node.Schema = couo.schemaConfig.CourierOrder
	ctx = internal.NewSchemaConfigContext(ctx, couo.schemaConfig)
	_spec.AddModifiers(couo.modifiers...)
	_node = &CourierOrder{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courierorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
