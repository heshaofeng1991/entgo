// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/userreferral"
)

// UserReferralCreate is the builder for creating a UserReferral entity.
type UserReferralCreate struct {
	config
	mutation *UserReferralMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (urc *UserReferralCreate) SetCreatedAt(t time.Time) *UserReferralCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableCreatedAt(t *time.Time) *UserReferralCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetUpdatedAt sets the "updated_at" field.
func (urc *UserReferralCreate) SetUpdatedAt(t time.Time) *UserReferralCreate {
	urc.mutation.SetUpdatedAt(t)
	return urc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableUpdatedAt(t *time.Time) *UserReferralCreate {
	if t != nil {
		urc.SetUpdatedAt(*t)
	}
	return urc
}

// SetDeletedAt sets the "deleted_at" field.
func (urc *UserReferralCreate) SetDeletedAt(t time.Time) *UserReferralCreate {
	urc.mutation.SetDeletedAt(t)
	return urc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableDeletedAt(t *time.Time) *UserReferralCreate {
	if t != nil {
		urc.SetDeletedAt(*t)
	}
	return urc
}

// SetUserID sets the "user_id" field.
func (urc *UserReferralCreate) SetUserID(i int64) *UserReferralCreate {
	urc.mutation.SetUserID(i)
	return urc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableUserID(i *int64) *UserReferralCreate {
	if i != nil {
		urc.SetUserID(*i)
	}
	return urc
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (urc *UserReferralCreate) SetFirstShipmentDate(t time.Time) *UserReferralCreate {
	urc.mutation.SetFirstShipmentDate(t)
	return urc
}

// SetNillableFirstShipmentDate sets the "first_shipment_date" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableFirstShipmentDate(t *time.Time) *UserReferralCreate {
	if t != nil {
		urc.SetFirstShipmentDate(*t)
	}
	return urc
}

// SetTotalCommission sets the "total_commission" field.
func (urc *UserReferralCreate) SetTotalCommission(f float64) *UserReferralCreate {
	urc.mutation.SetTotalCommission(f)
	return urc
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableTotalCommission(f *float64) *UserReferralCreate {
	if f != nil {
		urc.SetTotalCommission(*f)
	}
	return urc
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (urc *UserReferralCreate) SetInvitedByUserID(i int64) *UserReferralCreate {
	urc.mutation.SetInvitedByUserID(i)
	return urc
}

// SetNillableInvitedByUserID sets the "invited_by_user_id" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableInvitedByUserID(i *int64) *UserReferralCreate {
	if i != nil {
		urc.SetInvitedByUserID(*i)
	}
	return urc
}

// SetStatus sets the "status" field.
func (urc *UserReferralCreate) SetStatus(i int8) *UserReferralCreate {
	urc.mutation.SetStatus(i)
	return urc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (urc *UserReferralCreate) SetNillableStatus(i *int8) *UserReferralCreate {
	if i != nil {
		urc.SetStatus(*i)
	}
	return urc
}

// SetID sets the "id" field.
func (urc *UserReferralCreate) SetID(i int64) *UserReferralCreate {
	urc.mutation.SetID(i)
	return urc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (urc *UserReferralCreate) SetTenantID(id int64) *UserReferralCreate {
	urc.mutation.SetTenantID(id)
	return urc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (urc *UserReferralCreate) SetTenant(t *Tenant) *UserReferralCreate {
	return urc.SetTenantID(t.ID)
}

// Mutation returns the UserReferralMutation object of the builder.
func (urc *UserReferralCreate) Mutation() *UserReferralMutation {
	return urc.mutation
}

// Save creates the UserReferral in the database.
func (urc *UserReferralCreate) Save(ctx context.Context) (*UserReferral, error) {
	var (
		err  error
		node *UserReferral
	)
	if err := urc.defaults(); err != nil {
		return nil, err
	}
	if len(urc.hooks) == 0 {
		if err = urc.check(); err != nil {
			return nil, err
		}
		node, err = urc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserReferralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = urc.check(); err != nil {
				return nil, err
			}
			urc.mutation = mutation
			if node, err = urc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(urc.hooks) - 1; i >= 0; i-- {
			if urc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = urc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, urc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserReferral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserReferralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserReferralCreate) SaveX(ctx context.Context) *UserReferral {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserReferralCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserReferralCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserReferralCreate) defaults() error {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		if userreferral.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized userreferral.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := userreferral.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		if userreferral.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized userreferral.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := userreferral.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
	if _, ok := urc.mutation.TotalCommission(); !ok {
		v := userreferral.DefaultTotalCommission
		urc.mutation.SetTotalCommission(v)
	}
	if _, ok := urc.mutation.Status(); !ok {
		v := userreferral.DefaultStatus
		urc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserReferralCreate) check() error {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "UserReferral.created_at"`)}
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "UserReferral.updated_at"`)}
	}
	if _, ok := urc.mutation.TotalCommission(); !ok {
		return &ValidationError{Name: "total_commission", err: errors.New(`gen: missing required field "UserReferral.total_commission"`)}
	}
	if _, ok := urc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "UserReferral.status"`)}
	}
	if _, ok := urc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "UserReferral.tenant"`)}
	}
	return nil
}

func (urc *UserReferralCreate) sqlSave(ctx context.Context) (*UserReferral, error) {
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (urc *UserReferralCreate) createSpec() (*UserReferral, *sqlgraph.CreateSpec) {
	var (
		_node = &UserReferral{config: urc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userreferral.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userreferral.FieldID,
			},
		}
	)
	_spec.Schema = urc.schemaConfig.UserReferral
	_spec.OnConflict = urc.conflict
	if id, ok := urc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.SetField(userreferral.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.SetField(userreferral.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := urc.mutation.DeletedAt(); ok {
		_spec.SetField(userreferral.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := urc.mutation.UserID(); ok {
		_spec.SetField(userreferral.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := urc.mutation.FirstShipmentDate(); ok {
		_spec.SetField(userreferral.FieldFirstShipmentDate, field.TypeTime, value)
		_node.FirstShipmentDate = value
	}
	if value, ok := urc.mutation.TotalCommission(); ok {
		_spec.SetField(userreferral.FieldTotalCommission, field.TypeFloat64, value)
		_node.TotalCommission = value
	}
	if value, ok := urc.mutation.InvitedByUserID(); ok {
		_spec.SetField(userreferral.FieldInvitedByUserID, field.TypeInt64, value)
		_node.InvitedByUserID = value
	}
	if value, ok := urc.mutation.Status(); ok {
		_spec.SetField(userreferral.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if nodes := urc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = urc.schemaConfig.UserReferral
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_referral_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserReferral.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserReferralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (urc *UserReferralCreate) OnConflict(opts ...sql.ConflictOption) *UserReferralUpsertOne {
	urc.conflict = opts
	return &UserReferralUpsertOne{
		create: urc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (urc *UserReferralCreate) OnConflictColumns(columns ...string) *UserReferralUpsertOne {
	urc.conflict = append(urc.conflict, sql.ConflictColumns(columns...))
	return &UserReferralUpsertOne{
		create: urc,
	}
}

type (
	// UserReferralUpsertOne is the builder for "upsert"-ing
	//  one UserReferral node.
	UserReferralUpsertOne struct {
		create *UserReferralCreate
	}

	// UserReferralUpsert is the "OnConflict" setter.
	UserReferralUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserReferralUpsert) SetUpdatedAt(v time.Time) *UserReferralUpsert {
	u.Set(userreferral.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateUpdatedAt() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserReferralUpsert) SetDeletedAt(v time.Time) *UserReferralUpsert {
	u.Set(userreferral.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateDeletedAt() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserReferralUpsert) ClearDeletedAt() *UserReferralUpsert {
	u.SetNull(userreferral.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserReferralUpsert) SetUserID(v int64) *UserReferralUpsert {
	u.Set(userreferral.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateUserID() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *UserReferralUpsert) AddUserID(v int64) *UserReferralUpsert {
	u.Add(userreferral.FieldUserID, v)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserReferralUpsert) ClearUserID() *UserReferralUpsert {
	u.SetNull(userreferral.FieldUserID)
	return u
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (u *UserReferralUpsert) SetFirstShipmentDate(v time.Time) *UserReferralUpsert {
	u.Set(userreferral.FieldFirstShipmentDate, v)
	return u
}

// UpdateFirstShipmentDate sets the "first_shipment_date" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateFirstShipmentDate() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldFirstShipmentDate)
	return u
}

// ClearFirstShipmentDate clears the value of the "first_shipment_date" field.
func (u *UserReferralUpsert) ClearFirstShipmentDate() *UserReferralUpsert {
	u.SetNull(userreferral.FieldFirstShipmentDate)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *UserReferralUpsert) SetTotalCommission(v float64) *UserReferralUpsert {
	u.Set(userreferral.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateTotalCommission() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldTotalCommission)
	return u
}

// AddTotalCommission adds v to the "total_commission" field.
func (u *UserReferralUpsert) AddTotalCommission(v float64) *UserReferralUpsert {
	u.Add(userreferral.FieldTotalCommission, v)
	return u
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (u *UserReferralUpsert) SetInvitedByUserID(v int64) *UserReferralUpsert {
	u.Set(userreferral.FieldInvitedByUserID, v)
	return u
}

// UpdateInvitedByUserID sets the "invited_by_user_id" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateInvitedByUserID() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldInvitedByUserID)
	return u
}

// AddInvitedByUserID adds v to the "invited_by_user_id" field.
func (u *UserReferralUpsert) AddInvitedByUserID(v int64) *UserReferralUpsert {
	u.Add(userreferral.FieldInvitedByUserID, v)
	return u
}

// ClearInvitedByUserID clears the value of the "invited_by_user_id" field.
func (u *UserReferralUpsert) ClearInvitedByUserID() *UserReferralUpsert {
	u.SetNull(userreferral.FieldInvitedByUserID)
	return u
}

// SetStatus sets the "status" field.
func (u *UserReferralUpsert) SetStatus(v int8) *UserReferralUpsert {
	u.Set(userreferral.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserReferralUpsert) UpdateStatus() *UserReferralUpsert {
	u.SetExcluded(userreferral.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *UserReferralUpsert) AddStatus(v int8) *UserReferralUpsert {
	u.Add(userreferral.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userreferral.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserReferralUpsertOne) UpdateNewValues() *UserReferralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userreferral.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userreferral.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserReferralUpsertOne) Ignore() *UserReferralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserReferralUpsertOne) DoNothing() *UserReferralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserReferralCreate.OnConflict
// documentation for more info.
func (u *UserReferralUpsertOne) Update(set func(*UserReferralUpsert)) *UserReferralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserReferralUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserReferralUpsertOne) SetUpdatedAt(v time.Time) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateUpdatedAt() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserReferralUpsertOne) SetDeletedAt(v time.Time) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateDeletedAt() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserReferralUpsertOne) ClearDeletedAt() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserReferralUpsertOne) SetUserID(v int64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserReferralUpsertOne) AddUserID(v int64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateUserID() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserReferralUpsertOne) ClearUserID() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearUserID()
	})
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (u *UserReferralUpsertOne) SetFirstShipmentDate(v time.Time) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetFirstShipmentDate(v)
	})
}

// UpdateFirstShipmentDate sets the "first_shipment_date" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateFirstShipmentDate() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateFirstShipmentDate()
	})
}

// ClearFirstShipmentDate clears the value of the "first_shipment_date" field.
func (u *UserReferralUpsertOne) ClearFirstShipmentDate() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearFirstShipmentDate()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *UserReferralUpsertOne) SetTotalCommission(v float64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetTotalCommission(v)
	})
}

// AddTotalCommission adds v to the "total_commission" field.
func (u *UserReferralUpsertOne) AddTotalCommission(v float64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateTotalCommission() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateTotalCommission()
	})
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (u *UserReferralUpsertOne) SetInvitedByUserID(v int64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetInvitedByUserID(v)
	})
}

// AddInvitedByUserID adds v to the "invited_by_user_id" field.
func (u *UserReferralUpsertOne) AddInvitedByUserID(v int64) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddInvitedByUserID(v)
	})
}

// UpdateInvitedByUserID sets the "invited_by_user_id" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateInvitedByUserID() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateInvitedByUserID()
	})
}

// ClearInvitedByUserID clears the value of the "invited_by_user_id" field.
func (u *UserReferralUpsertOne) ClearInvitedByUserID() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearInvitedByUserID()
	})
}

// SetStatus sets the "status" field.
func (u *UserReferralUpsertOne) SetStatus(v int8) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserReferralUpsertOne) AddStatus(v int8) *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserReferralUpsertOne) UpdateStatus() *UserReferralUpsertOne {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserReferralUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserReferralCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserReferralUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserReferralUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserReferralUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserReferralCreateBulk is the builder for creating many UserReferral entities in bulk.
type UserReferralCreateBulk struct {
	config
	builders []*UserReferralCreate
	conflict []sql.ConflictOption
}

// Save creates the UserReferral entities in the database.
func (urcb *UserReferralCreateBulk) Save(ctx context.Context) ([]*UserReferral, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserReferral, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserReferralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = urcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserReferralCreateBulk) SaveX(ctx context.Context) []*UserReferral {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserReferralCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserReferralCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserReferral.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserReferralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (urcb *UserReferralCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserReferralUpsertBulk {
	urcb.conflict = opts
	return &UserReferralUpsertBulk{
		create: urcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (urcb *UserReferralCreateBulk) OnConflictColumns(columns ...string) *UserReferralUpsertBulk {
	urcb.conflict = append(urcb.conflict, sql.ConflictColumns(columns...))
	return &UserReferralUpsertBulk{
		create: urcb,
	}
}

// UserReferralUpsertBulk is the builder for "upsert"-ing
// a bulk of UserReferral nodes.
type UserReferralUpsertBulk struct {
	create *UserReferralCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userreferral.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserReferralUpsertBulk) UpdateNewValues() *UserReferralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userreferral.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userreferral.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserReferral.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserReferralUpsertBulk) Ignore() *UserReferralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserReferralUpsertBulk) DoNothing() *UserReferralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserReferralCreateBulk.OnConflict
// documentation for more info.
func (u *UserReferralUpsertBulk) Update(set func(*UserReferralUpsert)) *UserReferralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserReferralUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserReferralUpsertBulk) SetUpdatedAt(v time.Time) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateUpdatedAt() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserReferralUpsertBulk) SetDeletedAt(v time.Time) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateDeletedAt() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserReferralUpsertBulk) ClearDeletedAt() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserReferralUpsertBulk) SetUserID(v int64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *UserReferralUpsertBulk) AddUserID(v int64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateUserID() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *UserReferralUpsertBulk) ClearUserID() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearUserID()
	})
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (u *UserReferralUpsertBulk) SetFirstShipmentDate(v time.Time) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetFirstShipmentDate(v)
	})
}

// UpdateFirstShipmentDate sets the "first_shipment_date" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateFirstShipmentDate() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateFirstShipmentDate()
	})
}

// ClearFirstShipmentDate clears the value of the "first_shipment_date" field.
func (u *UserReferralUpsertBulk) ClearFirstShipmentDate() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearFirstShipmentDate()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *UserReferralUpsertBulk) SetTotalCommission(v float64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetTotalCommission(v)
	})
}

// AddTotalCommission adds v to the "total_commission" field.
func (u *UserReferralUpsertBulk) AddTotalCommission(v float64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateTotalCommission() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateTotalCommission()
	})
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (u *UserReferralUpsertBulk) SetInvitedByUserID(v int64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetInvitedByUserID(v)
	})
}

// AddInvitedByUserID adds v to the "invited_by_user_id" field.
func (u *UserReferralUpsertBulk) AddInvitedByUserID(v int64) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddInvitedByUserID(v)
	})
}

// UpdateInvitedByUserID sets the "invited_by_user_id" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateInvitedByUserID() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateInvitedByUserID()
	})
}

// ClearInvitedByUserID clears the value of the "invited_by_user_id" field.
func (u *UserReferralUpsertBulk) ClearInvitedByUserID() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.ClearInvitedByUserID()
	})
}

// SetStatus sets the "status" field.
func (u *UserReferralUpsertBulk) SetStatus(v int8) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserReferralUpsertBulk) AddStatus(v int8) *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserReferralUpsertBulk) UpdateStatus() *UserReferralUpsertBulk {
	return u.Update(func(s *UserReferralUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *UserReferralUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the UserReferralCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserReferralCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserReferralUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
