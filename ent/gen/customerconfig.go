// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/customerconfig"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// CustomerConfig is the model entity for the CustomerConfig schema.
type CustomerConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// ExcludeCountryCode holds the value of the "exclude_country_code" field.
	ExcludeCountryCode string `json:"exclude_country_code,omitempty"`
	// 0=>Inactive, 1=>Active
	Status int8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerConfigQuery when eager-loading is set.
	Edges                  CustomerConfigEdges `json:"edges"`
	customer_config_tenant *int64
}

// CustomerConfigEdges holds the relations/edges for other nodes in the graph.
type CustomerConfigEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerConfigEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customerconfig.FieldID, customerconfig.FieldChannelID, customerconfig.FieldStatus:
			values[i] = new(sql.NullInt64)
		case customerconfig.FieldExcludeCountryCode:
			values[i] = new(sql.NullString)
		case customerconfig.FieldCreatedAt, customerconfig.FieldUpdatedAt, customerconfig.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case customerconfig.ForeignKeys[0]: // customer_config_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomerConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerConfig fields.
func (cc *CustomerConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customerconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int64(value.Int64)
		case customerconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case customerconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		case customerconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cc.DeletedAt = value.Time
			}
		case customerconfig.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				cc.ChannelID = value.Int64
			}
		case customerconfig.FieldExcludeCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exclude_country_code", values[i])
			} else if value.Valid {
				cc.ExcludeCountryCode = value.String
			}
		case customerconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cc.Status = int8(value.Int64)
			}
		case customerconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_config_tenant", value)
			} else if value.Valid {
				cc.customer_config_tenant = new(int64)
				*cc.customer_config_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the CustomerConfig entity.
func (cc *CustomerConfig) QueryTenant() *TenantQuery {
	return (&CustomerConfigClient{config: cc.config}).QueryTenant(cc)
}

// Update returns a builder for updating this CustomerConfig.
// Note that you need to call CustomerConfig.Unwrap() before calling this method if this CustomerConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CustomerConfig) Update() *CustomerConfigUpdateOne {
	return (&CustomerConfigClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the CustomerConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CustomerConfig) Unwrap() *CustomerConfig {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("gen: CustomerConfig is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CustomerConfig) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("exclude_country_code=")
	builder.WriteString(cc.ExcludeCountryCode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cc.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerConfigs is a parsable slice of CustomerConfig.
type CustomerConfigs []*CustomerConfig

func (cc CustomerConfigs) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
