// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"
)

// WarehouseUpdate is the builder for updating Warehouse entities.
type WarehouseUpdate struct {
	config
	hooks     []Hook
	mutation  *WarehouseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wu *WarehouseUpdate) Where(ps ...predicate.Warehouse) *WarehouseUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WarehouseUpdate) SetUpdatedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WarehouseUpdate) SetDeletedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableDeletedAt(t *time.Time) *WarehouseUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wu *WarehouseUpdate) ClearDeletedAt() *WarehouseUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetCode sets the "code" field.
func (wu *WarehouseUpdate) SetCode(s string) *WarehouseUpdate {
	wu.mutation.SetCode(s)
	return wu
}

// SetQuicktronCode sets the "quicktron_code" field.
func (wu *WarehouseUpdate) SetQuicktronCode(s string) *WarehouseUpdate {
	wu.mutation.SetQuicktronCode(s)
	return wu
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (wu *WarehouseUpdate) SetEnableQuicktron(i int) *WarehouseUpdate {
	wu.mutation.ResetEnableQuicktron()
	wu.mutation.SetEnableQuicktron(i)
	return wu
}

// AddEnableQuicktron adds i to the "enable_quicktron" field.
func (wu *WarehouseUpdate) AddEnableQuicktron(i int) *WarehouseUpdate {
	wu.mutation.AddEnableQuicktron(i)
	return wu
}

// SetName sets the "name" field.
func (wu *WarehouseUpdate) SetName(s string) *WarehouseUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetCompany sets the "company" field.
func (wu *WarehouseUpdate) SetCompany(s string) *WarehouseUpdate {
	wu.mutation.SetCompany(s)
	return wu
}

// SetFirstName sets the "first_name" field.
func (wu *WarehouseUpdate) SetFirstName(s string) *WarehouseUpdate {
	wu.mutation.SetFirstName(s)
	return wu
}

// SetLastName sets the "last_name" field.
func (wu *WarehouseUpdate) SetLastName(s string) *WarehouseUpdate {
	wu.mutation.SetLastName(s)
	return wu
}

// SetAddress1 sets the "address1" field.
func (wu *WarehouseUpdate) SetAddress1(s string) *WarehouseUpdate {
	wu.mutation.SetAddress1(s)
	return wu
}

// SetAddress2 sets the "address2" field.
func (wu *WarehouseUpdate) SetAddress2(s string) *WarehouseUpdate {
	wu.mutation.SetAddress2(s)
	return wu
}

// SetCountryCode sets the "country_code" field.
func (wu *WarehouseUpdate) SetCountryCode(s string) *WarehouseUpdate {
	wu.mutation.SetCountryCode(s)
	return wu
}

// SetCountryName sets the "country_name" field.
func (wu *WarehouseUpdate) SetCountryName(s string) *WarehouseUpdate {
	wu.mutation.SetCountryName(s)
	return wu
}

// SetProvince sets the "province" field.
func (wu *WarehouseUpdate) SetProvince(s string) *WarehouseUpdate {
	wu.mutation.SetProvince(s)
	return wu
}

// SetCity sets the "city" field.
func (wu *WarehouseUpdate) SetCity(s string) *WarehouseUpdate {
	wu.mutation.SetCity(s)
	return wu
}

// SetZipCode sets the "zip_code" field.
func (wu *WarehouseUpdate) SetZipCode(s string) *WarehouseUpdate {
	wu.mutation.SetZipCode(s)
	return wu
}

// SetPhone sets the "phone" field.
func (wu *WarehouseUpdate) SetPhone(s string) *WarehouseUpdate {
	wu.mutation.SetPhone(s)
	return wu
}

// SetStatus sets the "status" field.
func (wu *WarehouseUpdate) SetStatus(i int) *WarehouseUpdate {
	wu.mutation.ResetStatus()
	wu.mutation.SetStatus(i)
	return wu
}

// AddStatus adds i to the "status" field.
func (wu *WarehouseUpdate) AddStatus(i int) *WarehouseUpdate {
	wu.mutation.AddStatus(i)
	return wu
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (wu *WarehouseUpdate) AddOrderIDs(ids ...int64) *WarehouseUpdate {
	wu.mutation.AddOrderIDs(ids...)
	return wu
}

// AddOrders adds the "orders" edges to the Order entity.
func (wu *WarehouseUpdate) AddOrders(o ...*Order) *WarehouseUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wu.AddOrderIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wu *WarehouseUpdate) Mutation() *WarehouseMutation {
	return wu.mutation
}

// ClearOrders clears all "orders" edges to the Order entity.
func (wu *WarehouseUpdate) ClearOrders() *WarehouseUpdate {
	wu.mutation.ClearOrders()
	return wu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (wu *WarehouseUpdate) RemoveOrderIDs(ids ...int64) *WarehouseUpdate {
	wu.mutation.RemoveOrderIDs(ids...)
	return wu
}

// RemoveOrders removes "orders" edges to Order entities.
func (wu *WarehouseUpdate) RemoveOrders(o ...*Order) *WarehouseUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WarehouseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wu.defaults()
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarehouseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarehouseUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarehouseUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarehouseUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WarehouseUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := warehouse.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WarehouseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarehouseUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WarehouseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warehouse.Table,
			Columns: warehouse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: warehouse.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(warehouse.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Code(); ok {
		_spec.SetField(warehouse.FieldCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.QuicktronCode(); ok {
		_spec.SetField(warehouse.FieldQuicktronCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.EnableQuicktron(); ok {
		_spec.SetField(warehouse.FieldEnableQuicktron, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedEnableQuicktron(); ok {
		_spec.AddField(warehouse.FieldEnableQuicktron, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Company(); ok {
		_spec.SetField(warehouse.FieldCompany, field.TypeString, value)
	}
	if value, ok := wu.mutation.FirstName(); ok {
		_spec.SetField(warehouse.FieldFirstName, field.TypeString, value)
	}
	if value, ok := wu.mutation.LastName(); ok {
		_spec.SetField(warehouse.FieldLastName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Address1(); ok {
		_spec.SetField(warehouse.FieldAddress1, field.TypeString, value)
	}
	if value, ok := wu.mutation.Address2(); ok {
		_spec.SetField(warehouse.FieldAddress2, field.TypeString, value)
	}
	if value, ok := wu.mutation.CountryCode(); ok {
		_spec.SetField(warehouse.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.CountryName(); ok {
		_spec.SetField(warehouse.FieldCountryName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Province(); ok {
		_spec.SetField(warehouse.FieldProvince, field.TypeString, value)
	}
	if value, ok := wu.mutation.City(); ok {
		_spec.SetField(warehouse.FieldCity, field.TypeString, value)
	}
	if value, ok := wu.mutation.ZipCode(); ok {
		_spec.SetField(warehouse.FieldZipCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.Phone(); ok {
		_spec.SetField(warehouse.FieldPhone, field.TypeString, value)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(warehouse.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedStatus(); ok {
		_spec.AddField(warehouse.FieldStatus, field.TypeInt, value)
	}
	if wu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wu.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !wu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wu.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wu.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wu.schemaConfig.Warehouse
	ctx = internal.NewSchemaConfigContext(ctx, wu.schemaConfig)
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// WarehouseUpdateOne is the builder for updating a single Warehouse entity.
type WarehouseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarehouseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WarehouseUpdateOne) SetUpdatedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WarehouseUpdateOne) SetDeletedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableDeletedAt(t *time.Time) *WarehouseUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wuo *WarehouseUpdateOne) ClearDeletedAt() *WarehouseUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetCode sets the "code" field.
func (wuo *WarehouseUpdateOne) SetCode(s string) *WarehouseUpdateOne {
	wuo.mutation.SetCode(s)
	return wuo
}

// SetQuicktronCode sets the "quicktron_code" field.
func (wuo *WarehouseUpdateOne) SetQuicktronCode(s string) *WarehouseUpdateOne {
	wuo.mutation.SetQuicktronCode(s)
	return wuo
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (wuo *WarehouseUpdateOne) SetEnableQuicktron(i int) *WarehouseUpdateOne {
	wuo.mutation.ResetEnableQuicktron()
	wuo.mutation.SetEnableQuicktron(i)
	return wuo
}

// AddEnableQuicktron adds i to the "enable_quicktron" field.
func (wuo *WarehouseUpdateOne) AddEnableQuicktron(i int) *WarehouseUpdateOne {
	wuo.mutation.AddEnableQuicktron(i)
	return wuo
}

// SetName sets the "name" field.
func (wuo *WarehouseUpdateOne) SetName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetCompany sets the "company" field.
func (wuo *WarehouseUpdateOne) SetCompany(s string) *WarehouseUpdateOne {
	wuo.mutation.SetCompany(s)
	return wuo
}

// SetFirstName sets the "first_name" field.
func (wuo *WarehouseUpdateOne) SetFirstName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetFirstName(s)
	return wuo
}

// SetLastName sets the "last_name" field.
func (wuo *WarehouseUpdateOne) SetLastName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetLastName(s)
	return wuo
}

// SetAddress1 sets the "address1" field.
func (wuo *WarehouseUpdateOne) SetAddress1(s string) *WarehouseUpdateOne {
	wuo.mutation.SetAddress1(s)
	return wuo
}

// SetAddress2 sets the "address2" field.
func (wuo *WarehouseUpdateOne) SetAddress2(s string) *WarehouseUpdateOne {
	wuo.mutation.SetAddress2(s)
	return wuo
}

// SetCountryCode sets the "country_code" field.
func (wuo *WarehouseUpdateOne) SetCountryCode(s string) *WarehouseUpdateOne {
	wuo.mutation.SetCountryCode(s)
	return wuo
}

// SetCountryName sets the "country_name" field.
func (wuo *WarehouseUpdateOne) SetCountryName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetCountryName(s)
	return wuo
}

// SetProvince sets the "province" field.
func (wuo *WarehouseUpdateOne) SetProvince(s string) *WarehouseUpdateOne {
	wuo.mutation.SetProvince(s)
	return wuo
}

// SetCity sets the "city" field.
func (wuo *WarehouseUpdateOne) SetCity(s string) *WarehouseUpdateOne {
	wuo.mutation.SetCity(s)
	return wuo
}

// SetZipCode sets the "zip_code" field.
func (wuo *WarehouseUpdateOne) SetZipCode(s string) *WarehouseUpdateOne {
	wuo.mutation.SetZipCode(s)
	return wuo
}

// SetPhone sets the "phone" field.
func (wuo *WarehouseUpdateOne) SetPhone(s string) *WarehouseUpdateOne {
	wuo.mutation.SetPhone(s)
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WarehouseUpdateOne) SetStatus(i int) *WarehouseUpdateOne {
	wuo.mutation.ResetStatus()
	wuo.mutation.SetStatus(i)
	return wuo
}

// AddStatus adds i to the "status" field.
func (wuo *WarehouseUpdateOne) AddStatus(i int) *WarehouseUpdateOne {
	wuo.mutation.AddStatus(i)
	return wuo
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (wuo *WarehouseUpdateOne) AddOrderIDs(ids ...int64) *WarehouseUpdateOne {
	wuo.mutation.AddOrderIDs(ids...)
	return wuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (wuo *WarehouseUpdateOne) AddOrders(o ...*Order) *WarehouseUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wuo.AddOrderIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wuo *WarehouseUpdateOne) Mutation() *WarehouseMutation {
	return wuo.mutation
}

// ClearOrders clears all "orders" edges to the Order entity.
func (wuo *WarehouseUpdateOne) ClearOrders() *WarehouseUpdateOne {
	wuo.mutation.ClearOrders()
	return wuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (wuo *WarehouseUpdateOne) RemoveOrderIDs(ids ...int64) *WarehouseUpdateOne {
	wuo.mutation.RemoveOrderIDs(ids...)
	return wuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (wuo *WarehouseUpdateOne) RemoveOrders(o ...*Order) *WarehouseUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wuo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WarehouseUpdateOne) Select(field string, fields ...string) *WarehouseUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Warehouse entity.
func (wuo *WarehouseUpdateOne) Save(ctx context.Context) (*Warehouse, error) {
	var (
		err  error
		node *Warehouse
	)
	wuo.defaults()
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarehouseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Warehouse)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WarehouseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) SaveX(ctx context.Context) *Warehouse {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WarehouseUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WarehouseUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := warehouse.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WarehouseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarehouseUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WarehouseUpdateOne) sqlSave(ctx context.Context) (_node *Warehouse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   warehouse.Table,
			Columns: warehouse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: warehouse.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Warehouse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warehouse.FieldID)
		for _, f := range fields {
			if !warehouse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != warehouse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(warehouse.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Code(); ok {
		_spec.SetField(warehouse.FieldCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.QuicktronCode(); ok {
		_spec.SetField(warehouse.FieldQuicktronCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.EnableQuicktron(); ok {
		_spec.SetField(warehouse.FieldEnableQuicktron, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedEnableQuicktron(); ok {
		_spec.AddField(warehouse.FieldEnableQuicktron, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Company(); ok {
		_spec.SetField(warehouse.FieldCompany, field.TypeString, value)
	}
	if value, ok := wuo.mutation.FirstName(); ok {
		_spec.SetField(warehouse.FieldFirstName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.LastName(); ok {
		_spec.SetField(warehouse.FieldLastName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Address1(); ok {
		_spec.SetField(warehouse.FieldAddress1, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Address2(); ok {
		_spec.SetField(warehouse.FieldAddress2, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CountryCode(); ok {
		_spec.SetField(warehouse.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CountryName(); ok {
		_spec.SetField(warehouse.FieldCountryName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Province(); ok {
		_spec.SetField(warehouse.FieldProvince, field.TypeString, value)
	}
	if value, ok := wuo.mutation.City(); ok {
		_spec.SetField(warehouse.FieldCity, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ZipCode(); ok {
		_spec.SetField(warehouse.FieldZipCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Phone(); ok {
		_spec.SetField(warehouse.FieldPhone, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(warehouse.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedStatus(); ok {
		_spec.AddField(warehouse.FieldStatus, field.TypeInt, value)
	}
	if wuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wuo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !wuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wuo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wuo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wuo.schemaConfig.Warehouse
	ctx = internal.NewSchemaConfigContext(ctx, wuo.schemaConfig)
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Warehouse{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
