// Code generated by ent, DO NOT EDIT.

package countryzone

import (
	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// StartZipCode applies equality check predicate on the "start_zip_code" field. It's identical to StartZipCodeEQ.
func StartZipCode(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartZipCode), v))
	})
}

// EndZipCode applies equality check predicate on the "end_zip_code" field. It's identical to EndZipCodeEQ.
func EndZipCode(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndZipCode), v))
	})
}

// Zone applies equality check predicate on the "zone" field. It's identical to ZoneEQ.
func Zone(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int64) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelID), v...))
	})
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int64) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelID), v...))
	})
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelID), v))
	})
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelID), v))
	})
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelID), v))
	})
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v int64) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelID), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryCode), v))
	})
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZipCode), v...))
	})
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZipCode), v...))
	})
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZipCode), v))
	})
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZipCode), v))
	})
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZipCode), v))
	})
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZipCode), v))
	})
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZipCode), v))
	})
}

// StartZipCodeEQ applies the EQ predicate on the "start_zip_code" field.
func StartZipCodeEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeNEQ applies the NEQ predicate on the "start_zip_code" field.
func StartZipCodeNEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeIn applies the In predicate on the "start_zip_code" field.
func StartZipCodeIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartZipCode), v...))
	})
}

// StartZipCodeNotIn applies the NotIn predicate on the "start_zip_code" field.
func StartZipCodeNotIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartZipCode), v...))
	})
}

// StartZipCodeGT applies the GT predicate on the "start_zip_code" field.
func StartZipCodeGT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeGTE applies the GTE predicate on the "start_zip_code" field.
func StartZipCodeGTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeLT applies the LT predicate on the "start_zip_code" field.
func StartZipCodeLT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeLTE applies the LTE predicate on the "start_zip_code" field.
func StartZipCodeLTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeContains applies the Contains predicate on the "start_zip_code" field.
func StartZipCodeContains(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeHasPrefix applies the HasPrefix predicate on the "start_zip_code" field.
func StartZipCodeHasPrefix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeHasSuffix applies the HasSuffix predicate on the "start_zip_code" field.
func StartZipCodeHasSuffix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeEqualFold applies the EqualFold predicate on the "start_zip_code" field.
func StartZipCodeEqualFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStartZipCode), v))
	})
}

// StartZipCodeContainsFold applies the ContainsFold predicate on the "start_zip_code" field.
func StartZipCodeContainsFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStartZipCode), v))
	})
}

// EndZipCodeEQ applies the EQ predicate on the "end_zip_code" field.
func EndZipCodeEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeNEQ applies the NEQ predicate on the "end_zip_code" field.
func EndZipCodeNEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeIn applies the In predicate on the "end_zip_code" field.
func EndZipCodeIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndZipCode), v...))
	})
}

// EndZipCodeNotIn applies the NotIn predicate on the "end_zip_code" field.
func EndZipCodeNotIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndZipCode), v...))
	})
}

// EndZipCodeGT applies the GT predicate on the "end_zip_code" field.
func EndZipCodeGT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeGTE applies the GTE predicate on the "end_zip_code" field.
func EndZipCodeGTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeLT applies the LT predicate on the "end_zip_code" field.
func EndZipCodeLT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeLTE applies the LTE predicate on the "end_zip_code" field.
func EndZipCodeLTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeContains applies the Contains predicate on the "end_zip_code" field.
func EndZipCodeContains(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeHasPrefix applies the HasPrefix predicate on the "end_zip_code" field.
func EndZipCodeHasPrefix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeHasSuffix applies the HasSuffix predicate on the "end_zip_code" field.
func EndZipCodeHasSuffix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeEqualFold applies the EqualFold predicate on the "end_zip_code" field.
func EndZipCodeEqualFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEndZipCode), v))
	})
}

// EndZipCodeContainsFold applies the ContainsFold predicate on the "end_zip_code" field.
func EndZipCodeContainsFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEndZipCode), v))
	})
}

// ZoneEQ applies the EQ predicate on the "zone" field.
func ZoneEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// ZoneNEQ applies the NEQ predicate on the "zone" field.
func ZoneNEQ(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZone), v))
	})
}

// ZoneIn applies the In predicate on the "zone" field.
func ZoneIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZone), v...))
	})
}

// ZoneNotIn applies the NotIn predicate on the "zone" field.
func ZoneNotIn(vs ...string) predicate.CountryZone {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZone), v...))
	})
}

// ZoneGT applies the GT predicate on the "zone" field.
func ZoneGT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZone), v))
	})
}

// ZoneGTE applies the GTE predicate on the "zone" field.
func ZoneGTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZone), v))
	})
}

// ZoneLT applies the LT predicate on the "zone" field.
func ZoneLT(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZone), v))
	})
}

// ZoneLTE applies the LTE predicate on the "zone" field.
func ZoneLTE(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZone), v))
	})
}

// ZoneContains applies the Contains predicate on the "zone" field.
func ZoneContains(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZone), v))
	})
}

// ZoneHasPrefix applies the HasPrefix predicate on the "zone" field.
func ZoneHasPrefix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZone), v))
	})
}

// ZoneHasSuffix applies the HasSuffix predicate on the "zone" field.
func ZoneHasSuffix(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZone), v))
	})
}

// ZoneEqualFold applies the EqualFold predicate on the "zone" field.
func ZoneEqualFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZone), v))
	})
}

// ZoneContainsFold applies the ContainsFold predicate on the "zone" field.
func ZoneContainsFold(v string) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZone), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CountryZone) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CountryZone) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CountryZone) predicate.CountryZone {
	return predicate.CountryZone(func(s *sql.Selector) {
		p(s.Not())
	})
}
