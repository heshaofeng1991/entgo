// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChannelUpdate) SetUpdatedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ChannelUpdate) SetDeletedAt(t time.Time) *ChannelUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDeletedAt(t *time.Time) *ChannelUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ChannelUpdate) ClearDeletedAt() *ChannelUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetWarehouseID sets the "warehouse_id" field.
func (cu *ChannelUpdate) SetWarehouseID(i int64) *ChannelUpdate {
	cu.mutation.ResetWarehouseID()
	cu.mutation.SetWarehouseID(i)
	return cu
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableWarehouseID(i *int64) *ChannelUpdate {
	if i != nil {
		cu.SetWarehouseID(*i)
	}
	return cu
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (cu *ChannelUpdate) AddWarehouseID(i int64) *ChannelUpdate {
	cu.mutation.AddWarehouseID(i)
	return cu
}

// SetCourierPlatform sets the "courier_platform" field.
func (cu *ChannelUpdate) SetCourierPlatform(s string) *ChannelUpdate {
	cu.mutation.SetCourierPlatform(s)
	return cu
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableCourierPlatform(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetCourierPlatform(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ChannelUpdate) SetName(s string) *ChannelUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCode sets the "code" field.
func (cu *ChannelUpdate) SetCode(s string) *ChannelUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetType sets the "type" field.
func (cu *ChannelUpdate) SetType(i int8) *ChannelUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// AddType adds i to the "type" field.
func (cu *ChannelUpdate) AddType(i int8) *ChannelUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (cu *ChannelUpdate) SetQuotationCurrency(s string) *ChannelUpdate {
	cu.mutation.SetQuotationCurrency(s)
	return cu
}

// SetNillableQuotationCurrency sets the "quotation_currency" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableQuotationCurrency(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetQuotationCurrency(*s)
	}
	return cu
}

// SetVolumeFactor sets the "volume_factor" field.
func (cu *ChannelUpdate) SetVolumeFactor(i int32) *ChannelUpdate {
	cu.mutation.ResetVolumeFactor()
	cu.mutation.SetVolumeFactor(i)
	return cu
}

// SetNillableVolumeFactor sets the "volume_factor" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableVolumeFactor(i *int32) *ChannelUpdate {
	if i != nil {
		cu.SetVolumeFactor(*i)
	}
	return cu
}

// AddVolumeFactor adds i to the "volume_factor" field.
func (cu *ChannelUpdate) AddVolumeFactor(i int32) *ChannelUpdate {
	cu.mutation.AddVolumeFactor(i)
	return cu
}

// SetEnName sets the "en_name" field.
func (cu *ChannelUpdate) SetEnName(s string) *ChannelUpdate {
	cu.mutation.SetEnName(s)
	return cu
}

// SetNillableEnName sets the "en_name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableEnName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetEnName(*s)
	}
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *ChannelUpdate) SetDisplayName(s string) *ChannelUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDisplayName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (cu *ChannelUpdate) SetHasTrackingNumber(i int8) *ChannelUpdate {
	cu.mutation.ResetHasTrackingNumber()
	cu.mutation.SetHasTrackingNumber(i)
	return cu
}

// SetNillableHasTrackingNumber sets the "has_tracking_number" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableHasTrackingNumber(i *int8) *ChannelUpdate {
	if i != nil {
		cu.SetHasTrackingNumber(*i)
	}
	return cu
}

// AddHasTrackingNumber adds i to the "has_tracking_number" field.
func (cu *ChannelUpdate) AddHasTrackingNumber(i int8) *ChannelUpdate {
	cu.mutation.AddHasTrackingNumber(i)
	return cu
}

// SetMinNormalDays sets the "min_normal_days" field.
func (cu *ChannelUpdate) SetMinNormalDays(i int32) *ChannelUpdate {
	cu.mutation.ResetMinNormalDays()
	cu.mutation.SetMinNormalDays(i)
	return cu
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMinNormalDays(i *int32) *ChannelUpdate {
	if i != nil {
		cu.SetMinNormalDays(*i)
	}
	return cu
}

// AddMinNormalDays adds i to the "min_normal_days" field.
func (cu *ChannelUpdate) AddMinNormalDays(i int32) *ChannelUpdate {
	cu.mutation.AddMinNormalDays(i)
	return cu
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (cu *ChannelUpdate) SetMaxNormalDays(i int32) *ChannelUpdate {
	cu.mutation.ResetMaxNormalDays()
	cu.mutation.SetMaxNormalDays(i)
	return cu
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMaxNormalDays(i *int32) *ChannelUpdate {
	if i != nil {
		cu.SetMaxNormalDays(*i)
	}
	return cu
}

// AddMaxNormalDays adds i to the "max_normal_days" field.
func (cu *ChannelUpdate) AddMaxNormalDays(i int32) *ChannelUpdate {
	cu.mutation.AddMaxNormalDays(i)
	return cu
}

// SetMaxWeight sets the "max_weight" field.
func (cu *ChannelUpdate) SetMaxWeight(i int) *ChannelUpdate {
	cu.mutation.ResetMaxWeight()
	cu.mutation.SetMaxWeight(i)
	return cu
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMaxWeight(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetMaxWeight(*i)
	}
	return cu
}

// AddMaxWeight adds i to the "max_weight" field.
func (cu *ChannelUpdate) AddMaxWeight(i int) *ChannelUpdate {
	cu.mutation.AddMaxWeight(i)
	return cu
}

// SetMaxLength sets the "max_length" field.
func (cu *ChannelUpdate) SetMaxLength(i int) *ChannelUpdate {
	cu.mutation.ResetMaxLength()
	cu.mutation.SetMaxLength(i)
	return cu
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMaxLength(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetMaxLength(*i)
	}
	return cu
}

// AddMaxLength adds i to the "max_length" field.
func (cu *ChannelUpdate) AddMaxLength(i int) *ChannelUpdate {
	cu.mutation.AddMaxLength(i)
	return cu
}

// SetMinLength sets the "min_length" field.
func (cu *ChannelUpdate) SetMinLength(i int) *ChannelUpdate {
	cu.mutation.ResetMinLength()
	cu.mutation.SetMinLength(i)
	return cu
}

// SetNillableMinLength sets the "min_length" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMinLength(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetMinLength(*i)
	}
	return cu
}

// AddMinLength adds i to the "min_length" field.
func (cu *ChannelUpdate) AddMinLength(i int) *ChannelUpdate {
	cu.mutation.AddMinLength(i)
	return cu
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (cu *ChannelUpdate) SetMaxThreeSideSum(i int) *ChannelUpdate {
	cu.mutation.ResetMaxThreeSideSum()
	cu.mutation.SetMaxThreeSideSum(i)
	return cu
}

// SetNillableMaxThreeSideSum sets the "max_three_side_sum" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableMaxThreeSideSum(i *int) *ChannelUpdate {
	if i != nil {
		cu.SetMaxThreeSideSum(*i)
	}
	return cu
}

// AddMaxThreeSideSum adds i to the "max_three_side_sum" field.
func (cu *ChannelUpdate) AddMaxThreeSideSum(i int) *ChannelUpdate {
	cu.mutation.AddMaxThreeSideSum(i)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChannelUpdate) SetDescription(s string) *ChannelUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDescription(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetSortingPort sets the "sorting_port" field.
func (cu *ChannelUpdate) SetSortingPort(i int32) *ChannelUpdate {
	cu.mutation.ResetSortingPort()
	cu.mutation.SetSortingPort(i)
	return cu
}

// SetNillableSortingPort sets the "sorting_port" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableSortingPort(i *int32) *ChannelUpdate {
	if i != nil {
		cu.SetSortingPort(*i)
	}
	return cu
}

// AddSortingPort adds i to the "sorting_port" field.
func (cu *ChannelUpdate) AddSortingPort(i int32) *ChannelUpdate {
	cu.mutation.AddSortingPort(i)
	return cu
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (cu *ChannelUpdate) SetPrepayTariff(b bool) *ChannelUpdate {
	cu.mutation.SetPrepayTariff(b)
	return cu
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillablePrepayTariff(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetPrepayTariff(*b)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *ChannelUpdate) SetStatus(i int8) *ChannelUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableStatus(i *int8) *ChannelUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *ChannelUpdate) AddStatus(i int8) *ChannelUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// SetTest sets the "test" field.
func (cu *ChannelUpdate) SetTest(b bool) *ChannelUpdate {
	cu.mutation.SetTest(b)
	return cu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableTest(b *bool) *ChannelUpdate {
	if b != nil {
		cu.SetTest(*b)
	}
	return cu
}

// SetOptions sets the "options" field.
func (cu *ChannelUpdate) SetOptions(s string) *ChannelUpdate {
	cu.mutation.SetOptions(s)
	return cu
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableOptions(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetOptions(*s)
	}
	return cu
}

// ClearOptions clears the value of the "options" field.
func (cu *ChannelUpdate) ClearOptions() *ChannelUpdate {
	cu.mutation.ClearOptions()
	return cu
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (cu *ChannelUpdate) SetExcludeAttributes(s string) *ChannelUpdate {
	cu.mutation.SetExcludeAttributes(s)
	return cu
}

// SetNillableExcludeAttributes sets the "exclude_attributes" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableExcludeAttributes(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetExcludeAttributes(*s)
	}
	return cu
}

// ClearExcludeAttributes clears the value of the "exclude_attributes" field.
func (cu *ChannelUpdate) ClearExcludeAttributes() *ChannelUpdate {
	cu.mutation.ClearExcludeAttributes()
	return cu
}

// SetBattery sets the "battery" field.
func (cu *ChannelUpdate) SetBattery(i int8) *ChannelUpdate {
	cu.mutation.ResetBattery()
	cu.mutation.SetBattery(i)
	return cu
}

// AddBattery adds i to the "battery" field.
func (cu *ChannelUpdate) AddBattery(i int8) *ChannelUpdate {
	cu.mutation.AddBattery(i)
	return cu
}

// SetVirtual sets the "virtual" field.
func (cu *ChannelUpdate) SetVirtual(i int8) *ChannelUpdate {
	cu.mutation.ResetVirtual()
	cu.mutation.SetVirtual(i)
	return cu
}

// SetNillableVirtual sets the "virtual" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableVirtual(i *int8) *ChannelUpdate {
	if i != nil {
		cu.SetVirtual(*i)
	}
	return cu
}

// AddVirtual adds i to the "virtual" field.
func (cu *ChannelUpdate) AddVirtual(i int8) *ChannelUpdate {
	cu.mutation.AddVirtual(i)
	return cu
}

// SetChannelType sets the "channel_type" field.
func (cu *ChannelUpdate) SetChannelType(i int8) *ChannelUpdate {
	cu.mutation.ResetChannelType()
	cu.mutation.SetChannelType(i)
	return cu
}

// SetNillableChannelType sets the "channel_type" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableChannelType(i *int8) *ChannelUpdate {
	if i != nil {
		cu.SetChannelType(*i)
	}
	return cu
}

// AddChannelType adds i to the "channel_type" field.
func (cu *ChannelUpdate) AddChannelType(i int8) *ChannelUpdate {
	cu.mutation.AddChannelType(i)
	return cu
}

// SetDeliverDuty sets the "deliver_duty" field.
func (cu *ChannelUpdate) SetDeliverDuty(s string) *ChannelUpdate {
	cu.mutation.SetDeliverDuty(s)
	return cu
}

// SetNillableDeliverDuty sets the "deliver_duty" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDeliverDuty(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDeliverDuty(*s)
	}
	return cu
}

// SetSpecial sets the "special" field.
func (cu *ChannelUpdate) SetSpecial(i int8) *ChannelUpdate {
	cu.mutation.ResetSpecial()
	cu.mutation.SetSpecial(i)
	return cu
}

// SetNillableSpecial sets the "special" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableSpecial(i *int8) *ChannelUpdate {
	if i != nil {
		cu.SetSpecial(*i)
	}
	return cu
}

// AddSpecial adds i to the "special" field.
func (cu *ChannelUpdate) AddSpecial(i int8) *ChannelUpdate {
	cu.mutation.AddSpecial(i)
	return cu
}

// AddChannelCostIDs adds the "channel_costs" edge to the ChannelCost entity by IDs.
func (cu *ChannelUpdate) AddChannelCostIDs(ids ...int64) *ChannelUpdate {
	cu.mutation.AddChannelCostIDs(ids...)
	return cu
}

// AddChannelCosts adds the "channel_costs" edges to the ChannelCost entity.
func (cu *ChannelUpdate) AddChannelCosts(c ...*ChannelCost) *ChannelUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddChannelCostIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *ChannelUpdate) AddOrderIDs(ids ...int64) *ChannelUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *ChannelUpdate) AddOrders(o ...*Order) *ChannelUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// ClearChannelCosts clears all "channel_costs" edges to the ChannelCost entity.
func (cu *ChannelUpdate) ClearChannelCosts() *ChannelUpdate {
	cu.mutation.ClearChannelCosts()
	return cu
}

// RemoveChannelCostIDs removes the "channel_costs" edge to ChannelCost entities by IDs.
func (cu *ChannelUpdate) RemoveChannelCostIDs(ids ...int64) *ChannelUpdate {
	cu.mutation.RemoveChannelCostIDs(ids...)
	return cu
}

// RemoveChannelCosts removes "channel_costs" edges to ChannelCost entities.
func (cu *ChannelUpdate) RemoveChannelCosts(c ...*ChannelCost) *ChannelUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveChannelCostIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *ChannelUpdate) ClearOrders() *ChannelUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *ChannelUpdate) RemoveOrderIDs(ids ...int64) *ChannelUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *ChannelUpdate) RemoveOrders(o ...*Order) *ChannelUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChannelUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := channel.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChannelUpdate) check() error {
	if v, ok := cu.mutation.CourierPlatform(); ok {
		if err := channel.CourierPlatformValidator(v); err != nil {
			return &ValidationError{Name: "courier_platform", err: fmt.Errorf(`gen: validator failed for field "Channel.courier_platform": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := channel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Channel.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Code(); ok {
		if err := channel.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`gen: validator failed for field "Channel.code": %w`, err)}
		}
	}
	if v, ok := cu.mutation.QuotationCurrency(); ok {
		if err := channel.QuotationCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "quotation_currency", err: fmt.Errorf(`gen: validator failed for field "Channel.quotation_currency": %w`, err)}
		}
	}
	if v, ok := cu.mutation.EnName(); ok {
		if err := channel.EnNameValidator(v); err != nil {
			return &ValidationError{Name: "en_name", err: fmt.Errorf(`gen: validator failed for field "Channel.en_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`gen: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ChannelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channel.Table,
			Columns: channel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channel.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(channel.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(channel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.WarehouseID(); ok {
		_spec.SetField(channel.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedWarehouseID(); ok {
		_spec.AddField(channel.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.CourierPlatform(); ok {
		_spec.SetField(channel.FieldCourierPlatform, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(channel.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(channel.FieldType, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.QuotationCurrency(); ok {
		_spec.SetField(channel.FieldQuotationCurrency, field.TypeString, value)
	}
	if value, ok := cu.mutation.VolumeFactor(); ok {
		_spec.SetField(channel.FieldVolumeFactor, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedVolumeFactor(); ok {
		_spec.AddField(channel.FieldVolumeFactor, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.EnName(); ok {
		_spec.SetField(channel.FieldEnName, field.TypeString, value)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cu.mutation.HasTrackingNumber(); ok {
		_spec.SetField(channel.FieldHasTrackingNumber, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedHasTrackingNumber(); ok {
		_spec.AddField(channel.FieldHasTrackingNumber, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.MinNormalDays(); ok {
		_spec.SetField(channel.FieldMinNormalDays, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedMinNormalDays(); ok {
		_spec.AddField(channel.FieldMinNormalDays, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.MaxNormalDays(); ok {
		_spec.SetField(channel.FieldMaxNormalDays, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedMaxNormalDays(); ok {
		_spec.AddField(channel.FieldMaxNormalDays, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.MaxWeight(); ok {
		_spec.SetField(channel.FieldMaxWeight, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxWeight(); ok {
		_spec.AddField(channel.FieldMaxWeight, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MaxLength(); ok {
		_spec.SetField(channel.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxLength(); ok {
		_spec.AddField(channel.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MinLength(); ok {
		_spec.SetField(channel.FieldMinLength, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMinLength(); ok {
		_spec.AddField(channel.FieldMinLength, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MaxThreeSideSum(); ok {
		_spec.SetField(channel.FieldMaxThreeSideSum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxThreeSideSum(); ok {
		_spec.AddField(channel.FieldMaxThreeSideSum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(channel.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.SortingPort(); ok {
		_spec.SetField(channel.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedSortingPort(); ok {
		_spec.AddField(channel.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.PrepayTariff(); ok {
		_spec.SetField(channel.FieldPrepayTariff, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.Test(); ok {
		_spec.SetField(channel.FieldTest, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Options(); ok {
		_spec.SetField(channel.FieldOptions, field.TypeString, value)
	}
	if cu.mutation.OptionsCleared() {
		_spec.ClearField(channel.FieldOptions, field.TypeString)
	}
	if value, ok := cu.mutation.ExcludeAttributes(); ok {
		_spec.SetField(channel.FieldExcludeAttributes, field.TypeString, value)
	}
	if cu.mutation.ExcludeAttributesCleared() {
		_spec.ClearField(channel.FieldExcludeAttributes, field.TypeString)
	}
	if value, ok := cu.mutation.Battery(); ok {
		_spec.SetField(channel.FieldBattery, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedBattery(); ok {
		_spec.AddField(channel.FieldBattery, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.Virtual(); ok {
		_spec.SetField(channel.FieldVirtual, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedVirtual(); ok {
		_spec.AddField(channel.FieldVirtual, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.ChannelType(); ok {
		_spec.SetField(channel.FieldChannelType, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedChannelType(); ok {
		_spec.AddField(channel.FieldChannelType, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.DeliverDuty(); ok {
		_spec.SetField(channel.FieldDeliverDuty, field.TypeString, value)
	}
	if value, ok := cu.mutation.Special(); ok {
		_spec.SetField(channel.FieldSpecial, field.TypeInt8, value)
	}
	if value, ok := cu.mutation.AddedSpecial(); ok {
		_spec.AddField(channel.FieldSpecial, field.TypeInt8, value)
	}
	if cu.mutation.ChannelCostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.ChannelCost
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedChannelCostsIDs(); len(nodes) > 0 && !cu.mutation.ChannelCostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChannelCostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cu.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Channel
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChannelUpdateOne) SetUpdatedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ChannelUpdateOne) SetDeletedAt(t time.Time) *ChannelUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDeletedAt(t *time.Time) *ChannelUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ChannelUpdateOne) ClearDeletedAt() *ChannelUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (cuo *ChannelUpdateOne) SetWarehouseID(i int64) *ChannelUpdateOne {
	cuo.mutation.ResetWarehouseID()
	cuo.mutation.SetWarehouseID(i)
	return cuo
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableWarehouseID(i *int64) *ChannelUpdateOne {
	if i != nil {
		cuo.SetWarehouseID(*i)
	}
	return cuo
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (cuo *ChannelUpdateOne) AddWarehouseID(i int64) *ChannelUpdateOne {
	cuo.mutation.AddWarehouseID(i)
	return cuo
}

// SetCourierPlatform sets the "courier_platform" field.
func (cuo *ChannelUpdateOne) SetCourierPlatform(s string) *ChannelUpdateOne {
	cuo.mutation.SetCourierPlatform(s)
	return cuo
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableCourierPlatform(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetCourierPlatform(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ChannelUpdateOne) SetName(s string) *ChannelUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCode sets the "code" field.
func (cuo *ChannelUpdateOne) SetCode(s string) *ChannelUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ChannelUpdateOne) SetType(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *ChannelUpdateOne) AddType(i int8) *ChannelUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (cuo *ChannelUpdateOne) SetQuotationCurrency(s string) *ChannelUpdateOne {
	cuo.mutation.SetQuotationCurrency(s)
	return cuo
}

// SetNillableQuotationCurrency sets the "quotation_currency" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableQuotationCurrency(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetQuotationCurrency(*s)
	}
	return cuo
}

// SetVolumeFactor sets the "volume_factor" field.
func (cuo *ChannelUpdateOne) SetVolumeFactor(i int32) *ChannelUpdateOne {
	cuo.mutation.ResetVolumeFactor()
	cuo.mutation.SetVolumeFactor(i)
	return cuo
}

// SetNillableVolumeFactor sets the "volume_factor" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableVolumeFactor(i *int32) *ChannelUpdateOne {
	if i != nil {
		cuo.SetVolumeFactor(*i)
	}
	return cuo
}

// AddVolumeFactor adds i to the "volume_factor" field.
func (cuo *ChannelUpdateOne) AddVolumeFactor(i int32) *ChannelUpdateOne {
	cuo.mutation.AddVolumeFactor(i)
	return cuo
}

// SetEnName sets the "en_name" field.
func (cuo *ChannelUpdateOne) SetEnName(s string) *ChannelUpdateOne {
	cuo.mutation.SetEnName(s)
	return cuo
}

// SetNillableEnName sets the "en_name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableEnName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetEnName(*s)
	}
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *ChannelUpdateOne) SetDisplayName(s string) *ChannelUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDisplayName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (cuo *ChannelUpdateOne) SetHasTrackingNumber(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetHasTrackingNumber()
	cuo.mutation.SetHasTrackingNumber(i)
	return cuo
}

// SetNillableHasTrackingNumber sets the "has_tracking_number" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableHasTrackingNumber(i *int8) *ChannelUpdateOne {
	if i != nil {
		cuo.SetHasTrackingNumber(*i)
	}
	return cuo
}

// AddHasTrackingNumber adds i to the "has_tracking_number" field.
func (cuo *ChannelUpdateOne) AddHasTrackingNumber(i int8) *ChannelUpdateOne {
	cuo.mutation.AddHasTrackingNumber(i)
	return cuo
}

// SetMinNormalDays sets the "min_normal_days" field.
func (cuo *ChannelUpdateOne) SetMinNormalDays(i int32) *ChannelUpdateOne {
	cuo.mutation.ResetMinNormalDays()
	cuo.mutation.SetMinNormalDays(i)
	return cuo
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMinNormalDays(i *int32) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMinNormalDays(*i)
	}
	return cuo
}

// AddMinNormalDays adds i to the "min_normal_days" field.
func (cuo *ChannelUpdateOne) AddMinNormalDays(i int32) *ChannelUpdateOne {
	cuo.mutation.AddMinNormalDays(i)
	return cuo
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (cuo *ChannelUpdateOne) SetMaxNormalDays(i int32) *ChannelUpdateOne {
	cuo.mutation.ResetMaxNormalDays()
	cuo.mutation.SetMaxNormalDays(i)
	return cuo
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMaxNormalDays(i *int32) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMaxNormalDays(*i)
	}
	return cuo
}

// AddMaxNormalDays adds i to the "max_normal_days" field.
func (cuo *ChannelUpdateOne) AddMaxNormalDays(i int32) *ChannelUpdateOne {
	cuo.mutation.AddMaxNormalDays(i)
	return cuo
}

// SetMaxWeight sets the "max_weight" field.
func (cuo *ChannelUpdateOne) SetMaxWeight(i int) *ChannelUpdateOne {
	cuo.mutation.ResetMaxWeight()
	cuo.mutation.SetMaxWeight(i)
	return cuo
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMaxWeight(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMaxWeight(*i)
	}
	return cuo
}

// AddMaxWeight adds i to the "max_weight" field.
func (cuo *ChannelUpdateOne) AddMaxWeight(i int) *ChannelUpdateOne {
	cuo.mutation.AddMaxWeight(i)
	return cuo
}

// SetMaxLength sets the "max_length" field.
func (cuo *ChannelUpdateOne) SetMaxLength(i int) *ChannelUpdateOne {
	cuo.mutation.ResetMaxLength()
	cuo.mutation.SetMaxLength(i)
	return cuo
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMaxLength(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMaxLength(*i)
	}
	return cuo
}

// AddMaxLength adds i to the "max_length" field.
func (cuo *ChannelUpdateOne) AddMaxLength(i int) *ChannelUpdateOne {
	cuo.mutation.AddMaxLength(i)
	return cuo
}

// SetMinLength sets the "min_length" field.
func (cuo *ChannelUpdateOne) SetMinLength(i int) *ChannelUpdateOne {
	cuo.mutation.ResetMinLength()
	cuo.mutation.SetMinLength(i)
	return cuo
}

// SetNillableMinLength sets the "min_length" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMinLength(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMinLength(*i)
	}
	return cuo
}

// AddMinLength adds i to the "min_length" field.
func (cuo *ChannelUpdateOne) AddMinLength(i int) *ChannelUpdateOne {
	cuo.mutation.AddMinLength(i)
	return cuo
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (cuo *ChannelUpdateOne) SetMaxThreeSideSum(i int) *ChannelUpdateOne {
	cuo.mutation.ResetMaxThreeSideSum()
	cuo.mutation.SetMaxThreeSideSum(i)
	return cuo
}

// SetNillableMaxThreeSideSum sets the "max_three_side_sum" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableMaxThreeSideSum(i *int) *ChannelUpdateOne {
	if i != nil {
		cuo.SetMaxThreeSideSum(*i)
	}
	return cuo
}

// AddMaxThreeSideSum adds i to the "max_three_side_sum" field.
func (cuo *ChannelUpdateOne) AddMaxThreeSideSum(i int) *ChannelUpdateOne {
	cuo.mutation.AddMaxThreeSideSum(i)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChannelUpdateOne) SetDescription(s string) *ChannelUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDescription(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetSortingPort sets the "sorting_port" field.
func (cuo *ChannelUpdateOne) SetSortingPort(i int32) *ChannelUpdateOne {
	cuo.mutation.ResetSortingPort()
	cuo.mutation.SetSortingPort(i)
	return cuo
}

// SetNillableSortingPort sets the "sorting_port" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableSortingPort(i *int32) *ChannelUpdateOne {
	if i != nil {
		cuo.SetSortingPort(*i)
	}
	return cuo
}

// AddSortingPort adds i to the "sorting_port" field.
func (cuo *ChannelUpdateOne) AddSortingPort(i int32) *ChannelUpdateOne {
	cuo.mutation.AddSortingPort(i)
	return cuo
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (cuo *ChannelUpdateOne) SetPrepayTariff(b bool) *ChannelUpdateOne {
	cuo.mutation.SetPrepayTariff(b)
	return cuo
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillablePrepayTariff(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetPrepayTariff(*b)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ChannelUpdateOne) SetStatus(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableStatus(i *int8) *ChannelUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *ChannelUpdateOne) AddStatus(i int8) *ChannelUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// SetTest sets the "test" field.
func (cuo *ChannelUpdateOne) SetTest(b bool) *ChannelUpdateOne {
	cuo.mutation.SetTest(b)
	return cuo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableTest(b *bool) *ChannelUpdateOne {
	if b != nil {
		cuo.SetTest(*b)
	}
	return cuo
}

// SetOptions sets the "options" field.
func (cuo *ChannelUpdateOne) SetOptions(s string) *ChannelUpdateOne {
	cuo.mutation.SetOptions(s)
	return cuo
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableOptions(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetOptions(*s)
	}
	return cuo
}

// ClearOptions clears the value of the "options" field.
func (cuo *ChannelUpdateOne) ClearOptions() *ChannelUpdateOne {
	cuo.mutation.ClearOptions()
	return cuo
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (cuo *ChannelUpdateOne) SetExcludeAttributes(s string) *ChannelUpdateOne {
	cuo.mutation.SetExcludeAttributes(s)
	return cuo
}

// SetNillableExcludeAttributes sets the "exclude_attributes" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableExcludeAttributes(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetExcludeAttributes(*s)
	}
	return cuo
}

// ClearExcludeAttributes clears the value of the "exclude_attributes" field.
func (cuo *ChannelUpdateOne) ClearExcludeAttributes() *ChannelUpdateOne {
	cuo.mutation.ClearExcludeAttributes()
	return cuo
}

// SetBattery sets the "battery" field.
func (cuo *ChannelUpdateOne) SetBattery(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetBattery()
	cuo.mutation.SetBattery(i)
	return cuo
}

// AddBattery adds i to the "battery" field.
func (cuo *ChannelUpdateOne) AddBattery(i int8) *ChannelUpdateOne {
	cuo.mutation.AddBattery(i)
	return cuo
}

// SetVirtual sets the "virtual" field.
func (cuo *ChannelUpdateOne) SetVirtual(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetVirtual()
	cuo.mutation.SetVirtual(i)
	return cuo
}

// SetNillableVirtual sets the "virtual" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableVirtual(i *int8) *ChannelUpdateOne {
	if i != nil {
		cuo.SetVirtual(*i)
	}
	return cuo
}

// AddVirtual adds i to the "virtual" field.
func (cuo *ChannelUpdateOne) AddVirtual(i int8) *ChannelUpdateOne {
	cuo.mutation.AddVirtual(i)
	return cuo
}

// SetChannelType sets the "channel_type" field.
func (cuo *ChannelUpdateOne) SetChannelType(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetChannelType()
	cuo.mutation.SetChannelType(i)
	return cuo
}

// SetNillableChannelType sets the "channel_type" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableChannelType(i *int8) *ChannelUpdateOne {
	if i != nil {
		cuo.SetChannelType(*i)
	}
	return cuo
}

// AddChannelType adds i to the "channel_type" field.
func (cuo *ChannelUpdateOne) AddChannelType(i int8) *ChannelUpdateOne {
	cuo.mutation.AddChannelType(i)
	return cuo
}

// SetDeliverDuty sets the "deliver_duty" field.
func (cuo *ChannelUpdateOne) SetDeliverDuty(s string) *ChannelUpdateOne {
	cuo.mutation.SetDeliverDuty(s)
	return cuo
}

// SetNillableDeliverDuty sets the "deliver_duty" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDeliverDuty(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDeliverDuty(*s)
	}
	return cuo
}

// SetSpecial sets the "special" field.
func (cuo *ChannelUpdateOne) SetSpecial(i int8) *ChannelUpdateOne {
	cuo.mutation.ResetSpecial()
	cuo.mutation.SetSpecial(i)
	return cuo
}

// SetNillableSpecial sets the "special" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableSpecial(i *int8) *ChannelUpdateOne {
	if i != nil {
		cuo.SetSpecial(*i)
	}
	return cuo
}

// AddSpecial adds i to the "special" field.
func (cuo *ChannelUpdateOne) AddSpecial(i int8) *ChannelUpdateOne {
	cuo.mutation.AddSpecial(i)
	return cuo
}

// AddChannelCostIDs adds the "channel_costs" edge to the ChannelCost entity by IDs.
func (cuo *ChannelUpdateOne) AddChannelCostIDs(ids ...int64) *ChannelUpdateOne {
	cuo.mutation.AddChannelCostIDs(ids...)
	return cuo
}

// AddChannelCosts adds the "channel_costs" edges to the ChannelCost entity.
func (cuo *ChannelUpdateOne) AddChannelCosts(c ...*ChannelCost) *ChannelUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddChannelCostIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *ChannelUpdateOne) AddOrderIDs(ids ...int64) *ChannelUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *ChannelUpdateOne) AddOrders(o ...*Order) *ChannelUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// ClearChannelCosts clears all "channel_costs" edges to the ChannelCost entity.
func (cuo *ChannelUpdateOne) ClearChannelCosts() *ChannelUpdateOne {
	cuo.mutation.ClearChannelCosts()
	return cuo
}

// RemoveChannelCostIDs removes the "channel_costs" edge to ChannelCost entities by IDs.
func (cuo *ChannelUpdateOne) RemoveChannelCostIDs(ids ...int64) *ChannelUpdateOne {
	cuo.mutation.RemoveChannelCostIDs(ids...)
	return cuo
}

// RemoveChannelCosts removes "channel_costs" edges to ChannelCost entities.
func (cuo *ChannelUpdateOne) RemoveChannelCosts(c ...*ChannelCost) *ChannelUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveChannelCostIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *ChannelUpdateOne) ClearOrders() *ChannelUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *ChannelUpdateOne) RemoveOrderIDs(ids ...int64) *ChannelUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *ChannelUpdateOne) RemoveOrders(o ...*Order) *ChannelUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	var (
		err  error
		node *Channel
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Channel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChannelUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := channel.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChannelUpdateOne) check() error {
	if v, ok := cuo.mutation.CourierPlatform(); ok {
		if err := channel.CourierPlatformValidator(v); err != nil {
			return &ValidationError{Name: "courier_platform", err: fmt.Errorf(`gen: validator failed for field "Channel.courier_platform": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := channel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Channel.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Code(); ok {
		if err := channel.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`gen: validator failed for field "Channel.code": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.QuotationCurrency(); ok {
		if err := channel.QuotationCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "quotation_currency", err: fmt.Errorf(`gen: validator failed for field "Channel.quotation_currency": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.EnName(); ok {
		if err := channel.EnNameValidator(v); err != nil {
			return &ValidationError{Name: "en_name", err: fmt.Errorf(`gen: validator failed for field "Channel.en_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`gen: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ChannelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channel.Table,
			Columns: channel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channel.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(channel.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(channel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.WarehouseID(); ok {
		_spec.SetField(channel.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedWarehouseID(); ok {
		_spec.AddField(channel.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.CourierPlatform(); ok {
		_spec.SetField(channel.FieldCourierPlatform, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(channel.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(channel.FieldType, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.QuotationCurrency(); ok {
		_spec.SetField(channel.FieldQuotationCurrency, field.TypeString, value)
	}
	if value, ok := cuo.mutation.VolumeFactor(); ok {
		_spec.SetField(channel.FieldVolumeFactor, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedVolumeFactor(); ok {
		_spec.AddField(channel.FieldVolumeFactor, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.EnName(); ok {
		_spec.SetField(channel.FieldEnName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.HasTrackingNumber(); ok {
		_spec.SetField(channel.FieldHasTrackingNumber, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedHasTrackingNumber(); ok {
		_spec.AddField(channel.FieldHasTrackingNumber, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.MinNormalDays(); ok {
		_spec.SetField(channel.FieldMinNormalDays, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedMinNormalDays(); ok {
		_spec.AddField(channel.FieldMinNormalDays, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.MaxNormalDays(); ok {
		_spec.SetField(channel.FieldMaxNormalDays, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedMaxNormalDays(); ok {
		_spec.AddField(channel.FieldMaxNormalDays, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.MaxWeight(); ok {
		_spec.SetField(channel.FieldMaxWeight, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxWeight(); ok {
		_spec.AddField(channel.FieldMaxWeight, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MaxLength(); ok {
		_spec.SetField(channel.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxLength(); ok {
		_spec.AddField(channel.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MinLength(); ok {
		_spec.SetField(channel.FieldMinLength, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMinLength(); ok {
		_spec.AddField(channel.FieldMinLength, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MaxThreeSideSum(); ok {
		_spec.SetField(channel.FieldMaxThreeSideSum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxThreeSideSum(); ok {
		_spec.AddField(channel.FieldMaxThreeSideSum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(channel.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SortingPort(); ok {
		_spec.SetField(channel.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedSortingPort(); ok {
		_spec.AddField(channel.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.PrepayTariff(); ok {
		_spec.SetField(channel.FieldPrepayTariff, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(channel.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.Test(); ok {
		_spec.SetField(channel.FieldTest, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Options(); ok {
		_spec.SetField(channel.FieldOptions, field.TypeString, value)
	}
	if cuo.mutation.OptionsCleared() {
		_spec.ClearField(channel.FieldOptions, field.TypeString)
	}
	if value, ok := cuo.mutation.ExcludeAttributes(); ok {
		_spec.SetField(channel.FieldExcludeAttributes, field.TypeString, value)
	}
	if cuo.mutation.ExcludeAttributesCleared() {
		_spec.ClearField(channel.FieldExcludeAttributes, field.TypeString)
	}
	if value, ok := cuo.mutation.Battery(); ok {
		_spec.SetField(channel.FieldBattery, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedBattery(); ok {
		_spec.AddField(channel.FieldBattery, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.Virtual(); ok {
		_spec.SetField(channel.FieldVirtual, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedVirtual(); ok {
		_spec.AddField(channel.FieldVirtual, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.ChannelType(); ok {
		_spec.SetField(channel.FieldChannelType, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedChannelType(); ok {
		_spec.AddField(channel.FieldChannelType, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.DeliverDuty(); ok {
		_spec.SetField(channel.FieldDeliverDuty, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Special(); ok {
		_spec.SetField(channel.FieldSpecial, field.TypeInt8, value)
	}
	if value, ok := cuo.mutation.AddedSpecial(); ok {
		_spec.AddField(channel.FieldSpecial, field.TypeInt8, value)
	}
	if cuo.mutation.ChannelCostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.ChannelCost
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedChannelCostsIDs(); len(nodes) > 0 && !cuo.mutation.ChannelCostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChannelCostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cuo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Channel
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
