// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channelrecommend"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelRecommendUpdate is the builder for updating ChannelRecommend entities.
type ChannelRecommendUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelRecommendMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelRecommendUpdate builder.
func (cru *ChannelRecommendUpdate) Where(ps ...predicate.ChannelRecommend) *ChannelRecommendUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *ChannelRecommendUpdate) SetUpdatedAt(t time.Time) *ChannelRecommendUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetDeletedAt sets the "deleted_at" field.
func (cru *ChannelRecommendUpdate) SetDeletedAt(t time.Time) *ChannelRecommendUpdate {
	cru.mutation.SetDeletedAt(t)
	return cru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cru *ChannelRecommendUpdate) SetNillableDeletedAt(t *time.Time) *ChannelRecommendUpdate {
	if t != nil {
		cru.SetDeletedAt(*t)
	}
	return cru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cru *ChannelRecommendUpdate) ClearDeletedAt() *ChannelRecommendUpdate {
	cru.mutation.ClearDeletedAt()
	return cru
}

// SetCountryCode sets the "country_code" field.
func (cru *ChannelRecommendUpdate) SetCountryCode(s string) *ChannelRecommendUpdate {
	cru.mutation.SetCountryCode(s)
	return cru
}

// SetChannelID sets the "channel_id" field.
func (cru *ChannelRecommendUpdate) SetChannelID(i int64) *ChannelRecommendUpdate {
	cru.mutation.ResetChannelID()
	cru.mutation.SetChannelID(i)
	return cru
}

// AddChannelID adds i to the "channel_id" field.
func (cru *ChannelRecommendUpdate) AddChannelID(i int64) *ChannelRecommendUpdate {
	cru.mutation.AddChannelID(i)
	return cru
}

// SetIsRecommended sets the "is_recommended" field.
func (cru *ChannelRecommendUpdate) SetIsRecommended(i int8) *ChannelRecommendUpdate {
	cru.mutation.ResetIsRecommended()
	cru.mutation.SetIsRecommended(i)
	return cru
}

// SetNillableIsRecommended sets the "is_recommended" field if the given value is not nil.
func (cru *ChannelRecommendUpdate) SetNillableIsRecommended(i *int8) *ChannelRecommendUpdate {
	if i != nil {
		cru.SetIsRecommended(*i)
	}
	return cru
}

// AddIsRecommended adds i to the "is_recommended" field.
func (cru *ChannelRecommendUpdate) AddIsRecommended(i int8) *ChannelRecommendUpdate {
	cru.mutation.AddIsRecommended(i)
	return cru
}

// SetStatus sets the "status" field.
func (cru *ChannelRecommendUpdate) SetStatus(i int8) *ChannelRecommendUpdate {
	cru.mutation.ResetStatus()
	cru.mutation.SetStatus(i)
	return cru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cru *ChannelRecommendUpdate) SetNillableStatus(i *int8) *ChannelRecommendUpdate {
	if i != nil {
		cru.SetStatus(*i)
	}
	return cru
}

// AddStatus adds i to the "status" field.
func (cru *ChannelRecommendUpdate) AddStatus(i int8) *ChannelRecommendUpdate {
	cru.mutation.AddStatus(i)
	return cru
}

// SetValue sets the "value" field.
func (cru *ChannelRecommendUpdate) SetValue(s string) *ChannelRecommendUpdate {
	cru.mutation.SetValue(s)
	return cru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cru *ChannelRecommendUpdate) SetNillableValue(s *string) *ChannelRecommendUpdate {
	if s != nil {
		cru.SetValue(*s)
	}
	return cru
}

// Mutation returns the ChannelRecommendMutation object of the builder.
func (cru *ChannelRecommendUpdate) Mutation() *ChannelRecommendMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ChannelRecommendUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cru.defaults()
	if len(cru.hooks) == 0 {
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelRecommendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			if cru.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ChannelRecommendUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ChannelRecommendUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ChannelRecommendUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *ChannelRecommendUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := channelrecommend.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *ChannelRecommendUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelRecommendUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *ChannelRecommendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelrecommend.Table,
			Columns: channelrecommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelrecommend.FieldID,
			},
		},
	}
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(channelrecommend.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.DeletedAt(); ok {
		_spec.SetField(channelrecommend.FieldDeletedAt, field.TypeTime, value)
	}
	if cru.mutation.DeletedAtCleared() {
		_spec.ClearField(channelrecommend.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cru.mutation.CountryCode(); ok {
		_spec.SetField(channelrecommend.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := cru.mutation.ChannelID(); ok {
		_spec.SetField(channelrecommend.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.AddedChannelID(); ok {
		_spec.AddField(channelrecommend.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cru.mutation.IsRecommended(); ok {
		_spec.SetField(channelrecommend.FieldIsRecommended, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.AddedIsRecommended(); ok {
		_spec.AddField(channelrecommend.FieldIsRecommended, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.Status(); ok {
		_spec.SetField(channelrecommend.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.AddedStatus(); ok {
		_spec.AddField(channelrecommend.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.Value(); ok {
		_spec.SetField(channelrecommend.FieldValue, field.TypeString, value)
	}
	_spec.Node.Schema = cru.schemaConfig.ChannelRecommend
	ctx = internal.NewSchemaConfigContext(ctx, cru.schemaConfig)
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelrecommend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChannelRecommendUpdateOne is the builder for updating a single ChannelRecommend entity.
type ChannelRecommendUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelRecommendMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *ChannelRecommendUpdateOne) SetUpdatedAt(t time.Time) *ChannelRecommendUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetDeletedAt sets the "deleted_at" field.
func (cruo *ChannelRecommendUpdateOne) SetDeletedAt(t time.Time) *ChannelRecommendUpdateOne {
	cruo.mutation.SetDeletedAt(t)
	return cruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cruo *ChannelRecommendUpdateOne) SetNillableDeletedAt(t *time.Time) *ChannelRecommendUpdateOne {
	if t != nil {
		cruo.SetDeletedAt(*t)
	}
	return cruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cruo *ChannelRecommendUpdateOne) ClearDeletedAt() *ChannelRecommendUpdateOne {
	cruo.mutation.ClearDeletedAt()
	return cruo
}

// SetCountryCode sets the "country_code" field.
func (cruo *ChannelRecommendUpdateOne) SetCountryCode(s string) *ChannelRecommendUpdateOne {
	cruo.mutation.SetCountryCode(s)
	return cruo
}

// SetChannelID sets the "channel_id" field.
func (cruo *ChannelRecommendUpdateOne) SetChannelID(i int64) *ChannelRecommendUpdateOne {
	cruo.mutation.ResetChannelID()
	cruo.mutation.SetChannelID(i)
	return cruo
}

// AddChannelID adds i to the "channel_id" field.
func (cruo *ChannelRecommendUpdateOne) AddChannelID(i int64) *ChannelRecommendUpdateOne {
	cruo.mutation.AddChannelID(i)
	return cruo
}

// SetIsRecommended sets the "is_recommended" field.
func (cruo *ChannelRecommendUpdateOne) SetIsRecommended(i int8) *ChannelRecommendUpdateOne {
	cruo.mutation.ResetIsRecommended()
	cruo.mutation.SetIsRecommended(i)
	return cruo
}

// SetNillableIsRecommended sets the "is_recommended" field if the given value is not nil.
func (cruo *ChannelRecommendUpdateOne) SetNillableIsRecommended(i *int8) *ChannelRecommendUpdateOne {
	if i != nil {
		cruo.SetIsRecommended(*i)
	}
	return cruo
}

// AddIsRecommended adds i to the "is_recommended" field.
func (cruo *ChannelRecommendUpdateOne) AddIsRecommended(i int8) *ChannelRecommendUpdateOne {
	cruo.mutation.AddIsRecommended(i)
	return cruo
}

// SetStatus sets the "status" field.
func (cruo *ChannelRecommendUpdateOne) SetStatus(i int8) *ChannelRecommendUpdateOne {
	cruo.mutation.ResetStatus()
	cruo.mutation.SetStatus(i)
	return cruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cruo *ChannelRecommendUpdateOne) SetNillableStatus(i *int8) *ChannelRecommendUpdateOne {
	if i != nil {
		cruo.SetStatus(*i)
	}
	return cruo
}

// AddStatus adds i to the "status" field.
func (cruo *ChannelRecommendUpdateOne) AddStatus(i int8) *ChannelRecommendUpdateOne {
	cruo.mutation.AddStatus(i)
	return cruo
}

// SetValue sets the "value" field.
func (cruo *ChannelRecommendUpdateOne) SetValue(s string) *ChannelRecommendUpdateOne {
	cruo.mutation.SetValue(s)
	return cruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cruo *ChannelRecommendUpdateOne) SetNillableValue(s *string) *ChannelRecommendUpdateOne {
	if s != nil {
		cruo.SetValue(*s)
	}
	return cruo
}

// Mutation returns the ChannelRecommendMutation object of the builder.
func (cruo *ChannelRecommendUpdateOne) Mutation() *ChannelRecommendMutation {
	return cruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ChannelRecommendUpdateOne) Select(field string, fields ...string) *ChannelRecommendUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ChannelRecommend entity.
func (cruo *ChannelRecommendUpdateOne) Save(ctx context.Context) (*ChannelRecommend, error) {
	var (
		err  error
		node *ChannelRecommend
	)
	cruo.defaults()
	if len(cruo.hooks) == 0 {
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelRecommendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			if cruo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelRecommend)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelRecommendMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ChannelRecommendUpdateOne) SaveX(ctx context.Context) *ChannelRecommend {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ChannelRecommendUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ChannelRecommendUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *ChannelRecommendUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := channelrecommend.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *ChannelRecommendUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelRecommendUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *ChannelRecommendUpdateOne) sqlSave(ctx context.Context) (_node *ChannelRecommend, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelrecommend.Table,
			Columns: channelrecommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelrecommend.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ChannelRecommend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelrecommend.FieldID)
		for _, f := range fields {
			if !channelrecommend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != channelrecommend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(channelrecommend.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.DeletedAt(); ok {
		_spec.SetField(channelrecommend.FieldDeletedAt, field.TypeTime, value)
	}
	if cruo.mutation.DeletedAtCleared() {
		_spec.ClearField(channelrecommend.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cruo.mutation.CountryCode(); ok {
		_spec.SetField(channelrecommend.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := cruo.mutation.ChannelID(); ok {
		_spec.SetField(channelrecommend.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.AddedChannelID(); ok {
		_spec.AddField(channelrecommend.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cruo.mutation.IsRecommended(); ok {
		_spec.SetField(channelrecommend.FieldIsRecommended, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.AddedIsRecommended(); ok {
		_spec.AddField(channelrecommend.FieldIsRecommended, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.Status(); ok {
		_spec.SetField(channelrecommend.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.AddedStatus(); ok {
		_spec.AddField(channelrecommend.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.Value(); ok {
		_spec.SetField(channelrecommend.FieldValue, field.TypeString, value)
	}
	_spec.Node.Schema = cruo.schemaConfig.ChannelRecommend
	ctx = internal.NewSchemaConfigContext(ctx, cruo.schemaConfig)
	_spec.AddModifiers(cruo.modifiers...)
	_node = &ChannelRecommend{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelrecommend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
