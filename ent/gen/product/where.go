// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// Barcode applies equality check predicate on the "barcode" field. It's identical to BarcodeEQ.
func Barcode(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// CustomerCode applies equality check predicate on the "customer_code" field. It's identical to CustomerCodeEQ.
func CustomerCode(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// DeclaredName applies equality check predicate on the "declared_name" field. It's identical to DeclaredNameEQ.
func DeclaredName(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredName), v))
	})
}

// DeclaredCnName applies equality check predicate on the "declared_cn_name" field. It's identical to DeclaredCnNameEQ.
func DeclaredCnName(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredValueInUsd applies equality check predicate on the "declared_value_in_usd" field. It's identical to DeclaredValueInUsdEQ.
func DeclaredValueInUsd(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInEur applies equality check predicate on the "declared_value_in_eur" field. It's identical to DeclaredValueInEurEQ.
func DeclaredValueInEur(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// HsCode applies equality check predicate on the "hs_code" field. It's identical to HsCodeEQ.
func HsCode(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHsCode), v))
	})
}

// Material applies equality check predicate on the "material" field. It's identical to MaterialEQ.
func Material(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterial), v))
	})
}

// Purpose applies equality check predicate on the "purpose" field. It's identical to PurposeEQ.
func Purpose(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurpose), v))
	})
}

// WithBarcode applies equality check predicate on the "with_barcode" field. It's identical to WithBarcodeEQ.
func WithBarcode(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithBarcode), v))
	})
}

// BarcodeService applies equality check predicate on the "barcode_service" field. It's identical to BarcodeServiceEQ.
func BarcodeService(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeService), v))
	})
}

// BarcodeTemplate applies equality check predicate on the "barcode_template" field. It's identical to BarcodeTemplateEQ.
func BarcodeTemplate(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeTemplate), v))
	})
}

// Images applies equality check predicate on the "images" field. It's identical to ImagesEQ.
func Images(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// Attributes applies equality check predicate on the "attributes" field. It's identical to AttributesEQ.
func Attributes(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributes), v))
	})
}

// ConfirmedAttributes applies equality check predicate on the "confirmed_attributes" field. It's identical to ConfirmedAttributesEQ.
func ConfirmedAttributes(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfirmedAttributes), v))
	})
}

// Grams applies equality check predicate on the "grams" field. It's identical to GramsEQ.
func Grams(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// InboundGrams applies equality check predicate on the "inbound_grams" field. It's identical to InboundGramsEQ.
func InboundGrams(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboundGrams), v))
	})
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// MaxAgvQty applies equality check predicate on the "max_agv_qty" field. It's identical to MaxAgvQtyEQ.
func MaxAgvQty(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAgvQty), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSku), v))
	})
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSku), v...))
	})
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSku), v...))
	})
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSku), v))
	})
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSku), v))
	})
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSku), v))
	})
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSku), v))
	})
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSku), v))
	})
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSku), v))
	})
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSku), v))
	})
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSku), v))
	})
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSku), v))
	})
}

// BarcodeEQ applies the EQ predicate on the "barcode" field.
func BarcodeEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// BarcodeNEQ applies the NEQ predicate on the "barcode" field.
func BarcodeNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcode), v))
	})
}

// BarcodeIn applies the In predicate on the "barcode" field.
func BarcodeIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcode), v...))
	})
}

// BarcodeNotIn applies the NotIn predicate on the "barcode" field.
func BarcodeNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcode), v...))
	})
}

// BarcodeGT applies the GT predicate on the "barcode" field.
func BarcodeGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcode), v))
	})
}

// BarcodeGTE applies the GTE predicate on the "barcode" field.
func BarcodeGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcode), v))
	})
}

// BarcodeLT applies the LT predicate on the "barcode" field.
func BarcodeLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcode), v))
	})
}

// BarcodeLTE applies the LTE predicate on the "barcode" field.
func BarcodeLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcode), v))
	})
}

// BarcodeContains applies the Contains predicate on the "barcode" field.
func BarcodeContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcode), v))
	})
}

// BarcodeHasPrefix applies the HasPrefix predicate on the "barcode" field.
func BarcodeHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcode), v))
	})
}

// BarcodeHasSuffix applies the HasSuffix predicate on the "barcode" field.
func BarcodeHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcode), v))
	})
}

// BarcodeEqualFold applies the EqualFold predicate on the "barcode" field.
func BarcodeEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcode), v))
	})
}

// BarcodeContainsFold applies the ContainsFold predicate on the "barcode" field.
func BarcodeContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcode), v))
	})
}

// CustomerCodeEQ applies the EQ predicate on the "customer_code" field.
func CustomerCodeEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeNEQ applies the NEQ predicate on the "customer_code" field.
func CustomerCodeNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeIn applies the In predicate on the "customer_code" field.
func CustomerCodeIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeNotIn applies the NotIn predicate on the "customer_code" field.
func CustomerCodeNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeGT applies the GT predicate on the "customer_code" field.
func CustomerCodeGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeGTE applies the GTE predicate on the "customer_code" field.
func CustomerCodeGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLT applies the LT predicate on the "customer_code" field.
func CustomerCodeLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLTE applies the LTE predicate on the "customer_code" field.
func CustomerCodeLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContains applies the Contains predicate on the "customer_code" field.
func CustomerCodeContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasPrefix applies the HasPrefix predicate on the "customer_code" field.
func CustomerCodeHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasSuffix applies the HasSuffix predicate on the "customer_code" field.
func CustomerCodeHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeEqualFold applies the EqualFold predicate on the "customer_code" field.
func CustomerCodeEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContainsFold applies the ContainsFold predicate on the "customer_code" field.
func CustomerCodeContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerCode), v))
	})
}

// DeclaredNameEQ applies the EQ predicate on the "declared_name" field.
func DeclaredNameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameNEQ applies the NEQ predicate on the "declared_name" field.
func DeclaredNameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameIn applies the In predicate on the "declared_name" field.
func DeclaredNameIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredName), v...))
	})
}

// DeclaredNameNotIn applies the NotIn predicate on the "declared_name" field.
func DeclaredNameNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredName), v...))
	})
}

// DeclaredNameGT applies the GT predicate on the "declared_name" field.
func DeclaredNameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameGTE applies the GTE predicate on the "declared_name" field.
func DeclaredNameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameLT applies the LT predicate on the "declared_name" field.
func DeclaredNameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameLTE applies the LTE predicate on the "declared_name" field.
func DeclaredNameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameContains applies the Contains predicate on the "declared_name" field.
func DeclaredNameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameHasPrefix applies the HasPrefix predicate on the "declared_name" field.
func DeclaredNameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameHasSuffix applies the HasSuffix predicate on the "declared_name" field.
func DeclaredNameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameIsNil applies the IsNil predicate on the "declared_name" field.
func DeclaredNameIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredName)))
	})
}

// DeclaredNameNotNil applies the NotNil predicate on the "declared_name" field.
func DeclaredNameNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredName)))
	})
}

// DeclaredNameEqualFold applies the EqualFold predicate on the "declared_name" field.
func DeclaredNameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeclaredName), v))
	})
}

// DeclaredNameContainsFold applies the ContainsFold predicate on the "declared_name" field.
func DeclaredNameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeclaredName), v))
	})
}

// DeclaredCnNameEQ applies the EQ predicate on the "declared_cn_name" field.
func DeclaredCnNameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameNEQ applies the NEQ predicate on the "declared_cn_name" field.
func DeclaredCnNameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameIn applies the In predicate on the "declared_cn_name" field.
func DeclaredCnNameIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredCnName), v...))
	})
}

// DeclaredCnNameNotIn applies the NotIn predicate on the "declared_cn_name" field.
func DeclaredCnNameNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredCnName), v...))
	})
}

// DeclaredCnNameGT applies the GT predicate on the "declared_cn_name" field.
func DeclaredCnNameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameGTE applies the GTE predicate on the "declared_cn_name" field.
func DeclaredCnNameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameLT applies the LT predicate on the "declared_cn_name" field.
func DeclaredCnNameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameLTE applies the LTE predicate on the "declared_cn_name" field.
func DeclaredCnNameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameContains applies the Contains predicate on the "declared_cn_name" field.
func DeclaredCnNameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameHasPrefix applies the HasPrefix predicate on the "declared_cn_name" field.
func DeclaredCnNameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameHasSuffix applies the HasSuffix predicate on the "declared_cn_name" field.
func DeclaredCnNameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameIsNil applies the IsNil predicate on the "declared_cn_name" field.
func DeclaredCnNameIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredCnName)))
	})
}

// DeclaredCnNameNotNil applies the NotNil predicate on the "declared_cn_name" field.
func DeclaredCnNameNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredCnName)))
	})
}

// DeclaredCnNameEqualFold applies the EqualFold predicate on the "declared_cn_name" field.
func DeclaredCnNameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameContainsFold applies the ContainsFold predicate on the "declared_cn_name" field.
func DeclaredCnNameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredValueInUsdEQ applies the EQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdNEQ applies the NEQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdIn applies the In predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdIn(vs ...float64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdNotIn applies the NotIn predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNotIn(vs ...float64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdGT applies the GT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdGTE applies the GTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLT applies the LT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLTE applies the LTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInEurEQ applies the EQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurNEQ applies the NEQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurIn applies the In predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurIn(vs ...float64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurNotIn applies the NotIn predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNotIn(vs ...float64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurGT applies the GT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurGTE applies the GTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLT applies the LT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLTE applies the LTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// HsCodeEQ applies the EQ predicate on the "hs_code" field.
func HsCodeEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHsCode), v))
	})
}

// HsCodeNEQ applies the NEQ predicate on the "hs_code" field.
func HsCodeNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHsCode), v))
	})
}

// HsCodeIn applies the In predicate on the "hs_code" field.
func HsCodeIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHsCode), v...))
	})
}

// HsCodeNotIn applies the NotIn predicate on the "hs_code" field.
func HsCodeNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHsCode), v...))
	})
}

// HsCodeGT applies the GT predicate on the "hs_code" field.
func HsCodeGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHsCode), v))
	})
}

// HsCodeGTE applies the GTE predicate on the "hs_code" field.
func HsCodeGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHsCode), v))
	})
}

// HsCodeLT applies the LT predicate on the "hs_code" field.
func HsCodeLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHsCode), v))
	})
}

// HsCodeLTE applies the LTE predicate on the "hs_code" field.
func HsCodeLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHsCode), v))
	})
}

// HsCodeContains applies the Contains predicate on the "hs_code" field.
func HsCodeContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHsCode), v))
	})
}

// HsCodeHasPrefix applies the HasPrefix predicate on the "hs_code" field.
func HsCodeHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHsCode), v))
	})
}

// HsCodeHasSuffix applies the HasSuffix predicate on the "hs_code" field.
func HsCodeHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHsCode), v))
	})
}

// HsCodeEqualFold applies the EqualFold predicate on the "hs_code" field.
func HsCodeEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHsCode), v))
	})
}

// HsCodeContainsFold applies the ContainsFold predicate on the "hs_code" field.
func HsCodeContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHsCode), v))
	})
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterial), v))
	})
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterial), v))
	})
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaterial), v...))
	})
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaterial), v...))
	})
}

// MaterialGT applies the GT predicate on the "material" field.
func MaterialGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterial), v))
	})
}

// MaterialGTE applies the GTE predicate on the "material" field.
func MaterialGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterial), v))
	})
}

// MaterialLT applies the LT predicate on the "material" field.
func MaterialLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterial), v))
	})
}

// MaterialLTE applies the LTE predicate on the "material" field.
func MaterialLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterial), v))
	})
}

// MaterialContains applies the Contains predicate on the "material" field.
func MaterialContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterial), v))
	})
}

// MaterialHasPrefix applies the HasPrefix predicate on the "material" field.
func MaterialHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterial), v))
	})
}

// MaterialHasSuffix applies the HasSuffix predicate on the "material" field.
func MaterialHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterial), v))
	})
}

// MaterialEqualFold applies the EqualFold predicate on the "material" field.
func MaterialEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterial), v))
	})
}

// MaterialContainsFold applies the ContainsFold predicate on the "material" field.
func MaterialContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterial), v))
	})
}

// PurposeEQ applies the EQ predicate on the "purpose" field.
func PurposeEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurpose), v))
	})
}

// PurposeNEQ applies the NEQ predicate on the "purpose" field.
func PurposeNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurpose), v))
	})
}

// PurposeIn applies the In predicate on the "purpose" field.
func PurposeIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPurpose), v...))
	})
}

// PurposeNotIn applies the NotIn predicate on the "purpose" field.
func PurposeNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPurpose), v...))
	})
}

// PurposeGT applies the GT predicate on the "purpose" field.
func PurposeGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurpose), v))
	})
}

// PurposeGTE applies the GTE predicate on the "purpose" field.
func PurposeGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurpose), v))
	})
}

// PurposeLT applies the LT predicate on the "purpose" field.
func PurposeLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurpose), v))
	})
}

// PurposeLTE applies the LTE predicate on the "purpose" field.
func PurposeLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurpose), v))
	})
}

// PurposeContains applies the Contains predicate on the "purpose" field.
func PurposeContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPurpose), v))
	})
}

// PurposeHasPrefix applies the HasPrefix predicate on the "purpose" field.
func PurposeHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPurpose), v))
	})
}

// PurposeHasSuffix applies the HasSuffix predicate on the "purpose" field.
func PurposeHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPurpose), v))
	})
}

// PurposeEqualFold applies the EqualFold predicate on the "purpose" field.
func PurposeEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPurpose), v))
	})
}

// PurposeContainsFold applies the ContainsFold predicate on the "purpose" field.
func PurposeContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPurpose), v))
	})
}

// WithBarcodeEQ applies the EQ predicate on the "with_barcode" field.
func WithBarcodeEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithBarcode), v))
	})
}

// WithBarcodeNEQ applies the NEQ predicate on the "with_barcode" field.
func WithBarcodeNEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithBarcode), v))
	})
}

// WithBarcodeIn applies the In predicate on the "with_barcode" field.
func WithBarcodeIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWithBarcode), v...))
	})
}

// WithBarcodeNotIn applies the NotIn predicate on the "with_barcode" field.
func WithBarcodeNotIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWithBarcode), v...))
	})
}

// WithBarcodeGT applies the GT predicate on the "with_barcode" field.
func WithBarcodeGT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithBarcode), v))
	})
}

// WithBarcodeGTE applies the GTE predicate on the "with_barcode" field.
func WithBarcodeGTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithBarcode), v))
	})
}

// WithBarcodeLT applies the LT predicate on the "with_barcode" field.
func WithBarcodeLT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithBarcode), v))
	})
}

// WithBarcodeLTE applies the LTE predicate on the "with_barcode" field.
func WithBarcodeLTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithBarcode), v))
	})
}

// BarcodeServiceEQ applies the EQ predicate on the "barcode_service" field.
func BarcodeServiceEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeService), v))
	})
}

// BarcodeServiceNEQ applies the NEQ predicate on the "barcode_service" field.
func BarcodeServiceNEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcodeService), v))
	})
}

// BarcodeServiceIn applies the In predicate on the "barcode_service" field.
func BarcodeServiceIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcodeService), v...))
	})
}

// BarcodeServiceNotIn applies the NotIn predicate on the "barcode_service" field.
func BarcodeServiceNotIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcodeService), v...))
	})
}

// BarcodeServiceGT applies the GT predicate on the "barcode_service" field.
func BarcodeServiceGT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcodeService), v))
	})
}

// BarcodeServiceGTE applies the GTE predicate on the "barcode_service" field.
func BarcodeServiceGTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcodeService), v))
	})
}

// BarcodeServiceLT applies the LT predicate on the "barcode_service" field.
func BarcodeServiceLT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcodeService), v))
	})
}

// BarcodeServiceLTE applies the LTE predicate on the "barcode_service" field.
func BarcodeServiceLTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcodeService), v))
	})
}

// BarcodeTemplateEQ applies the EQ predicate on the "barcode_template" field.
func BarcodeTemplateEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateNEQ applies the NEQ predicate on the "barcode_template" field.
func BarcodeTemplateNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateIn applies the In predicate on the "barcode_template" field.
func BarcodeTemplateIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcodeTemplate), v...))
	})
}

// BarcodeTemplateNotIn applies the NotIn predicate on the "barcode_template" field.
func BarcodeTemplateNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcodeTemplate), v...))
	})
}

// BarcodeTemplateGT applies the GT predicate on the "barcode_template" field.
func BarcodeTemplateGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateGTE applies the GTE predicate on the "barcode_template" field.
func BarcodeTemplateGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateLT applies the LT predicate on the "barcode_template" field.
func BarcodeTemplateLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateLTE applies the LTE predicate on the "barcode_template" field.
func BarcodeTemplateLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateContains applies the Contains predicate on the "barcode_template" field.
func BarcodeTemplateContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateHasPrefix applies the HasPrefix predicate on the "barcode_template" field.
func BarcodeTemplateHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateHasSuffix applies the HasSuffix predicate on the "barcode_template" field.
func BarcodeTemplateHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateIsNil applies the IsNil predicate on the "barcode_template" field.
func BarcodeTemplateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBarcodeTemplate)))
	})
}

// BarcodeTemplateNotNil applies the NotNil predicate on the "barcode_template" field.
func BarcodeTemplateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBarcodeTemplate)))
	})
}

// BarcodeTemplateEqualFold applies the EqualFold predicate on the "barcode_template" field.
func BarcodeTemplateEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcodeTemplate), v))
	})
}

// BarcodeTemplateContainsFold applies the ContainsFold predicate on the "barcode_template" field.
func BarcodeTemplateContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcodeTemplate), v))
	})
}

// ImagesEQ applies the EQ predicate on the "images" field.
func ImagesEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// ImagesNEQ applies the NEQ predicate on the "images" field.
func ImagesNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImages), v))
	})
}

// ImagesIn applies the In predicate on the "images" field.
func ImagesIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImages), v...))
	})
}

// ImagesNotIn applies the NotIn predicate on the "images" field.
func ImagesNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImages), v...))
	})
}

// ImagesGT applies the GT predicate on the "images" field.
func ImagesGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImages), v))
	})
}

// ImagesGTE applies the GTE predicate on the "images" field.
func ImagesGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImages), v))
	})
}

// ImagesLT applies the LT predicate on the "images" field.
func ImagesLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImages), v))
	})
}

// ImagesLTE applies the LTE predicate on the "images" field.
func ImagesLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImages), v))
	})
}

// ImagesContains applies the Contains predicate on the "images" field.
func ImagesContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImages), v))
	})
}

// ImagesHasPrefix applies the HasPrefix predicate on the "images" field.
func ImagesHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImages), v))
	})
}

// ImagesHasSuffix applies the HasSuffix predicate on the "images" field.
func ImagesHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImages), v))
	})
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImages)))
	})
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImages)))
	})
}

// ImagesEqualFold applies the EqualFold predicate on the "images" field.
func ImagesEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImages), v))
	})
}

// ImagesContainsFold applies the ContainsFold predicate on the "images" field.
func ImagesContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImages), v))
	})
}

// AttributesEQ applies the EQ predicate on the "attributes" field.
func AttributesEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributes), v))
	})
}

// AttributesNEQ applies the NEQ predicate on the "attributes" field.
func AttributesNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttributes), v))
	})
}

// AttributesIn applies the In predicate on the "attributes" field.
func AttributesIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAttributes), v...))
	})
}

// AttributesNotIn applies the NotIn predicate on the "attributes" field.
func AttributesNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAttributes), v...))
	})
}

// AttributesGT applies the GT predicate on the "attributes" field.
func AttributesGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttributes), v))
	})
}

// AttributesGTE applies the GTE predicate on the "attributes" field.
func AttributesGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttributes), v))
	})
}

// AttributesLT applies the LT predicate on the "attributes" field.
func AttributesLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttributes), v))
	})
}

// AttributesLTE applies the LTE predicate on the "attributes" field.
func AttributesLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttributes), v))
	})
}

// AttributesContains applies the Contains predicate on the "attributes" field.
func AttributesContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAttributes), v))
	})
}

// AttributesHasPrefix applies the HasPrefix predicate on the "attributes" field.
func AttributesHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAttributes), v))
	})
}

// AttributesHasSuffix applies the HasSuffix predicate on the "attributes" field.
func AttributesHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAttributes), v))
	})
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttributes)))
	})
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttributes)))
	})
}

// AttributesEqualFold applies the EqualFold predicate on the "attributes" field.
func AttributesEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAttributes), v))
	})
}

// AttributesContainsFold applies the ContainsFold predicate on the "attributes" field.
func AttributesContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAttributes), v))
	})
}

// ConfirmedAttributesEQ applies the EQ predicate on the "confirmed_attributes" field.
func ConfirmedAttributesEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesNEQ applies the NEQ predicate on the "confirmed_attributes" field.
func ConfirmedAttributesNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesIn applies the In predicate on the "confirmed_attributes" field.
func ConfirmedAttributesIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldConfirmedAttributes), v...))
	})
}

// ConfirmedAttributesNotIn applies the NotIn predicate on the "confirmed_attributes" field.
func ConfirmedAttributesNotIn(vs ...string) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldConfirmedAttributes), v...))
	})
}

// ConfirmedAttributesGT applies the GT predicate on the "confirmed_attributes" field.
func ConfirmedAttributesGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesGTE applies the GTE predicate on the "confirmed_attributes" field.
func ConfirmedAttributesGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesLT applies the LT predicate on the "confirmed_attributes" field.
func ConfirmedAttributesLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesLTE applies the LTE predicate on the "confirmed_attributes" field.
func ConfirmedAttributesLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesContains applies the Contains predicate on the "confirmed_attributes" field.
func ConfirmedAttributesContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesHasPrefix applies the HasPrefix predicate on the "confirmed_attributes" field.
func ConfirmedAttributesHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesHasSuffix applies the HasSuffix predicate on the "confirmed_attributes" field.
func ConfirmedAttributesHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesIsNil applies the IsNil predicate on the "confirmed_attributes" field.
func ConfirmedAttributesIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfirmedAttributes)))
	})
}

// ConfirmedAttributesNotNil applies the NotNil predicate on the "confirmed_attributes" field.
func ConfirmedAttributesNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfirmedAttributes)))
	})
}

// ConfirmedAttributesEqualFold applies the EqualFold predicate on the "confirmed_attributes" field.
func ConfirmedAttributesEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConfirmedAttributes), v))
	})
}

// ConfirmedAttributesContainsFold applies the ContainsFold predicate on the "confirmed_attributes" field.
func ConfirmedAttributesContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConfirmedAttributes), v))
	})
}

// GramsEQ applies the EQ predicate on the "grams" field.
func GramsEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// GramsNEQ applies the NEQ predicate on the "grams" field.
func GramsNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrams), v))
	})
}

// GramsIn applies the In predicate on the "grams" field.
func GramsIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGrams), v...))
	})
}

// GramsNotIn applies the NotIn predicate on the "grams" field.
func GramsNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGrams), v...))
	})
}

// GramsGT applies the GT predicate on the "grams" field.
func GramsGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrams), v))
	})
}

// GramsGTE applies the GTE predicate on the "grams" field.
func GramsGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrams), v))
	})
}

// GramsLT applies the LT predicate on the "grams" field.
func GramsLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrams), v))
	})
}

// GramsLTE applies the LTE predicate on the "grams" field.
func GramsLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrams), v))
	})
}

// InboundGramsEQ applies the EQ predicate on the "inbound_grams" field.
func InboundGramsEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboundGrams), v))
	})
}

// InboundGramsNEQ applies the NEQ predicate on the "inbound_grams" field.
func InboundGramsNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInboundGrams), v))
	})
}

// InboundGramsIn applies the In predicate on the "inbound_grams" field.
func InboundGramsIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInboundGrams), v...))
	})
}

// InboundGramsNotIn applies the NotIn predicate on the "inbound_grams" field.
func InboundGramsNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInboundGrams), v...))
	})
}

// InboundGramsGT applies the GT predicate on the "inbound_grams" field.
func InboundGramsGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInboundGrams), v))
	})
}

// InboundGramsGTE applies the GTE predicate on the "inbound_grams" field.
func InboundGramsGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInboundGrams), v))
	})
}

// InboundGramsLT applies the LT predicate on the "inbound_grams" field.
func InboundGramsLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInboundGrams), v))
	})
}

// InboundGramsLTE applies the LTE predicate on the "inbound_grams" field.
func InboundGramsLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInboundGrams), v))
	})
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLength), v))
	})
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLength), v...))
	})
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLength), v...))
	})
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLength), v))
	})
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLength), v))
	})
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLength), v))
	})
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLength), v))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// MaxAgvQtyEQ applies the EQ predicate on the "max_agv_qty" field.
func MaxAgvQtyEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAgvQty), v))
	})
}

// MaxAgvQtyNEQ applies the NEQ predicate on the "max_agv_qty" field.
func MaxAgvQtyNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxAgvQty), v))
	})
}

// MaxAgvQtyIn applies the In predicate on the "max_agv_qty" field.
func MaxAgvQtyIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxAgvQty), v...))
	})
}

// MaxAgvQtyNotIn applies the NotIn predicate on the "max_agv_qty" field.
func MaxAgvQtyNotIn(vs ...int) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxAgvQty), v...))
	})
}

// MaxAgvQtyGT applies the GT predicate on the "max_agv_qty" field.
func MaxAgvQtyGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxAgvQty), v))
	})
}

// MaxAgvQtyGTE applies the GTE predicate on the "max_agv_qty" field.
func MaxAgvQtyGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxAgvQty), v))
	})
}

// MaxAgvQtyLT applies the LT predicate on the "max_agv_qty" field.
func MaxAgvQtyLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxAgvQty), v))
	})
}

// MaxAgvQtyLTE applies the LTE predicate on the "max_agv_qty" field.
func MaxAgvQtyLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxAgvQty), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.Product {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Product
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Product
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventories applies the HasEdge predicate on the "inventories" edge.
func HasInventories() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InventoriesTable, InventoriesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Inventory
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoriesWith applies the HasEdge predicate on the "inventories" edge with a given conditions (other predicates).
func HasInventoriesWith(preds ...predicate.Inventory) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InventoriesTable, InventoriesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Inventory
		step.Edge.Schema = schemaConfig.Inventory
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductMappings applies the HasEdge predicate on the "product_mappings" edge.
func HasProductMappings() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductMappingsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductMappingsTable, ProductMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductMappingsWith applies the HasEdge predicate on the "product_mappings" edge with a given conditions (other predicates).
func HasProductMappingsWith(preds ...predicate.ProductMapping) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductMappingsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductMappingsTable, ProductMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
