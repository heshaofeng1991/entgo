// Code generated by ent, DO NOT EDIT.

package inbound

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CustomerOrderID applies equality check predicate on the "customer_order_id" field. It's identical to CustomerOrderIDEQ.
func CustomerOrderID(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerCode applies equality check predicate on the "customer_code" field. It's identical to CustomerCodeEQ.
func CustomerCode(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// EstimatedArrivalAt applies equality check predicate on the "estimated_arrival_at" field. It's identical to EstimatedArrivalAtEQ.
func EstimatedArrivalAt(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalAt), v))
	})
}

// ShippedAt applies equality check predicate on the "shipped_at" field. It's identical to ShippedAtEQ.
func ShippedAt(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippedAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// IsPickup applies equality check predicate on the "is_pickup" field. It's identical to IsPickupEQ.
func IsPickup(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPickup), v))
	})
}

// ShippingMarkURL applies equality check predicate on the "shipping_mark_url" field. It's identical to ShippingMarkURLEQ.
func ShippingMarkURL(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMarkURL), v))
	})
}

// PickupOrderID applies equality check predicate on the "pickup_order_id" field. It's identical to PickupOrderIDEQ.
func PickupOrderID(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickupOrderID), v))
	})
}

// CarrierName applies equality check predicate on the "carrier_name" field. It's identical to CarrierNameEQ.
func CarrierName(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierName), v))
	})
}

// OrderNumber applies equality check predicate on the "order_number" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CustomerOrderIDEQ applies the EQ predicate on the "customer_order_id" field.
func CustomerOrderIDEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDNEQ applies the NEQ predicate on the "customer_order_id" field.
func CustomerOrderIDNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDIn applies the In predicate on the "customer_order_id" field.
func CustomerOrderIDIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerOrderID), v...))
	})
}

// CustomerOrderIDNotIn applies the NotIn predicate on the "customer_order_id" field.
func CustomerOrderIDNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerOrderID), v...))
	})
}

// CustomerOrderIDGT applies the GT predicate on the "customer_order_id" field.
func CustomerOrderIDGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDGTE applies the GTE predicate on the "customer_order_id" field.
func CustomerOrderIDGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDLT applies the LT predicate on the "customer_order_id" field.
func CustomerOrderIDLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDLTE applies the LTE predicate on the "customer_order_id" field.
func CustomerOrderIDLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDContains applies the Contains predicate on the "customer_order_id" field.
func CustomerOrderIDContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDHasPrefix applies the HasPrefix predicate on the "customer_order_id" field.
func CustomerOrderIDHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDHasSuffix applies the HasSuffix predicate on the "customer_order_id" field.
func CustomerOrderIDHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDEqualFold applies the EqualFold predicate on the "customer_order_id" field.
func CustomerOrderIDEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerOrderIDContainsFold applies the ContainsFold predicate on the "customer_order_id" field.
func CustomerOrderIDContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerOrderID), v))
	})
}

// CustomerCodeEQ applies the EQ predicate on the "customer_code" field.
func CustomerCodeEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeNEQ applies the NEQ predicate on the "customer_code" field.
func CustomerCodeNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeIn applies the In predicate on the "customer_code" field.
func CustomerCodeIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeNotIn applies the NotIn predicate on the "customer_code" field.
func CustomerCodeNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeGT applies the GT predicate on the "customer_code" field.
func CustomerCodeGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeGTE applies the GTE predicate on the "customer_code" field.
func CustomerCodeGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLT applies the LT predicate on the "customer_code" field.
func CustomerCodeLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLTE applies the LTE predicate on the "customer_code" field.
func CustomerCodeLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContains applies the Contains predicate on the "customer_code" field.
func CustomerCodeContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasPrefix applies the HasPrefix predicate on the "customer_code" field.
func CustomerCodeHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasSuffix applies the HasSuffix predicate on the "customer_code" field.
func CustomerCodeHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeEqualFold applies the EqualFold predicate on the "customer_code" field.
func CustomerCodeEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContainsFold applies the ContainsFold predicate on the "customer_code" field.
func CustomerCodeContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerCode), v))
	})
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingNumber), v))
	})
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...int64) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...int64) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDGT applies the GT predicate on the "warehouse_id" field.
func WarehouseIDGT(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDGTE applies the GTE predicate on the "warehouse_id" field.
func WarehouseIDGTE(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLT applies the LT predicate on the "warehouse_id" field.
func WarehouseIDLT(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLTE applies the LTE predicate on the "warehouse_id" field.
func WarehouseIDLTE(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarehouseID), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// EstimatedArrivalAtEQ applies the EQ predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtNEQ applies the NEQ predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtNEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtIn applies the In predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEstimatedArrivalAt), v...))
	})
}

// EstimatedArrivalAtNotIn applies the NotIn predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtNotIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEstimatedArrivalAt), v...))
	})
}

// EstimatedArrivalAtGT applies the GT predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtGT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtGTE applies the GTE predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtGTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtLT applies the LT predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtLT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtLTE applies the LTE predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtLTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedArrivalAt), v))
	})
}

// EstimatedArrivalAtIsNil applies the IsNil predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtIsNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedArrivalAt)))
	})
}

// EstimatedArrivalAtNotNil applies the NotNil predicate on the "estimated_arrival_at" field.
func EstimatedArrivalAtNotNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedArrivalAt)))
	})
}

// ShippedAtEQ applies the EQ predicate on the "shipped_at" field.
func ShippedAtEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippedAt), v))
	})
}

// ShippedAtNEQ applies the NEQ predicate on the "shipped_at" field.
func ShippedAtNEQ(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippedAt), v))
	})
}

// ShippedAtIn applies the In predicate on the "shipped_at" field.
func ShippedAtIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippedAt), v...))
	})
}

// ShippedAtNotIn applies the NotIn predicate on the "shipped_at" field.
func ShippedAtNotIn(vs ...time.Time) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippedAt), v...))
	})
}

// ShippedAtGT applies the GT predicate on the "shipped_at" field.
func ShippedAtGT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippedAt), v))
	})
}

// ShippedAtGTE applies the GTE predicate on the "shipped_at" field.
func ShippedAtGTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippedAt), v))
	})
}

// ShippedAtLT applies the LT predicate on the "shipped_at" field.
func ShippedAtLT(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippedAt), v))
	})
}

// ShippedAtLTE applies the LTE predicate on the "shipped_at" field.
func ShippedAtLTE(v time.Time) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippedAt), v))
	})
}

// ShippedAtIsNil applies the IsNil predicate on the "shipped_at" field.
func ShippedAtIsNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippedAt)))
	})
}

// ShippedAtNotNil applies the NotNil predicate on the "shipped_at" field.
func ShippedAtNotNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippedAt)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// IsPickupEQ applies the EQ predicate on the "is_pickup" field.
func IsPickupEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPickup), v))
	})
}

// IsPickupNEQ applies the NEQ predicate on the "is_pickup" field.
func IsPickupNEQ(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPickup), v))
	})
}

// IsPickupIn applies the In predicate on the "is_pickup" field.
func IsPickupIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsPickup), v...))
	})
}

// IsPickupNotIn applies the NotIn predicate on the "is_pickup" field.
func IsPickupNotIn(vs ...int8) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsPickup), v...))
	})
}

// IsPickupGT applies the GT predicate on the "is_pickup" field.
func IsPickupGT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsPickup), v))
	})
}

// IsPickupGTE applies the GTE predicate on the "is_pickup" field.
func IsPickupGTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsPickup), v))
	})
}

// IsPickupLT applies the LT predicate on the "is_pickup" field.
func IsPickupLT(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsPickup), v))
	})
}

// IsPickupLTE applies the LTE predicate on the "is_pickup" field.
func IsPickupLTE(v int8) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsPickup), v))
	})
}

// ShippingMarkURLEQ applies the EQ predicate on the "shipping_mark_url" field.
func ShippingMarkURLEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLNEQ applies the NEQ predicate on the "shipping_mark_url" field.
func ShippingMarkURLNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLIn applies the In predicate on the "shipping_mark_url" field.
func ShippingMarkURLIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMarkURL), v...))
	})
}

// ShippingMarkURLNotIn applies the NotIn predicate on the "shipping_mark_url" field.
func ShippingMarkURLNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMarkURL), v...))
	})
}

// ShippingMarkURLGT applies the GT predicate on the "shipping_mark_url" field.
func ShippingMarkURLGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLGTE applies the GTE predicate on the "shipping_mark_url" field.
func ShippingMarkURLGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLLT applies the LT predicate on the "shipping_mark_url" field.
func ShippingMarkURLLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLLTE applies the LTE predicate on the "shipping_mark_url" field.
func ShippingMarkURLLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLContains applies the Contains predicate on the "shipping_mark_url" field.
func ShippingMarkURLContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLHasPrefix applies the HasPrefix predicate on the "shipping_mark_url" field.
func ShippingMarkURLHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLHasSuffix applies the HasSuffix predicate on the "shipping_mark_url" field.
func ShippingMarkURLHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLIsNil applies the IsNil predicate on the "shipping_mark_url" field.
func ShippingMarkURLIsNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingMarkURL)))
	})
}

// ShippingMarkURLNotNil applies the NotNil predicate on the "shipping_mark_url" field.
func ShippingMarkURLNotNil() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingMarkURL)))
	})
}

// ShippingMarkURLEqualFold applies the EqualFold predicate on the "shipping_mark_url" field.
func ShippingMarkURLEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMarkURL), v))
	})
}

// ShippingMarkURLContainsFold applies the ContainsFold predicate on the "shipping_mark_url" field.
func ShippingMarkURLContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMarkURL), v))
	})
}

// PickupOrderIDEQ applies the EQ predicate on the "pickup_order_id" field.
func PickupOrderIDEQ(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDNEQ applies the NEQ predicate on the "pickup_order_id" field.
func PickupOrderIDNEQ(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDIn applies the In predicate on the "pickup_order_id" field.
func PickupOrderIDIn(vs ...int64) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPickupOrderID), v...))
	})
}

// PickupOrderIDNotIn applies the NotIn predicate on the "pickup_order_id" field.
func PickupOrderIDNotIn(vs ...int64) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPickupOrderID), v...))
	})
}

// PickupOrderIDGT applies the GT predicate on the "pickup_order_id" field.
func PickupOrderIDGT(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDGTE applies the GTE predicate on the "pickup_order_id" field.
func PickupOrderIDGTE(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDLT applies the LT predicate on the "pickup_order_id" field.
func PickupOrderIDLT(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDLTE applies the LTE predicate on the "pickup_order_id" field.
func PickupOrderIDLTE(v int64) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPickupOrderID), v))
	})
}

// CarrierNameEQ applies the EQ predicate on the "carrier_name" field.
func CarrierNameEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierName), v))
	})
}

// CarrierNameNEQ applies the NEQ predicate on the "carrier_name" field.
func CarrierNameNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarrierName), v))
	})
}

// CarrierNameIn applies the In predicate on the "carrier_name" field.
func CarrierNameIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCarrierName), v...))
	})
}

// CarrierNameNotIn applies the NotIn predicate on the "carrier_name" field.
func CarrierNameNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCarrierName), v...))
	})
}

// CarrierNameGT applies the GT predicate on the "carrier_name" field.
func CarrierNameGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarrierName), v))
	})
}

// CarrierNameGTE applies the GTE predicate on the "carrier_name" field.
func CarrierNameGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarrierName), v))
	})
}

// CarrierNameLT applies the LT predicate on the "carrier_name" field.
func CarrierNameLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarrierName), v))
	})
}

// CarrierNameLTE applies the LTE predicate on the "carrier_name" field.
func CarrierNameLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarrierName), v))
	})
}

// CarrierNameContains applies the Contains predicate on the "carrier_name" field.
func CarrierNameContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCarrierName), v))
	})
}

// CarrierNameHasPrefix applies the HasPrefix predicate on the "carrier_name" field.
func CarrierNameHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCarrierName), v))
	})
}

// CarrierNameHasSuffix applies the HasSuffix predicate on the "carrier_name" field.
func CarrierNameHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCarrierName), v))
	})
}

// CarrierNameEqualFold applies the EqualFold predicate on the "carrier_name" field.
func CarrierNameEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCarrierName), v))
	})
}

// CarrierNameContainsFold applies the ContainsFold predicate on the "carrier_name" field.
func CarrierNameContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCarrierName), v))
	})
}

// OrderNumberEQ applies the EQ predicate on the "order_number" field.
func OrderNumberEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberNEQ applies the NEQ predicate on the "order_number" field.
func OrderNumberNEQ(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberIn applies the In predicate on the "order_number" field.
func OrderNumberIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberNotIn applies the NotIn predicate on the "order_number" field.
func OrderNumberNotIn(vs ...string) predicate.Inbound {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberGT applies the GT predicate on the "order_number" field.
func OrderNumberGT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberGTE applies the GTE predicate on the "order_number" field.
func OrderNumberGTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLT applies the LT predicate on the "order_number" field.
func OrderNumberLT(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLTE applies the LTE predicate on the "order_number" field.
func OrderNumberLTE(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContains applies the Contains predicate on the "order_number" field.
func OrderNumberContains(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "order_number" field.
func OrderNumberHasPrefix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "order_number" field.
func OrderNumberHasSuffix(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberEqualFold applies the EqualFold predicate on the "order_number" field.
func OrderNumberEqualFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "order_number" field.
func OrderNumberContainsFold(v string) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNumber), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inbound
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inbound
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInboundItems applies the HasEdge predicate on the "inbound_items" edge.
func HasInboundItems() predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InboundItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InboundItemsTable, InboundItemsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.InboundItem
		step.Edge.Schema = schemaConfig.InboundItem
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInboundItemsWith applies the HasEdge predicate on the "inbound_items" edge with a given conditions (other predicates).
func HasInboundItemsWith(preds ...predicate.InboundItem) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InboundItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InboundItemsTable, InboundItemsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.InboundItem
		step.Edge.Schema = schemaConfig.InboundItem
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inbound) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inbound) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inbound) predicate.Inbound {
	return predicate.Inbound(func(s *sql.Selector) {
		p(s.Not())
	})
}
