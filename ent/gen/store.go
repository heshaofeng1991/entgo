// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// StoreURL holds the value of the "store_url" field.
	StoreURL string `json:"store_url,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// TimezoneOffset holds the value of the "timezone_offset" field.
	TimezoneOffset int8 `json:"timezone_offset,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope string `json:"scope,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID string `json:"location_id,omitempty"`
	// 店铺的地址列表
	Locations string `json:"locations,omitempty"`
	// StoreCurrency holds the value of the "store_currency" field.
	StoreCurrency string `json:"store_currency,omitempty"`
	// InitialStatus holds the value of the "initial_status" field.
	InitialStatus int8 `json:"initial_status,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp int32 `json:"timestamp,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// HandlingFee holds the value of the "handling_fee" field.
	HandlingFee float64 `json:"handling_fee,omitempty"`
	// ShippingOption holds the value of the "shipping_option" field.
	ShippingOption int8 `json:"shipping_option,omitempty"`
	// DefaultWarehouse holds the value of the "default_warehouse" field.
	DefaultWarehouse int64 `json:"default_warehouse,omitempty"`
	// PrepayTariff holds the value of the "prepay_tariff" field.
	PrepayTariff int8 `json:"prepay_tariff,omitempty"`
	// IossNumber holds the value of the "ioss_number" field.
	IossNumber string `json:"ioss_number,omitempty"`
	// IossCountryCode holds the value of the "ioss_country_code" field.
	IossCountryCode string `json:"ioss_country_code,omitempty"`
	// UkVatNumber holds the value of the "uk_vat_number" field.
	UkVatNumber string `json:"uk_vat_number,omitempty"`
	// StoreCode holds the value of the "store_code" field.
	StoreCode string `json:"store_code,omitempty"`
	// PresetChannelIds holds the value of the "preset_channel_ids" field.
	PresetChannelIds string `json:"preset_channel_ids,omitempty"`
	// TestChannelIds holds the value of the "test_channel_ids" field.
	TestChannelIds string `json:"test_channel_ids,omitempty"`
	// 第一次入库时间
	FirstInboundAt time.Time `json:"first_inbound_at,omitempty"`
	// $1.25/day/立方米
	StorageUnitPrice float64 `json:"storage_unit_price,omitempty"`
	// 集成时间
	IntegrationAt time.Time `json:"integration_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoreQuery when eager-loading is set.
	Edges        StoreEdges `json:"edges"`
	store_tenant *int64
}

// StoreEdges holds the relations/edges for other nodes in the graph.
type StoreEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// PlatformProducts holds the value of the platform_products edge.
	PlatformProducts []*PlatformProduct `json:"platform_products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// PlatformProductsOrErr returns the PlatformProducts value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) PlatformProductsOrErr() ([]*PlatformProduct, error) {
	if e.loadedTypes[2] {
		return e.PlatformProducts, nil
	}
	return nil, &NotLoadedError{edge: "platform_products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldBalance, store.FieldHandlingFee, store.FieldStorageUnitPrice:
			values[i] = new(sql.NullFloat64)
		case store.FieldID, store.FieldTimezoneOffset, store.FieldInitialStatus, store.FieldTimestamp, store.FieldShippingOption, store.FieldDefaultWarehouse, store.FieldPrepayTariff:
			values[i] = new(sql.NullInt64)
		case store.FieldStoreURL, store.FieldPlatform, store.FieldName, store.FieldCode, store.FieldEmail, store.FieldAccessToken, store.FieldScope, store.FieldLocationID, store.FieldLocations, store.FieldStoreCurrency, store.FieldState, store.FieldNonce, store.FieldCurrency, store.FieldIossNumber, store.FieldIossCountryCode, store.FieldUkVatNumber, store.FieldStoreCode, store.FieldPresetChannelIds, store.FieldTestChannelIds:
			values[i] = new(sql.NullString)
		case store.FieldCreatedAt, store.FieldUpdatedAt, store.FieldDeletedAt, store.FieldFirstInboundAt, store.FieldIntegrationAt:
			values[i] = new(sql.NullTime)
		case store.ForeignKeys[0]: // store_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Store", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case store.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case store.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case store.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case store.FieldStoreURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_url", values[i])
			} else if value.Valid {
				s.StoreURL = value.String
			}
		case store.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				s.Platform = value.String
			}
		case store.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case store.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case store.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		case store.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				s.AccessToken = value.String
			}
		case store.FieldTimezoneOffset:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_offset", values[i])
			} else if value.Valid {
				s.TimezoneOffset = int8(value.Int64)
			}
		case store.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				s.Scope = value.String
			}
		case store.FieldLocationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				s.LocationID = value.String
			}
		case store.FieldLocations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locations", values[i])
			} else if value.Valid {
				s.Locations = value.String
			}
		case store.FieldStoreCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_currency", values[i])
			} else if value.Valid {
				s.StoreCurrency = value.String
			}
		case store.FieldInitialStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_status", values[i])
			} else if value.Valid {
				s.InitialStatus = int8(value.Int64)
			}
		case store.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				s.State = value.String
			}
		case store.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				s.Timestamp = int32(value.Int64)
			}
		case store.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				s.Nonce = value.String
			}
		case store.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				s.Balance = value.Float64
			}
		case store.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				s.Currency = value.String
			}
		case store.FieldHandlingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field handling_fee", values[i])
			} else if value.Valid {
				s.HandlingFee = value.Float64
			}
		case store.FieldShippingOption:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_option", values[i])
			} else if value.Valid {
				s.ShippingOption = int8(value.Int64)
			}
		case store.FieldDefaultWarehouse:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_warehouse", values[i])
			} else if value.Valid {
				s.DefaultWarehouse = value.Int64
			}
		case store.FieldPrepayTariff:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prepay_tariff", values[i])
			} else if value.Valid {
				s.PrepayTariff = int8(value.Int64)
			}
		case store.FieldIossNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_number", values[i])
			} else if value.Valid {
				s.IossNumber = value.String
			}
		case store.FieldIossCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_country_code", values[i])
			} else if value.Valid {
				s.IossCountryCode = value.String
			}
		case store.FieldUkVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uk_vat_number", values[i])
			} else if value.Valid {
				s.UkVatNumber = value.String
			}
		case store.FieldStoreCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_code", values[i])
			} else if value.Valid {
				s.StoreCode = value.String
			}
		case store.FieldPresetChannelIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preset_channel_ids", values[i])
			} else if value.Valid {
				s.PresetChannelIds = value.String
			}
		case store.FieldTestChannelIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_channel_ids", values[i])
			} else if value.Valid {
				s.TestChannelIds = value.String
			}
		case store.FieldFirstInboundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_inbound_at", values[i])
			} else if value.Valid {
				s.FirstInboundAt = value.Time
			}
		case store.FieldStorageUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_unit_price", values[i])
			} else if value.Valid {
				s.StorageUnitPrice = value.Float64
			}
		case store.FieldIntegrationAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field integration_at", values[i])
			} else if value.Valid {
				s.IntegrationAt = value.Time
			}
		case store.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field store_tenant", value)
			} else if value.Valid {
				s.store_tenant = new(int64)
				*s.store_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Store entity.
func (s *Store) QueryTenant() *TenantQuery {
	return (&StoreClient{config: s.config}).QueryTenant(s)
}

// QueryOrders queries the "orders" edge of the Store entity.
func (s *Store) QueryOrders() *OrderQuery {
	return (&StoreClient{config: s.config}).QueryOrders(s)
}

// QueryPlatformProducts queries the "platform_products" edge of the Store entity.
func (s *Store) QueryPlatformProducts() *PlatformProductQuery {
	return (&StoreClient{config: s.config}).QueryPlatformProducts(s)
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return (&StoreClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("gen: Store is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("store_url=")
	builder.WriteString(s.StoreURL)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(s.Platform)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(s.Code)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(s.Email)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(s.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("timezone_offset=")
	builder.WriteString(fmt.Sprintf("%v", s.TimezoneOffset))
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(s.Scope)
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(s.LocationID)
	builder.WriteString(", ")
	builder.WriteString("locations=")
	builder.WriteString(s.Locations)
	builder.WriteString(", ")
	builder.WriteString("store_currency=")
	builder.WriteString(s.StoreCurrency)
	builder.WriteString(", ")
	builder.WriteString("initial_status=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialStatus))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(s.State)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", s.Timestamp))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(s.Nonce)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", s.Balance))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(s.Currency)
	builder.WriteString(", ")
	builder.WriteString("handling_fee=")
	builder.WriteString(fmt.Sprintf("%v", s.HandlingFee))
	builder.WriteString(", ")
	builder.WriteString("shipping_option=")
	builder.WriteString(fmt.Sprintf("%v", s.ShippingOption))
	builder.WriteString(", ")
	builder.WriteString("default_warehouse=")
	builder.WriteString(fmt.Sprintf("%v", s.DefaultWarehouse))
	builder.WriteString(", ")
	builder.WriteString("prepay_tariff=")
	builder.WriteString(fmt.Sprintf("%v", s.PrepayTariff))
	builder.WriteString(", ")
	builder.WriteString("ioss_number=")
	builder.WriteString(s.IossNumber)
	builder.WriteString(", ")
	builder.WriteString("ioss_country_code=")
	builder.WriteString(s.IossCountryCode)
	builder.WriteString(", ")
	builder.WriteString("uk_vat_number=")
	builder.WriteString(s.UkVatNumber)
	builder.WriteString(", ")
	builder.WriteString("store_code=")
	builder.WriteString(s.StoreCode)
	builder.WriteString(", ")
	builder.WriteString("preset_channel_ids=")
	builder.WriteString(s.PresetChannelIds)
	builder.WriteString(", ")
	builder.WriteString("test_channel_ids=")
	builder.WriteString(s.TestChannelIds)
	builder.WriteString(", ")
	builder.WriteString("first_inbound_at=")
	builder.WriteString(s.FirstInboundAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("storage_unit_price=")
	builder.WriteString(fmt.Sprintf("%v", s.StorageUnitPrice))
	builder.WriteString(", ")
	builder.WriteString("integration_at=")
	builder.WriteString(s.IntegrationAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Stores is a parsable slice of Store.
type Stores []*Store

func (s Stores) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
