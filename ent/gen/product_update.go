// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProductUpdate) SetDeletedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeletedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProductUpdate) ClearDeletedAt() *ProductUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSku sets the "sku" field.
func (pu *ProductUpdate) SetSku(s string) *ProductUpdate {
	pu.mutation.SetSku(s)
	return pu
}

// SetBarcode sets the "barcode" field.
func (pu *ProductUpdate) SetBarcode(s string) *ProductUpdate {
	pu.mutation.SetBarcode(s)
	return pu
}

// SetCustomerCode sets the "customer_code" field.
func (pu *ProductUpdate) SetCustomerCode(s string) *ProductUpdate {
	pu.mutation.SetCustomerCode(s)
	return pu
}

// SetDeclaredName sets the "declared_name" field.
func (pu *ProductUpdate) SetDeclaredName(s string) *ProductUpdate {
	pu.mutation.SetDeclaredName(s)
	return pu
}

// SetNillableDeclaredName sets the "declared_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeclaredName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDeclaredName(*s)
	}
	return pu
}

// ClearDeclaredName clears the value of the "declared_name" field.
func (pu *ProductUpdate) ClearDeclaredName() *ProductUpdate {
	pu.mutation.ClearDeclaredName()
	return pu
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (pu *ProductUpdate) SetDeclaredCnName(s string) *ProductUpdate {
	pu.mutation.SetDeclaredCnName(s)
	return pu
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeclaredCnName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDeclaredCnName(*s)
	}
	return pu
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (pu *ProductUpdate) ClearDeclaredCnName() *ProductUpdate {
	pu.mutation.ClearDeclaredCnName()
	return pu
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (pu *ProductUpdate) SetDeclaredValueInUsd(f float64) *ProductUpdate {
	pu.mutation.ResetDeclaredValueInUsd()
	pu.mutation.SetDeclaredValueInUsd(f)
	return pu
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeclaredValueInUsd(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetDeclaredValueInUsd(*f)
	}
	return pu
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (pu *ProductUpdate) AddDeclaredValueInUsd(f float64) *ProductUpdate {
	pu.mutation.AddDeclaredValueInUsd(f)
	return pu
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (pu *ProductUpdate) SetDeclaredValueInEur(f float64) *ProductUpdate {
	pu.mutation.ResetDeclaredValueInEur()
	pu.mutation.SetDeclaredValueInEur(f)
	return pu
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeclaredValueInEur(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetDeclaredValueInEur(*f)
	}
	return pu
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (pu *ProductUpdate) AddDeclaredValueInEur(f float64) *ProductUpdate {
	pu.mutation.AddDeclaredValueInEur(f)
	return pu
}

// SetCurrency sets the "currency" field.
func (pu *ProductUpdate) SetCurrency(s string) *ProductUpdate {
	pu.mutation.SetCurrency(s)
	return pu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCurrency(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCurrency(*s)
	}
	return pu
}

// SetHsCode sets the "hs_code" field.
func (pu *ProductUpdate) SetHsCode(s string) *ProductUpdate {
	pu.mutation.SetHsCode(s)
	return pu
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableHsCode(s *string) *ProductUpdate {
	if s != nil {
		pu.SetHsCode(*s)
	}
	return pu
}

// SetMaterial sets the "material" field.
func (pu *ProductUpdate) SetMaterial(s string) *ProductUpdate {
	pu.mutation.SetMaterial(s)
	return pu
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMaterial(s *string) *ProductUpdate {
	if s != nil {
		pu.SetMaterial(*s)
	}
	return pu
}

// SetPurpose sets the "purpose" field.
func (pu *ProductUpdate) SetPurpose(s string) *ProductUpdate {
	pu.mutation.SetPurpose(s)
	return pu
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePurpose(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPurpose(*s)
	}
	return pu
}

// SetWithBarcode sets the "with_barcode" field.
func (pu *ProductUpdate) SetWithBarcode(i int8) *ProductUpdate {
	pu.mutation.ResetWithBarcode()
	pu.mutation.SetWithBarcode(i)
	return pu
}

// SetNillableWithBarcode sets the "with_barcode" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableWithBarcode(i *int8) *ProductUpdate {
	if i != nil {
		pu.SetWithBarcode(*i)
	}
	return pu
}

// AddWithBarcode adds i to the "with_barcode" field.
func (pu *ProductUpdate) AddWithBarcode(i int8) *ProductUpdate {
	pu.mutation.AddWithBarcode(i)
	return pu
}

// SetBarcodeService sets the "barcode_service" field.
func (pu *ProductUpdate) SetBarcodeService(i int8) *ProductUpdate {
	pu.mutation.ResetBarcodeService()
	pu.mutation.SetBarcodeService(i)
	return pu
}

// SetNillableBarcodeService sets the "barcode_service" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBarcodeService(i *int8) *ProductUpdate {
	if i != nil {
		pu.SetBarcodeService(*i)
	}
	return pu
}

// AddBarcodeService adds i to the "barcode_service" field.
func (pu *ProductUpdate) AddBarcodeService(i int8) *ProductUpdate {
	pu.mutation.AddBarcodeService(i)
	return pu
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (pu *ProductUpdate) SetBarcodeTemplate(s string) *ProductUpdate {
	pu.mutation.SetBarcodeTemplate(s)
	return pu
}

// SetNillableBarcodeTemplate sets the "barcode_template" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBarcodeTemplate(s *string) *ProductUpdate {
	if s != nil {
		pu.SetBarcodeTemplate(*s)
	}
	return pu
}

// ClearBarcodeTemplate clears the value of the "barcode_template" field.
func (pu *ProductUpdate) ClearBarcodeTemplate() *ProductUpdate {
	pu.mutation.ClearBarcodeTemplate()
	return pu
}

// SetImages sets the "images" field.
func (pu *ProductUpdate) SetImages(s string) *ProductUpdate {
	pu.mutation.SetImages(s)
	return pu
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableImages(s *string) *ProductUpdate {
	if s != nil {
		pu.SetImages(*s)
	}
	return pu
}

// ClearImages clears the value of the "images" field.
func (pu *ProductUpdate) ClearImages() *ProductUpdate {
	pu.mutation.ClearImages()
	return pu
}

// SetAttributes sets the "attributes" field.
func (pu *ProductUpdate) SetAttributes(s string) *ProductUpdate {
	pu.mutation.SetAttributes(s)
	return pu
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAttributes(s *string) *ProductUpdate {
	if s != nil {
		pu.SetAttributes(*s)
	}
	return pu
}

// ClearAttributes clears the value of the "attributes" field.
func (pu *ProductUpdate) ClearAttributes() *ProductUpdate {
	pu.mutation.ClearAttributes()
	return pu
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (pu *ProductUpdate) SetConfirmedAttributes(s string) *ProductUpdate {
	pu.mutation.SetConfirmedAttributes(s)
	return pu
}

// SetNillableConfirmedAttributes sets the "confirmed_attributes" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableConfirmedAttributes(s *string) *ProductUpdate {
	if s != nil {
		pu.SetConfirmedAttributes(*s)
	}
	return pu
}

// ClearConfirmedAttributes clears the value of the "confirmed_attributes" field.
func (pu *ProductUpdate) ClearConfirmedAttributes() *ProductUpdate {
	pu.mutation.ClearConfirmedAttributes()
	return pu
}

// SetGrams sets the "grams" field.
func (pu *ProductUpdate) SetGrams(i int) *ProductUpdate {
	pu.mutation.ResetGrams()
	pu.mutation.SetGrams(i)
	return pu
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableGrams(i *int) *ProductUpdate {
	if i != nil {
		pu.SetGrams(*i)
	}
	return pu
}

// AddGrams adds i to the "grams" field.
func (pu *ProductUpdate) AddGrams(i int) *ProductUpdate {
	pu.mutation.AddGrams(i)
	return pu
}

// SetInboundGrams sets the "inbound_grams" field.
func (pu *ProductUpdate) SetInboundGrams(i int) *ProductUpdate {
	pu.mutation.ResetInboundGrams()
	pu.mutation.SetInboundGrams(i)
	return pu
}

// SetNillableInboundGrams sets the "inbound_grams" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInboundGrams(i *int) *ProductUpdate {
	if i != nil {
		pu.SetInboundGrams(*i)
	}
	return pu
}

// AddInboundGrams adds i to the "inbound_grams" field.
func (pu *ProductUpdate) AddInboundGrams(i int) *ProductUpdate {
	pu.mutation.AddInboundGrams(i)
	return pu
}

// SetLength sets the "length" field.
func (pu *ProductUpdate) SetLength(i int) *ProductUpdate {
	pu.mutation.ResetLength()
	pu.mutation.SetLength(i)
	return pu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLength(i *int) *ProductUpdate {
	if i != nil {
		pu.SetLength(*i)
	}
	return pu
}

// AddLength adds i to the "length" field.
func (pu *ProductUpdate) AddLength(i int) *ProductUpdate {
	pu.mutation.AddLength(i)
	return pu
}

// SetWidth sets the "width" field.
func (pu *ProductUpdate) SetWidth(i int) *ProductUpdate {
	pu.mutation.ResetWidth()
	pu.mutation.SetWidth(i)
	return pu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableWidth(i *int) *ProductUpdate {
	if i != nil {
		pu.SetWidth(*i)
	}
	return pu
}

// AddWidth adds i to the "width" field.
func (pu *ProductUpdate) AddWidth(i int) *ProductUpdate {
	pu.mutation.AddWidth(i)
	return pu
}

// SetHeight sets the "height" field.
func (pu *ProductUpdate) SetHeight(i int) *ProductUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(i)
	return pu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableHeight(i *int) *ProductUpdate {
	if i != nil {
		pu.SetHeight(*i)
	}
	return pu
}

// AddHeight adds i to the "height" field.
func (pu *ProductUpdate) AddHeight(i int) *ProductUpdate {
	pu.mutation.AddHeight(i)
	return pu
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (pu *ProductUpdate) SetMaxAgvQty(i int) *ProductUpdate {
	pu.mutation.ResetMaxAgvQty()
	pu.mutation.SetMaxAgvQty(i)
	return pu
}

// SetNillableMaxAgvQty sets the "max_agv_qty" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMaxAgvQty(i *int) *ProductUpdate {
	if i != nil {
		pu.SetMaxAgvQty(*i)
	}
	return pu
}

// AddMaxAgvQty adds i to the "max_agv_qty" field.
func (pu *ProductUpdate) AddMaxAgvQty(i int) *ProductUpdate {
	pu.mutation.AddMaxAgvQty(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(i int8) *ProductUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(i *int8) *ProductUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ProductUpdate) AddStatus(i int8) *ProductUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *ProductUpdate) SetCreatedBy(i int64) *ProductUpdate {
	pu.mutation.ResetCreatedBy()
	pu.mutation.SetCreatedBy(i)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedBy(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCreatedBy(*i)
	}
	return pu
}

// AddCreatedBy adds i to the "created_by" field.
func (pu *ProductUpdate) AddCreatedBy(i int64) *ProductUpdate {
	pu.mutation.AddCreatedBy(i)
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *ProductUpdate) ClearCreatedBy() *ProductUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (pu *ProductUpdate) SetTenantID(id int64) *ProductUpdate {
	pu.mutation.SetTenantID(id)
	return pu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pu *ProductUpdate) SetTenant(t *Tenant) *ProductUpdate {
	return pu.SetTenantID(t.ID)
}

// AddInventoryIDs adds the "inventories" edge to the Inventory entity by IDs.
func (pu *ProductUpdate) AddInventoryIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddInventoryIDs(ids...)
	return pu
}

// AddInventories adds the "inventories" edges to the Inventory entity.
func (pu *ProductUpdate) AddInventories(i ...*Inventory) *ProductUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInventoryIDs(ids...)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (pu *ProductUpdate) AddProductMappingIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddProductMappingIDs(ids...)
	return pu
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (pu *ProductUpdate) AddProductMappings(p ...*ProductMapping) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductMappingIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pu *ProductUpdate) ClearTenant() *ProductUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// ClearInventories clears all "inventories" edges to the Inventory entity.
func (pu *ProductUpdate) ClearInventories() *ProductUpdate {
	pu.mutation.ClearInventories()
	return pu
}

// RemoveInventoryIDs removes the "inventories" edge to Inventory entities by IDs.
func (pu *ProductUpdate) RemoveInventoryIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveInventoryIDs(ids...)
	return pu
}

// RemoveInventories removes "inventories" edges to Inventory entities.
func (pu *ProductUpdate) RemoveInventories(i ...*Inventory) *ProductUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInventoryIDs(ids...)
}

// ClearProductMappings clears all "product_mappings" edges to the ProductMapping entity.
func (pu *ProductUpdate) ClearProductMappings() *ProductUpdate {
	pu.mutation.ClearProductMappings()
	return pu
}

// RemoveProductMappingIDs removes the "product_mappings" edge to ProductMapping entities by IDs.
func (pu *ProductUpdate) RemoveProductMappingIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveProductMappingIDs(ids...)
	return pu
}

// RemoveProductMappings removes "product_mappings" edges to ProductMapping entities.
func (pu *ProductUpdate) RemoveProductMappings(p ...*ProductMapping) *ProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductMappingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if product.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized product.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if _, ok := pu.mutation.TenantID(); pu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Product.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(product.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := pu.mutation.Barcode(); ok {
		_spec.SetField(product.FieldBarcode, field.TypeString, value)
	}
	if value, ok := pu.mutation.CustomerCode(); ok {
		_spec.SetField(product.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.DeclaredName(); ok {
		_spec.SetField(product.FieldDeclaredName, field.TypeString, value)
	}
	if pu.mutation.DeclaredNameCleared() {
		_spec.ClearField(product.FieldDeclaredName, field.TypeString)
	}
	if value, ok := pu.mutation.DeclaredCnName(); ok {
		_spec.SetField(product.FieldDeclaredCnName, field.TypeString, value)
	}
	if pu.mutation.DeclaredCnNameCleared() {
		_spec.ClearField(product.FieldDeclaredCnName, field.TypeString)
	}
	if value, ok := pu.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(product.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(product.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(product.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(product.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Currency(); ok {
		_spec.SetField(product.FieldCurrency, field.TypeString, value)
	}
	if value, ok := pu.mutation.HsCode(); ok {
		_spec.SetField(product.FieldHsCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Material(); ok {
		_spec.SetField(product.FieldMaterial, field.TypeString, value)
	}
	if value, ok := pu.mutation.Purpose(); ok {
		_spec.SetField(product.FieldPurpose, field.TypeString, value)
	}
	if value, ok := pu.mutation.WithBarcode(); ok {
		_spec.SetField(product.FieldWithBarcode, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.AddedWithBarcode(); ok {
		_spec.AddField(product.FieldWithBarcode, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.BarcodeService(); ok {
		_spec.SetField(product.FieldBarcodeService, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.AddedBarcodeService(); ok {
		_spec.AddField(product.FieldBarcodeService, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.BarcodeTemplate(); ok {
		_spec.SetField(product.FieldBarcodeTemplate, field.TypeString, value)
	}
	if pu.mutation.BarcodeTemplateCleared() {
		_spec.ClearField(product.FieldBarcodeTemplate, field.TypeString)
	}
	if value, ok := pu.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeString, value)
	}
	if pu.mutation.ImagesCleared() {
		_spec.ClearField(product.FieldImages, field.TypeString)
	}
	if value, ok := pu.mutation.Attributes(); ok {
		_spec.SetField(product.FieldAttributes, field.TypeString, value)
	}
	if pu.mutation.AttributesCleared() {
		_spec.ClearField(product.FieldAttributes, field.TypeString)
	}
	if value, ok := pu.mutation.ConfirmedAttributes(); ok {
		_spec.SetField(product.FieldConfirmedAttributes, field.TypeString, value)
	}
	if pu.mutation.ConfirmedAttributesCleared() {
		_spec.ClearField(product.FieldConfirmedAttributes, field.TypeString)
	}
	if value, ok := pu.mutation.Grams(); ok {
		_spec.SetField(product.FieldGrams, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGrams(); ok {
		_spec.AddField(product.FieldGrams, field.TypeInt, value)
	}
	if value, ok := pu.mutation.InboundGrams(); ok {
		_spec.SetField(product.FieldInboundGrams, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedInboundGrams(); ok {
		_spec.AddField(product.FieldInboundGrams, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Length(); ok {
		_spec.SetField(product.FieldLength, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLength(); ok {
		_spec.AddField(product.FieldLength, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Width(); ok {
		_spec.SetField(product.FieldWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedWidth(); ok {
		_spec.AddField(product.FieldWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(product.FieldHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.AddField(product.FieldHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.MaxAgvQty(); ok {
		_spec.SetField(product.FieldMaxAgvQty, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMaxAgvQty(); ok {
		_spec.AddField(product.FieldMaxAgvQty, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(product.FieldCreatedBy, field.TypeInt64)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.Product
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.Product
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InventoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInventoriesIDs(); len(nodes) > 0 && !pu.mutation.InventoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InventoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.ProductMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductMappingsIDs(); len(nodes) > 0 && !pu.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = pu.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pu.schemaConfig.Product
	ctx = internal.NewSchemaConfigContext(ctx, pu.schemaConfig)
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProductUpdateOne) SetDeletedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProductUpdateOne) ClearDeletedAt() *ProductUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSku sets the "sku" field.
func (puo *ProductUpdateOne) SetSku(s string) *ProductUpdateOne {
	puo.mutation.SetSku(s)
	return puo
}

// SetBarcode sets the "barcode" field.
func (puo *ProductUpdateOne) SetBarcode(s string) *ProductUpdateOne {
	puo.mutation.SetBarcode(s)
	return puo
}

// SetCustomerCode sets the "customer_code" field.
func (puo *ProductUpdateOne) SetCustomerCode(s string) *ProductUpdateOne {
	puo.mutation.SetCustomerCode(s)
	return puo
}

// SetDeclaredName sets the "declared_name" field.
func (puo *ProductUpdateOne) SetDeclaredName(s string) *ProductUpdateOne {
	puo.mutation.SetDeclaredName(s)
	return puo
}

// SetNillableDeclaredName sets the "declared_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeclaredName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDeclaredName(*s)
	}
	return puo
}

// ClearDeclaredName clears the value of the "declared_name" field.
func (puo *ProductUpdateOne) ClearDeclaredName() *ProductUpdateOne {
	puo.mutation.ClearDeclaredName()
	return puo
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (puo *ProductUpdateOne) SetDeclaredCnName(s string) *ProductUpdateOne {
	puo.mutation.SetDeclaredCnName(s)
	return puo
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeclaredCnName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDeclaredCnName(*s)
	}
	return puo
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (puo *ProductUpdateOne) ClearDeclaredCnName() *ProductUpdateOne {
	puo.mutation.ClearDeclaredCnName()
	return puo
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (puo *ProductUpdateOne) SetDeclaredValueInUsd(f float64) *ProductUpdateOne {
	puo.mutation.ResetDeclaredValueInUsd()
	puo.mutation.SetDeclaredValueInUsd(f)
	return puo
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeclaredValueInUsd(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetDeclaredValueInUsd(*f)
	}
	return puo
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (puo *ProductUpdateOne) AddDeclaredValueInUsd(f float64) *ProductUpdateOne {
	puo.mutation.AddDeclaredValueInUsd(f)
	return puo
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (puo *ProductUpdateOne) SetDeclaredValueInEur(f float64) *ProductUpdateOne {
	puo.mutation.ResetDeclaredValueInEur()
	puo.mutation.SetDeclaredValueInEur(f)
	return puo
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeclaredValueInEur(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetDeclaredValueInEur(*f)
	}
	return puo
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (puo *ProductUpdateOne) AddDeclaredValueInEur(f float64) *ProductUpdateOne {
	puo.mutation.AddDeclaredValueInEur(f)
	return puo
}

// SetCurrency sets the "currency" field.
func (puo *ProductUpdateOne) SetCurrency(s string) *ProductUpdateOne {
	puo.mutation.SetCurrency(s)
	return puo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCurrency(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCurrency(*s)
	}
	return puo
}

// SetHsCode sets the "hs_code" field.
func (puo *ProductUpdateOne) SetHsCode(s string) *ProductUpdateOne {
	puo.mutation.SetHsCode(s)
	return puo
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableHsCode(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetHsCode(*s)
	}
	return puo
}

// SetMaterial sets the "material" field.
func (puo *ProductUpdateOne) SetMaterial(s string) *ProductUpdateOne {
	puo.mutation.SetMaterial(s)
	return puo
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMaterial(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetMaterial(*s)
	}
	return puo
}

// SetPurpose sets the "purpose" field.
func (puo *ProductUpdateOne) SetPurpose(s string) *ProductUpdateOne {
	puo.mutation.SetPurpose(s)
	return puo
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePurpose(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPurpose(*s)
	}
	return puo
}

// SetWithBarcode sets the "with_barcode" field.
func (puo *ProductUpdateOne) SetWithBarcode(i int8) *ProductUpdateOne {
	puo.mutation.ResetWithBarcode()
	puo.mutation.SetWithBarcode(i)
	return puo
}

// SetNillableWithBarcode sets the "with_barcode" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableWithBarcode(i *int8) *ProductUpdateOne {
	if i != nil {
		puo.SetWithBarcode(*i)
	}
	return puo
}

// AddWithBarcode adds i to the "with_barcode" field.
func (puo *ProductUpdateOne) AddWithBarcode(i int8) *ProductUpdateOne {
	puo.mutation.AddWithBarcode(i)
	return puo
}

// SetBarcodeService sets the "barcode_service" field.
func (puo *ProductUpdateOne) SetBarcodeService(i int8) *ProductUpdateOne {
	puo.mutation.ResetBarcodeService()
	puo.mutation.SetBarcodeService(i)
	return puo
}

// SetNillableBarcodeService sets the "barcode_service" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBarcodeService(i *int8) *ProductUpdateOne {
	if i != nil {
		puo.SetBarcodeService(*i)
	}
	return puo
}

// AddBarcodeService adds i to the "barcode_service" field.
func (puo *ProductUpdateOne) AddBarcodeService(i int8) *ProductUpdateOne {
	puo.mutation.AddBarcodeService(i)
	return puo
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (puo *ProductUpdateOne) SetBarcodeTemplate(s string) *ProductUpdateOne {
	puo.mutation.SetBarcodeTemplate(s)
	return puo
}

// SetNillableBarcodeTemplate sets the "barcode_template" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBarcodeTemplate(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetBarcodeTemplate(*s)
	}
	return puo
}

// ClearBarcodeTemplate clears the value of the "barcode_template" field.
func (puo *ProductUpdateOne) ClearBarcodeTemplate() *ProductUpdateOne {
	puo.mutation.ClearBarcodeTemplate()
	return puo
}

// SetImages sets the "images" field.
func (puo *ProductUpdateOne) SetImages(s string) *ProductUpdateOne {
	puo.mutation.SetImages(s)
	return puo
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableImages(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetImages(*s)
	}
	return puo
}

// ClearImages clears the value of the "images" field.
func (puo *ProductUpdateOne) ClearImages() *ProductUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// SetAttributes sets the "attributes" field.
func (puo *ProductUpdateOne) SetAttributes(s string) *ProductUpdateOne {
	puo.mutation.SetAttributes(s)
	return puo
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAttributes(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetAttributes(*s)
	}
	return puo
}

// ClearAttributes clears the value of the "attributes" field.
func (puo *ProductUpdateOne) ClearAttributes() *ProductUpdateOne {
	puo.mutation.ClearAttributes()
	return puo
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (puo *ProductUpdateOne) SetConfirmedAttributes(s string) *ProductUpdateOne {
	puo.mutation.SetConfirmedAttributes(s)
	return puo
}

// SetNillableConfirmedAttributes sets the "confirmed_attributes" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableConfirmedAttributes(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetConfirmedAttributes(*s)
	}
	return puo
}

// ClearConfirmedAttributes clears the value of the "confirmed_attributes" field.
func (puo *ProductUpdateOne) ClearConfirmedAttributes() *ProductUpdateOne {
	puo.mutation.ClearConfirmedAttributes()
	return puo
}

// SetGrams sets the "grams" field.
func (puo *ProductUpdateOne) SetGrams(i int) *ProductUpdateOne {
	puo.mutation.ResetGrams()
	puo.mutation.SetGrams(i)
	return puo
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableGrams(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetGrams(*i)
	}
	return puo
}

// AddGrams adds i to the "grams" field.
func (puo *ProductUpdateOne) AddGrams(i int) *ProductUpdateOne {
	puo.mutation.AddGrams(i)
	return puo
}

// SetInboundGrams sets the "inbound_grams" field.
func (puo *ProductUpdateOne) SetInboundGrams(i int) *ProductUpdateOne {
	puo.mutation.ResetInboundGrams()
	puo.mutation.SetInboundGrams(i)
	return puo
}

// SetNillableInboundGrams sets the "inbound_grams" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInboundGrams(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetInboundGrams(*i)
	}
	return puo
}

// AddInboundGrams adds i to the "inbound_grams" field.
func (puo *ProductUpdateOne) AddInboundGrams(i int) *ProductUpdateOne {
	puo.mutation.AddInboundGrams(i)
	return puo
}

// SetLength sets the "length" field.
func (puo *ProductUpdateOne) SetLength(i int) *ProductUpdateOne {
	puo.mutation.ResetLength()
	puo.mutation.SetLength(i)
	return puo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLength(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetLength(*i)
	}
	return puo
}

// AddLength adds i to the "length" field.
func (puo *ProductUpdateOne) AddLength(i int) *ProductUpdateOne {
	puo.mutation.AddLength(i)
	return puo
}

// SetWidth sets the "width" field.
func (puo *ProductUpdateOne) SetWidth(i int) *ProductUpdateOne {
	puo.mutation.ResetWidth()
	puo.mutation.SetWidth(i)
	return puo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableWidth(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetWidth(*i)
	}
	return puo
}

// AddWidth adds i to the "width" field.
func (puo *ProductUpdateOne) AddWidth(i int) *ProductUpdateOne {
	puo.mutation.AddWidth(i)
	return puo
}

// SetHeight sets the "height" field.
func (puo *ProductUpdateOne) SetHeight(i int) *ProductUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(i)
	return puo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableHeight(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetHeight(*i)
	}
	return puo
}

// AddHeight adds i to the "height" field.
func (puo *ProductUpdateOne) AddHeight(i int) *ProductUpdateOne {
	puo.mutation.AddHeight(i)
	return puo
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (puo *ProductUpdateOne) SetMaxAgvQty(i int) *ProductUpdateOne {
	puo.mutation.ResetMaxAgvQty()
	puo.mutation.SetMaxAgvQty(i)
	return puo
}

// SetNillableMaxAgvQty sets the "max_agv_qty" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMaxAgvQty(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetMaxAgvQty(*i)
	}
	return puo
}

// AddMaxAgvQty adds i to the "max_agv_qty" field.
func (puo *ProductUpdateOne) AddMaxAgvQty(i int) *ProductUpdateOne {
	puo.mutation.AddMaxAgvQty(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(i int8) *ProductUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(i *int8) *ProductUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ProductUpdateOne) AddStatus(i int8) *ProductUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *ProductUpdateOne) SetCreatedBy(i int64) *ProductUpdateOne {
	puo.mutation.ResetCreatedBy()
	puo.mutation.SetCreatedBy(i)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedBy(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCreatedBy(*i)
	}
	return puo
}

// AddCreatedBy adds i to the "created_by" field.
func (puo *ProductUpdateOne) AddCreatedBy(i int64) *ProductUpdateOne {
	puo.mutation.AddCreatedBy(i)
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *ProductUpdateOne) ClearCreatedBy() *ProductUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (puo *ProductUpdateOne) SetTenantID(id int64) *ProductUpdateOne {
	puo.mutation.SetTenantID(id)
	return puo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puo *ProductUpdateOne) SetTenant(t *Tenant) *ProductUpdateOne {
	return puo.SetTenantID(t.ID)
}

// AddInventoryIDs adds the "inventories" edge to the Inventory entity by IDs.
func (puo *ProductUpdateOne) AddInventoryIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddInventoryIDs(ids...)
	return puo
}

// AddInventories adds the "inventories" edges to the Inventory entity.
func (puo *ProductUpdateOne) AddInventories(i ...*Inventory) *ProductUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInventoryIDs(ids...)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (puo *ProductUpdateOne) AddProductMappingIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddProductMappingIDs(ids...)
	return puo
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (puo *ProductUpdateOne) AddProductMappings(p ...*ProductMapping) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductMappingIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puo *ProductUpdateOne) ClearTenant() *ProductUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// ClearInventories clears all "inventories" edges to the Inventory entity.
func (puo *ProductUpdateOne) ClearInventories() *ProductUpdateOne {
	puo.mutation.ClearInventories()
	return puo
}

// RemoveInventoryIDs removes the "inventories" edge to Inventory entities by IDs.
func (puo *ProductUpdateOne) RemoveInventoryIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveInventoryIDs(ids...)
	return puo
}

// RemoveInventories removes "inventories" edges to Inventory entities.
func (puo *ProductUpdateOne) RemoveInventories(i ...*Inventory) *ProductUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInventoryIDs(ids...)
}

// ClearProductMappings clears all "product_mappings" edges to the ProductMapping entity.
func (puo *ProductUpdateOne) ClearProductMappings() *ProductUpdateOne {
	puo.mutation.ClearProductMappings()
	return puo
}

// RemoveProductMappingIDs removes the "product_mappings" edge to ProductMapping entities by IDs.
func (puo *ProductUpdateOne) RemoveProductMappingIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveProductMappingIDs(ids...)
	return puo
}

// RemoveProductMappings removes "product_mappings" edges to ProductMapping entities.
func (puo *ProductUpdateOne) RemoveProductMappings(p ...*ProductMapping) *ProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductMappingIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Product)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProductMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if product.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized product.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if _, ok := puo.mutation.TenantID(); puo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Product.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(product.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := puo.mutation.Barcode(); ok {
		_spec.SetField(product.FieldBarcode, field.TypeString, value)
	}
	if value, ok := puo.mutation.CustomerCode(); ok {
		_spec.SetField(product.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.DeclaredName(); ok {
		_spec.SetField(product.FieldDeclaredName, field.TypeString, value)
	}
	if puo.mutation.DeclaredNameCleared() {
		_spec.ClearField(product.FieldDeclaredName, field.TypeString)
	}
	if value, ok := puo.mutation.DeclaredCnName(); ok {
		_spec.SetField(product.FieldDeclaredCnName, field.TypeString, value)
	}
	if puo.mutation.DeclaredCnNameCleared() {
		_spec.ClearField(product.FieldDeclaredCnName, field.TypeString)
	}
	if value, ok := puo.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(product.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(product.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(product.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(product.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Currency(); ok {
		_spec.SetField(product.FieldCurrency, field.TypeString, value)
	}
	if value, ok := puo.mutation.HsCode(); ok {
		_spec.SetField(product.FieldHsCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Material(); ok {
		_spec.SetField(product.FieldMaterial, field.TypeString, value)
	}
	if value, ok := puo.mutation.Purpose(); ok {
		_spec.SetField(product.FieldPurpose, field.TypeString, value)
	}
	if value, ok := puo.mutation.WithBarcode(); ok {
		_spec.SetField(product.FieldWithBarcode, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.AddedWithBarcode(); ok {
		_spec.AddField(product.FieldWithBarcode, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.BarcodeService(); ok {
		_spec.SetField(product.FieldBarcodeService, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.AddedBarcodeService(); ok {
		_spec.AddField(product.FieldBarcodeService, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.BarcodeTemplate(); ok {
		_spec.SetField(product.FieldBarcodeTemplate, field.TypeString, value)
	}
	if puo.mutation.BarcodeTemplateCleared() {
		_spec.ClearField(product.FieldBarcodeTemplate, field.TypeString)
	}
	if value, ok := puo.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeString, value)
	}
	if puo.mutation.ImagesCleared() {
		_spec.ClearField(product.FieldImages, field.TypeString)
	}
	if value, ok := puo.mutation.Attributes(); ok {
		_spec.SetField(product.FieldAttributes, field.TypeString, value)
	}
	if puo.mutation.AttributesCleared() {
		_spec.ClearField(product.FieldAttributes, field.TypeString)
	}
	if value, ok := puo.mutation.ConfirmedAttributes(); ok {
		_spec.SetField(product.FieldConfirmedAttributes, field.TypeString, value)
	}
	if puo.mutation.ConfirmedAttributesCleared() {
		_spec.ClearField(product.FieldConfirmedAttributes, field.TypeString)
	}
	if value, ok := puo.mutation.Grams(); ok {
		_spec.SetField(product.FieldGrams, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGrams(); ok {
		_spec.AddField(product.FieldGrams, field.TypeInt, value)
	}
	if value, ok := puo.mutation.InboundGrams(); ok {
		_spec.SetField(product.FieldInboundGrams, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedInboundGrams(); ok {
		_spec.AddField(product.FieldInboundGrams, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Length(); ok {
		_spec.SetField(product.FieldLength, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLength(); ok {
		_spec.AddField(product.FieldLength, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Width(); ok {
		_spec.SetField(product.FieldWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedWidth(); ok {
		_spec.AddField(product.FieldWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(product.FieldHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.AddField(product.FieldHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.MaxAgvQty(); ok {
		_spec.SetField(product.FieldMaxAgvQty, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMaxAgvQty(); ok {
		_spec.AddField(product.FieldMaxAgvQty, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(product.FieldCreatedBy, field.TypeInt64)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.Product
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.Product
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InventoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInventoriesIDs(); len(nodes) > 0 && !puo.mutation.InventoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InventoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.ProductMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductMappingsIDs(); len(nodes) > 0 && !puo.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = puo.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = puo.schemaConfig.Product
	ctx = internal.NewSchemaConfigContext(ctx, puo.schemaConfig)
	_spec.AddModifiers(puo.modifiers...)
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
