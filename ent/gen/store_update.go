// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks     []Hook
	mutation  *StoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StoreUpdate) SetUpdatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StoreUpdate) SetDeletedAt(t time.Time) *StoreUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableDeletedAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StoreUpdate) ClearDeletedAt() *StoreUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetStoreURL sets the "store_url" field.
func (su *StoreUpdate) SetStoreURL(s string) *StoreUpdate {
	su.mutation.SetStoreURL(s)
	return su
}

// SetPlatform sets the "platform" field.
func (su *StoreUpdate) SetPlatform(s string) *StoreUpdate {
	su.mutation.SetPlatform(s)
	return su
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (su *StoreUpdate) SetNillablePlatform(s *string) *StoreUpdate {
	if s != nil {
		su.SetPlatform(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *StoreUpdate) SetName(s string) *StoreUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StoreUpdate) SetNillableName(s *string) *StoreUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetCode sets the "code" field.
func (su *StoreUpdate) SetCode(s string) *StoreUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCode(s *string) *StoreUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *StoreUpdate) SetEmail(s string) *StoreUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEmail(s *string) *StoreUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetAccessToken sets the "access_token" field.
func (su *StoreUpdate) SetAccessToken(s string) *StoreUpdate {
	su.mutation.SetAccessToken(s)
	return su
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (su *StoreUpdate) SetNillableAccessToken(s *string) *StoreUpdate {
	if s != nil {
		su.SetAccessToken(*s)
	}
	return su
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (su *StoreUpdate) SetTimezoneOffset(i int8) *StoreUpdate {
	su.mutation.ResetTimezoneOffset()
	su.mutation.SetTimezoneOffset(i)
	return su
}

// SetNillableTimezoneOffset sets the "timezone_offset" field if the given value is not nil.
func (su *StoreUpdate) SetNillableTimezoneOffset(i *int8) *StoreUpdate {
	if i != nil {
		su.SetTimezoneOffset(*i)
	}
	return su
}

// AddTimezoneOffset adds i to the "timezone_offset" field.
func (su *StoreUpdate) AddTimezoneOffset(i int8) *StoreUpdate {
	su.mutation.AddTimezoneOffset(i)
	return su
}

// SetScope sets the "scope" field.
func (su *StoreUpdate) SetScope(s string) *StoreUpdate {
	su.mutation.SetScope(s)
	return su
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (su *StoreUpdate) SetNillableScope(s *string) *StoreUpdate {
	if s != nil {
		su.SetScope(*s)
	}
	return su
}

// SetLocationID sets the "location_id" field.
func (su *StoreUpdate) SetLocationID(s string) *StoreUpdate {
	su.mutation.SetLocationID(s)
	return su
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLocationID(s *string) *StoreUpdate {
	if s != nil {
		su.SetLocationID(*s)
	}
	return su
}

// SetLocations sets the "locations" field.
func (su *StoreUpdate) SetLocations(s string) *StoreUpdate {
	su.mutation.SetLocations(s)
	return su
}

// SetNillableLocations sets the "locations" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLocations(s *string) *StoreUpdate {
	if s != nil {
		su.SetLocations(*s)
	}
	return su
}

// ClearLocations clears the value of the "locations" field.
func (su *StoreUpdate) ClearLocations() *StoreUpdate {
	su.mutation.ClearLocations()
	return su
}

// SetStoreCurrency sets the "store_currency" field.
func (su *StoreUpdate) SetStoreCurrency(s string) *StoreUpdate {
	su.mutation.SetStoreCurrency(s)
	return su
}

// SetNillableStoreCurrency sets the "store_currency" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStoreCurrency(s *string) *StoreUpdate {
	if s != nil {
		su.SetStoreCurrency(*s)
	}
	return su
}

// SetInitialStatus sets the "initial_status" field.
func (su *StoreUpdate) SetInitialStatus(i int8) *StoreUpdate {
	su.mutation.ResetInitialStatus()
	su.mutation.SetInitialStatus(i)
	return su
}

// SetNillableInitialStatus sets the "initial_status" field if the given value is not nil.
func (su *StoreUpdate) SetNillableInitialStatus(i *int8) *StoreUpdate {
	if i != nil {
		su.SetInitialStatus(*i)
	}
	return su
}

// AddInitialStatus adds i to the "initial_status" field.
func (su *StoreUpdate) AddInitialStatus(i int8) *StoreUpdate {
	su.mutation.AddInitialStatus(i)
	return su
}

// SetState sets the "state" field.
func (su *StoreUpdate) SetState(s string) *StoreUpdate {
	su.mutation.SetState(s)
	return su
}

// SetNillableState sets the "state" field if the given value is not nil.
func (su *StoreUpdate) SetNillableState(s *string) *StoreUpdate {
	if s != nil {
		su.SetState(*s)
	}
	return su
}

// SetTimestamp sets the "timestamp" field.
func (su *StoreUpdate) SetTimestamp(i int32) *StoreUpdate {
	su.mutation.ResetTimestamp()
	su.mutation.SetTimestamp(i)
	return su
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (su *StoreUpdate) SetNillableTimestamp(i *int32) *StoreUpdate {
	if i != nil {
		su.SetTimestamp(*i)
	}
	return su
}

// AddTimestamp adds i to the "timestamp" field.
func (su *StoreUpdate) AddTimestamp(i int32) *StoreUpdate {
	su.mutation.AddTimestamp(i)
	return su
}

// SetNonce sets the "nonce" field.
func (su *StoreUpdate) SetNonce(s string) *StoreUpdate {
	su.mutation.SetNonce(s)
	return su
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (su *StoreUpdate) SetNillableNonce(s *string) *StoreUpdate {
	if s != nil {
		su.SetNonce(*s)
	}
	return su
}

// SetBalance sets the "balance" field.
func (su *StoreUpdate) SetBalance(f float64) *StoreUpdate {
	su.mutation.ResetBalance()
	su.mutation.SetBalance(f)
	return su
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (su *StoreUpdate) SetNillableBalance(f *float64) *StoreUpdate {
	if f != nil {
		su.SetBalance(*f)
	}
	return su
}

// AddBalance adds f to the "balance" field.
func (su *StoreUpdate) AddBalance(f float64) *StoreUpdate {
	su.mutation.AddBalance(f)
	return su
}

// SetCurrency sets the "currency" field.
func (su *StoreUpdate) SetCurrency(s string) *StoreUpdate {
	su.mutation.SetCurrency(s)
	return su
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCurrency(s *string) *StoreUpdate {
	if s != nil {
		su.SetCurrency(*s)
	}
	return su
}

// SetHandlingFee sets the "handling_fee" field.
func (su *StoreUpdate) SetHandlingFee(f float64) *StoreUpdate {
	su.mutation.ResetHandlingFee()
	su.mutation.SetHandlingFee(f)
	return su
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (su *StoreUpdate) SetNillableHandlingFee(f *float64) *StoreUpdate {
	if f != nil {
		su.SetHandlingFee(*f)
	}
	return su
}

// AddHandlingFee adds f to the "handling_fee" field.
func (su *StoreUpdate) AddHandlingFee(f float64) *StoreUpdate {
	su.mutation.AddHandlingFee(f)
	return su
}

// SetShippingOption sets the "shipping_option" field.
func (su *StoreUpdate) SetShippingOption(i int8) *StoreUpdate {
	su.mutation.ResetShippingOption()
	su.mutation.SetShippingOption(i)
	return su
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (su *StoreUpdate) SetNillableShippingOption(i *int8) *StoreUpdate {
	if i != nil {
		su.SetShippingOption(*i)
	}
	return su
}

// AddShippingOption adds i to the "shipping_option" field.
func (su *StoreUpdate) AddShippingOption(i int8) *StoreUpdate {
	su.mutation.AddShippingOption(i)
	return su
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (su *StoreUpdate) SetDefaultWarehouse(i int64) *StoreUpdate {
	su.mutation.ResetDefaultWarehouse()
	su.mutation.SetDefaultWarehouse(i)
	return su
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (su *StoreUpdate) SetNillableDefaultWarehouse(i *int64) *StoreUpdate {
	if i != nil {
		su.SetDefaultWarehouse(*i)
	}
	return su
}

// AddDefaultWarehouse adds i to the "default_warehouse" field.
func (su *StoreUpdate) AddDefaultWarehouse(i int64) *StoreUpdate {
	su.mutation.AddDefaultWarehouse(i)
	return su
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (su *StoreUpdate) SetPrepayTariff(i int8) *StoreUpdate {
	su.mutation.ResetPrepayTariff()
	su.mutation.SetPrepayTariff(i)
	return su
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (su *StoreUpdate) SetNillablePrepayTariff(i *int8) *StoreUpdate {
	if i != nil {
		su.SetPrepayTariff(*i)
	}
	return su
}

// AddPrepayTariff adds i to the "prepay_tariff" field.
func (su *StoreUpdate) AddPrepayTariff(i int8) *StoreUpdate {
	su.mutation.AddPrepayTariff(i)
	return su
}

// SetIossNumber sets the "ioss_number" field.
func (su *StoreUpdate) SetIossNumber(s string) *StoreUpdate {
	su.mutation.SetIossNumber(s)
	return su
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (su *StoreUpdate) SetNillableIossNumber(s *string) *StoreUpdate {
	if s != nil {
		su.SetIossNumber(*s)
	}
	return su
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (su *StoreUpdate) SetIossCountryCode(s string) *StoreUpdate {
	su.mutation.SetIossCountryCode(s)
	return su
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (su *StoreUpdate) SetNillableIossCountryCode(s *string) *StoreUpdate {
	if s != nil {
		su.SetIossCountryCode(*s)
	}
	return su
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (su *StoreUpdate) SetUkVatNumber(s string) *StoreUpdate {
	su.mutation.SetUkVatNumber(s)
	return su
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (su *StoreUpdate) SetNillableUkVatNumber(s *string) *StoreUpdate {
	if s != nil {
		su.SetUkVatNumber(*s)
	}
	return su
}

// SetStoreCode sets the "store_code" field.
func (su *StoreUpdate) SetStoreCode(s string) *StoreUpdate {
	su.mutation.SetStoreCode(s)
	return su
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStoreCode(s *string) *StoreUpdate {
	if s != nil {
		su.SetStoreCode(*s)
	}
	return su
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (su *StoreUpdate) SetPresetChannelIds(s string) *StoreUpdate {
	su.mutation.SetPresetChannelIds(s)
	return su
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (su *StoreUpdate) SetNillablePresetChannelIds(s *string) *StoreUpdate {
	if s != nil {
		su.SetPresetChannelIds(*s)
	}
	return su
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (su *StoreUpdate) ClearPresetChannelIds() *StoreUpdate {
	su.mutation.ClearPresetChannelIds()
	return su
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (su *StoreUpdate) SetTestChannelIds(s string) *StoreUpdate {
	su.mutation.SetTestChannelIds(s)
	return su
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (su *StoreUpdate) SetNillableTestChannelIds(s *string) *StoreUpdate {
	if s != nil {
		su.SetTestChannelIds(*s)
	}
	return su
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (su *StoreUpdate) ClearTestChannelIds() *StoreUpdate {
	su.mutation.ClearTestChannelIds()
	return su
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (su *StoreUpdate) SetFirstInboundAt(t time.Time) *StoreUpdate {
	su.mutation.SetFirstInboundAt(t)
	return su
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableFirstInboundAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetFirstInboundAt(*t)
	}
	return su
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (su *StoreUpdate) ClearFirstInboundAt() *StoreUpdate {
	su.mutation.ClearFirstInboundAt()
	return su
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (su *StoreUpdate) SetStorageUnitPrice(f float64) *StoreUpdate {
	su.mutation.ResetStorageUnitPrice()
	su.mutation.SetStorageUnitPrice(f)
	return su
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStorageUnitPrice(f *float64) *StoreUpdate {
	if f != nil {
		su.SetStorageUnitPrice(*f)
	}
	return su
}

// AddStorageUnitPrice adds f to the "storage_unit_price" field.
func (su *StoreUpdate) AddStorageUnitPrice(f float64) *StoreUpdate {
	su.mutation.AddStorageUnitPrice(f)
	return su
}

// SetIntegrationAt sets the "integration_at" field.
func (su *StoreUpdate) SetIntegrationAt(t time.Time) *StoreUpdate {
	su.mutation.SetIntegrationAt(t)
	return su
}

// SetNillableIntegrationAt sets the "integration_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableIntegrationAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetIntegrationAt(*t)
	}
	return su
}

// ClearIntegrationAt clears the value of the "integration_at" field.
func (su *StoreUpdate) ClearIntegrationAt() *StoreUpdate {
	su.mutation.ClearIntegrationAt()
	return su
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (su *StoreUpdate) SetTenantID(id int64) *StoreUpdate {
	su.mutation.SetTenantID(id)
	return su
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (su *StoreUpdate) SetTenant(t *Tenant) *StoreUpdate {
	return su.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (su *StoreUpdate) AddOrderIDs(ids ...int64) *StoreUpdate {
	su.mutation.AddOrderIDs(ids...)
	return su
}

// AddOrders adds the "orders" edges to the Order entity.
func (su *StoreUpdate) AddOrders(o ...*Order) *StoreUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddOrderIDs(ids...)
}

// AddPlatformProductIDs adds the "platform_products" edge to the PlatformProduct entity by IDs.
func (su *StoreUpdate) AddPlatformProductIDs(ids ...int64) *StoreUpdate {
	su.mutation.AddPlatformProductIDs(ids...)
	return su
}

// AddPlatformProducts adds the "platform_products" edges to the PlatformProduct entity.
func (su *StoreUpdate) AddPlatformProducts(p ...*PlatformProduct) *StoreUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPlatformProductIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (su *StoreUpdate) ClearTenant() *StoreUpdate {
	su.mutation.ClearTenant()
	return su
}

// ClearOrders clears all "orders" edges to the Order entity.
func (su *StoreUpdate) ClearOrders() *StoreUpdate {
	su.mutation.ClearOrders()
	return su
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (su *StoreUpdate) RemoveOrderIDs(ids ...int64) *StoreUpdate {
	su.mutation.RemoveOrderIDs(ids...)
	return su
}

// RemoveOrders removes "orders" edges to Order entities.
func (su *StoreUpdate) RemoveOrders(o ...*Order) *StoreUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveOrderIDs(ids...)
}

// ClearPlatformProducts clears all "platform_products" edges to the PlatformProduct entity.
func (su *StoreUpdate) ClearPlatformProducts() *StoreUpdate {
	su.mutation.ClearPlatformProducts()
	return su
}

// RemovePlatformProductIDs removes the "platform_products" edge to PlatformProduct entities by IDs.
func (su *StoreUpdate) RemovePlatformProductIDs(ids ...int64) *StoreUpdate {
	su.mutation.RemovePlatformProductIDs(ids...)
	return su
}

// RemovePlatformProducts removes "platform_products" edges to PlatformProduct entities.
func (su *StoreUpdate) RemovePlatformProducts(p ...*PlatformProduct) *StoreUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePlatformProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoreUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized store.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StoreUpdate) check() error {
	if _, ok := su.mutation.TenantID(); su.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Store.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StoreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: store.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(store.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(store.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.StoreURL(); ok {
		_spec.SetField(store.FieldStoreURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Platform(); ok {
		_spec.SetField(store.FieldPlatform, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(store.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(store.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.AccessToken(); ok {
		_spec.SetField(store.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := su.mutation.TimezoneOffset(); ok {
		_spec.SetField(store.FieldTimezoneOffset, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedTimezoneOffset(); ok {
		_spec.AddField(store.FieldTimezoneOffset, field.TypeInt8, value)
	}
	if value, ok := su.mutation.Scope(); ok {
		_spec.SetField(store.FieldScope, field.TypeString, value)
	}
	if value, ok := su.mutation.LocationID(); ok {
		_spec.SetField(store.FieldLocationID, field.TypeString, value)
	}
	if value, ok := su.mutation.Locations(); ok {
		_spec.SetField(store.FieldLocations, field.TypeString, value)
	}
	if su.mutation.LocationsCleared() {
		_spec.ClearField(store.FieldLocations, field.TypeString)
	}
	if value, ok := su.mutation.StoreCurrency(); ok {
		_spec.SetField(store.FieldStoreCurrency, field.TypeString, value)
	}
	if value, ok := su.mutation.InitialStatus(); ok {
		_spec.SetField(store.FieldInitialStatus, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedInitialStatus(); ok {
		_spec.AddField(store.FieldInitialStatus, field.TypeInt8, value)
	}
	if value, ok := su.mutation.State(); ok {
		_spec.SetField(store.FieldState, field.TypeString, value)
	}
	if value, ok := su.mutation.Timestamp(); ok {
		_spec.SetField(store.FieldTimestamp, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedTimestamp(); ok {
		_spec.AddField(store.FieldTimestamp, field.TypeInt32, value)
	}
	if value, ok := su.mutation.Nonce(); ok {
		_spec.SetField(store.FieldNonce, field.TypeString, value)
	}
	if value, ok := su.mutation.Balance(); ok {
		_spec.SetField(store.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedBalance(); ok {
		_spec.AddField(store.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Currency(); ok {
		_spec.SetField(store.FieldCurrency, field.TypeString, value)
	}
	if value, ok := su.mutation.HandlingFee(); ok {
		_spec.SetField(store.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedHandlingFee(); ok {
		_spec.AddField(store.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.ShippingOption(); ok {
		_spec.SetField(store.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedShippingOption(); ok {
		_spec.AddField(store.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := su.mutation.DefaultWarehouse(); ok {
		_spec.SetField(store.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedDefaultWarehouse(); ok {
		_spec.AddField(store.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := su.mutation.PrepayTariff(); ok {
		_spec.SetField(store.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := su.mutation.AddedPrepayTariff(); ok {
		_spec.AddField(store.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := su.mutation.IossNumber(); ok {
		_spec.SetField(store.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := su.mutation.IossCountryCode(); ok {
		_spec.SetField(store.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := su.mutation.UkVatNumber(); ok {
		_spec.SetField(store.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := su.mutation.StoreCode(); ok {
		_spec.SetField(store.FieldStoreCode, field.TypeString, value)
	}
	if value, ok := su.mutation.PresetChannelIds(); ok {
		_spec.SetField(store.FieldPresetChannelIds, field.TypeString, value)
	}
	if su.mutation.PresetChannelIdsCleared() {
		_spec.ClearField(store.FieldPresetChannelIds, field.TypeString)
	}
	if value, ok := su.mutation.TestChannelIds(); ok {
		_spec.SetField(store.FieldTestChannelIds, field.TypeString, value)
	}
	if su.mutation.TestChannelIdsCleared() {
		_spec.ClearField(store.FieldTestChannelIds, field.TypeString)
	}
	if value, ok := su.mutation.FirstInboundAt(); ok {
		_spec.SetField(store.FieldFirstInboundAt, field.TypeTime, value)
	}
	if su.mutation.FirstInboundAtCleared() {
		_spec.ClearField(store.FieldFirstInboundAt, field.TypeTime)
	}
	if value, ok := su.mutation.StorageUnitPrice(); ok {
		_spec.SetField(store.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedStorageUnitPrice(); ok {
		_spec.AddField(store.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.IntegrationAt(); ok {
		_spec.SetField(store.FieldIntegrationAt, field.TypeTime, value)
	}
	if su.mutation.IntegrationAtCleared() {
		_spec.ClearField(store.FieldIntegrationAt, field.TypeTime)
	}
	if su.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Store
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Store
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlatformProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPlatformProductsIDs(); len(nodes) > 0 && !su.mutation.PlatformProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlatformProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Store
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StoreUpdateOne) SetUpdatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StoreUpdateOne) SetDeletedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableDeletedAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StoreUpdateOne) ClearDeletedAt() *StoreUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetStoreURL sets the "store_url" field.
func (suo *StoreUpdateOne) SetStoreURL(s string) *StoreUpdateOne {
	suo.mutation.SetStoreURL(s)
	return suo
}

// SetPlatform sets the "platform" field.
func (suo *StoreUpdateOne) SetPlatform(s string) *StoreUpdateOne {
	suo.mutation.SetPlatform(s)
	return suo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillablePlatform(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetPlatform(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *StoreUpdateOne) SetName(s string) *StoreUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableName(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetCode sets the "code" field.
func (suo *StoreUpdateOne) SetCode(s string) *StoreUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCode(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *StoreUpdateOne) SetEmail(s string) *StoreUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEmail(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetAccessToken sets the "access_token" field.
func (suo *StoreUpdateOne) SetAccessToken(s string) *StoreUpdateOne {
	suo.mutation.SetAccessToken(s)
	return suo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableAccessToken(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetAccessToken(*s)
	}
	return suo
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (suo *StoreUpdateOne) SetTimezoneOffset(i int8) *StoreUpdateOne {
	suo.mutation.ResetTimezoneOffset()
	suo.mutation.SetTimezoneOffset(i)
	return suo
}

// SetNillableTimezoneOffset sets the "timezone_offset" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableTimezoneOffset(i *int8) *StoreUpdateOne {
	if i != nil {
		suo.SetTimezoneOffset(*i)
	}
	return suo
}

// AddTimezoneOffset adds i to the "timezone_offset" field.
func (suo *StoreUpdateOne) AddTimezoneOffset(i int8) *StoreUpdateOne {
	suo.mutation.AddTimezoneOffset(i)
	return suo
}

// SetScope sets the "scope" field.
func (suo *StoreUpdateOne) SetScope(s string) *StoreUpdateOne {
	suo.mutation.SetScope(s)
	return suo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableScope(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetScope(*s)
	}
	return suo
}

// SetLocationID sets the "location_id" field.
func (suo *StoreUpdateOne) SetLocationID(s string) *StoreUpdateOne {
	suo.mutation.SetLocationID(s)
	return suo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLocationID(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetLocationID(*s)
	}
	return suo
}

// SetLocations sets the "locations" field.
func (suo *StoreUpdateOne) SetLocations(s string) *StoreUpdateOne {
	suo.mutation.SetLocations(s)
	return suo
}

// SetNillableLocations sets the "locations" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLocations(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetLocations(*s)
	}
	return suo
}

// ClearLocations clears the value of the "locations" field.
func (suo *StoreUpdateOne) ClearLocations() *StoreUpdateOne {
	suo.mutation.ClearLocations()
	return suo
}

// SetStoreCurrency sets the "store_currency" field.
func (suo *StoreUpdateOne) SetStoreCurrency(s string) *StoreUpdateOne {
	suo.mutation.SetStoreCurrency(s)
	return suo
}

// SetNillableStoreCurrency sets the "store_currency" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStoreCurrency(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetStoreCurrency(*s)
	}
	return suo
}

// SetInitialStatus sets the "initial_status" field.
func (suo *StoreUpdateOne) SetInitialStatus(i int8) *StoreUpdateOne {
	suo.mutation.ResetInitialStatus()
	suo.mutation.SetInitialStatus(i)
	return suo
}

// SetNillableInitialStatus sets the "initial_status" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableInitialStatus(i *int8) *StoreUpdateOne {
	if i != nil {
		suo.SetInitialStatus(*i)
	}
	return suo
}

// AddInitialStatus adds i to the "initial_status" field.
func (suo *StoreUpdateOne) AddInitialStatus(i int8) *StoreUpdateOne {
	suo.mutation.AddInitialStatus(i)
	return suo
}

// SetState sets the "state" field.
func (suo *StoreUpdateOne) SetState(s string) *StoreUpdateOne {
	suo.mutation.SetState(s)
	return suo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableState(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetState(*s)
	}
	return suo
}

// SetTimestamp sets the "timestamp" field.
func (suo *StoreUpdateOne) SetTimestamp(i int32) *StoreUpdateOne {
	suo.mutation.ResetTimestamp()
	suo.mutation.SetTimestamp(i)
	return suo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableTimestamp(i *int32) *StoreUpdateOne {
	if i != nil {
		suo.SetTimestamp(*i)
	}
	return suo
}

// AddTimestamp adds i to the "timestamp" field.
func (suo *StoreUpdateOne) AddTimestamp(i int32) *StoreUpdateOne {
	suo.mutation.AddTimestamp(i)
	return suo
}

// SetNonce sets the "nonce" field.
func (suo *StoreUpdateOne) SetNonce(s string) *StoreUpdateOne {
	suo.mutation.SetNonce(s)
	return suo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableNonce(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetNonce(*s)
	}
	return suo
}

// SetBalance sets the "balance" field.
func (suo *StoreUpdateOne) SetBalance(f float64) *StoreUpdateOne {
	suo.mutation.ResetBalance()
	suo.mutation.SetBalance(f)
	return suo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableBalance(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetBalance(*f)
	}
	return suo
}

// AddBalance adds f to the "balance" field.
func (suo *StoreUpdateOne) AddBalance(f float64) *StoreUpdateOne {
	suo.mutation.AddBalance(f)
	return suo
}

// SetCurrency sets the "currency" field.
func (suo *StoreUpdateOne) SetCurrency(s string) *StoreUpdateOne {
	suo.mutation.SetCurrency(s)
	return suo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCurrency(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetCurrency(*s)
	}
	return suo
}

// SetHandlingFee sets the "handling_fee" field.
func (suo *StoreUpdateOne) SetHandlingFee(f float64) *StoreUpdateOne {
	suo.mutation.ResetHandlingFee()
	suo.mutation.SetHandlingFee(f)
	return suo
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableHandlingFee(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetHandlingFee(*f)
	}
	return suo
}

// AddHandlingFee adds f to the "handling_fee" field.
func (suo *StoreUpdateOne) AddHandlingFee(f float64) *StoreUpdateOne {
	suo.mutation.AddHandlingFee(f)
	return suo
}

// SetShippingOption sets the "shipping_option" field.
func (suo *StoreUpdateOne) SetShippingOption(i int8) *StoreUpdateOne {
	suo.mutation.ResetShippingOption()
	suo.mutation.SetShippingOption(i)
	return suo
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableShippingOption(i *int8) *StoreUpdateOne {
	if i != nil {
		suo.SetShippingOption(*i)
	}
	return suo
}

// AddShippingOption adds i to the "shipping_option" field.
func (suo *StoreUpdateOne) AddShippingOption(i int8) *StoreUpdateOne {
	suo.mutation.AddShippingOption(i)
	return suo
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (suo *StoreUpdateOne) SetDefaultWarehouse(i int64) *StoreUpdateOne {
	suo.mutation.ResetDefaultWarehouse()
	suo.mutation.SetDefaultWarehouse(i)
	return suo
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableDefaultWarehouse(i *int64) *StoreUpdateOne {
	if i != nil {
		suo.SetDefaultWarehouse(*i)
	}
	return suo
}

// AddDefaultWarehouse adds i to the "default_warehouse" field.
func (suo *StoreUpdateOne) AddDefaultWarehouse(i int64) *StoreUpdateOne {
	suo.mutation.AddDefaultWarehouse(i)
	return suo
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (suo *StoreUpdateOne) SetPrepayTariff(i int8) *StoreUpdateOne {
	suo.mutation.ResetPrepayTariff()
	suo.mutation.SetPrepayTariff(i)
	return suo
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillablePrepayTariff(i *int8) *StoreUpdateOne {
	if i != nil {
		suo.SetPrepayTariff(*i)
	}
	return suo
}

// AddPrepayTariff adds i to the "prepay_tariff" field.
func (suo *StoreUpdateOne) AddPrepayTariff(i int8) *StoreUpdateOne {
	suo.mutation.AddPrepayTariff(i)
	return suo
}

// SetIossNumber sets the "ioss_number" field.
func (suo *StoreUpdateOne) SetIossNumber(s string) *StoreUpdateOne {
	suo.mutation.SetIossNumber(s)
	return suo
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableIossNumber(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetIossNumber(*s)
	}
	return suo
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (suo *StoreUpdateOne) SetIossCountryCode(s string) *StoreUpdateOne {
	suo.mutation.SetIossCountryCode(s)
	return suo
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableIossCountryCode(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetIossCountryCode(*s)
	}
	return suo
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (suo *StoreUpdateOne) SetUkVatNumber(s string) *StoreUpdateOne {
	suo.mutation.SetUkVatNumber(s)
	return suo
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableUkVatNumber(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetUkVatNumber(*s)
	}
	return suo
}

// SetStoreCode sets the "store_code" field.
func (suo *StoreUpdateOne) SetStoreCode(s string) *StoreUpdateOne {
	suo.mutation.SetStoreCode(s)
	return suo
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStoreCode(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetStoreCode(*s)
	}
	return suo
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (suo *StoreUpdateOne) SetPresetChannelIds(s string) *StoreUpdateOne {
	suo.mutation.SetPresetChannelIds(s)
	return suo
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillablePresetChannelIds(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetPresetChannelIds(*s)
	}
	return suo
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (suo *StoreUpdateOne) ClearPresetChannelIds() *StoreUpdateOne {
	suo.mutation.ClearPresetChannelIds()
	return suo
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (suo *StoreUpdateOne) SetTestChannelIds(s string) *StoreUpdateOne {
	suo.mutation.SetTestChannelIds(s)
	return suo
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableTestChannelIds(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetTestChannelIds(*s)
	}
	return suo
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (suo *StoreUpdateOne) ClearTestChannelIds() *StoreUpdateOne {
	suo.mutation.ClearTestChannelIds()
	return suo
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (suo *StoreUpdateOne) SetFirstInboundAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetFirstInboundAt(t)
	return suo
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableFirstInboundAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetFirstInboundAt(*t)
	}
	return suo
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (suo *StoreUpdateOne) ClearFirstInboundAt() *StoreUpdateOne {
	suo.mutation.ClearFirstInboundAt()
	return suo
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (suo *StoreUpdateOne) SetStorageUnitPrice(f float64) *StoreUpdateOne {
	suo.mutation.ResetStorageUnitPrice()
	suo.mutation.SetStorageUnitPrice(f)
	return suo
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStorageUnitPrice(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetStorageUnitPrice(*f)
	}
	return suo
}

// AddStorageUnitPrice adds f to the "storage_unit_price" field.
func (suo *StoreUpdateOne) AddStorageUnitPrice(f float64) *StoreUpdateOne {
	suo.mutation.AddStorageUnitPrice(f)
	return suo
}

// SetIntegrationAt sets the "integration_at" field.
func (suo *StoreUpdateOne) SetIntegrationAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetIntegrationAt(t)
	return suo
}

// SetNillableIntegrationAt sets the "integration_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableIntegrationAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetIntegrationAt(*t)
	}
	return suo
}

// ClearIntegrationAt clears the value of the "integration_at" field.
func (suo *StoreUpdateOne) ClearIntegrationAt() *StoreUpdateOne {
	suo.mutation.ClearIntegrationAt()
	return suo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (suo *StoreUpdateOne) SetTenantID(id int64) *StoreUpdateOne {
	suo.mutation.SetTenantID(id)
	return suo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suo *StoreUpdateOne) SetTenant(t *Tenant) *StoreUpdateOne {
	return suo.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (suo *StoreUpdateOne) AddOrderIDs(ids ...int64) *StoreUpdateOne {
	suo.mutation.AddOrderIDs(ids...)
	return suo
}

// AddOrders adds the "orders" edges to the Order entity.
func (suo *StoreUpdateOne) AddOrders(o ...*Order) *StoreUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddOrderIDs(ids...)
}

// AddPlatformProductIDs adds the "platform_products" edge to the PlatformProduct entity by IDs.
func (suo *StoreUpdateOne) AddPlatformProductIDs(ids ...int64) *StoreUpdateOne {
	suo.mutation.AddPlatformProductIDs(ids...)
	return suo
}

// AddPlatformProducts adds the "platform_products" edges to the PlatformProduct entity.
func (suo *StoreUpdateOne) AddPlatformProducts(p ...*PlatformProduct) *StoreUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPlatformProductIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suo *StoreUpdateOne) ClearTenant() *StoreUpdateOne {
	suo.mutation.ClearTenant()
	return suo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (suo *StoreUpdateOne) ClearOrders() *StoreUpdateOne {
	suo.mutation.ClearOrders()
	return suo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (suo *StoreUpdateOne) RemoveOrderIDs(ids ...int64) *StoreUpdateOne {
	suo.mutation.RemoveOrderIDs(ids...)
	return suo
}

// RemoveOrders removes "orders" edges to Order entities.
func (suo *StoreUpdateOne) RemoveOrders(o ...*Order) *StoreUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveOrderIDs(ids...)
}

// ClearPlatformProducts clears all "platform_products" edges to the PlatformProduct entity.
func (suo *StoreUpdateOne) ClearPlatformProducts() *StoreUpdateOne {
	suo.mutation.ClearPlatformProducts()
	return suo
}

// RemovePlatformProductIDs removes the "platform_products" edge to PlatformProduct entities by IDs.
func (suo *StoreUpdateOne) RemovePlatformProductIDs(ids ...int64) *StoreUpdateOne {
	suo.mutation.RemovePlatformProductIDs(ids...)
	return suo
}

// RemovePlatformProducts removes "platform_products" edges to PlatformProduct entities.
func (suo *StoreUpdateOne) RemovePlatformProducts(p ...*PlatformProduct) *StoreUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePlatformProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	var (
		err  error
		node *Store
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Store)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoreUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized store.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoreUpdateOne) check() error {
	if _, ok := suo.mutation.TenantID(); suo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Store.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StoreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: store.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(store.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(store.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.StoreURL(); ok {
		_spec.SetField(store.FieldStoreURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Platform(); ok {
		_spec.SetField(store.FieldPlatform, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(store.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(store.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.AccessToken(); ok {
		_spec.SetField(store.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := suo.mutation.TimezoneOffset(); ok {
		_spec.SetField(store.FieldTimezoneOffset, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedTimezoneOffset(); ok {
		_spec.AddField(store.FieldTimezoneOffset, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.Scope(); ok {
		_spec.SetField(store.FieldScope, field.TypeString, value)
	}
	if value, ok := suo.mutation.LocationID(); ok {
		_spec.SetField(store.FieldLocationID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Locations(); ok {
		_spec.SetField(store.FieldLocations, field.TypeString, value)
	}
	if suo.mutation.LocationsCleared() {
		_spec.ClearField(store.FieldLocations, field.TypeString)
	}
	if value, ok := suo.mutation.StoreCurrency(); ok {
		_spec.SetField(store.FieldStoreCurrency, field.TypeString, value)
	}
	if value, ok := suo.mutation.InitialStatus(); ok {
		_spec.SetField(store.FieldInitialStatus, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedInitialStatus(); ok {
		_spec.AddField(store.FieldInitialStatus, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.State(); ok {
		_spec.SetField(store.FieldState, field.TypeString, value)
	}
	if value, ok := suo.mutation.Timestamp(); ok {
		_spec.SetField(store.FieldTimestamp, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedTimestamp(); ok {
		_spec.AddField(store.FieldTimestamp, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.Nonce(); ok {
		_spec.SetField(store.FieldNonce, field.TypeString, value)
	}
	if value, ok := suo.mutation.Balance(); ok {
		_spec.SetField(store.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedBalance(); ok {
		_spec.AddField(store.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Currency(); ok {
		_spec.SetField(store.FieldCurrency, field.TypeString, value)
	}
	if value, ok := suo.mutation.HandlingFee(); ok {
		_spec.SetField(store.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedHandlingFee(); ok {
		_spec.AddField(store.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.ShippingOption(); ok {
		_spec.SetField(store.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedShippingOption(); ok {
		_spec.AddField(store.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.DefaultWarehouse(); ok {
		_spec.SetField(store.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedDefaultWarehouse(); ok {
		_spec.AddField(store.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.PrepayTariff(); ok {
		_spec.SetField(store.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.AddedPrepayTariff(); ok {
		_spec.AddField(store.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := suo.mutation.IossNumber(); ok {
		_spec.SetField(store.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := suo.mutation.IossCountryCode(); ok {
		_spec.SetField(store.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.UkVatNumber(); ok {
		_spec.SetField(store.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := suo.mutation.StoreCode(); ok {
		_spec.SetField(store.FieldStoreCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.PresetChannelIds(); ok {
		_spec.SetField(store.FieldPresetChannelIds, field.TypeString, value)
	}
	if suo.mutation.PresetChannelIdsCleared() {
		_spec.ClearField(store.FieldPresetChannelIds, field.TypeString)
	}
	if value, ok := suo.mutation.TestChannelIds(); ok {
		_spec.SetField(store.FieldTestChannelIds, field.TypeString, value)
	}
	if suo.mutation.TestChannelIdsCleared() {
		_spec.ClearField(store.FieldTestChannelIds, field.TypeString)
	}
	if value, ok := suo.mutation.FirstInboundAt(); ok {
		_spec.SetField(store.FieldFirstInboundAt, field.TypeTime, value)
	}
	if suo.mutation.FirstInboundAtCleared() {
		_spec.ClearField(store.FieldFirstInboundAt, field.TypeTime)
	}
	if value, ok := suo.mutation.StorageUnitPrice(); ok {
		_spec.SetField(store.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedStorageUnitPrice(); ok {
		_spec.AddField(store.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.IntegrationAt(); ok {
		_spec.SetField(store.FieldIntegrationAt, field.TypeTime, value)
	}
	if suo.mutation.IntegrationAtCleared() {
		_spec.ClearField(store.FieldIntegrationAt, field.TypeTime)
	}
	if suo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Store
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Store
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlatformProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPlatformProductsIDs(); len(nodes) > 0 && !suo.mutation.PlatformProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlatformProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Store
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
