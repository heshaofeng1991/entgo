// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/courierorder"
)

// CourierOrderCreate is the builder for creating a CourierOrder entity.
type CourierOrderCreate struct {
	config
	mutation *CourierOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (coc *CourierOrderCreate) SetCreatedAt(t time.Time) *CourierOrderCreate {
	coc.mutation.SetCreatedAt(t)
	return coc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableCreatedAt(t *time.Time) *CourierOrderCreate {
	if t != nil {
		coc.SetCreatedAt(*t)
	}
	return coc
}

// SetUpdatedAt sets the "updated_at" field.
func (coc *CourierOrderCreate) SetUpdatedAt(t time.Time) *CourierOrderCreate {
	coc.mutation.SetUpdatedAt(t)
	return coc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableUpdatedAt(t *time.Time) *CourierOrderCreate {
	if t != nil {
		coc.SetUpdatedAt(*t)
	}
	return coc
}

// SetDeletedAt sets the "deleted_at" field.
func (coc *CourierOrderCreate) SetDeletedAt(t time.Time) *CourierOrderCreate {
	coc.mutation.SetDeletedAt(t)
	return coc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableDeletedAt(t *time.Time) *CourierOrderCreate {
	if t != nil {
		coc.SetDeletedAt(*t)
	}
	return coc
}

// SetOrderID sets the "order_id" field.
func (coc *CourierOrderCreate) SetOrderID(i int64) *CourierOrderCreate {
	coc.mutation.SetOrderID(i)
	return coc
}

// SetOrderNumber sets the "order_number" field.
func (coc *CourierOrderCreate) SetOrderNumber(s string) *CourierOrderCreate {
	coc.mutation.SetOrderNumber(s)
	return coc
}

// SetCourierPlatform sets the "courier_platform" field.
func (coc *CourierOrderCreate) SetCourierPlatform(s string) *CourierOrderCreate {
	coc.mutation.SetCourierPlatform(s)
	return coc
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableCourierPlatform(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetCourierPlatform(*s)
	}
	return coc
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (coc *CourierOrderCreate) SetShippingMethodCode(s string) *CourierOrderCreate {
	coc.mutation.SetShippingMethodCode(s)
	return coc
}

// SetNillableShippingMethodCode sets the "shipping_method_code" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableShippingMethodCode(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetShippingMethodCode(*s)
	}
	return coc
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (coc *CourierOrderCreate) SetShippingMethodName(s string) *CourierOrderCreate {
	coc.mutation.SetShippingMethodName(s)
	return coc
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableShippingMethodName(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetShippingMethodName(*s)
	}
	return coc
}

// SetTrackingURL sets the "tracking_url" field.
func (coc *CourierOrderCreate) SetTrackingURL(s string) *CourierOrderCreate {
	coc.mutation.SetTrackingURL(s)
	return coc
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableTrackingURL(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetTrackingURL(*s)
	}
	return coc
}

// SetTrackingNumber sets the "tracking_number" field.
func (coc *CourierOrderCreate) SetTrackingNumber(s string) *CourierOrderCreate {
	coc.mutation.SetTrackingNumber(s)
	return coc
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableTrackingNumber(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetTrackingNumber(*s)
	}
	return coc
}

// SetWaybillNumber sets the "waybill_number" field.
func (coc *CourierOrderCreate) SetWaybillNumber(s string) *CourierOrderCreate {
	coc.mutation.SetWaybillNumber(s)
	return coc
}

// SetNillableWaybillNumber sets the "waybill_number" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableWaybillNumber(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetWaybillNumber(*s)
	}
	return coc
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (coc *CourierOrderCreate) SetCourierOrderNumber(s string) *CourierOrderCreate {
	coc.mutation.SetCourierOrderNumber(s)
	return coc
}

// SetNillableCourierOrderNumber sets the "courier_order_number" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableCourierOrderNumber(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetCourierOrderNumber(*s)
	}
	return coc
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (coc *CourierOrderCreate) SetShippingLabelURL(s string) *CourierOrderCreate {
	coc.mutation.SetShippingLabelURL(s)
	return coc
}

// SetNillableShippingLabelURL sets the "shipping_label_url" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableShippingLabelURL(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetShippingLabelURL(*s)
	}
	return coc
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (coc *CourierOrderCreate) SetTotalItemsPrice(f float64) *CourierOrderCreate {
	coc.mutation.SetTotalItemsPrice(f)
	return coc
}

// SetNillableTotalItemsPrice sets the "total_items_price" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableTotalItemsPrice(f *float64) *CourierOrderCreate {
	if f != nil {
		coc.SetTotalItemsPrice(*f)
	}
	return coc
}

// SetCurrency sets the "currency" field.
func (coc *CourierOrderCreate) SetCurrency(s string) *CourierOrderCreate {
	coc.mutation.SetCurrency(s)
	return coc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableCurrency(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetCurrency(*s)
	}
	return coc
}

// SetPackageCount sets the "package_count" field.
func (coc *CourierOrderCreate) SetPackageCount(i int) *CourierOrderCreate {
	coc.mutation.SetPackageCount(i)
	return coc
}

// SetNillablePackageCount sets the "package_count" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillablePackageCount(i *int) *CourierOrderCreate {
	if i != nil {
		coc.SetPackageCount(*i)
	}
	return coc
}

// SetWeight sets the "weight" field.
func (coc *CourierOrderCreate) SetWeight(i int) *CourierOrderCreate {
	coc.mutation.SetWeight(i)
	return coc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableWeight(i *int) *CourierOrderCreate {
	if i != nil {
		coc.SetWeight(*i)
	}
	return coc
}

// SetReceiverAddress sets the "receiver_address" field.
func (coc *CourierOrderCreate) SetReceiverAddress(s string) *CourierOrderCreate {
	coc.mutation.SetReceiverAddress(s)
	return coc
}

// SetNillableReceiverAddress sets the "receiver_address" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableReceiverAddress(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetReceiverAddress(*s)
	}
	return coc
}

// SetSenderAddress sets the "sender_address" field.
func (coc *CourierOrderCreate) SetSenderAddress(s string) *CourierOrderCreate {
	coc.mutation.SetSenderAddress(s)
	return coc
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableSenderAddress(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetSenderAddress(*s)
	}
	return coc
}

// SetItems sets the "items" field.
func (coc *CourierOrderCreate) SetItems(s string) *CourierOrderCreate {
	coc.mutation.SetItems(s)
	return coc
}

// SetNillableItems sets the "items" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableItems(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetItems(*s)
	}
	return coc
}

// SetRequestData sets the "request_data" field.
func (coc *CourierOrderCreate) SetRequestData(s string) *CourierOrderCreate {
	coc.mutation.SetRequestData(s)
	return coc
}

// SetNillableRequestData sets the "request_data" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableRequestData(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetRequestData(*s)
	}
	return coc
}

// SetResponseData sets the "response_data" field.
func (coc *CourierOrderCreate) SetResponseData(s string) *CourierOrderCreate {
	coc.mutation.SetResponseData(s)
	return coc
}

// SetNillableResponseData sets the "response_data" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableResponseData(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetResponseData(*s)
	}
	return coc
}

// SetResultCode sets the "result_code" field.
func (coc *CourierOrderCreate) SetResultCode(s string) *CourierOrderCreate {
	coc.mutation.SetResultCode(s)
	return coc
}

// SetNillableResultCode sets the "result_code" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableResultCode(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetResultCode(*s)
	}
	return coc
}

// SetMessage sets the "message" field.
func (coc *CourierOrderCreate) SetMessage(s string) *CourierOrderCreate {
	coc.mutation.SetMessage(s)
	return coc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableMessage(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetMessage(*s)
	}
	return coc
}

// SetEnMessage sets the "en_message" field.
func (coc *CourierOrderCreate) SetEnMessage(s string) *CourierOrderCreate {
	coc.mutation.SetEnMessage(s)
	return coc
}

// SetNillableEnMessage sets the "en_message" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableEnMessage(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetEnMessage(*s)
	}
	return coc
}

// SetStatus sets the "status" field.
func (coc *CourierOrderCreate) SetStatus(s string) *CourierOrderCreate {
	coc.mutation.SetStatus(s)
	return coc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (coc *CourierOrderCreate) SetNillableStatus(s *string) *CourierOrderCreate {
	if s != nil {
		coc.SetStatus(*s)
	}
	return coc
}

// SetID sets the "id" field.
func (coc *CourierOrderCreate) SetID(i int64) *CourierOrderCreate {
	coc.mutation.SetID(i)
	return coc
}

// Mutation returns the CourierOrderMutation object of the builder.
func (coc *CourierOrderCreate) Mutation() *CourierOrderMutation {
	return coc.mutation
}

// Save creates the CourierOrder in the database.
func (coc *CourierOrderCreate) Save(ctx context.Context) (*CourierOrder, error) {
	var (
		err  error
		node *CourierOrder
	)
	coc.defaults()
	if len(coc.hooks) == 0 {
		if err = coc.check(); err != nil {
			return nil, err
		}
		node, err = coc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourierOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = coc.check(); err != nil {
				return nil, err
			}
			coc.mutation = mutation
			if node, err = coc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(coc.hooks) - 1; i >= 0; i-- {
			if coc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = coc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, coc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CourierOrder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CourierOrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CourierOrderCreate) SaveX(ctx context.Context) *CourierOrder {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CourierOrderCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CourierOrderCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *CourierOrderCreate) defaults() {
	if _, ok := coc.mutation.CreatedAt(); !ok {
		v := courierorder.DefaultCreatedAt()
		coc.mutation.SetCreatedAt(v)
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		v := courierorder.DefaultUpdatedAt()
		coc.mutation.SetUpdatedAt(v)
	}
	if _, ok := coc.mutation.CourierPlatform(); !ok {
		v := courierorder.DefaultCourierPlatform
		coc.mutation.SetCourierPlatform(v)
	}
	if _, ok := coc.mutation.ShippingMethodCode(); !ok {
		v := courierorder.DefaultShippingMethodCode
		coc.mutation.SetShippingMethodCode(v)
	}
	if _, ok := coc.mutation.ShippingMethodName(); !ok {
		v := courierorder.DefaultShippingMethodName
		coc.mutation.SetShippingMethodName(v)
	}
	if _, ok := coc.mutation.TrackingURL(); !ok {
		v := courierorder.DefaultTrackingURL
		coc.mutation.SetTrackingURL(v)
	}
	if _, ok := coc.mutation.TrackingNumber(); !ok {
		v := courierorder.DefaultTrackingNumber
		coc.mutation.SetTrackingNumber(v)
	}
	if _, ok := coc.mutation.WaybillNumber(); !ok {
		v := courierorder.DefaultWaybillNumber
		coc.mutation.SetWaybillNumber(v)
	}
	if _, ok := coc.mutation.CourierOrderNumber(); !ok {
		v := courierorder.DefaultCourierOrderNumber
		coc.mutation.SetCourierOrderNumber(v)
	}
	if _, ok := coc.mutation.ShippingLabelURL(); !ok {
		v := courierorder.DefaultShippingLabelURL
		coc.mutation.SetShippingLabelURL(v)
	}
	if _, ok := coc.mutation.TotalItemsPrice(); !ok {
		v := courierorder.DefaultTotalItemsPrice
		coc.mutation.SetTotalItemsPrice(v)
	}
	if _, ok := coc.mutation.PackageCount(); !ok {
		v := courierorder.DefaultPackageCount
		coc.mutation.SetPackageCount(v)
	}
	if _, ok := coc.mutation.Weight(); !ok {
		v := courierorder.DefaultWeight
		coc.mutation.SetWeight(v)
	}
	if _, ok := coc.mutation.ResultCode(); !ok {
		v := courierorder.DefaultResultCode
		coc.mutation.SetResultCode(v)
	}
	if _, ok := coc.mutation.Message(); !ok {
		v := courierorder.DefaultMessage
		coc.mutation.SetMessage(v)
	}
	if _, ok := coc.mutation.EnMessage(); !ok {
		v := courierorder.DefaultEnMessage
		coc.mutation.SetEnMessage(v)
	}
	if _, ok := coc.mutation.Status(); !ok {
		v := courierorder.DefaultStatus
		coc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CourierOrderCreate) check() error {
	if _, ok := coc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "CourierOrder.created_at"`)}
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "CourierOrder.updated_at"`)}
	}
	if _, ok := coc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`gen: missing required field "CourierOrder.order_id"`)}
	}
	if _, ok := coc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`gen: missing required field "CourierOrder.order_number"`)}
	}
	if _, ok := coc.mutation.CourierPlatform(); !ok {
		return &ValidationError{Name: "courier_platform", err: errors.New(`gen: missing required field "CourierOrder.courier_platform"`)}
	}
	if _, ok := coc.mutation.ShippingMethodCode(); !ok {
		return &ValidationError{Name: "shipping_method_code", err: errors.New(`gen: missing required field "CourierOrder.shipping_method_code"`)}
	}
	if _, ok := coc.mutation.ShippingMethodName(); !ok {
		return &ValidationError{Name: "shipping_method_name", err: errors.New(`gen: missing required field "CourierOrder.shipping_method_name"`)}
	}
	if _, ok := coc.mutation.TrackingURL(); !ok {
		return &ValidationError{Name: "tracking_url", err: errors.New(`gen: missing required field "CourierOrder.tracking_url"`)}
	}
	if _, ok := coc.mutation.TrackingNumber(); !ok {
		return &ValidationError{Name: "tracking_number", err: errors.New(`gen: missing required field "CourierOrder.tracking_number"`)}
	}
	if _, ok := coc.mutation.WaybillNumber(); !ok {
		return &ValidationError{Name: "waybill_number", err: errors.New(`gen: missing required field "CourierOrder.waybill_number"`)}
	}
	if _, ok := coc.mutation.CourierOrderNumber(); !ok {
		return &ValidationError{Name: "courier_order_number", err: errors.New(`gen: missing required field "CourierOrder.courier_order_number"`)}
	}
	if _, ok := coc.mutation.ShippingLabelURL(); !ok {
		return &ValidationError{Name: "shipping_label_url", err: errors.New(`gen: missing required field "CourierOrder.shipping_label_url"`)}
	}
	if _, ok := coc.mutation.TotalItemsPrice(); !ok {
		return &ValidationError{Name: "total_items_price", err: errors.New(`gen: missing required field "CourierOrder.total_items_price"`)}
	}
	if _, ok := coc.mutation.PackageCount(); !ok {
		return &ValidationError{Name: "package_count", err: errors.New(`gen: missing required field "CourierOrder.package_count"`)}
	}
	if _, ok := coc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`gen: missing required field "CourierOrder.weight"`)}
	}
	if _, ok := coc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "CourierOrder.status"`)}
	}
	return nil
}

func (coc *CourierOrderCreate) sqlSave(ctx context.Context) (*CourierOrder, error) {
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (coc *CourierOrderCreate) createSpec() (*CourierOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &CourierOrder{config: coc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: courierorder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: courierorder.FieldID,
			},
		}
	)
	_spec.Schema = coc.schemaConfig.CourierOrder
	_spec.OnConflict = coc.conflict
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.SetField(courierorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.SetField(courierorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := coc.mutation.DeletedAt(); ok {
		_spec.SetField(courierorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := coc.mutation.OrderID(); ok {
		_spec.SetField(courierorder.FieldOrderID, field.TypeInt64, value)
		_node.OrderID = value
	}
	if value, ok := coc.mutation.OrderNumber(); ok {
		_spec.SetField(courierorder.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := coc.mutation.CourierPlatform(); ok {
		_spec.SetField(courierorder.FieldCourierPlatform, field.TypeString, value)
		_node.CourierPlatform = value
	}
	if value, ok := coc.mutation.ShippingMethodCode(); ok {
		_spec.SetField(courierorder.FieldShippingMethodCode, field.TypeString, value)
		_node.ShippingMethodCode = value
	}
	if value, ok := coc.mutation.ShippingMethodName(); ok {
		_spec.SetField(courierorder.FieldShippingMethodName, field.TypeString, value)
		_node.ShippingMethodName = value
	}
	if value, ok := coc.mutation.TrackingURL(); ok {
		_spec.SetField(courierorder.FieldTrackingURL, field.TypeString, value)
		_node.TrackingURL = value
	}
	if value, ok := coc.mutation.TrackingNumber(); ok {
		_spec.SetField(courierorder.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := coc.mutation.WaybillNumber(); ok {
		_spec.SetField(courierorder.FieldWaybillNumber, field.TypeString, value)
		_node.WaybillNumber = value
	}
	if value, ok := coc.mutation.CourierOrderNumber(); ok {
		_spec.SetField(courierorder.FieldCourierOrderNumber, field.TypeString, value)
		_node.CourierOrderNumber = value
	}
	if value, ok := coc.mutation.ShippingLabelURL(); ok {
		_spec.SetField(courierorder.FieldShippingLabelURL, field.TypeString, value)
		_node.ShippingLabelURL = value
	}
	if value, ok := coc.mutation.TotalItemsPrice(); ok {
		_spec.SetField(courierorder.FieldTotalItemsPrice, field.TypeFloat64, value)
		_node.TotalItemsPrice = value
	}
	if value, ok := coc.mutation.Currency(); ok {
		_spec.SetField(courierorder.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := coc.mutation.PackageCount(); ok {
		_spec.SetField(courierorder.FieldPackageCount, field.TypeInt, value)
		_node.PackageCount = value
	}
	if value, ok := coc.mutation.Weight(); ok {
		_spec.SetField(courierorder.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := coc.mutation.ReceiverAddress(); ok {
		_spec.SetField(courierorder.FieldReceiverAddress, field.TypeString, value)
		_node.ReceiverAddress = &value
	}
	if value, ok := coc.mutation.SenderAddress(); ok {
		_spec.SetField(courierorder.FieldSenderAddress, field.TypeString, value)
		_node.SenderAddress = &value
	}
	if value, ok := coc.mutation.Items(); ok {
		_spec.SetField(courierorder.FieldItems, field.TypeString, value)
		_node.Items = &value
	}
	if value, ok := coc.mutation.RequestData(); ok {
		_spec.SetField(courierorder.FieldRequestData, field.TypeString, value)
		_node.RequestData = &value
	}
	if value, ok := coc.mutation.ResponseData(); ok {
		_spec.SetField(courierorder.FieldResponseData, field.TypeString, value)
		_node.ResponseData = &value
	}
	if value, ok := coc.mutation.ResultCode(); ok {
		_spec.SetField(courierorder.FieldResultCode, field.TypeString, value)
		_node.ResultCode = value
	}
	if value, ok := coc.mutation.Message(); ok {
		_spec.SetField(courierorder.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := coc.mutation.EnMessage(); ok {
		_spec.SetField(courierorder.FieldEnMessage, field.TypeString, value)
		_node.EnMessage = value
	}
	if value, ok := coc.mutation.Status(); ok {
		_spec.SetField(courierorder.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CourierOrder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CourierOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (coc *CourierOrderCreate) OnConflict(opts ...sql.ConflictOption) *CourierOrderUpsertOne {
	coc.conflict = opts
	return &CourierOrderUpsertOne{
		create: coc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (coc *CourierOrderCreate) OnConflictColumns(columns ...string) *CourierOrderUpsertOne {
	coc.conflict = append(coc.conflict, sql.ConflictColumns(columns...))
	return &CourierOrderUpsertOne{
		create: coc,
	}
}

type (
	// CourierOrderUpsertOne is the builder for "upsert"-ing
	//  one CourierOrder node.
	CourierOrderUpsertOne struct {
		create *CourierOrderCreate
	}

	// CourierOrderUpsert is the "OnConflict" setter.
	CourierOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CourierOrderUpsert) SetUpdatedAt(v time.Time) *CourierOrderUpsert {
	u.Set(courierorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateUpdatedAt() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CourierOrderUpsert) SetDeletedAt(v time.Time) *CourierOrderUpsert {
	u.Set(courierorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateDeletedAt() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CourierOrderUpsert) ClearDeletedAt() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *CourierOrderUpsert) SetOrderID(v int64) *CourierOrderUpsert {
	u.Set(courierorder.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateOrderID() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldOrderID)
	return u
}

// AddOrderID adds v to the "order_id" field.
func (u *CourierOrderUpsert) AddOrderID(v int64) *CourierOrderUpsert {
	u.Add(courierorder.FieldOrderID, v)
	return u
}

// SetOrderNumber sets the "order_number" field.
func (u *CourierOrderUpsert) SetOrderNumber(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldOrderNumber, v)
	return u
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateOrderNumber() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldOrderNumber)
	return u
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *CourierOrderUpsert) SetCourierPlatform(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldCourierPlatform, v)
	return u
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateCourierPlatform() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldCourierPlatform)
	return u
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (u *CourierOrderUpsert) SetShippingMethodCode(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldShippingMethodCode, v)
	return u
}

// UpdateShippingMethodCode sets the "shipping_method_code" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateShippingMethodCode() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldShippingMethodCode)
	return u
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (u *CourierOrderUpsert) SetShippingMethodName(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldShippingMethodName, v)
	return u
}

// UpdateShippingMethodName sets the "shipping_method_name" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateShippingMethodName() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldShippingMethodName)
	return u
}

// SetTrackingURL sets the "tracking_url" field.
func (u *CourierOrderUpsert) SetTrackingURL(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldTrackingURL, v)
	return u
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateTrackingURL() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldTrackingURL)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *CourierOrderUpsert) SetTrackingNumber(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateTrackingNumber() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldTrackingNumber)
	return u
}

// SetWaybillNumber sets the "waybill_number" field.
func (u *CourierOrderUpsert) SetWaybillNumber(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldWaybillNumber, v)
	return u
}

// UpdateWaybillNumber sets the "waybill_number" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateWaybillNumber() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldWaybillNumber)
	return u
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (u *CourierOrderUpsert) SetCourierOrderNumber(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldCourierOrderNumber, v)
	return u
}

// UpdateCourierOrderNumber sets the "courier_order_number" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateCourierOrderNumber() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldCourierOrderNumber)
	return u
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (u *CourierOrderUpsert) SetShippingLabelURL(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldShippingLabelURL, v)
	return u
}

// UpdateShippingLabelURL sets the "shipping_label_url" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateShippingLabelURL() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldShippingLabelURL)
	return u
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (u *CourierOrderUpsert) SetTotalItemsPrice(v float64) *CourierOrderUpsert {
	u.Set(courierorder.FieldTotalItemsPrice, v)
	return u
}

// UpdateTotalItemsPrice sets the "total_items_price" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateTotalItemsPrice() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldTotalItemsPrice)
	return u
}

// AddTotalItemsPrice adds v to the "total_items_price" field.
func (u *CourierOrderUpsert) AddTotalItemsPrice(v float64) *CourierOrderUpsert {
	u.Add(courierorder.FieldTotalItemsPrice, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *CourierOrderUpsert) SetCurrency(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateCurrency() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldCurrency)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *CourierOrderUpsert) ClearCurrency() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldCurrency)
	return u
}

// SetPackageCount sets the "package_count" field.
func (u *CourierOrderUpsert) SetPackageCount(v int) *CourierOrderUpsert {
	u.Set(courierorder.FieldPackageCount, v)
	return u
}

// UpdatePackageCount sets the "package_count" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdatePackageCount() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldPackageCount)
	return u
}

// AddPackageCount adds v to the "package_count" field.
func (u *CourierOrderUpsert) AddPackageCount(v int) *CourierOrderUpsert {
	u.Add(courierorder.FieldPackageCount, v)
	return u
}

// SetWeight sets the "weight" field.
func (u *CourierOrderUpsert) SetWeight(v int) *CourierOrderUpsert {
	u.Set(courierorder.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateWeight() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *CourierOrderUpsert) AddWeight(v int) *CourierOrderUpsert {
	u.Add(courierorder.FieldWeight, v)
	return u
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *CourierOrderUpsert) SetReceiverAddress(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldReceiverAddress, v)
	return u
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateReceiverAddress() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldReceiverAddress)
	return u
}

// ClearReceiverAddress clears the value of the "receiver_address" field.
func (u *CourierOrderUpsert) ClearReceiverAddress() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldReceiverAddress)
	return u
}

// SetSenderAddress sets the "sender_address" field.
func (u *CourierOrderUpsert) SetSenderAddress(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldSenderAddress, v)
	return u
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateSenderAddress() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldSenderAddress)
	return u
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *CourierOrderUpsert) ClearSenderAddress() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldSenderAddress)
	return u
}

// SetItems sets the "items" field.
func (u *CourierOrderUpsert) SetItems(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldItems, v)
	return u
}

// UpdateItems sets the "items" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateItems() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldItems)
	return u
}

// ClearItems clears the value of the "items" field.
func (u *CourierOrderUpsert) ClearItems() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldItems)
	return u
}

// SetRequestData sets the "request_data" field.
func (u *CourierOrderUpsert) SetRequestData(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldRequestData, v)
	return u
}

// UpdateRequestData sets the "request_data" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateRequestData() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldRequestData)
	return u
}

// ClearRequestData clears the value of the "request_data" field.
func (u *CourierOrderUpsert) ClearRequestData() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldRequestData)
	return u
}

// SetResponseData sets the "response_data" field.
func (u *CourierOrderUpsert) SetResponseData(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldResponseData, v)
	return u
}

// UpdateResponseData sets the "response_data" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateResponseData() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldResponseData)
	return u
}

// ClearResponseData clears the value of the "response_data" field.
func (u *CourierOrderUpsert) ClearResponseData() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldResponseData)
	return u
}

// SetResultCode sets the "result_code" field.
func (u *CourierOrderUpsert) SetResultCode(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldResultCode, v)
	return u
}

// UpdateResultCode sets the "result_code" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateResultCode() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldResultCode)
	return u
}

// ClearResultCode clears the value of the "result_code" field.
func (u *CourierOrderUpsert) ClearResultCode() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldResultCode)
	return u
}

// SetMessage sets the "message" field.
func (u *CourierOrderUpsert) SetMessage(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateMessage() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *CourierOrderUpsert) ClearMessage() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldMessage)
	return u
}

// SetEnMessage sets the "en_message" field.
func (u *CourierOrderUpsert) SetEnMessage(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldEnMessage, v)
	return u
}

// UpdateEnMessage sets the "en_message" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateEnMessage() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldEnMessage)
	return u
}

// ClearEnMessage clears the value of the "en_message" field.
func (u *CourierOrderUpsert) ClearEnMessage() *CourierOrderUpsert {
	u.SetNull(courierorder.FieldEnMessage)
	return u
}

// SetStatus sets the "status" field.
func (u *CourierOrderUpsert) SetStatus(v string) *CourierOrderUpsert {
	u.Set(courierorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CourierOrderUpsert) UpdateStatus() *CourierOrderUpsert {
	u.SetExcluded(courierorder.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(courierorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CourierOrderUpsertOne) UpdateNewValues() *CourierOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(courierorder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(courierorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CourierOrderUpsertOne) Ignore() *CourierOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CourierOrderUpsertOne) DoNothing() *CourierOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CourierOrderCreate.OnConflict
// documentation for more info.
func (u *CourierOrderUpsertOne) Update(set func(*CourierOrderUpsert)) *CourierOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CourierOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CourierOrderUpsertOne) SetUpdatedAt(v time.Time) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateUpdatedAt() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CourierOrderUpsertOne) SetDeletedAt(v time.Time) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateDeletedAt() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CourierOrderUpsertOne) ClearDeletedAt() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CourierOrderUpsertOne) SetOrderID(v int64) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *CourierOrderUpsertOne) AddOrderID(v int64) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateOrderID() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateOrderID()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *CourierOrderUpsertOne) SetOrderNumber(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateOrderNumber() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateOrderNumber()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *CourierOrderUpsertOne) SetCourierPlatform(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateCourierPlatform() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (u *CourierOrderUpsertOne) SetShippingMethodCode(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingMethodCode(v)
	})
}

// UpdateShippingMethodCode sets the "shipping_method_code" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateShippingMethodCode() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingMethodCode()
	})
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (u *CourierOrderUpsertOne) SetShippingMethodName(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingMethodName(v)
	})
}

// UpdateShippingMethodName sets the "shipping_method_name" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateShippingMethodName() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingMethodName()
	})
}

// SetTrackingURL sets the "tracking_url" field.
func (u *CourierOrderUpsertOne) SetTrackingURL(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTrackingURL(v)
	})
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateTrackingURL() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTrackingURL()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *CourierOrderUpsertOne) SetTrackingNumber(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateTrackingNumber() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetWaybillNumber sets the "waybill_number" field.
func (u *CourierOrderUpsertOne) SetWaybillNumber(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetWaybillNumber(v)
	})
}

// UpdateWaybillNumber sets the "waybill_number" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateWaybillNumber() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateWaybillNumber()
	})
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (u *CourierOrderUpsertOne) SetCourierOrderNumber(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCourierOrderNumber(v)
	})
}

// UpdateCourierOrderNumber sets the "courier_order_number" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateCourierOrderNumber() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCourierOrderNumber()
	})
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (u *CourierOrderUpsertOne) SetShippingLabelURL(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingLabelURL(v)
	})
}

// UpdateShippingLabelURL sets the "shipping_label_url" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateShippingLabelURL() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingLabelURL()
	})
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (u *CourierOrderUpsertOne) SetTotalItemsPrice(v float64) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTotalItemsPrice(v)
	})
}

// AddTotalItemsPrice adds v to the "total_items_price" field.
func (u *CourierOrderUpsertOne) AddTotalItemsPrice(v float64) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddTotalItemsPrice(v)
	})
}

// UpdateTotalItemsPrice sets the "total_items_price" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateTotalItemsPrice() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTotalItemsPrice()
	})
}

// SetCurrency sets the "currency" field.
func (u *CourierOrderUpsertOne) SetCurrency(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateCurrency() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CourierOrderUpsertOne) ClearCurrency() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearCurrency()
	})
}

// SetPackageCount sets the "package_count" field.
func (u *CourierOrderUpsertOne) SetPackageCount(v int) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetPackageCount(v)
	})
}

// AddPackageCount adds v to the "package_count" field.
func (u *CourierOrderUpsertOne) AddPackageCount(v int) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddPackageCount(v)
	})
}

// UpdatePackageCount sets the "package_count" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdatePackageCount() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdatePackageCount()
	})
}

// SetWeight sets the "weight" field.
func (u *CourierOrderUpsertOne) SetWeight(v int) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *CourierOrderUpsertOne) AddWeight(v int) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateWeight() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateWeight()
	})
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *CourierOrderUpsertOne) SetReceiverAddress(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetReceiverAddress(v)
	})
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateReceiverAddress() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateReceiverAddress()
	})
}

// ClearReceiverAddress clears the value of the "receiver_address" field.
func (u *CourierOrderUpsertOne) ClearReceiverAddress() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearReceiverAddress()
	})
}

// SetSenderAddress sets the "sender_address" field.
func (u *CourierOrderUpsertOne) SetSenderAddress(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetSenderAddress(v)
	})
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateSenderAddress() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateSenderAddress()
	})
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *CourierOrderUpsertOne) ClearSenderAddress() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearSenderAddress()
	})
}

// SetItems sets the "items" field.
func (u *CourierOrderUpsertOne) SetItems(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetItems(v)
	})
}

// UpdateItems sets the "items" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateItems() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateItems()
	})
}

// ClearItems clears the value of the "items" field.
func (u *CourierOrderUpsertOne) ClearItems() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearItems()
	})
}

// SetRequestData sets the "request_data" field.
func (u *CourierOrderUpsertOne) SetRequestData(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetRequestData(v)
	})
}

// UpdateRequestData sets the "request_data" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateRequestData() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateRequestData()
	})
}

// ClearRequestData clears the value of the "request_data" field.
func (u *CourierOrderUpsertOne) ClearRequestData() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearRequestData()
	})
}

// SetResponseData sets the "response_data" field.
func (u *CourierOrderUpsertOne) SetResponseData(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetResponseData(v)
	})
}

// UpdateResponseData sets the "response_data" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateResponseData() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateResponseData()
	})
}

// ClearResponseData clears the value of the "response_data" field.
func (u *CourierOrderUpsertOne) ClearResponseData() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearResponseData()
	})
}

// SetResultCode sets the "result_code" field.
func (u *CourierOrderUpsertOne) SetResultCode(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetResultCode(v)
	})
}

// UpdateResultCode sets the "result_code" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateResultCode() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateResultCode()
	})
}

// ClearResultCode clears the value of the "result_code" field.
func (u *CourierOrderUpsertOne) ClearResultCode() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearResultCode()
	})
}

// SetMessage sets the "message" field.
func (u *CourierOrderUpsertOne) SetMessage(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateMessage() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CourierOrderUpsertOne) ClearMessage() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearMessage()
	})
}

// SetEnMessage sets the "en_message" field.
func (u *CourierOrderUpsertOne) SetEnMessage(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetEnMessage(v)
	})
}

// UpdateEnMessage sets the "en_message" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateEnMessage() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateEnMessage()
	})
}

// ClearEnMessage clears the value of the "en_message" field.
func (u *CourierOrderUpsertOne) ClearEnMessage() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearEnMessage()
	})
}

// SetStatus sets the "status" field.
func (u *CourierOrderUpsertOne) SetStatus(v string) *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CourierOrderUpsertOne) UpdateStatus() *CourierOrderUpsertOne {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CourierOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for CourierOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CourierOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CourierOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CourierOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CourierOrderCreateBulk is the builder for creating many CourierOrder entities in bulk.
type CourierOrderCreateBulk struct {
	config
	builders []*CourierOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the CourierOrder entities in the database.
func (cocb *CourierOrderCreateBulk) Save(ctx context.Context) ([]*CourierOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CourierOrder, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourierOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CourierOrderCreateBulk) SaveX(ctx context.Context) []*CourierOrder {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CourierOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CourierOrderCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CourierOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CourierOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cocb *CourierOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *CourierOrderUpsertBulk {
	cocb.conflict = opts
	return &CourierOrderUpsertBulk{
		create: cocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cocb *CourierOrderCreateBulk) OnConflictColumns(columns ...string) *CourierOrderUpsertBulk {
	cocb.conflict = append(cocb.conflict, sql.ConflictColumns(columns...))
	return &CourierOrderUpsertBulk{
		create: cocb,
	}
}

// CourierOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of CourierOrder nodes.
type CourierOrderUpsertBulk struct {
	create *CourierOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(courierorder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CourierOrderUpsertBulk) UpdateNewValues() *CourierOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(courierorder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(courierorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CourierOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CourierOrderUpsertBulk) Ignore() *CourierOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CourierOrderUpsertBulk) DoNothing() *CourierOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CourierOrderCreateBulk.OnConflict
// documentation for more info.
func (u *CourierOrderUpsertBulk) Update(set func(*CourierOrderUpsert)) *CourierOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CourierOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CourierOrderUpsertBulk) SetUpdatedAt(v time.Time) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateUpdatedAt() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CourierOrderUpsertBulk) SetDeletedAt(v time.Time) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateDeletedAt() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CourierOrderUpsertBulk) ClearDeletedAt() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CourierOrderUpsertBulk) SetOrderID(v int64) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *CourierOrderUpsertBulk) AddOrderID(v int64) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateOrderID() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateOrderID()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *CourierOrderUpsertBulk) SetOrderNumber(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateOrderNumber() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateOrderNumber()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *CourierOrderUpsertBulk) SetCourierPlatform(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateCourierPlatform() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetShippingMethodCode sets the "shipping_method_code" field.
func (u *CourierOrderUpsertBulk) SetShippingMethodCode(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingMethodCode(v)
	})
}

// UpdateShippingMethodCode sets the "shipping_method_code" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateShippingMethodCode() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingMethodCode()
	})
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (u *CourierOrderUpsertBulk) SetShippingMethodName(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingMethodName(v)
	})
}

// UpdateShippingMethodName sets the "shipping_method_name" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateShippingMethodName() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingMethodName()
	})
}

// SetTrackingURL sets the "tracking_url" field.
func (u *CourierOrderUpsertBulk) SetTrackingURL(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTrackingURL(v)
	})
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateTrackingURL() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTrackingURL()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *CourierOrderUpsertBulk) SetTrackingNumber(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateTrackingNumber() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetWaybillNumber sets the "waybill_number" field.
func (u *CourierOrderUpsertBulk) SetWaybillNumber(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetWaybillNumber(v)
	})
}

// UpdateWaybillNumber sets the "waybill_number" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateWaybillNumber() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateWaybillNumber()
	})
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (u *CourierOrderUpsertBulk) SetCourierOrderNumber(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCourierOrderNumber(v)
	})
}

// UpdateCourierOrderNumber sets the "courier_order_number" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateCourierOrderNumber() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCourierOrderNumber()
	})
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (u *CourierOrderUpsertBulk) SetShippingLabelURL(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetShippingLabelURL(v)
	})
}

// UpdateShippingLabelURL sets the "shipping_label_url" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateShippingLabelURL() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateShippingLabelURL()
	})
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (u *CourierOrderUpsertBulk) SetTotalItemsPrice(v float64) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetTotalItemsPrice(v)
	})
}

// AddTotalItemsPrice adds v to the "total_items_price" field.
func (u *CourierOrderUpsertBulk) AddTotalItemsPrice(v float64) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddTotalItemsPrice(v)
	})
}

// UpdateTotalItemsPrice sets the "total_items_price" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateTotalItemsPrice() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateTotalItemsPrice()
	})
}

// SetCurrency sets the "currency" field.
func (u *CourierOrderUpsertBulk) SetCurrency(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateCurrency() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CourierOrderUpsertBulk) ClearCurrency() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearCurrency()
	})
}

// SetPackageCount sets the "package_count" field.
func (u *CourierOrderUpsertBulk) SetPackageCount(v int) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetPackageCount(v)
	})
}

// AddPackageCount adds v to the "package_count" field.
func (u *CourierOrderUpsertBulk) AddPackageCount(v int) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddPackageCount(v)
	})
}

// UpdatePackageCount sets the "package_count" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdatePackageCount() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdatePackageCount()
	})
}

// SetWeight sets the "weight" field.
func (u *CourierOrderUpsertBulk) SetWeight(v int) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *CourierOrderUpsertBulk) AddWeight(v int) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateWeight() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateWeight()
	})
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *CourierOrderUpsertBulk) SetReceiverAddress(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetReceiverAddress(v)
	})
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateReceiverAddress() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateReceiverAddress()
	})
}

// ClearReceiverAddress clears the value of the "receiver_address" field.
func (u *CourierOrderUpsertBulk) ClearReceiverAddress() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearReceiverAddress()
	})
}

// SetSenderAddress sets the "sender_address" field.
func (u *CourierOrderUpsertBulk) SetSenderAddress(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetSenderAddress(v)
	})
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateSenderAddress() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateSenderAddress()
	})
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *CourierOrderUpsertBulk) ClearSenderAddress() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearSenderAddress()
	})
}

// SetItems sets the "items" field.
func (u *CourierOrderUpsertBulk) SetItems(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetItems(v)
	})
}

// UpdateItems sets the "items" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateItems() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateItems()
	})
}

// ClearItems clears the value of the "items" field.
func (u *CourierOrderUpsertBulk) ClearItems() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearItems()
	})
}

// SetRequestData sets the "request_data" field.
func (u *CourierOrderUpsertBulk) SetRequestData(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetRequestData(v)
	})
}

// UpdateRequestData sets the "request_data" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateRequestData() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateRequestData()
	})
}

// ClearRequestData clears the value of the "request_data" field.
func (u *CourierOrderUpsertBulk) ClearRequestData() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearRequestData()
	})
}

// SetResponseData sets the "response_data" field.
func (u *CourierOrderUpsertBulk) SetResponseData(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetResponseData(v)
	})
}

// UpdateResponseData sets the "response_data" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateResponseData() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateResponseData()
	})
}

// ClearResponseData clears the value of the "response_data" field.
func (u *CourierOrderUpsertBulk) ClearResponseData() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearResponseData()
	})
}

// SetResultCode sets the "result_code" field.
func (u *CourierOrderUpsertBulk) SetResultCode(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetResultCode(v)
	})
}

// UpdateResultCode sets the "result_code" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateResultCode() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateResultCode()
	})
}

// ClearResultCode clears the value of the "result_code" field.
func (u *CourierOrderUpsertBulk) ClearResultCode() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearResultCode()
	})
}

// SetMessage sets the "message" field.
func (u *CourierOrderUpsertBulk) SetMessage(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateMessage() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *CourierOrderUpsertBulk) ClearMessage() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearMessage()
	})
}

// SetEnMessage sets the "en_message" field.
func (u *CourierOrderUpsertBulk) SetEnMessage(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetEnMessage(v)
	})
}

// UpdateEnMessage sets the "en_message" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateEnMessage() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateEnMessage()
	})
}

// ClearEnMessage clears the value of the "en_message" field.
func (u *CourierOrderUpsertBulk) ClearEnMessage() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.ClearEnMessage()
	})
}

// SetStatus sets the "status" field.
func (u *CourierOrderUpsertBulk) SetStatus(v string) *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CourierOrderUpsertBulk) UpdateStatus() *CourierOrderUpsertBulk {
	return u.Update(func(s *CourierOrderUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CourierOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the CourierOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for CourierOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CourierOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
