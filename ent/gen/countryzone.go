// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/countryzone"
)

// CountryZone is the model entity for the CountryZone schema.
type CountryZone struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode string `json:"country_code,omitempty"`
	// ZipCode holds the value of the "zip_code" field.
	ZipCode string `json:"zip_code,omitempty"`
	// StartZipCode holds the value of the "start_zip_code" field.
	StartZipCode string `json:"start_zip_code,omitempty"`
	// EndZipCode holds the value of the "end_zip_code" field.
	EndZipCode string `json:"end_zip_code,omitempty"`
	// Zone holds the value of the "zone" field.
	Zone string `json:"zone,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CountryZone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case countryzone.FieldID, countryzone.FieldChannelID:
			values[i] = new(sql.NullInt64)
		case countryzone.FieldCountryCode, countryzone.FieldZipCode, countryzone.FieldStartZipCode, countryzone.FieldEndZipCode, countryzone.FieldZone:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CountryZone", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CountryZone fields.
func (cz *CountryZone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case countryzone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cz.ID = int(value.Int64)
		case countryzone.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				cz.ChannelID = value.Int64
			}
		case countryzone.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				cz.CountryCode = value.String
			}
		case countryzone.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				cz.ZipCode = value.String
			}
		case countryzone.FieldStartZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_zip_code", values[i])
			} else if value.Valid {
				cz.StartZipCode = value.String
			}
		case countryzone.FieldEndZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_zip_code", values[i])
			} else if value.Valid {
				cz.EndZipCode = value.String
			}
		case countryzone.FieldZone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zone", values[i])
			} else if value.Valid {
				cz.Zone = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CountryZone.
// Note that you need to call CountryZone.Unwrap() before calling this method if this CountryZone
// was returned from a transaction, and the transaction was committed or rolled back.
func (cz *CountryZone) Update() *CountryZoneUpdateOne {
	return (&CountryZoneClient{config: cz.config}).UpdateOne(cz)
}

// Unwrap unwraps the CountryZone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cz *CountryZone) Unwrap() *CountryZone {
	_tx, ok := cz.config.driver.(*txDriver)
	if !ok {
		panic("gen: CountryZone is not a transactional entity")
	}
	cz.config.driver = _tx.drv
	return cz
}

// String implements the fmt.Stringer.
func (cz *CountryZone) String() string {
	var builder strings.Builder
	builder.WriteString("CountryZone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cz.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", cz.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(cz.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("zip_code=")
	builder.WriteString(cz.ZipCode)
	builder.WriteString(", ")
	builder.WriteString("start_zip_code=")
	builder.WriteString(cz.StartZipCode)
	builder.WriteString(", ")
	builder.WriteString("end_zip_code=")
	builder.WriteString(cz.EndZipCode)
	builder.WriteString(", ")
	builder.WriteString("zone=")
	builder.WriteString(cz.Zone)
	builder.WriteByte(')')
	return builder.String()
}

// CountryZones is a parsable slice of CountryZone.
type CountryZones []*CountryZone

func (cz CountryZones) config(cfg config) {
	for _i := range cz {
		cz[_i].config = cfg
	}
}
