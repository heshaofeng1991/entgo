// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InboundCreate is the builder for creating a Inbound entity.
type InboundCreate struct {
	config
	mutation *InboundMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InboundCreate) SetCreatedAt(t time.Time) *InboundCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InboundCreate) SetNillableCreatedAt(t *time.Time) *InboundCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InboundCreate) SetUpdatedAt(t time.Time) *InboundCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InboundCreate) SetNillableUpdatedAt(t *time.Time) *InboundCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InboundCreate) SetDeletedAt(t time.Time) *InboundCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InboundCreate) SetNillableDeletedAt(t *time.Time) *InboundCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (ic *InboundCreate) SetCustomerOrderID(s string) *InboundCreate {
	ic.mutation.SetCustomerOrderID(s)
	return ic
}

// SetNillableCustomerOrderID sets the "customer_order_id" field if the given value is not nil.
func (ic *InboundCreate) SetNillableCustomerOrderID(s *string) *InboundCreate {
	if s != nil {
		ic.SetCustomerOrderID(*s)
	}
	return ic
}

// SetCustomerCode sets the "customer_code" field.
func (ic *InboundCreate) SetCustomerCode(s string) *InboundCreate {
	ic.mutation.SetCustomerCode(s)
	return ic
}

// SetNillableCustomerCode sets the "customer_code" field if the given value is not nil.
func (ic *InboundCreate) SetNillableCustomerCode(s *string) *InboundCreate {
	if s != nil {
		ic.SetCustomerCode(*s)
	}
	return ic
}

// SetTrackingNumber sets the "tracking_number" field.
func (ic *InboundCreate) SetTrackingNumber(s string) *InboundCreate {
	ic.mutation.SetTrackingNumber(s)
	return ic
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (ic *InboundCreate) SetNillableTrackingNumber(s *string) *InboundCreate {
	if s != nil {
		ic.SetTrackingNumber(*s)
	}
	return ic
}

// SetWarehouseID sets the "warehouse_id" field.
func (ic *InboundCreate) SetWarehouseID(i int64) *InboundCreate {
	ic.mutation.SetWarehouseID(i)
	return ic
}

// SetDescription sets the "description" field.
func (ic *InboundCreate) SetDescription(s string) *InboundCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *InboundCreate) SetNillableDescription(s *string) *InboundCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (ic *InboundCreate) SetEstimatedArrivalAt(t time.Time) *InboundCreate {
	ic.mutation.SetEstimatedArrivalAt(t)
	return ic
}

// SetNillableEstimatedArrivalAt sets the "estimated_arrival_at" field if the given value is not nil.
func (ic *InboundCreate) SetNillableEstimatedArrivalAt(t *time.Time) *InboundCreate {
	if t != nil {
		ic.SetEstimatedArrivalAt(*t)
	}
	return ic
}

// SetShippedAt sets the "shipped_at" field.
func (ic *InboundCreate) SetShippedAt(t time.Time) *InboundCreate {
	ic.mutation.SetShippedAt(t)
	return ic
}

// SetNillableShippedAt sets the "shipped_at" field if the given value is not nil.
func (ic *InboundCreate) SetNillableShippedAt(t *time.Time) *InboundCreate {
	if t != nil {
		ic.SetShippedAt(*t)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *InboundCreate) SetStatus(i int8) *InboundCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InboundCreate) SetNillableStatus(i *int8) *InboundCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetType sets the "type" field.
func (ic *InboundCreate) SetType(i int8) *InboundCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ic *InboundCreate) SetNillableType(i *int8) *InboundCreate {
	if i != nil {
		ic.SetType(*i)
	}
	return ic
}

// SetIsPickup sets the "is_pickup" field.
func (ic *InboundCreate) SetIsPickup(i int8) *InboundCreate {
	ic.mutation.SetIsPickup(i)
	return ic
}

// SetNillableIsPickup sets the "is_pickup" field if the given value is not nil.
func (ic *InboundCreate) SetNillableIsPickup(i *int8) *InboundCreate {
	if i != nil {
		ic.SetIsPickup(*i)
	}
	return ic
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (ic *InboundCreate) SetShippingMarkURL(s string) *InboundCreate {
	ic.mutation.SetShippingMarkURL(s)
	return ic
}

// SetNillableShippingMarkURL sets the "shipping_mark_url" field if the given value is not nil.
func (ic *InboundCreate) SetNillableShippingMarkURL(s *string) *InboundCreate {
	if s != nil {
		ic.SetShippingMarkURL(*s)
	}
	return ic
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (ic *InboundCreate) SetPickupOrderID(i int64) *InboundCreate {
	ic.mutation.SetPickupOrderID(i)
	return ic
}

// SetCarrierName sets the "carrier_name" field.
func (ic *InboundCreate) SetCarrierName(s string) *InboundCreate {
	ic.mutation.SetCarrierName(s)
	return ic
}

// SetNillableCarrierName sets the "carrier_name" field if the given value is not nil.
func (ic *InboundCreate) SetNillableCarrierName(s *string) *InboundCreate {
	if s != nil {
		ic.SetCarrierName(*s)
	}
	return ic
}

// SetOrderNumber sets the "order_number" field.
func (ic *InboundCreate) SetOrderNumber(s string) *InboundCreate {
	ic.mutation.SetOrderNumber(s)
	return ic
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (ic *InboundCreate) SetNillableOrderNumber(s *string) *InboundCreate {
	if s != nil {
		ic.SetOrderNumber(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InboundCreate) SetID(i int64) *InboundCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ic *InboundCreate) SetTenantID(id int64) *InboundCreate {
	ic.mutation.SetTenantID(id)
	return ic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ic *InboundCreate) SetTenant(t *Tenant) *InboundCreate {
	return ic.SetTenantID(t.ID)
}

// AddInboundItemIDs adds the "inbound_items" edge to the InboundItem entity by IDs.
func (ic *InboundCreate) AddInboundItemIDs(ids ...int64) *InboundCreate {
	ic.mutation.AddInboundItemIDs(ids...)
	return ic
}

// AddInboundItems adds the "inbound_items" edges to the InboundItem entity.
func (ic *InboundCreate) AddInboundItems(i ...*InboundItem) *InboundCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddInboundItemIDs(ids...)
}

// Mutation returns the InboundMutation object of the builder.
func (ic *InboundCreate) Mutation() *InboundMutation {
	return ic.mutation
}

// Save creates the Inbound in the database.
func (ic *InboundCreate) Save(ctx context.Context) (*Inbound, error) {
	var (
		err  error
		node *Inbound
	)
	if err := ic.defaults(); err != nil {
		return nil, err
	}
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Inbound)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InboundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InboundCreate) SaveX(ctx context.Context) *Inbound {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InboundCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InboundCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InboundCreate) defaults() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		if inbound.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbound.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := inbound.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		if inbound.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbound.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbound.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.CustomerOrderID(); !ok {
		v := inbound.DefaultCustomerOrderID
		ic.mutation.SetCustomerOrderID(v)
	}
	if _, ok := ic.mutation.CustomerCode(); !ok {
		v := inbound.DefaultCustomerCode
		ic.mutation.SetCustomerCode(v)
	}
	if _, ok := ic.mutation.TrackingNumber(); !ok {
		v := inbound.DefaultTrackingNumber
		ic.mutation.SetTrackingNumber(v)
	}
	if _, ok := ic.mutation.Status(); !ok {
		v := inbound.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.GetType(); !ok {
		v := inbound.DefaultType
		ic.mutation.SetType(v)
	}
	if _, ok := ic.mutation.IsPickup(); !ok {
		v := inbound.DefaultIsPickup
		ic.mutation.SetIsPickup(v)
	}
	if _, ok := ic.mutation.CarrierName(); !ok {
		v := inbound.DefaultCarrierName
		ic.mutation.SetCarrierName(v)
	}
	if _, ok := ic.mutation.OrderNumber(); !ok {
		v := inbound.DefaultOrderNumber
		ic.mutation.SetOrderNumber(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ic *InboundCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Inbound.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Inbound.updated_at"`)}
	}
	if _, ok := ic.mutation.CustomerOrderID(); !ok {
		return &ValidationError{Name: "customer_order_id", err: errors.New(`gen: missing required field "Inbound.customer_order_id"`)}
	}
	if _, ok := ic.mutation.CustomerCode(); !ok {
		return &ValidationError{Name: "customer_code", err: errors.New(`gen: missing required field "Inbound.customer_code"`)}
	}
	if _, ok := ic.mutation.TrackingNumber(); !ok {
		return &ValidationError{Name: "tracking_number", err: errors.New(`gen: missing required field "Inbound.tracking_number"`)}
	}
	if _, ok := ic.mutation.WarehouseID(); !ok {
		return &ValidationError{Name: "warehouse_id", err: errors.New(`gen: missing required field "Inbound.warehouse_id"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Inbound.status"`)}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "Inbound.type"`)}
	}
	if _, ok := ic.mutation.IsPickup(); !ok {
		return &ValidationError{Name: "is_pickup", err: errors.New(`gen: missing required field "Inbound.is_pickup"`)}
	}
	if _, ok := ic.mutation.PickupOrderID(); !ok {
		return &ValidationError{Name: "pickup_order_id", err: errors.New(`gen: missing required field "Inbound.pickup_order_id"`)}
	}
	if _, ok := ic.mutation.CarrierName(); !ok {
		return &ValidationError{Name: "carrier_name", err: errors.New(`gen: missing required field "Inbound.carrier_name"`)}
	}
	if _, ok := ic.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`gen: missing required field "Inbound.order_number"`)}
	}
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "Inbound.tenant"`)}
	}
	return nil
}

func (ic *InboundCreate) sqlSave(ctx context.Context) (*Inbound, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ic *InboundCreate) createSpec() (*Inbound, *sqlgraph.CreateSpec) {
	var (
		_node = &Inbound{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inbound.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbound.FieldID,
			},
		}
	)
	_spec.Schema = ic.schemaConfig.Inbound
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inbound.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inbound.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inbound.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ic.mutation.CustomerOrderID(); ok {
		_spec.SetField(inbound.FieldCustomerOrderID, field.TypeString, value)
		_node.CustomerOrderID = value
	}
	if value, ok := ic.mutation.CustomerCode(); ok {
		_spec.SetField(inbound.FieldCustomerCode, field.TypeString, value)
		_node.CustomerCode = value
	}
	if value, ok := ic.mutation.TrackingNumber(); ok {
		_spec.SetField(inbound.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := ic.mutation.WarehouseID(); ok {
		_spec.SetField(inbound.FieldWarehouseID, field.TypeInt64, value)
		_node.WarehouseID = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(inbound.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.EstimatedArrivalAt(); ok {
		_spec.SetField(inbound.FieldEstimatedArrivalAt, field.TypeTime, value)
		_node.EstimatedArrivalAt = value
	}
	if value, ok := ic.mutation.ShippedAt(); ok {
		_spec.SetField(inbound.FieldShippedAt, field.TypeTime, value)
		_node.ShippedAt = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(inbound.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(inbound.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.IsPickup(); ok {
		_spec.SetField(inbound.FieldIsPickup, field.TypeInt8, value)
		_node.IsPickup = value
	}
	if value, ok := ic.mutation.ShippingMarkURL(); ok {
		_spec.SetField(inbound.FieldShippingMarkURL, field.TypeString, value)
		_node.ShippingMarkURL = value
	}
	if value, ok := ic.mutation.PickupOrderID(); ok {
		_spec.SetField(inbound.FieldPickupOrderID, field.TypeInt64, value)
		_node.PickupOrderID = value
	}
	if value, ok := ic.mutation.CarrierName(); ok {
		_spec.SetField(inbound.FieldCarrierName, field.TypeString, value)
		_node.CarrierName = value
	}
	if value, ok := ic.mutation.OrderNumber(); ok {
		_spec.SetField(inbound.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if nodes := ic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ic.schemaConfig.Inbound
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inbound_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InboundItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = ic.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inbound.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InboundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InboundCreate) OnConflict(opts ...sql.ConflictOption) *InboundUpsertOne {
	ic.conflict = opts
	return &InboundUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inbound.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InboundCreate) OnConflictColumns(columns ...string) *InboundUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InboundUpsertOne{
		create: ic,
	}
}

type (
	// InboundUpsertOne is the builder for "upsert"-ing
	//  one Inbound node.
	InboundUpsertOne struct {
		create *InboundCreate
	}

	// InboundUpsert is the "OnConflict" setter.
	InboundUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundUpsert) SetUpdatedAt(v time.Time) *InboundUpsert {
	u.Set(inbound.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundUpsert) UpdateUpdatedAt() *InboundUpsert {
	u.SetExcluded(inbound.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundUpsert) SetDeletedAt(v time.Time) *InboundUpsert {
	u.Set(inbound.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundUpsert) UpdateDeletedAt() *InboundUpsert {
	u.SetExcluded(inbound.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundUpsert) ClearDeletedAt() *InboundUpsert {
	u.SetNull(inbound.FieldDeletedAt)
	return u
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (u *InboundUpsert) SetCustomerOrderID(v string) *InboundUpsert {
	u.Set(inbound.FieldCustomerOrderID, v)
	return u
}

// UpdateCustomerOrderID sets the "customer_order_id" field to the value that was provided on create.
func (u *InboundUpsert) UpdateCustomerOrderID() *InboundUpsert {
	u.SetExcluded(inbound.FieldCustomerOrderID)
	return u
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundUpsert) SetCustomerCode(v string) *InboundUpsert {
	u.Set(inbound.FieldCustomerCode, v)
	return u
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundUpsert) UpdateCustomerCode() *InboundUpsert {
	u.SetExcluded(inbound.FieldCustomerCode)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *InboundUpsert) SetTrackingNumber(v string) *InboundUpsert {
	u.Set(inbound.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *InboundUpsert) UpdateTrackingNumber() *InboundUpsert {
	u.SetExcluded(inbound.FieldTrackingNumber)
	return u
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InboundUpsert) SetWarehouseID(v int64) *InboundUpsert {
	u.Set(inbound.FieldWarehouseID, v)
	return u
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InboundUpsert) UpdateWarehouseID() *InboundUpsert {
	u.SetExcluded(inbound.FieldWarehouseID)
	return u
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InboundUpsert) AddWarehouseID(v int64) *InboundUpsert {
	u.Add(inbound.FieldWarehouseID, v)
	return u
}

// SetDescription sets the "description" field.
func (u *InboundUpsert) SetDescription(v string) *InboundUpsert {
	u.Set(inbound.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InboundUpsert) UpdateDescription() *InboundUpsert {
	u.SetExcluded(inbound.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *InboundUpsert) ClearDescription() *InboundUpsert {
	u.SetNull(inbound.FieldDescription)
	return u
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (u *InboundUpsert) SetEstimatedArrivalAt(v time.Time) *InboundUpsert {
	u.Set(inbound.FieldEstimatedArrivalAt, v)
	return u
}

// UpdateEstimatedArrivalAt sets the "estimated_arrival_at" field to the value that was provided on create.
func (u *InboundUpsert) UpdateEstimatedArrivalAt() *InboundUpsert {
	u.SetExcluded(inbound.FieldEstimatedArrivalAt)
	return u
}

// ClearEstimatedArrivalAt clears the value of the "estimated_arrival_at" field.
func (u *InboundUpsert) ClearEstimatedArrivalAt() *InboundUpsert {
	u.SetNull(inbound.FieldEstimatedArrivalAt)
	return u
}

// SetShippedAt sets the "shipped_at" field.
func (u *InboundUpsert) SetShippedAt(v time.Time) *InboundUpsert {
	u.Set(inbound.FieldShippedAt, v)
	return u
}

// UpdateShippedAt sets the "shipped_at" field to the value that was provided on create.
func (u *InboundUpsert) UpdateShippedAt() *InboundUpsert {
	u.SetExcluded(inbound.FieldShippedAt)
	return u
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (u *InboundUpsert) ClearShippedAt() *InboundUpsert {
	u.SetNull(inbound.FieldShippedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *InboundUpsert) SetStatus(v int8) *InboundUpsert {
	u.Set(inbound.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundUpsert) UpdateStatus() *InboundUpsert {
	u.SetExcluded(inbound.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *InboundUpsert) AddStatus(v int8) *InboundUpsert {
	u.Add(inbound.FieldStatus, v)
	return u
}

// SetType sets the "type" field.
func (u *InboundUpsert) SetType(v int8) *InboundUpsert {
	u.Set(inbound.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InboundUpsert) UpdateType() *InboundUpsert {
	u.SetExcluded(inbound.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *InboundUpsert) AddType(v int8) *InboundUpsert {
	u.Add(inbound.FieldType, v)
	return u
}

// SetIsPickup sets the "is_pickup" field.
func (u *InboundUpsert) SetIsPickup(v int8) *InboundUpsert {
	u.Set(inbound.FieldIsPickup, v)
	return u
}

// UpdateIsPickup sets the "is_pickup" field to the value that was provided on create.
func (u *InboundUpsert) UpdateIsPickup() *InboundUpsert {
	u.SetExcluded(inbound.FieldIsPickup)
	return u
}

// AddIsPickup adds v to the "is_pickup" field.
func (u *InboundUpsert) AddIsPickup(v int8) *InboundUpsert {
	u.Add(inbound.FieldIsPickup, v)
	return u
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (u *InboundUpsert) SetShippingMarkURL(v string) *InboundUpsert {
	u.Set(inbound.FieldShippingMarkURL, v)
	return u
}

// UpdateShippingMarkURL sets the "shipping_mark_url" field to the value that was provided on create.
func (u *InboundUpsert) UpdateShippingMarkURL() *InboundUpsert {
	u.SetExcluded(inbound.FieldShippingMarkURL)
	return u
}

// ClearShippingMarkURL clears the value of the "shipping_mark_url" field.
func (u *InboundUpsert) ClearShippingMarkURL() *InboundUpsert {
	u.SetNull(inbound.FieldShippingMarkURL)
	return u
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *InboundUpsert) SetPickupOrderID(v int64) *InboundUpsert {
	u.Set(inbound.FieldPickupOrderID, v)
	return u
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *InboundUpsert) UpdatePickupOrderID() *InboundUpsert {
	u.SetExcluded(inbound.FieldPickupOrderID)
	return u
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *InboundUpsert) AddPickupOrderID(v int64) *InboundUpsert {
	u.Add(inbound.FieldPickupOrderID, v)
	return u
}

// SetCarrierName sets the "carrier_name" field.
func (u *InboundUpsert) SetCarrierName(v string) *InboundUpsert {
	u.Set(inbound.FieldCarrierName, v)
	return u
}

// UpdateCarrierName sets the "carrier_name" field to the value that was provided on create.
func (u *InboundUpsert) UpdateCarrierName() *InboundUpsert {
	u.SetExcluded(inbound.FieldCarrierName)
	return u
}

// SetOrderNumber sets the "order_number" field.
func (u *InboundUpsert) SetOrderNumber(v string) *InboundUpsert {
	u.Set(inbound.FieldOrderNumber, v)
	return u
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *InboundUpsert) UpdateOrderNumber() *InboundUpsert {
	u.SetExcluded(inbound.FieldOrderNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Inbound.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inbound.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InboundUpsertOne) UpdateNewValues() *InboundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inbound.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inbound.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inbound.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InboundUpsertOne) Ignore() *InboundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InboundUpsertOne) DoNothing() *InboundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InboundCreate.OnConflict
// documentation for more info.
func (u *InboundUpsertOne) Update(set func(*InboundUpsert)) *InboundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InboundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundUpsertOne) SetUpdatedAt(v time.Time) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateUpdatedAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundUpsertOne) SetDeletedAt(v time.Time) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateDeletedAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundUpsertOne) ClearDeletedAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (u *InboundUpsertOne) SetCustomerOrderID(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetCustomerOrderID(v)
	})
}

// UpdateCustomerOrderID sets the "customer_order_id" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateCustomerOrderID() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCustomerOrderID()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundUpsertOne) SetCustomerCode(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateCustomerCode() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCustomerCode()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *InboundUpsertOne) SetTrackingNumber(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateTrackingNumber() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InboundUpsertOne) SetWarehouseID(v int64) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InboundUpsertOne) AddWarehouseID(v int64) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateWarehouseID() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetDescription sets the "description" field.
func (u *InboundUpsertOne) SetDescription(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateDescription() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *InboundUpsertOne) ClearDescription() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.ClearDescription()
	})
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (u *InboundUpsertOne) SetEstimatedArrivalAt(v time.Time) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetEstimatedArrivalAt(v)
	})
}

// UpdateEstimatedArrivalAt sets the "estimated_arrival_at" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateEstimatedArrivalAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateEstimatedArrivalAt()
	})
}

// ClearEstimatedArrivalAt clears the value of the "estimated_arrival_at" field.
func (u *InboundUpsertOne) ClearEstimatedArrivalAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.ClearEstimatedArrivalAt()
	})
}

// SetShippedAt sets the "shipped_at" field.
func (u *InboundUpsertOne) SetShippedAt(v time.Time) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetShippedAt(v)
	})
}

// UpdateShippedAt sets the "shipped_at" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateShippedAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateShippedAt()
	})
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (u *InboundUpsertOne) ClearShippedAt() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.ClearShippedAt()
	})
}

// SetStatus sets the "status" field.
func (u *InboundUpsertOne) SetStatus(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InboundUpsertOne) AddStatus(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateStatus() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *InboundUpsertOne) SetType(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *InboundUpsertOne) AddType(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateType() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateType()
	})
}

// SetIsPickup sets the "is_pickup" field.
func (u *InboundUpsertOne) SetIsPickup(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetIsPickup(v)
	})
}

// AddIsPickup adds v to the "is_pickup" field.
func (u *InboundUpsertOne) AddIsPickup(v int8) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.AddIsPickup(v)
	})
}

// UpdateIsPickup sets the "is_pickup" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateIsPickup() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateIsPickup()
	})
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (u *InboundUpsertOne) SetShippingMarkURL(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetShippingMarkURL(v)
	})
}

// UpdateShippingMarkURL sets the "shipping_mark_url" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateShippingMarkURL() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateShippingMarkURL()
	})
}

// ClearShippingMarkURL clears the value of the "shipping_mark_url" field.
func (u *InboundUpsertOne) ClearShippingMarkURL() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.ClearShippingMarkURL()
	})
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *InboundUpsertOne) SetPickupOrderID(v int64) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetPickupOrderID(v)
	})
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *InboundUpsertOne) AddPickupOrderID(v int64) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.AddPickupOrderID(v)
	})
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdatePickupOrderID() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdatePickupOrderID()
	})
}

// SetCarrierName sets the "carrier_name" field.
func (u *InboundUpsertOne) SetCarrierName(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetCarrierName(v)
	})
}

// UpdateCarrierName sets the "carrier_name" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateCarrierName() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCarrierName()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *InboundUpsertOne) SetOrderNumber(v string) *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *InboundUpsertOne) UpdateOrderNumber() *InboundUpsertOne {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateOrderNumber()
	})
}

// Exec executes the query.
func (u *InboundUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InboundCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InboundUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InboundUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InboundUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InboundCreateBulk is the builder for creating many Inbound entities in bulk.
type InboundCreateBulk struct {
	config
	builders []*InboundCreate
	conflict []sql.ConflictOption
}

// Save creates the Inbound entities in the database.
func (icb *InboundCreateBulk) Save(ctx context.Context) ([]*Inbound, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inbound, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InboundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InboundCreateBulk) SaveX(ctx context.Context) []*Inbound {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InboundCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InboundCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inbound.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InboundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InboundCreateBulk) OnConflict(opts ...sql.ConflictOption) *InboundUpsertBulk {
	icb.conflict = opts
	return &InboundUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inbound.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InboundCreateBulk) OnConflictColumns(columns ...string) *InboundUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InboundUpsertBulk{
		create: icb,
	}
}

// InboundUpsertBulk is the builder for "upsert"-ing
// a bulk of Inbound nodes.
type InboundUpsertBulk struct {
	create *InboundCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inbound.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inbound.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InboundUpsertBulk) UpdateNewValues() *InboundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inbound.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inbound.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inbound.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InboundUpsertBulk) Ignore() *InboundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InboundUpsertBulk) DoNothing() *InboundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InboundCreateBulk.OnConflict
// documentation for more info.
func (u *InboundUpsertBulk) Update(set func(*InboundUpsert)) *InboundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InboundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundUpsertBulk) SetUpdatedAt(v time.Time) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateUpdatedAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundUpsertBulk) SetDeletedAt(v time.Time) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateDeletedAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundUpsertBulk) ClearDeletedAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (u *InboundUpsertBulk) SetCustomerOrderID(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetCustomerOrderID(v)
	})
}

// UpdateCustomerOrderID sets the "customer_order_id" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateCustomerOrderID() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCustomerOrderID()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundUpsertBulk) SetCustomerCode(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateCustomerCode() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCustomerCode()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *InboundUpsertBulk) SetTrackingNumber(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateTrackingNumber() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InboundUpsertBulk) SetWarehouseID(v int64) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InboundUpsertBulk) AddWarehouseID(v int64) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateWarehouseID() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetDescription sets the "description" field.
func (u *InboundUpsertBulk) SetDescription(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateDescription() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *InboundUpsertBulk) ClearDescription() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.ClearDescription()
	})
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (u *InboundUpsertBulk) SetEstimatedArrivalAt(v time.Time) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetEstimatedArrivalAt(v)
	})
}

// UpdateEstimatedArrivalAt sets the "estimated_arrival_at" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateEstimatedArrivalAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateEstimatedArrivalAt()
	})
}

// ClearEstimatedArrivalAt clears the value of the "estimated_arrival_at" field.
func (u *InboundUpsertBulk) ClearEstimatedArrivalAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.ClearEstimatedArrivalAt()
	})
}

// SetShippedAt sets the "shipped_at" field.
func (u *InboundUpsertBulk) SetShippedAt(v time.Time) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetShippedAt(v)
	})
}

// UpdateShippedAt sets the "shipped_at" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateShippedAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateShippedAt()
	})
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (u *InboundUpsertBulk) ClearShippedAt() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.ClearShippedAt()
	})
}

// SetStatus sets the "status" field.
func (u *InboundUpsertBulk) SetStatus(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InboundUpsertBulk) AddStatus(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateStatus() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *InboundUpsertBulk) SetType(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *InboundUpsertBulk) AddType(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateType() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateType()
	})
}

// SetIsPickup sets the "is_pickup" field.
func (u *InboundUpsertBulk) SetIsPickup(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetIsPickup(v)
	})
}

// AddIsPickup adds v to the "is_pickup" field.
func (u *InboundUpsertBulk) AddIsPickup(v int8) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.AddIsPickup(v)
	})
}

// UpdateIsPickup sets the "is_pickup" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateIsPickup() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateIsPickup()
	})
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (u *InboundUpsertBulk) SetShippingMarkURL(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetShippingMarkURL(v)
	})
}

// UpdateShippingMarkURL sets the "shipping_mark_url" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateShippingMarkURL() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateShippingMarkURL()
	})
}

// ClearShippingMarkURL clears the value of the "shipping_mark_url" field.
func (u *InboundUpsertBulk) ClearShippingMarkURL() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.ClearShippingMarkURL()
	})
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *InboundUpsertBulk) SetPickupOrderID(v int64) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetPickupOrderID(v)
	})
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *InboundUpsertBulk) AddPickupOrderID(v int64) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.AddPickupOrderID(v)
	})
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdatePickupOrderID() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdatePickupOrderID()
	})
}

// SetCarrierName sets the "carrier_name" field.
func (u *InboundUpsertBulk) SetCarrierName(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetCarrierName(v)
	})
}

// UpdateCarrierName sets the "carrier_name" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateCarrierName() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateCarrierName()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *InboundUpsertBulk) SetOrderNumber(v string) *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *InboundUpsertBulk) UpdateOrderNumber() *InboundUpsertBulk {
	return u.Update(func(s *InboundUpsert) {
		s.UpdateOrderNumber()
	})
}

// Exec executes the query.
func (u *InboundUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the InboundCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InboundCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InboundUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
