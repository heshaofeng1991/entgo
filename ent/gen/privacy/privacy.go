// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/heshaofeng1991/entgo/ent/gen"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, gen.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, gen.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, gen.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, gen.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ gen.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ gen.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op gen.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m gen.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op gen.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m gen.Mutation) error {
		return Denyf("gen/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AnnouncementsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AnnouncementsQueryRuleFunc func(context.Context, *gen.AnnouncementsQuery) error

// EvalQuery return f(ctx, q).
func (f AnnouncementsQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.AnnouncementsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.AnnouncementsQuery", q)
}

// The AnnouncementsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AnnouncementsMutationRuleFunc func(context.Context, *gen.AnnouncementsMutation) error

// EvalMutation calls f(ctx, m).
func (f AnnouncementsMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.AnnouncementsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.AnnouncementsMutation", m)
}

// The AttributeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AttributeQueryRuleFunc func(context.Context, *gen.AttributeQuery) error

// EvalQuery return f(ctx, q).
func (f AttributeQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.AttributeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.AttributeQuery", q)
}

// The AttributeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AttributeMutationRuleFunc func(context.Context, *gen.AttributeMutation) error

// EvalMutation calls f(ctx, m).
func (f AttributeMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.AttributeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.AttributeMutation", m)
}

// The ChannelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelQueryRuleFunc func(context.Context, *gen.ChannelQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelQuery", q)
}

// The ChannelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelMutationRuleFunc func(context.Context, *gen.ChannelMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelMutation", m)
}

// The ChannelCostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelCostQueryRuleFunc func(context.Context, *gen.ChannelCostQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelCostQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelCostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelCostQuery", q)
}

// The ChannelCostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelCostMutationRuleFunc func(context.Context, *gen.ChannelCostMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelCostMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelCostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelCostMutation", m)
}

// The ChannelCostBatcheQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelCostBatcheQueryRuleFunc func(context.Context, *gen.ChannelCostBatcheQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelCostBatcheQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelCostBatcheQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelCostBatcheQuery", q)
}

// The ChannelCostBatcheMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelCostBatcheMutationRuleFunc func(context.Context, *gen.ChannelCostBatcheMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelCostBatcheMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelCostBatcheMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelCostBatcheMutation", m)
}

// The ChannelOptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelOptionQueryRuleFunc func(context.Context, *gen.ChannelOptionQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelOptionQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelOptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelOptionQuery", q)
}

// The ChannelOptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelOptionMutationRuleFunc func(context.Context, *gen.ChannelOptionMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelOptionMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelOptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelOptionMutation", m)
}

// The ChannelRecommendQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelRecommendQueryRuleFunc func(context.Context, *gen.ChannelRecommendQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelRecommendQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelRecommendQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelRecommendQuery", q)
}

// The ChannelRecommendMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelRecommendMutationRuleFunc func(context.Context, *gen.ChannelRecommendMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelRecommendMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelRecommendMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelRecommendMutation", m)
}

// The ChannelVolumeFactorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChannelVolumeFactorQueryRuleFunc func(context.Context, *gen.ChannelVolumeFactorQuery) error

// EvalQuery return f(ctx, q).
func (f ChannelVolumeFactorQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ChannelVolumeFactorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ChannelVolumeFactorQuery", q)
}

// The ChannelVolumeFactorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChannelVolumeFactorMutationRuleFunc func(context.Context, *gen.ChannelVolumeFactorMutation) error

// EvalMutation calls f(ctx, m).
func (f ChannelVolumeFactorMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ChannelVolumeFactorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ChannelVolumeFactorMutation", m)
}

// The CountryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CountryQueryRuleFunc func(context.Context, *gen.CountryQuery) error

// EvalQuery return f(ctx, q).
func (f CountryQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.CountryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.CountryQuery", q)
}

// The CountryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CountryMutationRuleFunc func(context.Context, *gen.CountryMutation) error

// EvalMutation calls f(ctx, m).
func (f CountryMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.CountryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.CountryMutation", m)
}

// The CountryZoneQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CountryZoneQueryRuleFunc func(context.Context, *gen.CountryZoneQuery) error

// EvalQuery return f(ctx, q).
func (f CountryZoneQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.CountryZoneQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.CountryZoneQuery", q)
}

// The CountryZoneMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CountryZoneMutationRuleFunc func(context.Context, *gen.CountryZoneMutation) error

// EvalMutation calls f(ctx, m).
func (f CountryZoneMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.CountryZoneMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.CountryZoneMutation", m)
}

// The CourierOrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CourierOrderQueryRuleFunc func(context.Context, *gen.CourierOrderQuery) error

// EvalQuery return f(ctx, q).
func (f CourierOrderQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.CourierOrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.CourierOrderQuery", q)
}

// The CourierOrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CourierOrderMutationRuleFunc func(context.Context, *gen.CourierOrderMutation) error

// EvalMutation calls f(ctx, m).
func (f CourierOrderMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.CourierOrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.CourierOrderMutation", m)
}

// The CustomerConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CustomerConfigQueryRuleFunc func(context.Context, *gen.CustomerConfigQuery) error

// EvalQuery return f(ctx, q).
func (f CustomerConfigQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.CustomerConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.CustomerConfigQuery", q)
}

// The CustomerConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CustomerConfigMutationRuleFunc func(context.Context, *gen.CustomerConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f CustomerConfigMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.CustomerConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.CustomerConfigMutation", m)
}

// The InboundQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InboundQueryRuleFunc func(context.Context, *gen.InboundQuery) error

// EvalQuery return f(ctx, q).
func (f InboundQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.InboundQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.InboundQuery", q)
}

// The InboundMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InboundMutationRuleFunc func(context.Context, *gen.InboundMutation) error

// EvalMutation calls f(ctx, m).
func (f InboundMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.InboundMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.InboundMutation", m)
}

// The InboundItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InboundItemQueryRuleFunc func(context.Context, *gen.InboundItemQuery) error

// EvalQuery return f(ctx, q).
func (f InboundItemQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.InboundItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.InboundItemQuery", q)
}

// The InboundItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InboundItemMutationRuleFunc func(context.Context, *gen.InboundItemMutation) error

// EvalMutation calls f(ctx, m).
func (f InboundItemMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.InboundItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.InboundItemMutation", m)
}

// The InventoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InventoryQueryRuleFunc func(context.Context, *gen.InventoryQuery) error

// EvalQuery return f(ctx, q).
func (f InventoryQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.InventoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.InventoryQuery", q)
}

// The InventoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InventoryMutationRuleFunc func(context.Context, *gen.InventoryMutation) error

// EvalMutation calls f(ctx, m).
func (f InventoryMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.InventoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.InventoryMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *gen.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *gen.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.OrderMutation", m)
}

// The OrderHoldReasonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderHoldReasonQueryRuleFunc func(context.Context, *gen.OrderHoldReasonQuery) error

// EvalQuery return f(ctx, q).
func (f OrderHoldReasonQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.OrderHoldReasonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.OrderHoldReasonQuery", q)
}

// The OrderHoldReasonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderHoldReasonMutationRuleFunc func(context.Context, *gen.OrderHoldReasonMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderHoldReasonMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.OrderHoldReasonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.OrderHoldReasonMutation", m)
}

// The OrderItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderItemQueryRuleFunc func(context.Context, *gen.OrderItemQuery) error

// EvalQuery return f(ctx, q).
func (f OrderItemQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.OrderItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.OrderItemQuery", q)
}

// The OrderItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderItemMutationRuleFunc func(context.Context, *gen.OrderItemMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderItemMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.OrderItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.OrderItemMutation", m)
}

// The OrderTaxationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderTaxationQueryRuleFunc func(context.Context, *gen.OrderTaxationQuery) error

// EvalQuery return f(ctx, q).
func (f OrderTaxationQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.OrderTaxationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.OrderTaxationQuery", q)
}

// The OrderTaxationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderTaxationMutationRuleFunc func(context.Context, *gen.OrderTaxationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderTaxationMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.OrderTaxationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.OrderTaxationMutation", m)
}

// The PickupOrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PickupOrderQueryRuleFunc func(context.Context, *gen.PickupOrderQuery) error

// EvalQuery return f(ctx, q).
func (f PickupOrderQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.PickupOrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.PickupOrderQuery", q)
}

// The PickupOrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PickupOrderMutationRuleFunc func(context.Context, *gen.PickupOrderMutation) error

// EvalMutation calls f(ctx, m).
func (f PickupOrderMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.PickupOrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.PickupOrderMutation", m)
}

// The PickupOrderItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PickupOrderItemQueryRuleFunc func(context.Context, *gen.PickupOrderItemQuery) error

// EvalQuery return f(ctx, q).
func (f PickupOrderItemQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.PickupOrderItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.PickupOrderItemQuery", q)
}

// The PickupOrderItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PickupOrderItemMutationRuleFunc func(context.Context, *gen.PickupOrderItemMutation) error

// EvalMutation calls f(ctx, m).
func (f PickupOrderItemMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.PickupOrderItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.PickupOrderItemMutation", m)
}

// The PlatformProductQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlatformProductQueryRuleFunc func(context.Context, *gen.PlatformProductQuery) error

// EvalQuery return f(ctx, q).
func (f PlatformProductQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.PlatformProductQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.PlatformProductQuery", q)
}

// The PlatformProductMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlatformProductMutationRuleFunc func(context.Context, *gen.PlatformProductMutation) error

// EvalMutation calls f(ctx, m).
func (f PlatformProductMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.PlatformProductMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.PlatformProductMutation", m)
}

// The ProductQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductQueryRuleFunc func(context.Context, *gen.ProductQuery) error

// EvalQuery return f(ctx, q).
func (f ProductQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ProductQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ProductQuery", q)
}

// The ProductMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductMutationRuleFunc func(context.Context, *gen.ProductMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ProductMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ProductMutation", m)
}

// The ProductMappingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductMappingQueryRuleFunc func(context.Context, *gen.ProductMappingQuery) error

// EvalQuery return f(ctx, q).
func (f ProductMappingQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ProductMappingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ProductMappingQuery", q)
}

// The ProductMappingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductMappingMutationRuleFunc func(context.Context, *gen.ProductMappingMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductMappingMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ProductMappingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ProductMappingMutation", m)
}

// The SequenceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SequenceQueryRuleFunc func(context.Context, *gen.SequenceQuery) error

// EvalQuery return f(ctx, q).
func (f SequenceQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.SequenceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.SequenceQuery", q)
}

// The SequenceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SequenceMutationRuleFunc func(context.Context, *gen.SequenceMutation) error

// EvalMutation calls f(ctx, m).
func (f SequenceMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.SequenceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.SequenceMutation", m)
}

// The StoreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StoreQueryRuleFunc func(context.Context, *gen.StoreQuery) error

// EvalQuery return f(ctx, q).
func (f StoreQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.StoreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.StoreQuery", q)
}

// The StoreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StoreMutationRuleFunc func(context.Context, *gen.StoreMutation) error

// EvalMutation calls f(ctx, m).
func (f StoreMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.StoreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.StoreMutation", m)
}

// The TaskScheduleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TaskScheduleQueryRuleFunc func(context.Context, *gen.TaskScheduleQuery) error

// EvalQuery return f(ctx, q).
func (f TaskScheduleQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TaskScheduleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TaskScheduleQuery", q)
}

// The TaskScheduleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TaskScheduleMutationRuleFunc func(context.Context, *gen.TaskScheduleMutation) error

// EvalMutation calls f(ctx, m).
func (f TaskScheduleMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TaskScheduleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TaskScheduleMutation", m)
}

// The TenantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TenantQueryRuleFunc func(context.Context, *gen.TenantQuery) error

// EvalQuery return f(ctx, q).
func (f TenantQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TenantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TenantQuery", q)
}

// The TenantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TenantMutationRuleFunc func(context.Context, *gen.TenantMutation) error

// EvalMutation calls f(ctx, m).
func (f TenantMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TenantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TenantMutation", m)
}

// The TokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TokenQueryRuleFunc func(context.Context, *gen.TokenQuery) error

// EvalQuery return f(ctx, q).
func (f TokenQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TokenQuery", q)
}

// The TokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TokenMutationRuleFunc func(context.Context, *gen.TokenMutation) error

// EvalMutation calls f(ctx, m).
func (f TokenMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TokenMutation", m)
}

// The TrackMappingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TrackMappingQueryRuleFunc func(context.Context, *gen.TrackMappingQuery) error

// EvalQuery return f(ctx, q).
func (f TrackMappingQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TrackMappingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TrackMappingQuery", q)
}

// The TrackMappingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TrackMappingMutationRuleFunc func(context.Context, *gen.TrackMappingMutation) error

// EvalMutation calls f(ctx, m).
func (f TrackMappingMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TrackMappingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TrackMappingMutation", m)
}

// The TransactionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TransactionQueryRuleFunc func(context.Context, *gen.TransactionQuery) error

// EvalQuery return f(ctx, q).
func (f TransactionQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TransactionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TransactionQuery", q)
}

// The TransactionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TransactionMutationRuleFunc func(context.Context, *gen.TransactionMutation) error

// EvalMutation calls f(ctx, m).
func (f TransactionMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TransactionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TransactionMutation", m)
}

// The TransactionDetailQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TransactionDetailQueryRuleFunc func(context.Context, *gen.TransactionDetailQuery) error

// EvalQuery return f(ctx, q).
func (f TransactionDetailQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.TransactionDetailQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.TransactionDetailQuery", q)
}

// The TransactionDetailMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TransactionDetailMutationRuleFunc func(context.Context, *gen.TransactionDetailMutation) error

// EvalMutation calls f(ctx, m).
func (f TransactionDetailMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.TransactionDetailMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.TransactionDetailMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *gen.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *gen.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.UserMutation", m)
}

// The UserReferralQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserReferralQueryRuleFunc func(context.Context, *gen.UserReferralQuery) error

// EvalQuery return f(ctx, q).
func (f UserReferralQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.UserReferralQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.UserReferralQuery", q)
}

// The UserReferralMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserReferralMutationRuleFunc func(context.Context, *gen.UserReferralMutation) error

// EvalMutation calls f(ctx, m).
func (f UserReferralMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.UserReferralMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.UserReferralMutation", m)
}

// The ValueAddedTaxQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ValueAddedTaxQueryRuleFunc func(context.Context, *gen.ValueAddedTaxQuery) error

// EvalQuery return f(ctx, q).
func (f ValueAddedTaxQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.ValueAddedTaxQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.ValueAddedTaxQuery", q)
}

// The ValueAddedTaxMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ValueAddedTaxMutationRuleFunc func(context.Context, *gen.ValueAddedTaxMutation) error

// EvalMutation calls f(ctx, m).
func (f ValueAddedTaxMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.ValueAddedTaxMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.ValueAddedTaxMutation", m)
}

// The WarehouseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WarehouseQueryRuleFunc func(context.Context, *gen.WarehouseQuery) error

// EvalQuery return f(ctx, q).
func (f WarehouseQueryRuleFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	if q, ok := q.(*gen.WarehouseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("gen/privacy: unexpected query type %T, expect *gen.WarehouseQuery", q)
}

// The WarehouseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WarehouseMutationRuleFunc func(context.Context, *gen.WarehouseMutation) error

// EvalMutation calls f(ctx, m).
func (f WarehouseMutationRuleFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	if m, ok := m.(*gen.WarehouseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("gen/privacy: unexpected mutation type %T, expect *gen.WarehouseMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q gen.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m gen.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q gen.Query) (Filter, error) {
	switch q := q.(type) {
	case *gen.AnnouncementsQuery:
		return q.Filter(), nil
	case *gen.AttributeQuery:
		return q.Filter(), nil
	case *gen.ChannelQuery:
		return q.Filter(), nil
	case *gen.ChannelCostQuery:
		return q.Filter(), nil
	case *gen.ChannelCostBatcheQuery:
		return q.Filter(), nil
	case *gen.ChannelOptionQuery:
		return q.Filter(), nil
	case *gen.ChannelRecommendQuery:
		return q.Filter(), nil
	case *gen.ChannelVolumeFactorQuery:
		return q.Filter(), nil
	case *gen.CountryQuery:
		return q.Filter(), nil
	case *gen.CountryZoneQuery:
		return q.Filter(), nil
	case *gen.CourierOrderQuery:
		return q.Filter(), nil
	case *gen.CustomerConfigQuery:
		return q.Filter(), nil
	case *gen.InboundQuery:
		return q.Filter(), nil
	case *gen.InboundItemQuery:
		return q.Filter(), nil
	case *gen.InventoryQuery:
		return q.Filter(), nil
	case *gen.OrderQuery:
		return q.Filter(), nil
	case *gen.OrderHoldReasonQuery:
		return q.Filter(), nil
	case *gen.OrderItemQuery:
		return q.Filter(), nil
	case *gen.OrderTaxationQuery:
		return q.Filter(), nil
	case *gen.PickupOrderQuery:
		return q.Filter(), nil
	case *gen.PickupOrderItemQuery:
		return q.Filter(), nil
	case *gen.PlatformProductQuery:
		return q.Filter(), nil
	case *gen.ProductQuery:
		return q.Filter(), nil
	case *gen.ProductMappingQuery:
		return q.Filter(), nil
	case *gen.SequenceQuery:
		return q.Filter(), nil
	case *gen.StoreQuery:
		return q.Filter(), nil
	case *gen.TaskScheduleQuery:
		return q.Filter(), nil
	case *gen.TenantQuery:
		return q.Filter(), nil
	case *gen.TokenQuery:
		return q.Filter(), nil
	case *gen.TrackMappingQuery:
		return q.Filter(), nil
	case *gen.TransactionQuery:
		return q.Filter(), nil
	case *gen.TransactionDetailQuery:
		return q.Filter(), nil
	case *gen.UserQuery:
		return q.Filter(), nil
	case *gen.UserReferralQuery:
		return q.Filter(), nil
	case *gen.ValueAddedTaxQuery:
		return q.Filter(), nil
	case *gen.WarehouseQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("gen/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m gen.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *gen.AnnouncementsMutation:
		return m.Filter(), nil
	case *gen.AttributeMutation:
		return m.Filter(), nil
	case *gen.ChannelMutation:
		return m.Filter(), nil
	case *gen.ChannelCostMutation:
		return m.Filter(), nil
	case *gen.ChannelCostBatcheMutation:
		return m.Filter(), nil
	case *gen.ChannelOptionMutation:
		return m.Filter(), nil
	case *gen.ChannelRecommendMutation:
		return m.Filter(), nil
	case *gen.ChannelVolumeFactorMutation:
		return m.Filter(), nil
	case *gen.CountryMutation:
		return m.Filter(), nil
	case *gen.CountryZoneMutation:
		return m.Filter(), nil
	case *gen.CourierOrderMutation:
		return m.Filter(), nil
	case *gen.CustomerConfigMutation:
		return m.Filter(), nil
	case *gen.InboundMutation:
		return m.Filter(), nil
	case *gen.InboundItemMutation:
		return m.Filter(), nil
	case *gen.InventoryMutation:
		return m.Filter(), nil
	case *gen.OrderMutation:
		return m.Filter(), nil
	case *gen.OrderHoldReasonMutation:
		return m.Filter(), nil
	case *gen.OrderItemMutation:
		return m.Filter(), nil
	case *gen.OrderTaxationMutation:
		return m.Filter(), nil
	case *gen.PickupOrderMutation:
		return m.Filter(), nil
	case *gen.PickupOrderItemMutation:
		return m.Filter(), nil
	case *gen.PlatformProductMutation:
		return m.Filter(), nil
	case *gen.ProductMutation:
		return m.Filter(), nil
	case *gen.ProductMappingMutation:
		return m.Filter(), nil
	case *gen.SequenceMutation:
		return m.Filter(), nil
	case *gen.StoreMutation:
		return m.Filter(), nil
	case *gen.TaskScheduleMutation:
		return m.Filter(), nil
	case *gen.TenantMutation:
		return m.Filter(), nil
	case *gen.TokenMutation:
		return m.Filter(), nil
	case *gen.TrackMappingMutation:
		return m.Filter(), nil
	case *gen.TransactionMutation:
		return m.Filter(), nil
	case *gen.TransactionDetailMutation:
		return m.Filter(), nil
	case *gen.UserMutation:
		return m.Filter(), nil
	case *gen.UserReferralMutation:
		return m.Filter(), nil
	case *gen.ValueAddedTaxMutation:
		return m.Filter(), nil
	case *gen.WarehouseMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("gen/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
