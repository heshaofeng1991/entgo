// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
)

// TransactionDetail is the model entity for the TransactionDetail schema.
type TransactionDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID int64 `json:"transaction_id,omitempty"`
	// TransactionType holds the value of the "transaction_type" field.
	TransactionType string `json:"transaction_type,omitempty"`
	// DeliveryCost holds the value of the "delivery_cost" field.
	DeliveryCost float64 `json:"delivery_cost,omitempty"`
	// MiscFee holds the value of the "misc_fee" field.
	MiscFee float64 `json:"misc_fee,omitempty"`
	// FuelFee holds the value of the "fuel_fee" field.
	FuelFee float64 `json:"fuel_fee,omitempty"`
	// RegistrationFee holds the value of the "registration_fee" field.
	RegistrationFee float64 `json:"registration_fee,omitempty"`
	// ProcessingFee holds the value of the "processing_fee" field.
	ProcessingFee float64 `json:"processing_fee,omitempty"`
	// PackageFee holds the value of the "package_fee" field.
	PackageFee float64 `json:"package_fee,omitempty"`
	// HandlingFee holds the value of the "handling_fee" field.
	HandlingFee float64 `json:"handling_fee,omitempty"`
	// Vat holds the value of the "vat" field.
	Vat float64 `json:"vat,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight              int `json:"weight,omitempty"`
	transaction_details *int64
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactiondetail.FieldDeliveryCost, transactiondetail.FieldMiscFee, transactiondetail.FieldFuelFee, transactiondetail.FieldRegistrationFee, transactiondetail.FieldProcessingFee, transactiondetail.FieldPackageFee, transactiondetail.FieldHandlingFee, transactiondetail.FieldVat, transactiondetail.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transactiondetail.FieldID, transactiondetail.FieldOrderID, transactiondetail.FieldTransactionID, transactiondetail.FieldWeight:
			values[i] = new(sql.NullInt64)
		case transactiondetail.FieldTransactionType:
			values[i] = new(sql.NullString)
		case transactiondetail.FieldCreatedAt, transactiondetail.FieldUpdatedAt, transactiondetail.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case transactiondetail.ForeignKeys[0]: // transaction_details
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TransactionDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionDetail fields.
func (td *TransactionDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactiondetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int64(value.Int64)
		case transactiondetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case transactiondetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Time
			}
		case transactiondetail.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				td.DeletedAt = value.Time
			}
		case transactiondetail.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				td.OrderID = value.Int64
			}
		case transactiondetail.FieldTransactionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				td.TransactionID = value.Int64
			}
		case transactiondetail.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
				td.TransactionType = value.String
			}
		case transactiondetail.FieldDeliveryCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_cost", values[i])
			} else if value.Valid {
				td.DeliveryCost = value.Float64
			}
		case transactiondetail.FieldMiscFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field misc_fee", values[i])
			} else if value.Valid {
				td.MiscFee = value.Float64
			}
		case transactiondetail.FieldFuelFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_fee", values[i])
			} else if value.Valid {
				td.FuelFee = value.Float64
			}
		case transactiondetail.FieldRegistrationFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field registration_fee", values[i])
			} else if value.Valid {
				td.RegistrationFee = value.Float64
			}
		case transactiondetail.FieldProcessingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field processing_fee", values[i])
			} else if value.Valid {
				td.ProcessingFee = value.Float64
			}
		case transactiondetail.FieldPackageFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field package_fee", values[i])
			} else if value.Valid {
				td.PackageFee = value.Float64
			}
		case transactiondetail.FieldHandlingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field handling_fee", values[i])
			} else if value.Valid {
				td.HandlingFee = value.Float64
			}
		case transactiondetail.FieldVat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vat", values[i])
			} else if value.Valid {
				td.Vat = value.Float64
			}
		case transactiondetail.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				td.Amount = value.Float64
			}
		case transactiondetail.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				td.Weight = int(value.Int64)
			}
		case transactiondetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_details", value)
			} else if value.Valid {
				td.transaction_details = new(int64)
				*td.transaction_details = int64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TransactionDetail.
// Note that you need to call TransactionDetail.Unwrap() before calling this method if this TransactionDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TransactionDetail) Update() *TransactionDetailUpdateOne {
	return (&TransactionDetailClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the TransactionDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TransactionDetail) Unwrap() *TransactionDetail {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("gen: TransactionDetail is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TransactionDetail) String() string {
	var builder strings.Builder
	builder.WriteString("TransactionDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(td.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(td.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", td.OrderID))
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", td.TransactionID))
	builder.WriteString(", ")
	builder.WriteString("transaction_type=")
	builder.WriteString(td.TransactionType)
	builder.WriteString(", ")
	builder.WriteString("delivery_cost=")
	builder.WriteString(fmt.Sprintf("%v", td.DeliveryCost))
	builder.WriteString(", ")
	builder.WriteString("misc_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.MiscFee))
	builder.WriteString(", ")
	builder.WriteString("fuel_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.FuelFee))
	builder.WriteString(", ")
	builder.WriteString("registration_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.RegistrationFee))
	builder.WriteString(", ")
	builder.WriteString("processing_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.ProcessingFee))
	builder.WriteString(", ")
	builder.WriteString("package_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.PackageFee))
	builder.WriteString(", ")
	builder.WriteString("handling_fee=")
	builder.WriteString(fmt.Sprintf("%v", td.HandlingFee))
	builder.WriteString(", ")
	builder.WriteString("vat=")
	builder.WriteString(fmt.Sprintf("%v", td.Vat))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", td.Amount))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", td.Weight))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionDetails is a parsable slice of TransactionDetail.
type TransactionDetails []*TransactionDetail

func (td TransactionDetails) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
