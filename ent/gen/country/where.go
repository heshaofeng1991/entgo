// Code generated by ent, DO NOT EDIT.

package country

import (
	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CnName applies equality check predicate on the "cn_name" field. It's identical to CnNameEQ.
func CnName(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCnName), v))
	})
}

// EnName applies equality check predicate on the "en_name" field. It's identical to EnNameEQ.
func EnName(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// CnNameEQ applies the EQ predicate on the "cn_name" field.
func CnNameEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCnName), v))
	})
}

// CnNameNEQ applies the NEQ predicate on the "cn_name" field.
func CnNameNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCnName), v))
	})
}

// CnNameIn applies the In predicate on the "cn_name" field.
func CnNameIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCnName), v...))
	})
}

// CnNameNotIn applies the NotIn predicate on the "cn_name" field.
func CnNameNotIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCnName), v...))
	})
}

// CnNameGT applies the GT predicate on the "cn_name" field.
func CnNameGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCnName), v))
	})
}

// CnNameGTE applies the GTE predicate on the "cn_name" field.
func CnNameGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCnName), v))
	})
}

// CnNameLT applies the LT predicate on the "cn_name" field.
func CnNameLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCnName), v))
	})
}

// CnNameLTE applies the LTE predicate on the "cn_name" field.
func CnNameLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCnName), v))
	})
}

// CnNameContains applies the Contains predicate on the "cn_name" field.
func CnNameContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCnName), v))
	})
}

// CnNameHasPrefix applies the HasPrefix predicate on the "cn_name" field.
func CnNameHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCnName), v))
	})
}

// CnNameHasSuffix applies the HasSuffix predicate on the "cn_name" field.
func CnNameHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCnName), v))
	})
}

// CnNameEqualFold applies the EqualFold predicate on the "cn_name" field.
func CnNameEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCnName), v))
	})
}

// CnNameContainsFold applies the ContainsFold predicate on the "cn_name" field.
func CnNameContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCnName), v))
	})
}

// EnNameEQ applies the EQ predicate on the "en_name" field.
func EnNameEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnName), v))
	})
}

// EnNameNEQ applies the NEQ predicate on the "en_name" field.
func EnNameNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnName), v))
	})
}

// EnNameIn applies the In predicate on the "en_name" field.
func EnNameIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnName), v...))
	})
}

// EnNameNotIn applies the NotIn predicate on the "en_name" field.
func EnNameNotIn(vs ...string) predicate.Country {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnName), v...))
	})
}

// EnNameGT applies the GT predicate on the "en_name" field.
func EnNameGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnName), v))
	})
}

// EnNameGTE applies the GTE predicate on the "en_name" field.
func EnNameGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnName), v))
	})
}

// EnNameLT applies the LT predicate on the "en_name" field.
func EnNameLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnName), v))
	})
}

// EnNameLTE applies the LTE predicate on the "en_name" field.
func EnNameLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnName), v))
	})
}

// EnNameContains applies the Contains predicate on the "en_name" field.
func EnNameContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnName), v))
	})
}

// EnNameHasPrefix applies the HasPrefix predicate on the "en_name" field.
func EnNameHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnName), v))
	})
}

// EnNameHasSuffix applies the HasSuffix predicate on the "en_name" field.
func EnNameHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnName), v))
	})
}

// EnNameEqualFold applies the EqualFold predicate on the "en_name" field.
func EnNameEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnName), v))
	})
}

// EnNameContainsFold applies the ContainsFold predicate on the "en_name" field.
func EnNameContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnName), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		p(s.Not())
	})
}
