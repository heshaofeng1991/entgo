// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/userreferral"
)

// UserReferralUpdate is the builder for updating UserReferral entities.
type UserReferralUpdate struct {
	config
	hooks     []Hook
	mutation  *UserReferralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserReferralUpdate builder.
func (uru *UserReferralUpdate) Where(ps ...predicate.UserReferral) *UserReferralUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUpdatedAt sets the "updated_at" field.
func (uru *UserReferralUpdate) SetUpdatedAt(t time.Time) *UserReferralUpdate {
	uru.mutation.SetUpdatedAt(t)
	return uru
}

// SetDeletedAt sets the "deleted_at" field.
func (uru *UserReferralUpdate) SetDeletedAt(t time.Time) *UserReferralUpdate {
	uru.mutation.SetDeletedAt(t)
	return uru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableDeletedAt(t *time.Time) *UserReferralUpdate {
	if t != nil {
		uru.SetDeletedAt(*t)
	}
	return uru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uru *UserReferralUpdate) ClearDeletedAt() *UserReferralUpdate {
	uru.mutation.ClearDeletedAt()
	return uru
}

// SetUserID sets the "user_id" field.
func (uru *UserReferralUpdate) SetUserID(i int64) *UserReferralUpdate {
	uru.mutation.ResetUserID()
	uru.mutation.SetUserID(i)
	return uru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableUserID(i *int64) *UserReferralUpdate {
	if i != nil {
		uru.SetUserID(*i)
	}
	return uru
}

// AddUserID adds i to the "user_id" field.
func (uru *UserReferralUpdate) AddUserID(i int64) *UserReferralUpdate {
	uru.mutation.AddUserID(i)
	return uru
}

// ClearUserID clears the value of the "user_id" field.
func (uru *UserReferralUpdate) ClearUserID() *UserReferralUpdate {
	uru.mutation.ClearUserID()
	return uru
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (uru *UserReferralUpdate) SetFirstShipmentDate(t time.Time) *UserReferralUpdate {
	uru.mutation.SetFirstShipmentDate(t)
	return uru
}

// SetNillableFirstShipmentDate sets the "first_shipment_date" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableFirstShipmentDate(t *time.Time) *UserReferralUpdate {
	if t != nil {
		uru.SetFirstShipmentDate(*t)
	}
	return uru
}

// ClearFirstShipmentDate clears the value of the "first_shipment_date" field.
func (uru *UserReferralUpdate) ClearFirstShipmentDate() *UserReferralUpdate {
	uru.mutation.ClearFirstShipmentDate()
	return uru
}

// SetTotalCommission sets the "total_commission" field.
func (uru *UserReferralUpdate) SetTotalCommission(f float64) *UserReferralUpdate {
	uru.mutation.ResetTotalCommission()
	uru.mutation.SetTotalCommission(f)
	return uru
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableTotalCommission(f *float64) *UserReferralUpdate {
	if f != nil {
		uru.SetTotalCommission(*f)
	}
	return uru
}

// AddTotalCommission adds f to the "total_commission" field.
func (uru *UserReferralUpdate) AddTotalCommission(f float64) *UserReferralUpdate {
	uru.mutation.AddTotalCommission(f)
	return uru
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (uru *UserReferralUpdate) SetInvitedByUserID(i int64) *UserReferralUpdate {
	uru.mutation.ResetInvitedByUserID()
	uru.mutation.SetInvitedByUserID(i)
	return uru
}

// SetNillableInvitedByUserID sets the "invited_by_user_id" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableInvitedByUserID(i *int64) *UserReferralUpdate {
	if i != nil {
		uru.SetInvitedByUserID(*i)
	}
	return uru
}

// AddInvitedByUserID adds i to the "invited_by_user_id" field.
func (uru *UserReferralUpdate) AddInvitedByUserID(i int64) *UserReferralUpdate {
	uru.mutation.AddInvitedByUserID(i)
	return uru
}

// ClearInvitedByUserID clears the value of the "invited_by_user_id" field.
func (uru *UserReferralUpdate) ClearInvitedByUserID() *UserReferralUpdate {
	uru.mutation.ClearInvitedByUserID()
	return uru
}

// SetStatus sets the "status" field.
func (uru *UserReferralUpdate) SetStatus(i int8) *UserReferralUpdate {
	uru.mutation.ResetStatus()
	uru.mutation.SetStatus(i)
	return uru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uru *UserReferralUpdate) SetNillableStatus(i *int8) *UserReferralUpdate {
	if i != nil {
		uru.SetStatus(*i)
	}
	return uru
}

// AddStatus adds i to the "status" field.
func (uru *UserReferralUpdate) AddStatus(i int8) *UserReferralUpdate {
	uru.mutation.AddStatus(i)
	return uru
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (uru *UserReferralUpdate) SetTenantID(id int64) *UserReferralUpdate {
	uru.mutation.SetTenantID(id)
	return uru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uru *UserReferralUpdate) SetTenant(t *Tenant) *UserReferralUpdate {
	return uru.SetTenantID(t.ID)
}

// Mutation returns the UserReferralMutation object of the builder.
func (uru *UserReferralUpdate) Mutation() *UserReferralMutation {
	return uru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uru *UserReferralUpdate) ClearTenant() *UserReferralUpdate {
	uru.mutation.ClearTenant()
	return uru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserReferralUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uru.defaults(); err != nil {
		return 0, err
	}
	if len(uru.hooks) == 0 {
		if err = uru.check(); err != nil {
			return 0, err
		}
		affected, err = uru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserReferralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uru.check(); err != nil {
				return 0, err
			}
			uru.mutation = mutation
			affected, err = uru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uru.hooks) - 1; i >= 0; i-- {
			if uru.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = uru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserReferralUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserReferralUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserReferralUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uru *UserReferralUpdate) defaults() error {
	if _, ok := uru.mutation.UpdatedAt(); !ok {
		if userreferral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized userreferral.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := userreferral.UpdateDefaultUpdatedAt()
		uru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserReferralUpdate) check() error {
	if _, ok := uru.mutation.TenantID(); uru.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "UserReferral.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uru *UserReferralUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserReferralUpdate {
	uru.modifiers = append(uru.modifiers, modifiers...)
	return uru
}

func (uru *UserReferralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userreferral.Table,
			Columns: userreferral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userreferral.FieldID,
			},
		},
	}
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.UpdatedAt(); ok {
		_spec.SetField(userreferral.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uru.mutation.DeletedAt(); ok {
		_spec.SetField(userreferral.FieldDeletedAt, field.TypeTime, value)
	}
	if uru.mutation.DeletedAtCleared() {
		_spec.ClearField(userreferral.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uru.mutation.UserID(); ok {
		_spec.SetField(userreferral.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uru.mutation.AddedUserID(); ok {
		_spec.AddField(userreferral.FieldUserID, field.TypeInt64, value)
	}
	if uru.mutation.UserIDCleared() {
		_spec.ClearField(userreferral.FieldUserID, field.TypeInt64)
	}
	if value, ok := uru.mutation.FirstShipmentDate(); ok {
		_spec.SetField(userreferral.FieldFirstShipmentDate, field.TypeTime, value)
	}
	if uru.mutation.FirstShipmentDateCleared() {
		_spec.ClearField(userreferral.FieldFirstShipmentDate, field.TypeTime)
	}
	if value, ok := uru.mutation.TotalCommission(); ok {
		_spec.SetField(userreferral.FieldTotalCommission, field.TypeFloat64, value)
	}
	if value, ok := uru.mutation.AddedTotalCommission(); ok {
		_spec.AddField(userreferral.FieldTotalCommission, field.TypeFloat64, value)
	}
	if value, ok := uru.mutation.InvitedByUserID(); ok {
		_spec.SetField(userreferral.FieldInvitedByUserID, field.TypeInt64, value)
	}
	if value, ok := uru.mutation.AddedInvitedByUserID(); ok {
		_spec.AddField(userreferral.FieldInvitedByUserID, field.TypeInt64, value)
	}
	if uru.mutation.InvitedByUserIDCleared() {
		_spec.ClearField(userreferral.FieldInvitedByUserID, field.TypeInt64)
	}
	if value, ok := uru.mutation.Status(); ok {
		_spec.SetField(userreferral.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uru.mutation.AddedStatus(); ok {
		_spec.AddField(userreferral.FieldStatus, field.TypeInt8, value)
	}
	if uru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uru.schemaConfig.UserReferral
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uru.schemaConfig.UserReferral
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uru.schemaConfig.UserReferral
	ctx = internal.NewSchemaConfigContext(ctx, uru.schemaConfig)
	_spec.AddModifiers(uru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userreferral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserReferralUpdateOne is the builder for updating a single UserReferral entity.
type UserReferralUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserReferralMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uruo *UserReferralUpdateOne) SetUpdatedAt(t time.Time) *UserReferralUpdateOne {
	uruo.mutation.SetUpdatedAt(t)
	return uruo
}

// SetDeletedAt sets the "deleted_at" field.
func (uruo *UserReferralUpdateOne) SetDeletedAt(t time.Time) *UserReferralUpdateOne {
	uruo.mutation.SetDeletedAt(t)
	return uruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableDeletedAt(t *time.Time) *UserReferralUpdateOne {
	if t != nil {
		uruo.SetDeletedAt(*t)
	}
	return uruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uruo *UserReferralUpdateOne) ClearDeletedAt() *UserReferralUpdateOne {
	uruo.mutation.ClearDeletedAt()
	return uruo
}

// SetUserID sets the "user_id" field.
func (uruo *UserReferralUpdateOne) SetUserID(i int64) *UserReferralUpdateOne {
	uruo.mutation.ResetUserID()
	uruo.mutation.SetUserID(i)
	return uruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableUserID(i *int64) *UserReferralUpdateOne {
	if i != nil {
		uruo.SetUserID(*i)
	}
	return uruo
}

// AddUserID adds i to the "user_id" field.
func (uruo *UserReferralUpdateOne) AddUserID(i int64) *UserReferralUpdateOne {
	uruo.mutation.AddUserID(i)
	return uruo
}

// ClearUserID clears the value of the "user_id" field.
func (uruo *UserReferralUpdateOne) ClearUserID() *UserReferralUpdateOne {
	uruo.mutation.ClearUserID()
	return uruo
}

// SetFirstShipmentDate sets the "first_shipment_date" field.
func (uruo *UserReferralUpdateOne) SetFirstShipmentDate(t time.Time) *UserReferralUpdateOne {
	uruo.mutation.SetFirstShipmentDate(t)
	return uruo
}

// SetNillableFirstShipmentDate sets the "first_shipment_date" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableFirstShipmentDate(t *time.Time) *UserReferralUpdateOne {
	if t != nil {
		uruo.SetFirstShipmentDate(*t)
	}
	return uruo
}

// ClearFirstShipmentDate clears the value of the "first_shipment_date" field.
func (uruo *UserReferralUpdateOne) ClearFirstShipmentDate() *UserReferralUpdateOne {
	uruo.mutation.ClearFirstShipmentDate()
	return uruo
}

// SetTotalCommission sets the "total_commission" field.
func (uruo *UserReferralUpdateOne) SetTotalCommission(f float64) *UserReferralUpdateOne {
	uruo.mutation.ResetTotalCommission()
	uruo.mutation.SetTotalCommission(f)
	return uruo
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableTotalCommission(f *float64) *UserReferralUpdateOne {
	if f != nil {
		uruo.SetTotalCommission(*f)
	}
	return uruo
}

// AddTotalCommission adds f to the "total_commission" field.
func (uruo *UserReferralUpdateOne) AddTotalCommission(f float64) *UserReferralUpdateOne {
	uruo.mutation.AddTotalCommission(f)
	return uruo
}

// SetInvitedByUserID sets the "invited_by_user_id" field.
func (uruo *UserReferralUpdateOne) SetInvitedByUserID(i int64) *UserReferralUpdateOne {
	uruo.mutation.ResetInvitedByUserID()
	uruo.mutation.SetInvitedByUserID(i)
	return uruo
}

// SetNillableInvitedByUserID sets the "invited_by_user_id" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableInvitedByUserID(i *int64) *UserReferralUpdateOne {
	if i != nil {
		uruo.SetInvitedByUserID(*i)
	}
	return uruo
}

// AddInvitedByUserID adds i to the "invited_by_user_id" field.
func (uruo *UserReferralUpdateOne) AddInvitedByUserID(i int64) *UserReferralUpdateOne {
	uruo.mutation.AddInvitedByUserID(i)
	return uruo
}

// ClearInvitedByUserID clears the value of the "invited_by_user_id" field.
func (uruo *UserReferralUpdateOne) ClearInvitedByUserID() *UserReferralUpdateOne {
	uruo.mutation.ClearInvitedByUserID()
	return uruo
}

// SetStatus sets the "status" field.
func (uruo *UserReferralUpdateOne) SetStatus(i int8) *UserReferralUpdateOne {
	uruo.mutation.ResetStatus()
	uruo.mutation.SetStatus(i)
	return uruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uruo *UserReferralUpdateOne) SetNillableStatus(i *int8) *UserReferralUpdateOne {
	if i != nil {
		uruo.SetStatus(*i)
	}
	return uruo
}

// AddStatus adds i to the "status" field.
func (uruo *UserReferralUpdateOne) AddStatus(i int8) *UserReferralUpdateOne {
	uruo.mutation.AddStatus(i)
	return uruo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (uruo *UserReferralUpdateOne) SetTenantID(id int64) *UserReferralUpdateOne {
	uruo.mutation.SetTenantID(id)
	return uruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uruo *UserReferralUpdateOne) SetTenant(t *Tenant) *UserReferralUpdateOne {
	return uruo.SetTenantID(t.ID)
}

// Mutation returns the UserReferralMutation object of the builder.
func (uruo *UserReferralUpdateOne) Mutation() *UserReferralMutation {
	return uruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uruo *UserReferralUpdateOne) ClearTenant() *UserReferralUpdateOne {
	uruo.mutation.ClearTenant()
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserReferralUpdateOne) Select(field string, fields ...string) *UserReferralUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserReferral entity.
func (uruo *UserReferralUpdateOne) Save(ctx context.Context) (*UserReferral, error) {
	var (
		err  error
		node *UserReferral
	)
	if err := uruo.defaults(); err != nil {
		return nil, err
	}
	if len(uruo.hooks) == 0 {
		if err = uruo.check(); err != nil {
			return nil, err
		}
		node, err = uruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserReferralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uruo.check(); err != nil {
				return nil, err
			}
			uruo.mutation = mutation
			node, err = uruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uruo.hooks) - 1; i >= 0; i-- {
			if uruo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = uruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserReferral)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserReferralMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserReferralUpdateOne) SaveX(ctx context.Context) *UserReferral {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserReferralUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserReferralUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uruo *UserReferralUpdateOne) defaults() error {
	if _, ok := uruo.mutation.UpdatedAt(); !ok {
		if userreferral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized userreferral.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := userreferral.UpdateDefaultUpdatedAt()
		uruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserReferralUpdateOne) check() error {
	if _, ok := uruo.mutation.TenantID(); uruo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "UserReferral.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uruo *UserReferralUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserReferralUpdateOne {
	uruo.modifiers = append(uruo.modifiers, modifiers...)
	return uruo
}

func (uruo *UserReferralUpdateOne) sqlSave(ctx context.Context) (_node *UserReferral, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userreferral.Table,
			Columns: userreferral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userreferral.FieldID,
			},
		},
	}
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "UserReferral.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userreferral.FieldID)
		for _, f := range fields {
			if !userreferral.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != userreferral.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userreferral.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uruo.mutation.DeletedAt(); ok {
		_spec.SetField(userreferral.FieldDeletedAt, field.TypeTime, value)
	}
	if uruo.mutation.DeletedAtCleared() {
		_spec.ClearField(userreferral.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uruo.mutation.UserID(); ok {
		_spec.SetField(userreferral.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uruo.mutation.AddedUserID(); ok {
		_spec.AddField(userreferral.FieldUserID, field.TypeInt64, value)
	}
	if uruo.mutation.UserIDCleared() {
		_spec.ClearField(userreferral.FieldUserID, field.TypeInt64)
	}
	if value, ok := uruo.mutation.FirstShipmentDate(); ok {
		_spec.SetField(userreferral.FieldFirstShipmentDate, field.TypeTime, value)
	}
	if uruo.mutation.FirstShipmentDateCleared() {
		_spec.ClearField(userreferral.FieldFirstShipmentDate, field.TypeTime)
	}
	if value, ok := uruo.mutation.TotalCommission(); ok {
		_spec.SetField(userreferral.FieldTotalCommission, field.TypeFloat64, value)
	}
	if value, ok := uruo.mutation.AddedTotalCommission(); ok {
		_spec.AddField(userreferral.FieldTotalCommission, field.TypeFloat64, value)
	}
	if value, ok := uruo.mutation.InvitedByUserID(); ok {
		_spec.SetField(userreferral.FieldInvitedByUserID, field.TypeInt64, value)
	}
	if value, ok := uruo.mutation.AddedInvitedByUserID(); ok {
		_spec.AddField(userreferral.FieldInvitedByUserID, field.TypeInt64, value)
	}
	if uruo.mutation.InvitedByUserIDCleared() {
		_spec.ClearField(userreferral.FieldInvitedByUserID, field.TypeInt64)
	}
	if value, ok := uruo.mutation.Status(); ok {
		_spec.SetField(userreferral.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uruo.mutation.AddedStatus(); ok {
		_spec.AddField(userreferral.FieldStatus, field.TypeInt8, value)
	}
	if uruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uruo.schemaConfig.UserReferral
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uruo.schemaConfig.UserReferral
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uruo.schemaConfig.UserReferral
	ctx = internal.NewSchemaConfigContext(ctx, uruo.schemaConfig)
	_spec.AddModifiers(uruo.modifiers...)
	_node = &UserReferral{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userreferral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
