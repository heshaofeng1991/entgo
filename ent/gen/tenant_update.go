// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TenantUpdate) SetDeletedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDeletedAt(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TenantUpdate) ClearDeletedAt() *TenantUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetCode sets the "code" field.
func (tu *TenantUpdate) SetCode(s string) *TenantUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCode(s *string) *TenantUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetBalance sets the "balance" field.
func (tu *TenantUpdate) SetBalance(f float64) *TenantUpdate {
	tu.mutation.ResetBalance()
	tu.mutation.SetBalance(f)
	return tu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableBalance(f *float64) *TenantUpdate {
	if f != nil {
		tu.SetBalance(*f)
	}
	return tu
}

// AddBalance adds f to the "balance" field.
func (tu *TenantUpdate) AddBalance(f float64) *TenantUpdate {
	tu.mutation.AddBalance(f)
	return tu
}

// SetCurrency sets the "currency" field.
func (tu *TenantUpdate) SetCurrency(s string) *TenantUpdate {
	tu.mutation.SetCurrency(s)
	return tu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCurrency(s *string) *TenantUpdate {
	if s != nil {
		tu.SetCurrency(*s)
	}
	return tu
}

// SetHandlingFee sets the "handling_fee" field.
func (tu *TenantUpdate) SetHandlingFee(f float64) *TenantUpdate {
	tu.mutation.ResetHandlingFee()
	tu.mutation.SetHandlingFee(f)
	return tu
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableHandlingFee(f *float64) *TenantUpdate {
	if f != nil {
		tu.SetHandlingFee(*f)
	}
	return tu
}

// AddHandlingFee adds f to the "handling_fee" field.
func (tu *TenantUpdate) AddHandlingFee(f float64) *TenantUpdate {
	tu.mutation.AddHandlingFee(f)
	return tu
}

// SetShippingOption sets the "shipping_option" field.
func (tu *TenantUpdate) SetShippingOption(i int8) *TenantUpdate {
	tu.mutation.ResetShippingOption()
	tu.mutation.SetShippingOption(i)
	return tu
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableShippingOption(i *int8) *TenantUpdate {
	if i != nil {
		tu.SetShippingOption(*i)
	}
	return tu
}

// AddShippingOption adds i to the "shipping_option" field.
func (tu *TenantUpdate) AddShippingOption(i int8) *TenantUpdate {
	tu.mutation.AddShippingOption(i)
	return tu
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (tu *TenantUpdate) SetPrepayTariff(i int8) *TenantUpdate {
	tu.mutation.ResetPrepayTariff()
	tu.mutation.SetPrepayTariff(i)
	return tu
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (tu *TenantUpdate) SetNillablePrepayTariff(i *int8) *TenantUpdate {
	if i != nil {
		tu.SetPrepayTariff(*i)
	}
	return tu
}

// AddPrepayTariff adds i to the "prepay_tariff" field.
func (tu *TenantUpdate) AddPrepayTariff(i int8) *TenantUpdate {
	tu.mutation.AddPrepayTariff(i)
	return tu
}

// SetIossNumber sets the "ioss_number" field.
func (tu *TenantUpdate) SetIossNumber(s string) *TenantUpdate {
	tu.mutation.SetIossNumber(s)
	return tu
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableIossNumber(s *string) *TenantUpdate {
	if s != nil {
		tu.SetIossNumber(*s)
	}
	return tu
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (tu *TenantUpdate) SetIossCountryCode(s string) *TenantUpdate {
	tu.mutation.SetIossCountryCode(s)
	return tu
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableIossCountryCode(s *string) *TenantUpdate {
	if s != nil {
		tu.SetIossCountryCode(*s)
	}
	return tu
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (tu *TenantUpdate) SetUkVatNumber(s string) *TenantUpdate {
	tu.mutation.SetUkVatNumber(s)
	return tu
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableUkVatNumber(s *string) *TenantUpdate {
	if s != nil {
		tu.SetUkVatNumber(*s)
	}
	return tu
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (tu *TenantUpdate) SetDefaultWarehouse(i int64) *TenantUpdate {
	tu.mutation.ResetDefaultWarehouse()
	tu.mutation.SetDefaultWarehouse(i)
	return tu
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDefaultWarehouse(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetDefaultWarehouse(*i)
	}
	return tu
}

// AddDefaultWarehouse adds i to the "default_warehouse" field.
func (tu *TenantUpdate) AddDefaultWarehouse(i int64) *TenantUpdate {
	tu.mutation.AddDefaultWarehouse(i)
	return tu
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (tu *TenantUpdate) SetPresetChannelIds(s string) *TenantUpdate {
	tu.mutation.SetPresetChannelIds(s)
	return tu
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (tu *TenantUpdate) SetNillablePresetChannelIds(s *string) *TenantUpdate {
	if s != nil {
		tu.SetPresetChannelIds(*s)
	}
	return tu
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (tu *TenantUpdate) ClearPresetChannelIds() *TenantUpdate {
	tu.mutation.ClearPresetChannelIds()
	return tu
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (tu *TenantUpdate) SetTestChannelIds(s string) *TenantUpdate {
	tu.mutation.SetTestChannelIds(s)
	return tu
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableTestChannelIds(s *string) *TenantUpdate {
	if s != nil {
		tu.SetTestChannelIds(*s)
	}
	return tu
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (tu *TenantUpdate) ClearTestChannelIds() *TenantUpdate {
	tu.mutation.ClearTestChannelIds()
	return tu
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (tu *TenantUpdate) SetFirstInboundAt(t time.Time) *TenantUpdate {
	tu.mutation.SetFirstInboundAt(t)
	return tu
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableFirstInboundAt(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetFirstInboundAt(*t)
	}
	return tu
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (tu *TenantUpdate) ClearFirstInboundAt() *TenantUpdate {
	tu.mutation.ClearFirstInboundAt()
	return tu
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (tu *TenantUpdate) SetStorageUnitPrice(f float64) *TenantUpdate {
	tu.mutation.ResetStorageUnitPrice()
	tu.mutation.SetStorageUnitPrice(f)
	return tu
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableStorageUnitPrice(f *float64) *TenantUpdate {
	if f != nil {
		tu.SetStorageUnitPrice(*f)
	}
	return tu
}

// AddStorageUnitPrice adds f to the "storage_unit_price" field.
func (tu *TenantUpdate) AddStorageUnitPrice(f float64) *TenantUpdate {
	tu.mutation.AddStorageUnitPrice(f)
	return tu
}

// SetCsUserID sets the "cs_user_id" field.
func (tu *TenantUpdate) SetCsUserID(i int64) *TenantUpdate {
	tu.mutation.ResetCsUserID()
	tu.mutation.SetCsUserID(i)
	return tu
}

// SetNillableCsUserID sets the "cs_user_id" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCsUserID(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetCsUserID(*i)
	}
	return tu
}

// AddCsUserID adds i to the "cs_user_id" field.
func (tu *TenantUpdate) AddCsUserID(i int64) *TenantUpdate {
	tu.mutation.AddCsUserID(i)
	return tu
}

// ClearCsUserID clears the value of the "cs_user_id" field.
func (tu *TenantUpdate) ClearCsUserID() *TenantUpdate {
	tu.mutation.ClearCsUserID()
	return tu
}

// SetSalesUserID sets the "sales_user_id" field.
func (tu *TenantUpdate) SetSalesUserID(i int64) *TenantUpdate {
	tu.mutation.ResetSalesUserID()
	tu.mutation.SetSalesUserID(i)
	return tu
}

// SetNillableSalesUserID sets the "sales_user_id" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableSalesUserID(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetSalesUserID(*i)
	}
	return tu
}

// AddSalesUserID adds i to the "sales_user_id" field.
func (tu *TenantUpdate) AddSalesUserID(i int64) *TenantUpdate {
	tu.mutation.AddSalesUserID(i)
	return tu
}

// ClearSalesUserID clears the value of the "sales_user_id" field.
func (tu *TenantUpdate) ClearSalesUserID() *TenantUpdate {
	tu.mutation.ClearSalesUserID()
	return tu
}

// SetInviterUserID sets the "inviter_user_id" field.
func (tu *TenantUpdate) SetInviterUserID(i int64) *TenantUpdate {
	tu.mutation.ResetInviterUserID()
	tu.mutation.SetInviterUserID(i)
	return tu
}

// SetNillableInviterUserID sets the "inviter_user_id" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableInviterUserID(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetInviterUserID(*i)
	}
	return tu
}

// AddInviterUserID adds i to the "inviter_user_id" field.
func (tu *TenantUpdate) AddInviterUserID(i int64) *TenantUpdate {
	tu.mutation.AddInviterUserID(i)
	return tu
}

// ClearInviterUserID clears the value of the "inviter_user_id" field.
func (tu *TenantUpdate) ClearInviterUserID() *TenantUpdate {
	tu.mutation.ClearInviterUserID()
	return tu
}

// SetPlatform sets the "platform" field.
func (tu *TenantUpdate) SetPlatform(s string) *TenantUpdate {
	tu.mutation.SetPlatform(s)
	return tu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tu *TenantUpdate) SetNillablePlatform(s *string) *TenantUpdate {
	if s != nil {
		tu.SetPlatform(*s)
	}
	return tu
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TenantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Balance(); ok {
		_spec.SetField(tenant.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedBalance(); ok {
		_spec.AddField(tenant.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Currency(); ok {
		_spec.SetField(tenant.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tu.mutation.HandlingFee(); ok {
		_spec.SetField(tenant.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedHandlingFee(); ok {
		_spec.AddField(tenant.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.ShippingOption(); ok {
		_spec.SetField(tenant.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedShippingOption(); ok {
		_spec.AddField(tenant.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.PrepayTariff(); ok {
		_spec.SetField(tenant.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedPrepayTariff(); ok {
		_spec.AddField(tenant.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.IossNumber(); ok {
		_spec.SetField(tenant.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.IossCountryCode(); ok {
		_spec.SetField(tenant.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.UkVatNumber(); ok {
		_spec.SetField(tenant.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.DefaultWarehouse(); ok {
		_spec.SetField(tenant.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDefaultWarehouse(); ok {
		_spec.AddField(tenant.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.PresetChannelIds(); ok {
		_spec.SetField(tenant.FieldPresetChannelIds, field.TypeString, value)
	}
	if tu.mutation.PresetChannelIdsCleared() {
		_spec.ClearField(tenant.FieldPresetChannelIds, field.TypeString)
	}
	if value, ok := tu.mutation.TestChannelIds(); ok {
		_spec.SetField(tenant.FieldTestChannelIds, field.TypeString, value)
	}
	if tu.mutation.TestChannelIdsCleared() {
		_spec.ClearField(tenant.FieldTestChannelIds, field.TypeString)
	}
	if value, ok := tu.mutation.FirstInboundAt(); ok {
		_spec.SetField(tenant.FieldFirstInboundAt, field.TypeTime, value)
	}
	if tu.mutation.FirstInboundAtCleared() {
		_spec.ClearField(tenant.FieldFirstInboundAt, field.TypeTime)
	}
	if value, ok := tu.mutation.StorageUnitPrice(); ok {
		_spec.SetField(tenant.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedStorageUnitPrice(); ok {
		_spec.AddField(tenant.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.CsUserID(); ok {
		_spec.SetField(tenant.FieldCsUserID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedCsUserID(); ok {
		_spec.AddField(tenant.FieldCsUserID, field.TypeInt64, value)
	}
	if tu.mutation.CsUserIDCleared() {
		_spec.ClearField(tenant.FieldCsUserID, field.TypeInt64)
	}
	if value, ok := tu.mutation.SalesUserID(); ok {
		_spec.SetField(tenant.FieldSalesUserID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedSalesUserID(); ok {
		_spec.AddField(tenant.FieldSalesUserID, field.TypeInt64, value)
	}
	if tu.mutation.SalesUserIDCleared() {
		_spec.ClearField(tenant.FieldSalesUserID, field.TypeInt64)
	}
	if value, ok := tu.mutation.InviterUserID(); ok {
		_spec.SetField(tenant.FieldInviterUserID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedInviterUserID(); ok {
		_spec.AddField(tenant.FieldInviterUserID, field.TypeInt64, value)
	}
	if tu.mutation.InviterUserIDCleared() {
		_spec.ClearField(tenant.FieldInviterUserID, field.TypeInt64)
	}
	if value, ok := tu.mutation.Platform(); ok {
		_spec.SetField(tenant.FieldPlatform, field.TypeString, value)
	}
	_spec.Node.Schema = tu.schemaConfig.Tenant
	ctx = internal.NewSchemaConfigContext(ctx, tu.schemaConfig)
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TenantUpdateOne) SetDeletedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDeletedAt(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TenantUpdateOne) ClearDeletedAt() *TenantUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TenantUpdateOne) SetCode(s string) *TenantUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCode(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetBalance sets the "balance" field.
func (tuo *TenantUpdateOne) SetBalance(f float64) *TenantUpdateOne {
	tuo.mutation.ResetBalance()
	tuo.mutation.SetBalance(f)
	return tuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableBalance(f *float64) *TenantUpdateOne {
	if f != nil {
		tuo.SetBalance(*f)
	}
	return tuo
}

// AddBalance adds f to the "balance" field.
func (tuo *TenantUpdateOne) AddBalance(f float64) *TenantUpdateOne {
	tuo.mutation.AddBalance(f)
	return tuo
}

// SetCurrency sets the "currency" field.
func (tuo *TenantUpdateOne) SetCurrency(s string) *TenantUpdateOne {
	tuo.mutation.SetCurrency(s)
	return tuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCurrency(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetCurrency(*s)
	}
	return tuo
}

// SetHandlingFee sets the "handling_fee" field.
func (tuo *TenantUpdateOne) SetHandlingFee(f float64) *TenantUpdateOne {
	tuo.mutation.ResetHandlingFee()
	tuo.mutation.SetHandlingFee(f)
	return tuo
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableHandlingFee(f *float64) *TenantUpdateOne {
	if f != nil {
		tuo.SetHandlingFee(*f)
	}
	return tuo
}

// AddHandlingFee adds f to the "handling_fee" field.
func (tuo *TenantUpdateOne) AddHandlingFee(f float64) *TenantUpdateOne {
	tuo.mutation.AddHandlingFee(f)
	return tuo
}

// SetShippingOption sets the "shipping_option" field.
func (tuo *TenantUpdateOne) SetShippingOption(i int8) *TenantUpdateOne {
	tuo.mutation.ResetShippingOption()
	tuo.mutation.SetShippingOption(i)
	return tuo
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableShippingOption(i *int8) *TenantUpdateOne {
	if i != nil {
		tuo.SetShippingOption(*i)
	}
	return tuo
}

// AddShippingOption adds i to the "shipping_option" field.
func (tuo *TenantUpdateOne) AddShippingOption(i int8) *TenantUpdateOne {
	tuo.mutation.AddShippingOption(i)
	return tuo
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (tuo *TenantUpdateOne) SetPrepayTariff(i int8) *TenantUpdateOne {
	tuo.mutation.ResetPrepayTariff()
	tuo.mutation.SetPrepayTariff(i)
	return tuo
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillablePrepayTariff(i *int8) *TenantUpdateOne {
	if i != nil {
		tuo.SetPrepayTariff(*i)
	}
	return tuo
}

// AddPrepayTariff adds i to the "prepay_tariff" field.
func (tuo *TenantUpdateOne) AddPrepayTariff(i int8) *TenantUpdateOne {
	tuo.mutation.AddPrepayTariff(i)
	return tuo
}

// SetIossNumber sets the "ioss_number" field.
func (tuo *TenantUpdateOne) SetIossNumber(s string) *TenantUpdateOne {
	tuo.mutation.SetIossNumber(s)
	return tuo
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableIossNumber(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetIossNumber(*s)
	}
	return tuo
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (tuo *TenantUpdateOne) SetIossCountryCode(s string) *TenantUpdateOne {
	tuo.mutation.SetIossCountryCode(s)
	return tuo
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableIossCountryCode(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetIossCountryCode(*s)
	}
	return tuo
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (tuo *TenantUpdateOne) SetUkVatNumber(s string) *TenantUpdateOne {
	tuo.mutation.SetUkVatNumber(s)
	return tuo
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableUkVatNumber(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetUkVatNumber(*s)
	}
	return tuo
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (tuo *TenantUpdateOne) SetDefaultWarehouse(i int64) *TenantUpdateOne {
	tuo.mutation.ResetDefaultWarehouse()
	tuo.mutation.SetDefaultWarehouse(i)
	return tuo
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDefaultWarehouse(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetDefaultWarehouse(*i)
	}
	return tuo
}

// AddDefaultWarehouse adds i to the "default_warehouse" field.
func (tuo *TenantUpdateOne) AddDefaultWarehouse(i int64) *TenantUpdateOne {
	tuo.mutation.AddDefaultWarehouse(i)
	return tuo
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (tuo *TenantUpdateOne) SetPresetChannelIds(s string) *TenantUpdateOne {
	tuo.mutation.SetPresetChannelIds(s)
	return tuo
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillablePresetChannelIds(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetPresetChannelIds(*s)
	}
	return tuo
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (tuo *TenantUpdateOne) ClearPresetChannelIds() *TenantUpdateOne {
	tuo.mutation.ClearPresetChannelIds()
	return tuo
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (tuo *TenantUpdateOne) SetTestChannelIds(s string) *TenantUpdateOne {
	tuo.mutation.SetTestChannelIds(s)
	return tuo
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableTestChannelIds(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetTestChannelIds(*s)
	}
	return tuo
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (tuo *TenantUpdateOne) ClearTestChannelIds() *TenantUpdateOne {
	tuo.mutation.ClearTestChannelIds()
	return tuo
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (tuo *TenantUpdateOne) SetFirstInboundAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetFirstInboundAt(t)
	return tuo
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableFirstInboundAt(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetFirstInboundAt(*t)
	}
	return tuo
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (tuo *TenantUpdateOne) ClearFirstInboundAt() *TenantUpdateOne {
	tuo.mutation.ClearFirstInboundAt()
	return tuo
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (tuo *TenantUpdateOne) SetStorageUnitPrice(f float64) *TenantUpdateOne {
	tuo.mutation.ResetStorageUnitPrice()
	tuo.mutation.SetStorageUnitPrice(f)
	return tuo
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableStorageUnitPrice(f *float64) *TenantUpdateOne {
	if f != nil {
		tuo.SetStorageUnitPrice(*f)
	}
	return tuo
}

// AddStorageUnitPrice adds f to the "storage_unit_price" field.
func (tuo *TenantUpdateOne) AddStorageUnitPrice(f float64) *TenantUpdateOne {
	tuo.mutation.AddStorageUnitPrice(f)
	return tuo
}

// SetCsUserID sets the "cs_user_id" field.
func (tuo *TenantUpdateOne) SetCsUserID(i int64) *TenantUpdateOne {
	tuo.mutation.ResetCsUserID()
	tuo.mutation.SetCsUserID(i)
	return tuo
}

// SetNillableCsUserID sets the "cs_user_id" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCsUserID(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetCsUserID(*i)
	}
	return tuo
}

// AddCsUserID adds i to the "cs_user_id" field.
func (tuo *TenantUpdateOne) AddCsUserID(i int64) *TenantUpdateOne {
	tuo.mutation.AddCsUserID(i)
	return tuo
}

// ClearCsUserID clears the value of the "cs_user_id" field.
func (tuo *TenantUpdateOne) ClearCsUserID() *TenantUpdateOne {
	tuo.mutation.ClearCsUserID()
	return tuo
}

// SetSalesUserID sets the "sales_user_id" field.
func (tuo *TenantUpdateOne) SetSalesUserID(i int64) *TenantUpdateOne {
	tuo.mutation.ResetSalesUserID()
	tuo.mutation.SetSalesUserID(i)
	return tuo
}

// SetNillableSalesUserID sets the "sales_user_id" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableSalesUserID(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetSalesUserID(*i)
	}
	return tuo
}

// AddSalesUserID adds i to the "sales_user_id" field.
func (tuo *TenantUpdateOne) AddSalesUserID(i int64) *TenantUpdateOne {
	tuo.mutation.AddSalesUserID(i)
	return tuo
}

// ClearSalesUserID clears the value of the "sales_user_id" field.
func (tuo *TenantUpdateOne) ClearSalesUserID() *TenantUpdateOne {
	tuo.mutation.ClearSalesUserID()
	return tuo
}

// SetInviterUserID sets the "inviter_user_id" field.
func (tuo *TenantUpdateOne) SetInviterUserID(i int64) *TenantUpdateOne {
	tuo.mutation.ResetInviterUserID()
	tuo.mutation.SetInviterUserID(i)
	return tuo
}

// SetNillableInviterUserID sets the "inviter_user_id" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableInviterUserID(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetInviterUserID(*i)
	}
	return tuo
}

// AddInviterUserID adds i to the "inviter_user_id" field.
func (tuo *TenantUpdateOne) AddInviterUserID(i int64) *TenantUpdateOne {
	tuo.mutation.AddInviterUserID(i)
	return tuo
}

// ClearInviterUserID clears the value of the "inviter_user_id" field.
func (tuo *TenantUpdateOne) ClearInviterUserID() *TenantUpdateOne {
	tuo.mutation.ClearInviterUserID()
	return tuo
}

// SetPlatform sets the "platform" field.
func (tuo *TenantUpdateOne) SetPlatform(s string) *TenantUpdateOne {
	tuo.mutation.SetPlatform(s)
	return tuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillablePlatform(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetPlatform(*s)
	}
	return tuo
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TenantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TenantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Balance(); ok {
		_spec.SetField(tenant.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedBalance(); ok {
		_spec.AddField(tenant.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Currency(); ok {
		_spec.SetField(tenant.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tuo.mutation.HandlingFee(); ok {
		_spec.SetField(tenant.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedHandlingFee(); ok {
		_spec.AddField(tenant.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.ShippingOption(); ok {
		_spec.SetField(tenant.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedShippingOption(); ok {
		_spec.AddField(tenant.FieldShippingOption, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.PrepayTariff(); ok {
		_spec.SetField(tenant.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedPrepayTariff(); ok {
		_spec.AddField(tenant.FieldPrepayTariff, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.IossNumber(); ok {
		_spec.SetField(tenant.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IossCountryCode(); ok {
		_spec.SetField(tenant.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UkVatNumber(); ok {
		_spec.SetField(tenant.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DefaultWarehouse(); ok {
		_spec.SetField(tenant.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDefaultWarehouse(); ok {
		_spec.AddField(tenant.FieldDefaultWarehouse, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.PresetChannelIds(); ok {
		_spec.SetField(tenant.FieldPresetChannelIds, field.TypeString, value)
	}
	if tuo.mutation.PresetChannelIdsCleared() {
		_spec.ClearField(tenant.FieldPresetChannelIds, field.TypeString)
	}
	if value, ok := tuo.mutation.TestChannelIds(); ok {
		_spec.SetField(tenant.FieldTestChannelIds, field.TypeString, value)
	}
	if tuo.mutation.TestChannelIdsCleared() {
		_spec.ClearField(tenant.FieldTestChannelIds, field.TypeString)
	}
	if value, ok := tuo.mutation.FirstInboundAt(); ok {
		_spec.SetField(tenant.FieldFirstInboundAt, field.TypeTime, value)
	}
	if tuo.mutation.FirstInboundAtCleared() {
		_spec.ClearField(tenant.FieldFirstInboundAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.StorageUnitPrice(); ok {
		_spec.SetField(tenant.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedStorageUnitPrice(); ok {
		_spec.AddField(tenant.FieldStorageUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.CsUserID(); ok {
		_spec.SetField(tenant.FieldCsUserID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedCsUserID(); ok {
		_spec.AddField(tenant.FieldCsUserID, field.TypeInt64, value)
	}
	if tuo.mutation.CsUserIDCleared() {
		_spec.ClearField(tenant.FieldCsUserID, field.TypeInt64)
	}
	if value, ok := tuo.mutation.SalesUserID(); ok {
		_spec.SetField(tenant.FieldSalesUserID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedSalesUserID(); ok {
		_spec.AddField(tenant.FieldSalesUserID, field.TypeInt64, value)
	}
	if tuo.mutation.SalesUserIDCleared() {
		_spec.ClearField(tenant.FieldSalesUserID, field.TypeInt64)
	}
	if value, ok := tuo.mutation.InviterUserID(); ok {
		_spec.SetField(tenant.FieldInviterUserID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedInviterUserID(); ok {
		_spec.AddField(tenant.FieldInviterUserID, field.TypeInt64, value)
	}
	if tuo.mutation.InviterUserIDCleared() {
		_spec.ClearField(tenant.FieldInviterUserID, field.TypeInt64)
	}
	if value, ok := tuo.mutation.Platform(); ok {
		_spec.SetField(tenant.FieldPlatform, field.TypeString, value)
	}
	_spec.Node.Schema = tuo.schemaConfig.Tenant
	ctx = internal.NewSchemaConfigContext(ctx, tuo.schemaConfig)
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
