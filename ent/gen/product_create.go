// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProductCreate) SetDeletedAt(t time.Time) *ProductCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeletedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableName(s *string) *ProductCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetSku sets the "sku" field.
func (pc *ProductCreate) SetSku(s string) *ProductCreate {
	pc.mutation.SetSku(s)
	return pc
}

// SetBarcode sets the "barcode" field.
func (pc *ProductCreate) SetBarcode(s string) *ProductCreate {
	pc.mutation.SetBarcode(s)
	return pc
}

// SetCustomerCode sets the "customer_code" field.
func (pc *ProductCreate) SetCustomerCode(s string) *ProductCreate {
	pc.mutation.SetCustomerCode(s)
	return pc
}

// SetDeclaredName sets the "declared_name" field.
func (pc *ProductCreate) SetDeclaredName(s string) *ProductCreate {
	pc.mutation.SetDeclaredName(s)
	return pc
}

// SetNillableDeclaredName sets the "declared_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeclaredName(s *string) *ProductCreate {
	if s != nil {
		pc.SetDeclaredName(*s)
	}
	return pc
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (pc *ProductCreate) SetDeclaredCnName(s string) *ProductCreate {
	pc.mutation.SetDeclaredCnName(s)
	return pc
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeclaredCnName(s *string) *ProductCreate {
	if s != nil {
		pc.SetDeclaredCnName(*s)
	}
	return pc
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (pc *ProductCreate) SetDeclaredValueInUsd(f float64) *ProductCreate {
	pc.mutation.SetDeclaredValueInUsd(f)
	return pc
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeclaredValueInUsd(f *float64) *ProductCreate {
	if f != nil {
		pc.SetDeclaredValueInUsd(*f)
	}
	return pc
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (pc *ProductCreate) SetDeclaredValueInEur(f float64) *ProductCreate {
	pc.mutation.SetDeclaredValueInEur(f)
	return pc
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeclaredValueInEur(f *float64) *ProductCreate {
	if f != nil {
		pc.SetDeclaredValueInEur(*f)
	}
	return pc
}

// SetCurrency sets the "currency" field.
func (pc *ProductCreate) SetCurrency(s string) *ProductCreate {
	pc.mutation.SetCurrency(s)
	return pc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCurrency(s *string) *ProductCreate {
	if s != nil {
		pc.SetCurrency(*s)
	}
	return pc
}

// SetHsCode sets the "hs_code" field.
func (pc *ProductCreate) SetHsCode(s string) *ProductCreate {
	pc.mutation.SetHsCode(s)
	return pc
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (pc *ProductCreate) SetNillableHsCode(s *string) *ProductCreate {
	if s != nil {
		pc.SetHsCode(*s)
	}
	return pc
}

// SetMaterial sets the "material" field.
func (pc *ProductCreate) SetMaterial(s string) *ProductCreate {
	pc.mutation.SetMaterial(s)
	return pc
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMaterial(s *string) *ProductCreate {
	if s != nil {
		pc.SetMaterial(*s)
	}
	return pc
}

// SetPurpose sets the "purpose" field.
func (pc *ProductCreate) SetPurpose(s string) *ProductCreate {
	pc.mutation.SetPurpose(s)
	return pc
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePurpose(s *string) *ProductCreate {
	if s != nil {
		pc.SetPurpose(*s)
	}
	return pc
}

// SetWithBarcode sets the "with_barcode" field.
func (pc *ProductCreate) SetWithBarcode(i int8) *ProductCreate {
	pc.mutation.SetWithBarcode(i)
	return pc
}

// SetNillableWithBarcode sets the "with_barcode" field if the given value is not nil.
func (pc *ProductCreate) SetNillableWithBarcode(i *int8) *ProductCreate {
	if i != nil {
		pc.SetWithBarcode(*i)
	}
	return pc
}

// SetBarcodeService sets the "barcode_service" field.
func (pc *ProductCreate) SetBarcodeService(i int8) *ProductCreate {
	pc.mutation.SetBarcodeService(i)
	return pc
}

// SetNillableBarcodeService sets the "barcode_service" field if the given value is not nil.
func (pc *ProductCreate) SetNillableBarcodeService(i *int8) *ProductCreate {
	if i != nil {
		pc.SetBarcodeService(*i)
	}
	return pc
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (pc *ProductCreate) SetBarcodeTemplate(s string) *ProductCreate {
	pc.mutation.SetBarcodeTemplate(s)
	return pc
}

// SetNillableBarcodeTemplate sets the "barcode_template" field if the given value is not nil.
func (pc *ProductCreate) SetNillableBarcodeTemplate(s *string) *ProductCreate {
	if s != nil {
		pc.SetBarcodeTemplate(*s)
	}
	return pc
}

// SetImages sets the "images" field.
func (pc *ProductCreate) SetImages(s string) *ProductCreate {
	pc.mutation.SetImages(s)
	return pc
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (pc *ProductCreate) SetNillableImages(s *string) *ProductCreate {
	if s != nil {
		pc.SetImages(*s)
	}
	return pc
}

// SetAttributes sets the "attributes" field.
func (pc *ProductCreate) SetAttributes(s string) *ProductCreate {
	pc.mutation.SetAttributes(s)
	return pc
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (pc *ProductCreate) SetNillableAttributes(s *string) *ProductCreate {
	if s != nil {
		pc.SetAttributes(*s)
	}
	return pc
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (pc *ProductCreate) SetConfirmedAttributes(s string) *ProductCreate {
	pc.mutation.SetConfirmedAttributes(s)
	return pc
}

// SetNillableConfirmedAttributes sets the "confirmed_attributes" field if the given value is not nil.
func (pc *ProductCreate) SetNillableConfirmedAttributes(s *string) *ProductCreate {
	if s != nil {
		pc.SetConfirmedAttributes(*s)
	}
	return pc
}

// SetGrams sets the "grams" field.
func (pc *ProductCreate) SetGrams(i int) *ProductCreate {
	pc.mutation.SetGrams(i)
	return pc
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (pc *ProductCreate) SetNillableGrams(i *int) *ProductCreate {
	if i != nil {
		pc.SetGrams(*i)
	}
	return pc
}

// SetInboundGrams sets the "inbound_grams" field.
func (pc *ProductCreate) SetInboundGrams(i int) *ProductCreate {
	pc.mutation.SetInboundGrams(i)
	return pc
}

// SetNillableInboundGrams sets the "inbound_grams" field if the given value is not nil.
func (pc *ProductCreate) SetNillableInboundGrams(i *int) *ProductCreate {
	if i != nil {
		pc.SetInboundGrams(*i)
	}
	return pc
}

// SetLength sets the "length" field.
func (pc *ProductCreate) SetLength(i int) *ProductCreate {
	pc.mutation.SetLength(i)
	return pc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLength(i *int) *ProductCreate {
	if i != nil {
		pc.SetLength(*i)
	}
	return pc
}

// SetWidth sets the "width" field.
func (pc *ProductCreate) SetWidth(i int) *ProductCreate {
	pc.mutation.SetWidth(i)
	return pc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (pc *ProductCreate) SetNillableWidth(i *int) *ProductCreate {
	if i != nil {
		pc.SetWidth(*i)
	}
	return pc
}

// SetHeight sets the "height" field.
func (pc *ProductCreate) SetHeight(i int) *ProductCreate {
	pc.mutation.SetHeight(i)
	return pc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pc *ProductCreate) SetNillableHeight(i *int) *ProductCreate {
	if i != nil {
		pc.SetHeight(*i)
	}
	return pc
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (pc *ProductCreate) SetMaxAgvQty(i int) *ProductCreate {
	pc.mutation.SetMaxAgvQty(i)
	return pc
}

// SetNillableMaxAgvQty sets the "max_agv_qty" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMaxAgvQty(i *int) *ProductCreate {
	if i != nil {
		pc.SetMaxAgvQty(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProductCreate) SetStatus(i int8) *ProductCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStatus(i *int8) *ProductCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProductCreate) SetCreatedBy(i int64) *ProductCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedBy(i *int64) *ProductCreate {
	if i != nil {
		pc.SetCreatedBy(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(i int64) *ProductCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (pc *ProductCreate) SetTenantID(id int64) *ProductCreate {
	pc.mutation.SetTenantID(id)
	return pc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pc *ProductCreate) SetTenant(t *Tenant) *ProductCreate {
	return pc.SetTenantID(t.ID)
}

// AddInventoryIDs adds the "inventories" edge to the Inventory entity by IDs.
func (pc *ProductCreate) AddInventoryIDs(ids ...int64) *ProductCreate {
	pc.mutation.AddInventoryIDs(ids...)
	return pc
}

// AddInventories adds the "inventories" edges to the Inventory entity.
func (pc *ProductCreate) AddInventories(i ...*Inventory) *ProductCreate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddInventoryIDs(ids...)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (pc *ProductCreate) AddProductMappingIDs(ids ...int64) *ProductCreate {
	pc.mutation.AddProductMappingIDs(ids...)
	return pc
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (pc *ProductCreate) AddProductMappings(p ...*ProductMapping) *ProductCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductMappingIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Product)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProductMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if product.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized product.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if product.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized product.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := product.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.DeclaredValueInUsd(); !ok {
		v := product.DefaultDeclaredValueInUsd
		pc.mutation.SetDeclaredValueInUsd(v)
	}
	if _, ok := pc.mutation.DeclaredValueInEur(); !ok {
		v := product.DefaultDeclaredValueInEur
		pc.mutation.SetDeclaredValueInEur(v)
	}
	if _, ok := pc.mutation.Currency(); !ok {
		v := product.DefaultCurrency
		pc.mutation.SetCurrency(v)
	}
	if _, ok := pc.mutation.HsCode(); !ok {
		v := product.DefaultHsCode
		pc.mutation.SetHsCode(v)
	}
	if _, ok := pc.mutation.Material(); !ok {
		v := product.DefaultMaterial
		pc.mutation.SetMaterial(v)
	}
	if _, ok := pc.mutation.Purpose(); !ok {
		v := product.DefaultPurpose
		pc.mutation.SetPurpose(v)
	}
	if _, ok := pc.mutation.WithBarcode(); !ok {
		v := product.DefaultWithBarcode
		pc.mutation.SetWithBarcode(v)
	}
	if _, ok := pc.mutation.BarcodeService(); !ok {
		v := product.DefaultBarcodeService
		pc.mutation.SetBarcodeService(v)
	}
	if _, ok := pc.mutation.Grams(); !ok {
		v := product.DefaultGrams
		pc.mutation.SetGrams(v)
	}
	if _, ok := pc.mutation.InboundGrams(); !ok {
		v := product.DefaultInboundGrams
		pc.mutation.SetInboundGrams(v)
	}
	if _, ok := pc.mutation.Length(); !ok {
		v := product.DefaultLength
		pc.mutation.SetLength(v)
	}
	if _, ok := pc.mutation.Width(); !ok {
		v := product.DefaultWidth
		pc.mutation.SetWidth(v)
	}
	if _, ok := pc.mutation.Height(); !ok {
		v := product.DefaultHeight
		pc.mutation.SetHeight(v)
	}
	if _, ok := pc.mutation.MaxAgvQty(); !ok {
		v := product.DefaultMaxAgvQty
		pc.mutation.SetMaxAgvQty(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := product.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Product.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Product.name"`)}
	}
	if _, ok := pc.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`gen: missing required field "Product.sku"`)}
	}
	if _, ok := pc.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`gen: missing required field "Product.barcode"`)}
	}
	if _, ok := pc.mutation.CustomerCode(); !ok {
		return &ValidationError{Name: "customer_code", err: errors.New(`gen: missing required field "Product.customer_code"`)}
	}
	if _, ok := pc.mutation.DeclaredValueInUsd(); !ok {
		return &ValidationError{Name: "declared_value_in_usd", err: errors.New(`gen: missing required field "Product.declared_value_in_usd"`)}
	}
	if _, ok := pc.mutation.DeclaredValueInEur(); !ok {
		return &ValidationError{Name: "declared_value_in_eur", err: errors.New(`gen: missing required field "Product.declared_value_in_eur"`)}
	}
	if _, ok := pc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`gen: missing required field "Product.currency"`)}
	}
	if _, ok := pc.mutation.HsCode(); !ok {
		return &ValidationError{Name: "hs_code", err: errors.New(`gen: missing required field "Product.hs_code"`)}
	}
	if _, ok := pc.mutation.Material(); !ok {
		return &ValidationError{Name: "material", err: errors.New(`gen: missing required field "Product.material"`)}
	}
	if _, ok := pc.mutation.Purpose(); !ok {
		return &ValidationError{Name: "purpose", err: errors.New(`gen: missing required field "Product.purpose"`)}
	}
	if _, ok := pc.mutation.WithBarcode(); !ok {
		return &ValidationError{Name: "with_barcode", err: errors.New(`gen: missing required field "Product.with_barcode"`)}
	}
	if _, ok := pc.mutation.BarcodeService(); !ok {
		return &ValidationError{Name: "barcode_service", err: errors.New(`gen: missing required field "Product.barcode_service"`)}
	}
	if _, ok := pc.mutation.Grams(); !ok {
		return &ValidationError{Name: "grams", err: errors.New(`gen: missing required field "Product.grams"`)}
	}
	if _, ok := pc.mutation.InboundGrams(); !ok {
		return &ValidationError{Name: "inbound_grams", err: errors.New(`gen: missing required field "Product.inbound_grams"`)}
	}
	if _, ok := pc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`gen: missing required field "Product.length"`)}
	}
	if _, ok := pc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`gen: missing required field "Product.width"`)}
	}
	if _, ok := pc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`gen: missing required field "Product.height"`)}
	}
	if _, ok := pc.mutation.MaxAgvQty(); !ok {
		return &ValidationError{Name: "max_agv_qty", err: errors.New(`gen: missing required field "Product.max_agv_qty"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Product.status"`)}
	}
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "Product.tenant"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		}
	)
	_spec.Schema = pc.schemaConfig.Product
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := pc.mutation.Barcode(); ok {
		_spec.SetField(product.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := pc.mutation.CustomerCode(); ok {
		_spec.SetField(product.FieldCustomerCode, field.TypeString, value)
		_node.CustomerCode = value
	}
	if value, ok := pc.mutation.DeclaredName(); ok {
		_spec.SetField(product.FieldDeclaredName, field.TypeString, value)
		_node.DeclaredName = value
	}
	if value, ok := pc.mutation.DeclaredCnName(); ok {
		_spec.SetField(product.FieldDeclaredCnName, field.TypeString, value)
		_node.DeclaredCnName = value
	}
	if value, ok := pc.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(product.FieldDeclaredValueInUsd, field.TypeFloat64, value)
		_node.DeclaredValueInUsd = value
	}
	if value, ok := pc.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(product.FieldDeclaredValueInEur, field.TypeFloat64, value)
		_node.DeclaredValueInEur = value
	}
	if value, ok := pc.mutation.Currency(); ok {
		_spec.SetField(product.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pc.mutation.HsCode(); ok {
		_spec.SetField(product.FieldHsCode, field.TypeString, value)
		_node.HsCode = value
	}
	if value, ok := pc.mutation.Material(); ok {
		_spec.SetField(product.FieldMaterial, field.TypeString, value)
		_node.Material = value
	}
	if value, ok := pc.mutation.Purpose(); ok {
		_spec.SetField(product.FieldPurpose, field.TypeString, value)
		_node.Purpose = value
	}
	if value, ok := pc.mutation.WithBarcode(); ok {
		_spec.SetField(product.FieldWithBarcode, field.TypeInt8, value)
		_node.WithBarcode = value
	}
	if value, ok := pc.mutation.BarcodeService(); ok {
		_spec.SetField(product.FieldBarcodeService, field.TypeInt8, value)
		_node.BarcodeService = value
	}
	if value, ok := pc.mutation.BarcodeTemplate(); ok {
		_spec.SetField(product.FieldBarcodeTemplate, field.TypeString, value)
		_node.BarcodeTemplate = value
	}
	if value, ok := pc.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeString, value)
		_node.Images = value
	}
	if value, ok := pc.mutation.Attributes(); ok {
		_spec.SetField(product.FieldAttributes, field.TypeString, value)
		_node.Attributes = value
	}
	if value, ok := pc.mutation.ConfirmedAttributes(); ok {
		_spec.SetField(product.FieldConfirmedAttributes, field.TypeString, value)
		_node.ConfirmedAttributes = value
	}
	if value, ok := pc.mutation.Grams(); ok {
		_spec.SetField(product.FieldGrams, field.TypeInt, value)
		_node.Grams = value
	}
	if value, ok := pc.mutation.InboundGrams(); ok {
		_spec.SetField(product.FieldInboundGrams, field.TypeInt, value)
		_node.InboundGrams = value
	}
	if value, ok := pc.mutation.Length(); ok {
		_spec.SetField(product.FieldLength, field.TypeInt, value)
		_node.Length = value
	}
	if value, ok := pc.mutation.Width(); ok {
		_spec.SetField(product.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := pc.mutation.Height(); ok {
		_spec.SetField(product.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := pc.mutation.MaxAgvQty(); ok {
		_spec.SetField(product.FieldMaxAgvQty, field.TypeInt, value)
		_node.MaxAgvQty = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = pc.schemaConfig.Product
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InventoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inventory.FieldID,
				},
			},
		}
		edge.Schema = pc.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = pc.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsert) SetDeletedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeletedAt() *ProductUpsert {
	u.SetExcluded(product.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsert) ClearDeletedAt() *ProductUpsert {
	u.SetNull(product.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ProductUpsert) SetName(v string) *ProductUpsert {
	u.Set(product.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateName() *ProductUpsert {
	u.SetExcluded(product.FieldName)
	return u
}

// SetSku sets the "sku" field.
func (u *ProductUpsert) SetSku(v string) *ProductUpsert {
	u.Set(product.FieldSku, v)
	return u
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSku() *ProductUpsert {
	u.SetExcluded(product.FieldSku)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *ProductUpsert) SetBarcode(v string) *ProductUpsert {
	u.Set(product.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ProductUpsert) UpdateBarcode() *ProductUpsert {
	u.SetExcluded(product.FieldBarcode)
	return u
}

// SetCustomerCode sets the "customer_code" field.
func (u *ProductUpsert) SetCustomerCode(v string) *ProductUpsert {
	u.Set(product.FieldCustomerCode, v)
	return u
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCustomerCode() *ProductUpsert {
	u.SetExcluded(product.FieldCustomerCode)
	return u
}

// SetDeclaredName sets the "declared_name" field.
func (u *ProductUpsert) SetDeclaredName(v string) *ProductUpsert {
	u.Set(product.FieldDeclaredName, v)
	return u
}

// UpdateDeclaredName sets the "declared_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeclaredName() *ProductUpsert {
	u.SetExcluded(product.FieldDeclaredName)
	return u
}

// ClearDeclaredName clears the value of the "declared_name" field.
func (u *ProductUpsert) ClearDeclaredName() *ProductUpsert {
	u.SetNull(product.FieldDeclaredName)
	return u
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *ProductUpsert) SetDeclaredCnName(v string) *ProductUpsert {
	u.Set(product.FieldDeclaredCnName, v)
	return u
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeclaredCnName() *ProductUpsert {
	u.SetExcluded(product.FieldDeclaredCnName)
	return u
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *ProductUpsert) ClearDeclaredCnName() *ProductUpsert {
	u.SetNull(product.FieldDeclaredCnName)
	return u
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *ProductUpsert) SetDeclaredValueInUsd(v float64) *ProductUpsert {
	u.Set(product.FieldDeclaredValueInUsd, v)
	return u
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeclaredValueInUsd() *ProductUpsert {
	u.SetExcluded(product.FieldDeclaredValueInUsd)
	return u
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *ProductUpsert) AddDeclaredValueInUsd(v float64) *ProductUpsert {
	u.Add(product.FieldDeclaredValueInUsd, v)
	return u
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *ProductUpsert) SetDeclaredValueInEur(v float64) *ProductUpsert {
	u.Set(product.FieldDeclaredValueInEur, v)
	return u
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeclaredValueInEur() *ProductUpsert {
	u.SetExcluded(product.FieldDeclaredValueInEur)
	return u
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *ProductUpsert) AddDeclaredValueInEur(v float64) *ProductUpsert {
	u.Add(product.FieldDeclaredValueInEur, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *ProductUpsert) SetCurrency(v string) *ProductUpsert {
	u.Set(product.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCurrency() *ProductUpsert {
	u.SetExcluded(product.FieldCurrency)
	return u
}

// SetHsCode sets the "hs_code" field.
func (u *ProductUpsert) SetHsCode(v string) *ProductUpsert {
	u.Set(product.FieldHsCode, v)
	return u
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *ProductUpsert) UpdateHsCode() *ProductUpsert {
	u.SetExcluded(product.FieldHsCode)
	return u
}

// SetMaterial sets the "material" field.
func (u *ProductUpsert) SetMaterial(v string) *ProductUpsert {
	u.Set(product.FieldMaterial, v)
	return u
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *ProductUpsert) UpdateMaterial() *ProductUpsert {
	u.SetExcluded(product.FieldMaterial)
	return u
}

// SetPurpose sets the "purpose" field.
func (u *ProductUpsert) SetPurpose(v string) *ProductUpsert {
	u.Set(product.FieldPurpose, v)
	return u
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *ProductUpsert) UpdatePurpose() *ProductUpsert {
	u.SetExcluded(product.FieldPurpose)
	return u
}

// SetWithBarcode sets the "with_barcode" field.
func (u *ProductUpsert) SetWithBarcode(v int8) *ProductUpsert {
	u.Set(product.FieldWithBarcode, v)
	return u
}

// UpdateWithBarcode sets the "with_barcode" field to the value that was provided on create.
func (u *ProductUpsert) UpdateWithBarcode() *ProductUpsert {
	u.SetExcluded(product.FieldWithBarcode)
	return u
}

// AddWithBarcode adds v to the "with_barcode" field.
func (u *ProductUpsert) AddWithBarcode(v int8) *ProductUpsert {
	u.Add(product.FieldWithBarcode, v)
	return u
}

// SetBarcodeService sets the "barcode_service" field.
func (u *ProductUpsert) SetBarcodeService(v int8) *ProductUpsert {
	u.Set(product.FieldBarcodeService, v)
	return u
}

// UpdateBarcodeService sets the "barcode_service" field to the value that was provided on create.
func (u *ProductUpsert) UpdateBarcodeService() *ProductUpsert {
	u.SetExcluded(product.FieldBarcodeService)
	return u
}

// AddBarcodeService adds v to the "barcode_service" field.
func (u *ProductUpsert) AddBarcodeService(v int8) *ProductUpsert {
	u.Add(product.FieldBarcodeService, v)
	return u
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (u *ProductUpsert) SetBarcodeTemplate(v string) *ProductUpsert {
	u.Set(product.FieldBarcodeTemplate, v)
	return u
}

// UpdateBarcodeTemplate sets the "barcode_template" field to the value that was provided on create.
func (u *ProductUpsert) UpdateBarcodeTemplate() *ProductUpsert {
	u.SetExcluded(product.FieldBarcodeTemplate)
	return u
}

// ClearBarcodeTemplate clears the value of the "barcode_template" field.
func (u *ProductUpsert) ClearBarcodeTemplate() *ProductUpsert {
	u.SetNull(product.FieldBarcodeTemplate)
	return u
}

// SetImages sets the "images" field.
func (u *ProductUpsert) SetImages(v string) *ProductUpsert {
	u.Set(product.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ProductUpsert) UpdateImages() *ProductUpsert {
	u.SetExcluded(product.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *ProductUpsert) ClearImages() *ProductUpsert {
	u.SetNull(product.FieldImages)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ProductUpsert) SetAttributes(v string) *ProductUpsert {
	u.Set(product.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ProductUpsert) UpdateAttributes() *ProductUpsert {
	u.SetExcluded(product.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ProductUpsert) ClearAttributes() *ProductUpsert {
	u.SetNull(product.FieldAttributes)
	return u
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (u *ProductUpsert) SetConfirmedAttributes(v string) *ProductUpsert {
	u.Set(product.FieldConfirmedAttributes, v)
	return u
}

// UpdateConfirmedAttributes sets the "confirmed_attributes" field to the value that was provided on create.
func (u *ProductUpsert) UpdateConfirmedAttributes() *ProductUpsert {
	u.SetExcluded(product.FieldConfirmedAttributes)
	return u
}

// ClearConfirmedAttributes clears the value of the "confirmed_attributes" field.
func (u *ProductUpsert) ClearConfirmedAttributes() *ProductUpsert {
	u.SetNull(product.FieldConfirmedAttributes)
	return u
}

// SetGrams sets the "grams" field.
func (u *ProductUpsert) SetGrams(v int) *ProductUpsert {
	u.Set(product.FieldGrams, v)
	return u
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *ProductUpsert) UpdateGrams() *ProductUpsert {
	u.SetExcluded(product.FieldGrams)
	return u
}

// AddGrams adds v to the "grams" field.
func (u *ProductUpsert) AddGrams(v int) *ProductUpsert {
	u.Add(product.FieldGrams, v)
	return u
}

// SetInboundGrams sets the "inbound_grams" field.
func (u *ProductUpsert) SetInboundGrams(v int) *ProductUpsert {
	u.Set(product.FieldInboundGrams, v)
	return u
}

// UpdateInboundGrams sets the "inbound_grams" field to the value that was provided on create.
func (u *ProductUpsert) UpdateInboundGrams() *ProductUpsert {
	u.SetExcluded(product.FieldInboundGrams)
	return u
}

// AddInboundGrams adds v to the "inbound_grams" field.
func (u *ProductUpsert) AddInboundGrams(v int) *ProductUpsert {
	u.Add(product.FieldInboundGrams, v)
	return u
}

// SetLength sets the "length" field.
func (u *ProductUpsert) SetLength(v int) *ProductUpsert {
	u.Set(product.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *ProductUpsert) UpdateLength() *ProductUpsert {
	u.SetExcluded(product.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *ProductUpsert) AddLength(v int) *ProductUpsert {
	u.Add(product.FieldLength, v)
	return u
}

// SetWidth sets the "width" field.
func (u *ProductUpsert) SetWidth(v int) *ProductUpsert {
	u.Set(product.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ProductUpsert) UpdateWidth() *ProductUpsert {
	u.SetExcluded(product.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *ProductUpsert) AddWidth(v int) *ProductUpsert {
	u.Add(product.FieldWidth, v)
	return u
}

// SetHeight sets the "height" field.
func (u *ProductUpsert) SetHeight(v int) *ProductUpsert {
	u.Set(product.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ProductUpsert) UpdateHeight() *ProductUpsert {
	u.SetExcluded(product.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *ProductUpsert) AddHeight(v int) *ProductUpsert {
	u.Add(product.FieldHeight, v)
	return u
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (u *ProductUpsert) SetMaxAgvQty(v int) *ProductUpsert {
	u.Set(product.FieldMaxAgvQty, v)
	return u
}

// UpdateMaxAgvQty sets the "max_agv_qty" field to the value that was provided on create.
func (u *ProductUpsert) UpdateMaxAgvQty() *ProductUpsert {
	u.SetExcluded(product.FieldMaxAgvQty)
	return u
}

// AddMaxAgvQty adds v to the "max_agv_qty" field.
func (u *ProductUpsert) AddMaxAgvQty(v int) *ProductUpsert {
	u.Add(product.FieldMaxAgvQty, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ProductUpsert) SetStatus(v int8) *ProductUpsert {
	u.Set(product.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsert) UpdateStatus() *ProductUpsert {
	u.SetExcluded(product.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsert) AddStatus(v int8) *ProductUpsert {
	u.Add(product.FieldStatus, v)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsert) SetCreatedBy(v int64) *ProductUpsert {
	u.Set(product.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCreatedBy() *ProductUpsert {
	u.SetExcluded(product.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsert) AddCreatedBy(v int64) *ProductUpsert {
	u.Add(product.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ProductUpsert) ClearCreatedBy() *ProductUpsert {
	u.SetNull(product.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(product.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(product.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertOne) SetDeletedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeletedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsertOne) ClearDeletedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertOne) SetName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetSku sets the "sku" field.
func (u *ProductUpsertOne) SetSku(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSku() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *ProductUpsertOne) SetBarcode(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateBarcode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcode()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *ProductUpsertOne) SetCustomerCode(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCustomerCode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCustomerCode()
	})
}

// SetDeclaredName sets the "declared_name" field.
func (u *ProductUpsertOne) SetDeclaredName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredName(v)
	})
}

// UpdateDeclaredName sets the "declared_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeclaredName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredName()
	})
}

// ClearDeclaredName clears the value of the "declared_name" field.
func (u *ProductUpsertOne) ClearDeclaredName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeclaredName()
	})
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *ProductUpsertOne) SetDeclaredCnName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredCnName(v)
	})
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeclaredCnName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredCnName()
	})
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *ProductUpsertOne) ClearDeclaredCnName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeclaredCnName()
	})
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *ProductUpsertOne) SetDeclaredValueInUsd(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredValueInUsd(v)
	})
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *ProductUpsertOne) AddDeclaredValueInUsd(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeclaredValueInUsd(v)
	})
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeclaredValueInUsd() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredValueInUsd()
	})
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *ProductUpsertOne) SetDeclaredValueInEur(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredValueInEur(v)
	})
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *ProductUpsertOne) AddDeclaredValueInEur(v float64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeclaredValueInEur(v)
	})
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeclaredValueInEur() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredValueInEur()
	})
}

// SetCurrency sets the "currency" field.
func (u *ProductUpsertOne) SetCurrency(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCurrency() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrency()
	})
}

// SetHsCode sets the "hs_code" field.
func (u *ProductUpsertOne) SetHsCode(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetHsCode(v)
	})
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateHsCode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateHsCode()
	})
}

// SetMaterial sets the "material" field.
func (u *ProductUpsertOne) SetMaterial(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateMaterial() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMaterial()
	})
}

// SetPurpose sets the "purpose" field.
func (u *ProductUpsertOne) SetPurpose(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetPurpose(v)
	})
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdatePurpose() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePurpose()
	})
}

// SetWithBarcode sets the "with_barcode" field.
func (u *ProductUpsertOne) SetWithBarcode(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetWithBarcode(v)
	})
}

// AddWithBarcode adds v to the "with_barcode" field.
func (u *ProductUpsertOne) AddWithBarcode(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddWithBarcode(v)
	})
}

// UpdateWithBarcode sets the "with_barcode" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateWithBarcode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateWithBarcode()
	})
}

// SetBarcodeService sets the "barcode_service" field.
func (u *ProductUpsertOne) SetBarcodeService(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcodeService(v)
	})
}

// AddBarcodeService adds v to the "barcode_service" field.
func (u *ProductUpsertOne) AddBarcodeService(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddBarcodeService(v)
	})
}

// UpdateBarcodeService sets the "barcode_service" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateBarcodeService() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcodeService()
	})
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (u *ProductUpsertOne) SetBarcodeTemplate(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcodeTemplate(v)
	})
}

// UpdateBarcodeTemplate sets the "barcode_template" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateBarcodeTemplate() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcodeTemplate()
	})
}

// ClearBarcodeTemplate clears the value of the "barcode_template" field.
func (u *ProductUpsertOne) ClearBarcodeTemplate() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearBarcodeTemplate()
	})
}

// SetImages sets the "images" field.
func (u *ProductUpsertOne) SetImages(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateImages() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *ProductUpsertOne) ClearImages() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearImages()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ProductUpsertOne) SetAttributes(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateAttributes() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ProductUpsertOne) ClearAttributes() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearAttributes()
	})
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (u *ProductUpsertOne) SetConfirmedAttributes(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetConfirmedAttributes(v)
	})
}

// UpdateConfirmedAttributes sets the "confirmed_attributes" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateConfirmedAttributes() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateConfirmedAttributes()
	})
}

// ClearConfirmedAttributes clears the value of the "confirmed_attributes" field.
func (u *ProductUpsertOne) ClearConfirmedAttributes() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearConfirmedAttributes()
	})
}

// SetGrams sets the "grams" field.
func (u *ProductUpsertOne) SetGrams(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *ProductUpsertOne) AddGrams(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateGrams() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateGrams()
	})
}

// SetInboundGrams sets the "inbound_grams" field.
func (u *ProductUpsertOne) SetInboundGrams(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetInboundGrams(v)
	})
}

// AddInboundGrams adds v to the "inbound_grams" field.
func (u *ProductUpsertOne) AddInboundGrams(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddInboundGrams(v)
	})
}

// UpdateInboundGrams sets the "inbound_grams" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateInboundGrams() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateInboundGrams()
	})
}

// SetLength sets the "length" field.
func (u *ProductUpsertOne) SetLength(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *ProductUpsertOne) AddLength(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateLength() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *ProductUpsertOne) SetWidth(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *ProductUpsertOne) AddWidth(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateWidth() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *ProductUpsertOne) SetHeight(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *ProductUpsertOne) AddHeight(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateHeight() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateHeight()
	})
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (u *ProductUpsertOne) SetMaxAgvQty(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetMaxAgvQty(v)
	})
}

// AddMaxAgvQty adds v to the "max_agv_qty" field.
func (u *ProductUpsertOne) AddMaxAgvQty(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddMaxAgvQty(v)
	})
}

// UpdateMaxAgvQty sets the "max_agv_qty" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateMaxAgvQty() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMaxAgvQty()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertOne) SetStatus(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsertOne) AddStatus(v int8) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateStatus() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsertOne) SetCreatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsertOne) AddCreatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCreatedBy() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ProductUpsertOne) ClearCreatedBy() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(product.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(product.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertBulk) SetDeletedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeletedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsertBulk) ClearDeletedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ProductUpsertBulk) SetName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateName()
	})
}

// SetSku sets the "sku" field.
func (u *ProductUpsertBulk) SetSku(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSku() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *ProductUpsertBulk) SetBarcode(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateBarcode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcode()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *ProductUpsertBulk) SetCustomerCode(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCustomerCode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCustomerCode()
	})
}

// SetDeclaredName sets the "declared_name" field.
func (u *ProductUpsertBulk) SetDeclaredName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredName(v)
	})
}

// UpdateDeclaredName sets the "declared_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeclaredName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredName()
	})
}

// ClearDeclaredName clears the value of the "declared_name" field.
func (u *ProductUpsertBulk) ClearDeclaredName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeclaredName()
	})
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *ProductUpsertBulk) SetDeclaredCnName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredCnName(v)
	})
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeclaredCnName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredCnName()
	})
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *ProductUpsertBulk) ClearDeclaredCnName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeclaredCnName()
	})
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *ProductUpsertBulk) SetDeclaredValueInUsd(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredValueInUsd(v)
	})
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *ProductUpsertBulk) AddDeclaredValueInUsd(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeclaredValueInUsd(v)
	})
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeclaredValueInUsd() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredValueInUsd()
	})
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *ProductUpsertBulk) SetDeclaredValueInEur(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeclaredValueInEur(v)
	})
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *ProductUpsertBulk) AddDeclaredValueInEur(v float64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeclaredValueInEur(v)
	})
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeclaredValueInEur() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeclaredValueInEur()
	})
}

// SetCurrency sets the "currency" field.
func (u *ProductUpsertBulk) SetCurrency(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCurrency() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrency()
	})
}

// SetHsCode sets the "hs_code" field.
func (u *ProductUpsertBulk) SetHsCode(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetHsCode(v)
	})
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateHsCode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateHsCode()
	})
}

// SetMaterial sets the "material" field.
func (u *ProductUpsertBulk) SetMaterial(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateMaterial() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMaterial()
	})
}

// SetPurpose sets the "purpose" field.
func (u *ProductUpsertBulk) SetPurpose(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetPurpose(v)
	})
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdatePurpose() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePurpose()
	})
}

// SetWithBarcode sets the "with_barcode" field.
func (u *ProductUpsertBulk) SetWithBarcode(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetWithBarcode(v)
	})
}

// AddWithBarcode adds v to the "with_barcode" field.
func (u *ProductUpsertBulk) AddWithBarcode(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddWithBarcode(v)
	})
}

// UpdateWithBarcode sets the "with_barcode" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateWithBarcode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateWithBarcode()
	})
}

// SetBarcodeService sets the "barcode_service" field.
func (u *ProductUpsertBulk) SetBarcodeService(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcodeService(v)
	})
}

// AddBarcodeService adds v to the "barcode_service" field.
func (u *ProductUpsertBulk) AddBarcodeService(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddBarcodeService(v)
	})
}

// UpdateBarcodeService sets the "barcode_service" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateBarcodeService() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcodeService()
	})
}

// SetBarcodeTemplate sets the "barcode_template" field.
func (u *ProductUpsertBulk) SetBarcodeTemplate(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetBarcodeTemplate(v)
	})
}

// UpdateBarcodeTemplate sets the "barcode_template" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateBarcodeTemplate() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBarcodeTemplate()
	})
}

// ClearBarcodeTemplate clears the value of the "barcode_template" field.
func (u *ProductUpsertBulk) ClearBarcodeTemplate() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearBarcodeTemplate()
	})
}

// SetImages sets the "images" field.
func (u *ProductUpsertBulk) SetImages(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateImages() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *ProductUpsertBulk) ClearImages() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearImages()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ProductUpsertBulk) SetAttributes(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateAttributes() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ProductUpsertBulk) ClearAttributes() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearAttributes()
	})
}

// SetConfirmedAttributes sets the "confirmed_attributes" field.
func (u *ProductUpsertBulk) SetConfirmedAttributes(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetConfirmedAttributes(v)
	})
}

// UpdateConfirmedAttributes sets the "confirmed_attributes" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateConfirmedAttributes() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateConfirmedAttributes()
	})
}

// ClearConfirmedAttributes clears the value of the "confirmed_attributes" field.
func (u *ProductUpsertBulk) ClearConfirmedAttributes() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearConfirmedAttributes()
	})
}

// SetGrams sets the "grams" field.
func (u *ProductUpsertBulk) SetGrams(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *ProductUpsertBulk) AddGrams(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateGrams() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateGrams()
	})
}

// SetInboundGrams sets the "inbound_grams" field.
func (u *ProductUpsertBulk) SetInboundGrams(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetInboundGrams(v)
	})
}

// AddInboundGrams adds v to the "inbound_grams" field.
func (u *ProductUpsertBulk) AddInboundGrams(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddInboundGrams(v)
	})
}

// UpdateInboundGrams sets the "inbound_grams" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateInboundGrams() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateInboundGrams()
	})
}

// SetLength sets the "length" field.
func (u *ProductUpsertBulk) SetLength(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *ProductUpsertBulk) AddLength(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateLength() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *ProductUpsertBulk) SetWidth(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *ProductUpsertBulk) AddWidth(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateWidth() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *ProductUpsertBulk) SetHeight(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *ProductUpsertBulk) AddHeight(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateHeight() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateHeight()
	})
}

// SetMaxAgvQty sets the "max_agv_qty" field.
func (u *ProductUpsertBulk) SetMaxAgvQty(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetMaxAgvQty(v)
	})
}

// AddMaxAgvQty adds v to the "max_agv_qty" field.
func (u *ProductUpsertBulk) AddMaxAgvQty(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddMaxAgvQty(v)
	})
}

// UpdateMaxAgvQty sets the "max_agv_qty" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateMaxAgvQty() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMaxAgvQty()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertBulk) SetStatus(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsertBulk) AddStatus(v int8) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateStatus() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsertBulk) SetCreatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsertBulk) AddCreatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCreatedBy() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *ProductUpsertBulk) ClearCreatedBy() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
