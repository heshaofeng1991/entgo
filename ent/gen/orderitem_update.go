// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderItemUpdate) SetUpdatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// SetDeletedAt sets the "deleted_at" field.
func (oiu *OrderItemUpdate) SetDeletedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetDeletedAt(t)
	return oiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeletedAt(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetDeletedAt(*t)
	}
	return oiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiu *OrderItemUpdate) ClearDeletedAt() *OrderItemUpdate {
	oiu.mutation.ClearDeletedAt()
	return oiu
}

// SetOrderID sets the "order_id" field.
func (oiu *OrderItemUpdate) SetOrderID(i int64) *OrderItemUpdate {
	oiu.mutation.SetOrderID(i)
	return oiu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderID(i *int64) *OrderItemUpdate {
	if i != nil {
		oiu.SetOrderID(*i)
	}
	return oiu
}

// ClearOrderID clears the value of the "order_id" field.
func (oiu *OrderItemUpdate) ClearOrderID() *OrderItemUpdate {
	oiu.mutation.ClearOrderID()
	return oiu
}

// SetProductID sets the "product_id" field.
func (oiu *OrderItemUpdate) SetProductID(i int64) *OrderItemUpdate {
	oiu.mutation.ResetProductID()
	oiu.mutation.SetProductID(i)
	return oiu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductID(i *int64) *OrderItemUpdate {
	if i != nil {
		oiu.SetProductID(*i)
	}
	return oiu
}

// AddProductID adds i to the "product_id" field.
func (oiu *OrderItemUpdate) AddProductID(i int64) *OrderItemUpdate {
	oiu.mutation.AddProductID(i)
	return oiu
}

// ClearProductID clears the value of the "product_id" field.
func (oiu *OrderItemUpdate) ClearProductID() *OrderItemUpdate {
	oiu.mutation.ClearProductID()
	return oiu
}

// SetPlatformProductID sets the "platform_product_id" field.
func (oiu *OrderItemUpdate) SetPlatformProductID(i int64) *OrderItemUpdate {
	oiu.mutation.ResetPlatformProductID()
	oiu.mutation.SetPlatformProductID(i)
	return oiu
}

// SetNillablePlatformProductID sets the "platform_product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePlatformProductID(i *int64) *OrderItemUpdate {
	if i != nil {
		oiu.SetPlatformProductID(*i)
	}
	return oiu
}

// AddPlatformProductID adds i to the "platform_product_id" field.
func (oiu *OrderItemUpdate) AddPlatformProductID(i int64) *OrderItemUpdate {
	oiu.mutation.AddPlatformProductID(i)
	return oiu
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (oiu *OrderItemUpdate) ClearPlatformProductID() *OrderItemUpdate {
	oiu.mutation.ClearPlatformProductID()
	return oiu
}

// SetBarcode sets the "barcode" field.
func (oiu *OrderItemUpdate) SetBarcode(s string) *OrderItemUpdate {
	oiu.mutation.SetBarcode(s)
	return oiu
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableBarcode(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetBarcode(*s)
	}
	return oiu
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (oiu *OrderItemUpdate) SetFulfillmentService(s string) *OrderItemUpdate {
	oiu.mutation.SetFulfillmentService(s)
	return oiu
}

// SetNillableFulfillmentService sets the "fulfillment_service" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableFulfillmentService(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetFulfillmentService(*s)
	}
	return oiu
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (oiu *OrderItemUpdate) SetExtOrderItemID(s string) *OrderItemUpdate {
	oiu.mutation.SetExtOrderItemID(s)
	return oiu
}

// SetNillableExtOrderItemID sets the "ext_order_item_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableExtOrderItemID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetExtOrderItemID(*s)
	}
	return oiu
}

// SetExtProductID sets the "ext_product_id" field.
func (oiu *OrderItemUpdate) SetExtProductID(s string) *OrderItemUpdate {
	oiu.mutation.SetExtProductID(s)
	return oiu
}

// SetNillableExtProductID sets the "ext_product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableExtProductID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetExtProductID(*s)
	}
	return oiu
}

// SetIsCustomItem sets the "is_custom_item" field.
func (oiu *OrderItemUpdate) SetIsCustomItem(b bool) *OrderItemUpdate {
	oiu.mutation.SetIsCustomItem(b)
	return oiu
}

// SetNillableIsCustomItem sets the "is_custom_item" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableIsCustomItem(b *bool) *OrderItemUpdate {
	if b != nil {
		oiu.SetIsCustomItem(*b)
	}
	return oiu
}

// SetName sets the "name" field.
func (oiu *OrderItemUpdate) SetName(s string) *OrderItemUpdate {
	oiu.mutation.SetName(s)
	return oiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableName(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetName(*s)
	}
	return oiu
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (oiu *OrderItemUpdate) SetDeclaredCnName(s string) *OrderItemUpdate {
	oiu.mutation.SetDeclaredCnName(s)
	return oiu
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeclaredCnName(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetDeclaredCnName(*s)
	}
	return oiu
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (oiu *OrderItemUpdate) ClearDeclaredCnName() *OrderItemUpdate {
	oiu.mutation.ClearDeclaredCnName()
	return oiu
}

// SetHsCode sets the "hs_code" field.
func (oiu *OrderItemUpdate) SetHsCode(s string) *OrderItemUpdate {
	oiu.mutation.SetHsCode(s)
	return oiu
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableHsCode(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetHsCode(*s)
	}
	return oiu
}

// SetMaterial sets the "material" field.
func (oiu *OrderItemUpdate) SetMaterial(s string) *OrderItemUpdate {
	oiu.mutation.SetMaterial(s)
	return oiu
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableMaterial(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetMaterial(*s)
	}
	return oiu
}

// SetPurpose sets the "purpose" field.
func (oiu *OrderItemUpdate) SetPurpose(s string) *OrderItemUpdate {
	oiu.mutation.SetPurpose(s)
	return oiu
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePurpose(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetPurpose(*s)
	}
	return oiu
}

// SetImages sets the "images" field.
func (oiu *OrderItemUpdate) SetImages(s string) *OrderItemUpdate {
	oiu.mutation.SetImages(s)
	return oiu
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableImages(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetImages(*s)
	}
	return oiu
}

// ClearImages clears the value of the "images" field.
func (oiu *OrderItemUpdate) ClearImages() *OrderItemUpdate {
	oiu.mutation.ClearImages()
	return oiu
}

// SetAttributes sets the "attributes" field.
func (oiu *OrderItemUpdate) SetAttributes(s string) *OrderItemUpdate {
	oiu.mutation.SetAttributes(s)
	return oiu
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableAttributes(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetAttributes(*s)
	}
	return oiu
}

// ClearAttributes clears the value of the "attributes" field.
func (oiu *OrderItemUpdate) ClearAttributes() *OrderItemUpdate {
	oiu.mutation.ClearAttributes()
	return oiu
}

// SetGrams sets the "grams" field.
func (oiu *OrderItemUpdate) SetGrams(i int) *OrderItemUpdate {
	oiu.mutation.ResetGrams()
	oiu.mutation.SetGrams(i)
	return oiu
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableGrams(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetGrams(*i)
	}
	return oiu
}

// AddGrams adds i to the "grams" field.
func (oiu *OrderItemUpdate) AddGrams(i int) *OrderItemUpdate {
	oiu.mutation.AddGrams(i)
	return oiu
}

// SetLength sets the "length" field.
func (oiu *OrderItemUpdate) SetLength(i int) *OrderItemUpdate {
	oiu.mutation.ResetLength()
	oiu.mutation.SetLength(i)
	return oiu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableLength(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetLength(*i)
	}
	return oiu
}

// AddLength adds i to the "length" field.
func (oiu *OrderItemUpdate) AddLength(i int) *OrderItemUpdate {
	oiu.mutation.AddLength(i)
	return oiu
}

// SetWidth sets the "width" field.
func (oiu *OrderItemUpdate) SetWidth(i int) *OrderItemUpdate {
	oiu.mutation.ResetWidth()
	oiu.mutation.SetWidth(i)
	return oiu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableWidth(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetWidth(*i)
	}
	return oiu
}

// AddWidth adds i to the "width" field.
func (oiu *OrderItemUpdate) AddWidth(i int) *OrderItemUpdate {
	oiu.mutation.AddWidth(i)
	return oiu
}

// SetHeight sets the "height" field.
func (oiu *OrderItemUpdate) SetHeight(i int) *OrderItemUpdate {
	oiu.mutation.ResetHeight()
	oiu.mutation.SetHeight(i)
	return oiu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableHeight(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetHeight(*i)
	}
	return oiu
}

// AddHeight adds i to the "height" field.
func (oiu *OrderItemUpdate) AddHeight(i int) *OrderItemUpdate {
	oiu.mutation.AddHeight(i)
	return oiu
}

// SetQty sets the "qty" field.
func (oiu *OrderItemUpdate) SetQty(i int) *OrderItemUpdate {
	oiu.mutation.ResetQty()
	oiu.mutation.SetQty(i)
	return oiu
}

// AddQty adds i to the "qty" field.
func (oiu *OrderItemUpdate) AddQty(i int) *OrderItemUpdate {
	oiu.mutation.AddQty(i)
	return oiu
}

// SetUnitPrice sets the "unit_price" field.
func (oiu *OrderItemUpdate) SetUnitPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetUnitPrice()
	oiu.mutation.SetUnitPrice(f)
	return oiu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableUnitPrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetUnitPrice(*f)
	}
	return oiu
}

// AddUnitPrice adds f to the "unit_price" field.
func (oiu *OrderItemUpdate) AddUnitPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddUnitPrice(f)
	return oiu
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (oiu *OrderItemUpdate) SetDeclaredValueInUsd(f float64) *OrderItemUpdate {
	oiu.mutation.ResetDeclaredValueInUsd()
	oiu.mutation.SetDeclaredValueInUsd(f)
	return oiu
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeclaredValueInUsd(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetDeclaredValueInUsd(*f)
	}
	return oiu
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (oiu *OrderItemUpdate) AddDeclaredValueInUsd(f float64) *OrderItemUpdate {
	oiu.mutation.AddDeclaredValueInUsd(f)
	return oiu
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (oiu *OrderItemUpdate) SetDeclaredValueInEur(f float64) *OrderItemUpdate {
	oiu.mutation.ResetDeclaredValueInEur()
	oiu.mutation.SetDeclaredValueInEur(f)
	return oiu
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeclaredValueInEur(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetDeclaredValueInEur(*f)
	}
	return oiu
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (oiu *OrderItemUpdate) AddDeclaredValueInEur(f float64) *OrderItemUpdate {
	oiu.mutation.AddDeclaredValueInEur(f)
	return oiu
}

// SetCurrency sets the "currency" field.
func (oiu *OrderItemUpdate) SetCurrency(s string) *OrderItemUpdate {
	oiu.mutation.SetCurrency(s)
	return oiu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCurrency(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetCurrency(*s)
	}
	return oiu
}

// SetFulfillQty sets the "fulfill_qty" field.
func (oiu *OrderItemUpdate) SetFulfillQty(i int) *OrderItemUpdate {
	oiu.mutation.ResetFulfillQty()
	oiu.mutation.SetFulfillQty(i)
	return oiu
}

// SetNillableFulfillQty sets the "fulfill_qty" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableFulfillQty(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetFulfillQty(*i)
	}
	return oiu
}

// AddFulfillQty adds i to the "fulfill_qty" field.
func (oiu *OrderItemUpdate) AddFulfillQty(i int) *OrderItemUpdate {
	oiu.mutation.AddFulfillQty(i)
	return oiu
}

// SetRequiresShipping sets the "requires_shipping" field.
func (oiu *OrderItemUpdate) SetRequiresShipping(b bool) *OrderItemUpdate {
	oiu.mutation.SetRequiresShipping(b)
	return oiu
}

// SetNillableRequiresShipping sets the "requires_shipping" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableRequiresShipping(b *bool) *OrderItemUpdate {
	if b != nil {
		oiu.SetRequiresShipping(*b)
	}
	return oiu
}

// SetGiftCard sets the "gift_card" field.
func (oiu *OrderItemUpdate) SetGiftCard(b bool) *OrderItemUpdate {
	oiu.mutation.SetGiftCard(b)
	return oiu
}

// SetNillableGiftCard sets the "gift_card" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableGiftCard(b *bool) *OrderItemUpdate {
	if b != nil {
		oiu.SetGiftCard(*b)
	}
	return oiu
}

// SetTaxable sets the "taxable" field.
func (oiu *OrderItemUpdate) SetTaxable(b bool) *OrderItemUpdate {
	oiu.mutation.SetTaxable(b)
	return oiu
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableTaxable(b *bool) *OrderItemUpdate {
	if b != nil {
		oiu.SetTaxable(*b)
	}
	return oiu
}

// SetStatus sets the "status" field.
func (oiu *OrderItemUpdate) SetStatus(i int8) *OrderItemUpdate {
	oiu.mutation.ResetStatus()
	oiu.mutation.SetStatus(i)
	return oiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableStatus(i *int8) *OrderItemUpdate {
	if i != nil {
		oiu.SetStatus(*i)
	}
	return oiu
}

// AddStatus adds i to the "status" field.
func (oiu *OrderItemUpdate) AddStatus(i int8) *OrderItemUpdate {
	oiu.mutation.AddStatus(i)
	return oiu
}

// SetSku sets the "sku" field.
func (oiu *OrderItemUpdate) SetSku(s string) *OrderItemUpdate {
	oiu.mutation.SetSku(s)
	return oiu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSku(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetSku(*s)
	}
	return oiu
}

// ClearSku clears the value of the "sku" field.
func (oiu *OrderItemUpdate) ClearSku() *OrderItemUpdate {
	oiu.mutation.ClearSku()
	return oiu
}

// SetListingSku sets the "listing_sku" field.
func (oiu *OrderItemUpdate) SetListingSku(s string) *OrderItemUpdate {
	oiu.mutation.SetListingSku(s)
	return oiu
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableListingSku(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetListingSku(*s)
	}
	return oiu
}

// ClearListingSku clears the value of the "listing_sku" field.
func (oiu *OrderItemUpdate) ClearListingSku() *OrderItemUpdate {
	oiu.mutation.ClearListingSku()
	return oiu
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (oiu *OrderItemUpdate) SetDeclaredEnName(s string) *OrderItemUpdate {
	oiu.mutation.SetDeclaredEnName(s)
	return oiu
}

// SetNillableDeclaredEnName sets the "declared_en_name" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeclaredEnName(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetDeclaredEnName(*s)
	}
	return oiu
}

// ClearDeclaredEnName clears the value of the "declared_en_name" field.
func (oiu *OrderItemUpdate) ClearDeclaredEnName() *OrderItemUpdate {
	oiu.mutation.ClearDeclaredEnName()
	return oiu
}

// SetProductName sets the "product_name" field.
func (oiu *OrderItemUpdate) SetProductName(s string) *OrderItemUpdate {
	oiu.mutation.SetProductName(s)
	return oiu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductName(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetProductName(*s)
	}
	return oiu
}

// ClearProductName clears the value of the "product_name" field.
func (oiu *OrderItemUpdate) ClearProductName() *OrderItemUpdate {
	oiu.mutation.ClearProductName()
	return oiu
}

// SetCustomerCode sets the "customer_code" field.
func (oiu *OrderItemUpdate) SetCustomerCode(s string) *OrderItemUpdate {
	oiu.mutation.SetCustomerCode(s)
	return oiu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (oiu *OrderItemUpdate) SetTenantID(id int64) *OrderItemUpdate {
	oiu.mutation.SetTenantID(id)
	return oiu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oiu *OrderItemUpdate) SetTenant(t *Tenant) *OrderItemUpdate {
	return oiu.SetTenantID(t.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) SetOrder(o *Order) *OrderItemUpdate {
	return oiu.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (oiu *OrderItemUpdate) ClearTenant() *OrderItemUpdate {
	oiu.mutation.ClearTenant()
	return oiu
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	oiu.mutation.ClearOrder()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := oiu.defaults(); err != nil {
		return 0, err
	}
	if len(oiu.hooks) == 0 {
		if err = oiu.check(); err != nil {
			return 0, err
		}
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiu.check(); err != nil {
				return 0, err
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			if oiu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderItemUpdate) defaults() error {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		if orderitem.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized orderitem.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := orderitem.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderItemUpdate) check() error {
	if _, ok := oiu.mutation.TenantID(); oiu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "OrderItem.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oiu *OrderItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderItemUpdate {
	oiu.modifiers = append(oiu.modifiers, modifiers...)
	return oiu
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderitem.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oiu.mutation.DeletedAt(); ok {
		_spec.SetField(orderitem.FieldDeletedAt, field.TypeTime, value)
	}
	if oiu.mutation.DeletedAtCleared() {
		_spec.ClearField(orderitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oiu.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedProductID(); ok {
		_spec.AddField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if oiu.mutation.ProductIDCleared() {
		_spec.ClearField(orderitem.FieldProductID, field.TypeInt64)
	}
	if value, ok := oiu.mutation.PlatformProductID(); ok {
		_spec.SetField(orderitem.FieldPlatformProductID, field.TypeInt64, value)
	}
	if value, ok := oiu.mutation.AddedPlatformProductID(); ok {
		_spec.AddField(orderitem.FieldPlatformProductID, field.TypeInt64, value)
	}
	if oiu.mutation.PlatformProductIDCleared() {
		_spec.ClearField(orderitem.FieldPlatformProductID, field.TypeInt64)
	}
	if value, ok := oiu.mutation.Barcode(); ok {
		_spec.SetField(orderitem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := oiu.mutation.FulfillmentService(); ok {
		_spec.SetField(orderitem.FieldFulfillmentService, field.TypeString, value)
	}
	if value, ok := oiu.mutation.ExtOrderItemID(); ok {
		_spec.SetField(orderitem.FieldExtOrderItemID, field.TypeString, value)
	}
	if value, ok := oiu.mutation.ExtProductID(); ok {
		_spec.SetField(orderitem.FieldExtProductID, field.TypeString, value)
	}
	if value, ok := oiu.mutation.IsCustomItem(); ok {
		_spec.SetField(orderitem.FieldIsCustomItem, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if value, ok := oiu.mutation.DeclaredCnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredCnName, field.TypeString, value)
	}
	if oiu.mutation.DeclaredCnNameCleared() {
		_spec.ClearField(orderitem.FieldDeclaredCnName, field.TypeString)
	}
	if value, ok := oiu.mutation.HsCode(); ok {
		_spec.SetField(orderitem.FieldHsCode, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Material(); ok {
		_spec.SetField(orderitem.FieldMaterial, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Purpose(); ok {
		_spec.SetField(orderitem.FieldPurpose, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Images(); ok {
		_spec.SetField(orderitem.FieldImages, field.TypeString, value)
	}
	if oiu.mutation.ImagesCleared() {
		_spec.ClearField(orderitem.FieldImages, field.TypeString)
	}
	if value, ok := oiu.mutation.Attributes(); ok {
		_spec.SetField(orderitem.FieldAttributes, field.TypeString, value)
	}
	if oiu.mutation.AttributesCleared() {
		_spec.ClearField(orderitem.FieldAttributes, field.TypeString)
	}
	if value, ok := oiu.mutation.Grams(); ok {
		_spec.SetField(orderitem.FieldGrams, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedGrams(); ok {
		_spec.AddField(orderitem.FieldGrams, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Length(); ok {
		_spec.SetField(orderitem.FieldLength, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedLength(); ok {
		_spec.AddField(orderitem.FieldLength, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Width(); ok {
		_spec.SetField(orderitem.FieldWidth, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedWidth(); ok {
		_spec.AddField(orderitem.FieldWidth, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Height(); ok {
		_spec.SetField(orderitem.FieldHeight, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedHeight(); ok {
		_spec.AddField(orderitem.FieldHeight, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.Qty(); ok {
		_spec.SetField(orderitem.FieldQty, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedQty(); ok {
		_spec.AddField(orderitem.FieldQty, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(orderitem.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(orderitem.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.Currency(); ok {
		_spec.SetField(orderitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := oiu.mutation.FulfillQty(); ok {
		_spec.SetField(orderitem.FieldFulfillQty, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedFulfillQty(); ok {
		_spec.AddField(orderitem.FieldFulfillQty, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.RequiresShipping(); ok {
		_spec.SetField(orderitem.FieldRequiresShipping, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.GiftCard(); ok {
		_spec.SetField(orderitem.FieldGiftCard, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.Taxable(); ok {
		_spec.SetField(orderitem.FieldTaxable, field.TypeBool, value)
	}
	if value, ok := oiu.mutation.Status(); ok {
		_spec.SetField(orderitem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := oiu.mutation.AddedStatus(); ok {
		_spec.AddField(orderitem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := oiu.mutation.Sku(); ok {
		_spec.SetField(orderitem.FieldSku, field.TypeString, value)
	}
	if oiu.mutation.SkuCleared() {
		_spec.ClearField(orderitem.FieldSku, field.TypeString)
	}
	if value, ok := oiu.mutation.ListingSku(); ok {
		_spec.SetField(orderitem.FieldListingSku, field.TypeString, value)
	}
	if oiu.mutation.ListingSkuCleared() {
		_spec.ClearField(orderitem.FieldListingSku, field.TypeString)
	}
	if value, ok := oiu.mutation.DeclaredEnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredEnName, field.TypeString, value)
	}
	if oiu.mutation.DeclaredEnNameCleared() {
		_spec.ClearField(orderitem.FieldDeclaredEnName, field.TypeString)
	}
	if value, ok := oiu.mutation.ProductName(); ok {
		_spec.SetField(orderitem.FieldProductName, field.TypeString, value)
	}
	if oiu.mutation.ProductNameCleared() {
		_spec.ClearField(orderitem.FieldProductName, field.TypeString)
	}
	if value, ok := oiu.mutation.CustomerCode(); ok {
		_spec.SetField(orderitem.FieldCustomerCode, field.TypeString, value)
	}
	if oiu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = oiu.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = oiu.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = oiu.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = oiu.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oiu.schemaConfig.OrderItem
	ctx = internal.NewSchemaConfigContext(ctx, oiu.schemaConfig)
	_spec.AddModifiers(oiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderItemUpdateOne) SetUpdatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (oiuo *OrderItemUpdateOne) SetDeletedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetDeletedAt(t)
	return oiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetDeletedAt(*t)
	}
	return oiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiuo *OrderItemUpdateOne) ClearDeletedAt() *OrderItemUpdateOne {
	oiuo.mutation.ClearDeletedAt()
	return oiuo
}

// SetOrderID sets the "order_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderID(i int64) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderID(i)
	return oiuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderID(i *int64) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetOrderID(*i)
	}
	return oiuo
}

// ClearOrderID clears the value of the "order_id" field.
func (oiuo *OrderItemUpdateOne) ClearOrderID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderID()
	return oiuo
}

// SetProductID sets the "product_id" field.
func (oiuo *OrderItemUpdateOne) SetProductID(i int64) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductID()
	oiuo.mutation.SetProductID(i)
	return oiuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductID(i *int64) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetProductID(*i)
	}
	return oiuo
}

// AddProductID adds i to the "product_id" field.
func (oiuo *OrderItemUpdateOne) AddProductID(i int64) *OrderItemUpdateOne {
	oiuo.mutation.AddProductID(i)
	return oiuo
}

// ClearProductID clears the value of the "product_id" field.
func (oiuo *OrderItemUpdateOne) ClearProductID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductID()
	return oiuo
}

// SetPlatformProductID sets the "platform_product_id" field.
func (oiuo *OrderItemUpdateOne) SetPlatformProductID(i int64) *OrderItemUpdateOne {
	oiuo.mutation.ResetPlatformProductID()
	oiuo.mutation.SetPlatformProductID(i)
	return oiuo
}

// SetNillablePlatformProductID sets the "platform_product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePlatformProductID(i *int64) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetPlatformProductID(*i)
	}
	return oiuo
}

// AddPlatformProductID adds i to the "platform_product_id" field.
func (oiuo *OrderItemUpdateOne) AddPlatformProductID(i int64) *OrderItemUpdateOne {
	oiuo.mutation.AddPlatformProductID(i)
	return oiuo
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (oiuo *OrderItemUpdateOne) ClearPlatformProductID() *OrderItemUpdateOne {
	oiuo.mutation.ClearPlatformProductID()
	return oiuo
}

// SetBarcode sets the "barcode" field.
func (oiuo *OrderItemUpdateOne) SetBarcode(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetBarcode(s)
	return oiuo
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableBarcode(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetBarcode(*s)
	}
	return oiuo
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (oiuo *OrderItemUpdateOne) SetFulfillmentService(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetFulfillmentService(s)
	return oiuo
}

// SetNillableFulfillmentService sets the "fulfillment_service" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableFulfillmentService(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetFulfillmentService(*s)
	}
	return oiuo
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (oiuo *OrderItemUpdateOne) SetExtOrderItemID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetExtOrderItemID(s)
	return oiuo
}

// SetNillableExtOrderItemID sets the "ext_order_item_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableExtOrderItemID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetExtOrderItemID(*s)
	}
	return oiuo
}

// SetExtProductID sets the "ext_product_id" field.
func (oiuo *OrderItemUpdateOne) SetExtProductID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetExtProductID(s)
	return oiuo
}

// SetNillableExtProductID sets the "ext_product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableExtProductID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetExtProductID(*s)
	}
	return oiuo
}

// SetIsCustomItem sets the "is_custom_item" field.
func (oiuo *OrderItemUpdateOne) SetIsCustomItem(b bool) *OrderItemUpdateOne {
	oiuo.mutation.SetIsCustomItem(b)
	return oiuo
}

// SetNillableIsCustomItem sets the "is_custom_item" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableIsCustomItem(b *bool) *OrderItemUpdateOne {
	if b != nil {
		oiuo.SetIsCustomItem(*b)
	}
	return oiuo
}

// SetName sets the "name" field.
func (oiuo *OrderItemUpdateOne) SetName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetName(s)
	return oiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableName(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetName(*s)
	}
	return oiuo
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (oiuo *OrderItemUpdateOne) SetDeclaredCnName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetDeclaredCnName(s)
	return oiuo
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeclaredCnName(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetDeclaredCnName(*s)
	}
	return oiuo
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (oiuo *OrderItemUpdateOne) ClearDeclaredCnName() *OrderItemUpdateOne {
	oiuo.mutation.ClearDeclaredCnName()
	return oiuo
}

// SetHsCode sets the "hs_code" field.
func (oiuo *OrderItemUpdateOne) SetHsCode(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetHsCode(s)
	return oiuo
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableHsCode(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetHsCode(*s)
	}
	return oiuo
}

// SetMaterial sets the "material" field.
func (oiuo *OrderItemUpdateOne) SetMaterial(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetMaterial(s)
	return oiuo
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableMaterial(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetMaterial(*s)
	}
	return oiuo
}

// SetPurpose sets the "purpose" field.
func (oiuo *OrderItemUpdateOne) SetPurpose(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetPurpose(s)
	return oiuo
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePurpose(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetPurpose(*s)
	}
	return oiuo
}

// SetImages sets the "images" field.
func (oiuo *OrderItemUpdateOne) SetImages(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetImages(s)
	return oiuo
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableImages(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetImages(*s)
	}
	return oiuo
}

// ClearImages clears the value of the "images" field.
func (oiuo *OrderItemUpdateOne) ClearImages() *OrderItemUpdateOne {
	oiuo.mutation.ClearImages()
	return oiuo
}

// SetAttributes sets the "attributes" field.
func (oiuo *OrderItemUpdateOne) SetAttributes(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetAttributes(s)
	return oiuo
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableAttributes(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetAttributes(*s)
	}
	return oiuo
}

// ClearAttributes clears the value of the "attributes" field.
func (oiuo *OrderItemUpdateOne) ClearAttributes() *OrderItemUpdateOne {
	oiuo.mutation.ClearAttributes()
	return oiuo
}

// SetGrams sets the "grams" field.
func (oiuo *OrderItemUpdateOne) SetGrams(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetGrams()
	oiuo.mutation.SetGrams(i)
	return oiuo
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableGrams(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetGrams(*i)
	}
	return oiuo
}

// AddGrams adds i to the "grams" field.
func (oiuo *OrderItemUpdateOne) AddGrams(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddGrams(i)
	return oiuo
}

// SetLength sets the "length" field.
func (oiuo *OrderItemUpdateOne) SetLength(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetLength()
	oiuo.mutation.SetLength(i)
	return oiuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableLength(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetLength(*i)
	}
	return oiuo
}

// AddLength adds i to the "length" field.
func (oiuo *OrderItemUpdateOne) AddLength(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddLength(i)
	return oiuo
}

// SetWidth sets the "width" field.
func (oiuo *OrderItemUpdateOne) SetWidth(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetWidth()
	oiuo.mutation.SetWidth(i)
	return oiuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableWidth(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetWidth(*i)
	}
	return oiuo
}

// AddWidth adds i to the "width" field.
func (oiuo *OrderItemUpdateOne) AddWidth(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddWidth(i)
	return oiuo
}

// SetHeight sets the "height" field.
func (oiuo *OrderItemUpdateOne) SetHeight(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetHeight()
	oiuo.mutation.SetHeight(i)
	return oiuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableHeight(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetHeight(*i)
	}
	return oiuo
}

// AddHeight adds i to the "height" field.
func (oiuo *OrderItemUpdateOne) AddHeight(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddHeight(i)
	return oiuo
}

// SetQty sets the "qty" field.
func (oiuo *OrderItemUpdateOne) SetQty(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQty()
	oiuo.mutation.SetQty(i)
	return oiuo
}

// AddQty adds i to the "qty" field.
func (oiuo *OrderItemUpdateOne) AddQty(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQty(i)
	return oiuo
}

// SetUnitPrice sets the "unit_price" field.
func (oiuo *OrderItemUpdateOne) SetUnitPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetUnitPrice()
	oiuo.mutation.SetUnitPrice(f)
	return oiuo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableUnitPrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetUnitPrice(*f)
	}
	return oiuo
}

// AddUnitPrice adds f to the "unit_price" field.
func (oiuo *OrderItemUpdateOne) AddUnitPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddUnitPrice(f)
	return oiuo
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (oiuo *OrderItemUpdateOne) SetDeclaredValueInUsd(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetDeclaredValueInUsd()
	oiuo.mutation.SetDeclaredValueInUsd(f)
	return oiuo
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeclaredValueInUsd(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetDeclaredValueInUsd(*f)
	}
	return oiuo
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (oiuo *OrderItemUpdateOne) AddDeclaredValueInUsd(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddDeclaredValueInUsd(f)
	return oiuo
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (oiuo *OrderItemUpdateOne) SetDeclaredValueInEur(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetDeclaredValueInEur()
	oiuo.mutation.SetDeclaredValueInEur(f)
	return oiuo
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeclaredValueInEur(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetDeclaredValueInEur(*f)
	}
	return oiuo
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (oiuo *OrderItemUpdateOne) AddDeclaredValueInEur(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddDeclaredValueInEur(f)
	return oiuo
}

// SetCurrency sets the "currency" field.
func (oiuo *OrderItemUpdateOne) SetCurrency(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetCurrency(s)
	return oiuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCurrency(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetCurrency(*s)
	}
	return oiuo
}

// SetFulfillQty sets the "fulfill_qty" field.
func (oiuo *OrderItemUpdateOne) SetFulfillQty(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetFulfillQty()
	oiuo.mutation.SetFulfillQty(i)
	return oiuo
}

// SetNillableFulfillQty sets the "fulfill_qty" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableFulfillQty(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetFulfillQty(*i)
	}
	return oiuo
}

// AddFulfillQty adds i to the "fulfill_qty" field.
func (oiuo *OrderItemUpdateOne) AddFulfillQty(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddFulfillQty(i)
	return oiuo
}

// SetRequiresShipping sets the "requires_shipping" field.
func (oiuo *OrderItemUpdateOne) SetRequiresShipping(b bool) *OrderItemUpdateOne {
	oiuo.mutation.SetRequiresShipping(b)
	return oiuo
}

// SetNillableRequiresShipping sets the "requires_shipping" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableRequiresShipping(b *bool) *OrderItemUpdateOne {
	if b != nil {
		oiuo.SetRequiresShipping(*b)
	}
	return oiuo
}

// SetGiftCard sets the "gift_card" field.
func (oiuo *OrderItemUpdateOne) SetGiftCard(b bool) *OrderItemUpdateOne {
	oiuo.mutation.SetGiftCard(b)
	return oiuo
}

// SetNillableGiftCard sets the "gift_card" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableGiftCard(b *bool) *OrderItemUpdateOne {
	if b != nil {
		oiuo.SetGiftCard(*b)
	}
	return oiuo
}

// SetTaxable sets the "taxable" field.
func (oiuo *OrderItemUpdateOne) SetTaxable(b bool) *OrderItemUpdateOne {
	oiuo.mutation.SetTaxable(b)
	return oiuo
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableTaxable(b *bool) *OrderItemUpdateOne {
	if b != nil {
		oiuo.SetTaxable(*b)
	}
	return oiuo
}

// SetStatus sets the "status" field.
func (oiuo *OrderItemUpdateOne) SetStatus(i int8) *OrderItemUpdateOne {
	oiuo.mutation.ResetStatus()
	oiuo.mutation.SetStatus(i)
	return oiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableStatus(i *int8) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetStatus(*i)
	}
	return oiuo
}

// AddStatus adds i to the "status" field.
func (oiuo *OrderItemUpdateOne) AddStatus(i int8) *OrderItemUpdateOne {
	oiuo.mutation.AddStatus(i)
	return oiuo
}

// SetSku sets the "sku" field.
func (oiuo *OrderItemUpdateOne) SetSku(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetSku(s)
	return oiuo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSku(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetSku(*s)
	}
	return oiuo
}

// ClearSku clears the value of the "sku" field.
func (oiuo *OrderItemUpdateOne) ClearSku() *OrderItemUpdateOne {
	oiuo.mutation.ClearSku()
	return oiuo
}

// SetListingSku sets the "listing_sku" field.
func (oiuo *OrderItemUpdateOne) SetListingSku(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetListingSku(s)
	return oiuo
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableListingSku(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetListingSku(*s)
	}
	return oiuo
}

// ClearListingSku clears the value of the "listing_sku" field.
func (oiuo *OrderItemUpdateOne) ClearListingSku() *OrderItemUpdateOne {
	oiuo.mutation.ClearListingSku()
	return oiuo
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (oiuo *OrderItemUpdateOne) SetDeclaredEnName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetDeclaredEnName(s)
	return oiuo
}

// SetNillableDeclaredEnName sets the "declared_en_name" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeclaredEnName(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetDeclaredEnName(*s)
	}
	return oiuo
}

// ClearDeclaredEnName clears the value of the "declared_en_name" field.
func (oiuo *OrderItemUpdateOne) ClearDeclaredEnName() *OrderItemUpdateOne {
	oiuo.mutation.ClearDeclaredEnName()
	return oiuo
}

// SetProductName sets the "product_name" field.
func (oiuo *OrderItemUpdateOne) SetProductName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductName(s)
	return oiuo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductName(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetProductName(*s)
	}
	return oiuo
}

// ClearProductName clears the value of the "product_name" field.
func (oiuo *OrderItemUpdateOne) ClearProductName() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductName()
	return oiuo
}

// SetCustomerCode sets the "customer_code" field.
func (oiuo *OrderItemUpdateOne) SetCustomerCode(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetCustomerCode(s)
	return oiuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (oiuo *OrderItemUpdateOne) SetTenantID(id int64) *OrderItemUpdateOne {
	oiuo.mutation.SetTenantID(id)
	return oiuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oiuo *OrderItemUpdateOne) SetTenant(t *Tenant) *OrderItemUpdateOne {
	return oiuo.SetTenantID(t.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) SetOrder(o *Order) *OrderItemUpdateOne {
	return oiuo.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (oiuo *OrderItemUpdateOne) ClearTenant() *OrderItemUpdateOne {
	oiuo.mutation.ClearTenant()
	return oiuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrder()
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	var (
		err  error
		node *OrderItem
	)
	if err := oiuo.defaults(); err != nil {
		return nil, err
	}
	if len(oiuo.hooks) == 0 {
		if err = oiuo.check(); err != nil {
			return nil, err
		}
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiuo.check(); err != nil {
				return nil, err
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			if oiuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = oiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderItemUpdateOne) defaults() error {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		if orderitem.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized orderitem.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := orderitem.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderItemUpdateOne) check() error {
	if _, ok := oiuo.mutation.TenantID(); oiuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "OrderItem.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oiuo *OrderItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderItemUpdateOne {
	oiuo.modifiers = append(oiuo.modifiers, modifiers...)
	return oiuo
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderitem.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oiuo.mutation.DeletedAt(); ok {
		_spec.SetField(orderitem.FieldDeletedAt, field.TypeTime, value)
	}
	if oiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orderitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oiuo.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedProductID(); ok {
		_spec.AddField(orderitem.FieldProductID, field.TypeInt64, value)
	}
	if oiuo.mutation.ProductIDCleared() {
		_spec.ClearField(orderitem.FieldProductID, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.PlatformProductID(); ok {
		_spec.SetField(orderitem.FieldPlatformProductID, field.TypeInt64, value)
	}
	if value, ok := oiuo.mutation.AddedPlatformProductID(); ok {
		_spec.AddField(orderitem.FieldPlatformProductID, field.TypeInt64, value)
	}
	if oiuo.mutation.PlatformProductIDCleared() {
		_spec.ClearField(orderitem.FieldPlatformProductID, field.TypeInt64)
	}
	if value, ok := oiuo.mutation.Barcode(); ok {
		_spec.SetField(orderitem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.FulfillmentService(); ok {
		_spec.SetField(orderitem.FieldFulfillmentService, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.ExtOrderItemID(); ok {
		_spec.SetField(orderitem.FieldExtOrderItemID, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.ExtProductID(); ok {
		_spec.SetField(orderitem.FieldExtProductID, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.IsCustomItem(); ok {
		_spec.SetField(orderitem.FieldIsCustomItem, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.DeclaredCnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredCnName, field.TypeString, value)
	}
	if oiuo.mutation.DeclaredCnNameCleared() {
		_spec.ClearField(orderitem.FieldDeclaredCnName, field.TypeString)
	}
	if value, ok := oiuo.mutation.HsCode(); ok {
		_spec.SetField(orderitem.FieldHsCode, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Material(); ok {
		_spec.SetField(orderitem.FieldMaterial, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Purpose(); ok {
		_spec.SetField(orderitem.FieldPurpose, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Images(); ok {
		_spec.SetField(orderitem.FieldImages, field.TypeString, value)
	}
	if oiuo.mutation.ImagesCleared() {
		_spec.ClearField(orderitem.FieldImages, field.TypeString)
	}
	if value, ok := oiuo.mutation.Attributes(); ok {
		_spec.SetField(orderitem.FieldAttributes, field.TypeString, value)
	}
	if oiuo.mutation.AttributesCleared() {
		_spec.ClearField(orderitem.FieldAttributes, field.TypeString)
	}
	if value, ok := oiuo.mutation.Grams(); ok {
		_spec.SetField(orderitem.FieldGrams, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedGrams(); ok {
		_spec.AddField(orderitem.FieldGrams, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Length(); ok {
		_spec.SetField(orderitem.FieldLength, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedLength(); ok {
		_spec.AddField(orderitem.FieldLength, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Width(); ok {
		_spec.SetField(orderitem.FieldWidth, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedWidth(); ok {
		_spec.AddField(orderitem.FieldWidth, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Height(); ok {
		_spec.SetField(orderitem.FieldHeight, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedHeight(); ok {
		_spec.AddField(orderitem.FieldHeight, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.Qty(); ok {
		_spec.SetField(orderitem.FieldQty, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedQty(); ok {
		_spec.AddField(orderitem.FieldQty, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(orderitem.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(orderitem.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.Currency(); ok {
		_spec.SetField(orderitem.FieldCurrency, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.FulfillQty(); ok {
		_spec.SetField(orderitem.FieldFulfillQty, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedFulfillQty(); ok {
		_spec.AddField(orderitem.FieldFulfillQty, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.RequiresShipping(); ok {
		_spec.SetField(orderitem.FieldRequiresShipping, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.GiftCard(); ok {
		_spec.SetField(orderitem.FieldGiftCard, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.Taxable(); ok {
		_spec.SetField(orderitem.FieldTaxable, field.TypeBool, value)
	}
	if value, ok := oiuo.mutation.Status(); ok {
		_spec.SetField(orderitem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := oiuo.mutation.AddedStatus(); ok {
		_spec.AddField(orderitem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := oiuo.mutation.Sku(); ok {
		_spec.SetField(orderitem.FieldSku, field.TypeString, value)
	}
	if oiuo.mutation.SkuCleared() {
		_spec.ClearField(orderitem.FieldSku, field.TypeString)
	}
	if value, ok := oiuo.mutation.ListingSku(); ok {
		_spec.SetField(orderitem.FieldListingSku, field.TypeString, value)
	}
	if oiuo.mutation.ListingSkuCleared() {
		_spec.ClearField(orderitem.FieldListingSku, field.TypeString)
	}
	if value, ok := oiuo.mutation.DeclaredEnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredEnName, field.TypeString, value)
	}
	if oiuo.mutation.DeclaredEnNameCleared() {
		_spec.ClearField(orderitem.FieldDeclaredEnName, field.TypeString)
	}
	if value, ok := oiuo.mutation.ProductName(); ok {
		_spec.SetField(orderitem.FieldProductName, field.TypeString, value)
	}
	if oiuo.mutation.ProductNameCleared() {
		_spec.ClearField(orderitem.FieldProductName, field.TypeString)
	}
	if value, ok := oiuo.mutation.CustomerCode(); ok {
		_spec.SetField(orderitem.FieldCustomerCode, field.TypeString, value)
	}
	if oiuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = oiuo.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = oiuo.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = oiuo.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = oiuo.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = oiuo.schemaConfig.OrderItem
	ctx = internal.NewSchemaConfigContext(ctx, oiuo.schemaConfig)
	_spec.AddModifiers(oiuo.modifiers...)
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
