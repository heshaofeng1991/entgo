// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InboundItemQuery is the builder for querying InboundItem entities.
type InboundItemQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.InboundItem
	withTenant   *TenantQuery
	withInbounds *InboundQuery
	withFKs      bool
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InboundItemQuery builder.
func (iiq *InboundItemQuery) Where(ps ...predicate.InboundItem) *InboundItemQuery {
	iiq.predicates = append(iiq.predicates, ps...)
	return iiq
}

// Limit adds a limit step to the query.
func (iiq *InboundItemQuery) Limit(limit int) *InboundItemQuery {
	iiq.limit = &limit
	return iiq
}

// Offset adds an offset step to the query.
func (iiq *InboundItemQuery) Offset(offset int) *InboundItemQuery {
	iiq.offset = &offset
	return iiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iiq *InboundItemQuery) Unique(unique bool) *InboundItemQuery {
	iiq.unique = &unique
	return iiq
}

// Order adds an order step to the query.
func (iiq *InboundItemQuery) Order(o ...OrderFunc) *InboundItemQuery {
	iiq.order = append(iiq.order, o...)
	return iiq
}

// QueryTenant chains the current query on the "tenant" edge.
func (iiq *InboundItemQuery) QueryTenant() *TenantQuery {
	query := &TenantQuery{config: iiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inbounditem.Table, inbounditem.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inbounditem.TenantTable, inbounditem.TenantColumn),
		)
		schemaConfig := iiq.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.InboundItem
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInbounds chains the current query on the "inbounds" edge.
func (iiq *InboundItemQuery) QueryInbounds() *InboundQuery {
	query := &InboundQuery{config: iiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inbounditem.Table, inbounditem.FieldID, selector),
			sqlgraph.To(inbound.Table, inbound.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inbounditem.InboundsTable, inbounditem.InboundsColumn),
		)
		schemaConfig := iiq.schemaConfig
		step.To.Schema = schemaConfig.Inbound
		step.Edge.Schema = schemaConfig.InboundItem
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InboundItem entity from the query.
// Returns a *NotFoundError when no InboundItem was found.
func (iiq *InboundItemQuery) First(ctx context.Context) (*InboundItem, error) {
	nodes, err := iiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{inbounditem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iiq *InboundItemQuery) FirstX(ctx context.Context) *InboundItem {
	node, err := iiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InboundItem ID from the query.
// Returns a *NotFoundError when no InboundItem ID was found.
func (iiq *InboundItemQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = iiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{inbounditem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iiq *InboundItemQuery) FirstIDX(ctx context.Context) int64 {
	id, err := iiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InboundItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InboundItem entity is found.
// Returns a *NotFoundError when no InboundItem entities are found.
func (iiq *InboundItemQuery) Only(ctx context.Context) (*InboundItem, error) {
	nodes, err := iiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{inbounditem.Label}
	default:
		return nil, &NotSingularError{inbounditem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iiq *InboundItemQuery) OnlyX(ctx context.Context) *InboundItem {
	node, err := iiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InboundItem ID in the query.
// Returns a *NotSingularError when more than one InboundItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (iiq *InboundItemQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = iiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{inbounditem.Label}
	default:
		err = &NotSingularError{inbounditem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iiq *InboundItemQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := iiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InboundItems.
func (iiq *InboundItemQuery) All(ctx context.Context) ([]*InboundItem, error) {
	if err := iiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return iiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (iiq *InboundItemQuery) AllX(ctx context.Context) []*InboundItem {
	nodes, err := iiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InboundItem IDs.
func (iiq *InboundItemQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := iiq.Select(inbounditem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iiq *InboundItemQuery) IDsX(ctx context.Context) []int64 {
	ids, err := iiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iiq *InboundItemQuery) Count(ctx context.Context) (int, error) {
	if err := iiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return iiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (iiq *InboundItemQuery) CountX(ctx context.Context) int {
	count, err := iiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iiq *InboundItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := iiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return iiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (iiq *InboundItemQuery) ExistX(ctx context.Context) bool {
	exist, err := iiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InboundItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iiq *InboundItemQuery) Clone() *InboundItemQuery {
	if iiq == nil {
		return nil
	}
	return &InboundItemQuery{
		config:       iiq.config,
		limit:        iiq.limit,
		offset:       iiq.offset,
		order:        append([]OrderFunc{}, iiq.order...),
		predicates:   append([]predicate.InboundItem{}, iiq.predicates...),
		withTenant:   iiq.withTenant.Clone(),
		withInbounds: iiq.withInbounds.Clone(),
		// clone intermediate query.
		sql:    iiq.sql.Clone(),
		path:   iiq.path,
		unique: iiq.unique,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InboundItemQuery) WithTenant(opts ...func(*TenantQuery)) *InboundItemQuery {
	query := &TenantQuery{config: iiq.config}
	for _, opt := range opts {
		opt(query)
	}
	iiq.withTenant = query
	return iiq
}

// WithInbounds tells the query-builder to eager-load the nodes that are connected to
// the "inbounds" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InboundItemQuery) WithInbounds(opts ...func(*InboundQuery)) *InboundItemQuery {
	query := &InboundQuery{config: iiq.config}
	for _, opt := range opts {
		opt(query)
	}
	iiq.withInbounds = query
	return iiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InboundItem.Query().
//		GroupBy(inbounditem.FieldCreatedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (iiq *InboundItemQuery) GroupBy(field string, fields ...string) *InboundItemGroupBy {
	grbuild := &InboundItemGroupBy{config: iiq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return iiq.sqlQuery(ctx), nil
	}
	grbuild.label = inbounditem.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.InboundItem.Query().
//		Select(inbounditem.FieldCreatedAt).
//		Scan(ctx, &v)
func (iiq *InboundItemQuery) Select(fields ...string) *InboundItemSelect {
	iiq.fields = append(iiq.fields, fields...)
	selbuild := &InboundItemSelect{InboundItemQuery: iiq}
	selbuild.label = inbounditem.Label
	selbuild.flds, selbuild.scan = &iiq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a InboundItemSelect configured with the given aggregations.
func (iiq *InboundItemQuery) Aggregate(fns ...AggregateFunc) *InboundItemSelect {
	return iiq.Select().Aggregate(fns...)
}

func (iiq *InboundItemQuery) prepareQuery(ctx context.Context) error {
	for _, f := range iiq.fields {
		if !inbounditem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if iiq.path != nil {
		prev, err := iiq.path(ctx)
		if err != nil {
			return err
		}
		iiq.sql = prev
	}
	if inbounditem.Policy == nil {
		return errors.New("gen: uninitialized inbounditem.Policy (forgotten import gen/runtime?)")
	}
	if err := inbounditem.Policy.EvalQuery(ctx, iiq); err != nil {
		return err
	}
	return nil
}

func (iiq *InboundItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InboundItem, error) {
	var (
		nodes       = []*InboundItem{}
		withFKs     = iiq.withFKs
		_spec       = iiq.querySpec()
		loadedTypes = [2]bool{
			iiq.withTenant != nil,
			iiq.withInbounds != nil,
		}
	)
	if iiq.withTenant != nil || iiq.withInbounds != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, inbounditem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InboundItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InboundItem{config: iiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = iiq.schemaConfig.InboundItem
	ctx = internal.NewSchemaConfigContext(ctx, iiq.schemaConfig)
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iiq.withTenant; query != nil {
		if err := iiq.loadTenant(ctx, query, nodes, nil,
			func(n *InboundItem, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := iiq.withInbounds; query != nil {
		if err := iiq.loadInbounds(ctx, query, nodes, nil,
			func(n *InboundItem, e *Inbound) { n.Edges.Inbounds = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iiq *InboundItemQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*InboundItem, init func(*InboundItem), assign func(*InboundItem, *Tenant)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*InboundItem)
	for i := range nodes {
		if nodes[i].inbound_item_tenant == nil {
			continue
		}
		fk := *nodes[i].inbound_item_tenant
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inbound_item_tenant" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iiq *InboundItemQuery) loadInbounds(ctx context.Context, query *InboundQuery, nodes []*InboundItem, init func(*InboundItem), assign func(*InboundItem, *Inbound)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*InboundItem)
	for i := range nodes {
		fk := nodes[i].InboundID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(inbound.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inbound_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iiq *InboundItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iiq.querySpec()
	_spec.Node.Schema = iiq.schemaConfig.InboundItem
	ctx = internal.NewSchemaConfigContext(ctx, iiq.schemaConfig)
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	_spec.Node.Columns = iiq.fields
	if len(iiq.fields) > 0 {
		_spec.Unique = iiq.unique != nil && *iiq.unique
	}
	return sqlgraph.CountNodes(ctx, iiq.driver, _spec)
}

func (iiq *InboundItemQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := iiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (iiq *InboundItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inbounditem.Table,
			Columns: inbounditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbounditem.FieldID,
			},
		},
		From:   iiq.sql,
		Unique: true,
	}
	if unique := iiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inbounditem.FieldID)
		for i := range fields {
			if fields[i] != inbounditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iiq *InboundItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iiq.driver.Dialect())
	t1 := builder.Table(inbounditem.Table)
	columns := iiq.fields
	if len(columns) == 0 {
		columns = inbounditem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iiq.sql != nil {
		selector = iiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iiq.unique != nil && *iiq.unique {
		selector.Distinct()
	}
	t1.Schema(iiq.schemaConfig.InboundItem)
	ctx = internal.NewSchemaConfigContext(ctx, iiq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range iiq.modifiers {
		m(selector)
	}
	for _, p := range iiq.predicates {
		p(selector)
	}
	for _, p := range iiq.order {
		p(selector)
	}
	if offset := iiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iiq *InboundItemQuery) Modify(modifiers ...func(s *sql.Selector)) *InboundItemSelect {
	iiq.modifiers = append(iiq.modifiers, modifiers...)
	return iiq.Select()
}

// InboundItemGroupBy is the group-by builder for InboundItem entities.
type InboundItemGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iigb *InboundItemGroupBy) Aggregate(fns ...AggregateFunc) *InboundItemGroupBy {
	iigb.fns = append(iigb.fns, fns...)
	return iigb
}

// Scan applies the group-by query and scans the result into the given value.
func (iigb *InboundItemGroupBy) Scan(ctx context.Context, v any) error {
	query, err := iigb.path(ctx)
	if err != nil {
		return err
	}
	iigb.sql = query
	return iigb.sqlScan(ctx, v)
}

func (iigb *InboundItemGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range iigb.fields {
		if !inbounditem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := iigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (iigb *InboundItemGroupBy) sqlQuery() *sql.Selector {
	selector := iigb.sql.Select()
	aggregation := make([]string, 0, len(iigb.fns))
	for _, fn := range iigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(iigb.fields)+len(iigb.fns))
		for _, f := range iigb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(iigb.fields...)...)
}

// InboundItemSelect is the builder for selecting fields of InboundItem entities.
type InboundItemSelect struct {
	*InboundItemQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iis *InboundItemSelect) Aggregate(fns ...AggregateFunc) *InboundItemSelect {
	iis.fns = append(iis.fns, fns...)
	return iis
}

// Scan applies the selector query and scans the result into the given value.
func (iis *InboundItemSelect) Scan(ctx context.Context, v any) error {
	if err := iis.prepareQuery(ctx); err != nil {
		return err
	}
	iis.sql = iis.InboundItemQuery.sqlQuery(ctx)
	return iis.sqlScan(ctx, v)
}

func (iis *InboundItemSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(iis.fns))
	for _, fn := range iis.fns {
		aggregation = append(aggregation, fn(iis.sql))
	}
	switch n := len(*iis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		iis.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		iis.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := iis.sql.Query()
	if err := iis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iis *InboundItemSelect) Modify(modifiers ...func(s *sql.Selector)) *InboundItemSelect {
	iis.modifiers = append(iis.modifiers, modifiers...)
	return iis
}
