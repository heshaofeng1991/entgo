// Code generated by ent, DO NOT EDIT.

package pickuporderitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// PickupOrderID applies equality check predicate on the "pickup_order_id" field. It's identical to PickupOrderIDEQ.
func PickupOrderID(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickupOrderID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// Barcode applies equality check predicate on the "barcode" field. It's identical to BarcodeEQ.
func Barcode(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// CustomerCode applies equality check predicate on the "customer_code" field. It's identical to CustomerCodeEQ.
func CustomerCode(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// PickupOrderIDEQ applies the EQ predicate on the "pickup_order_id" field.
func PickupOrderIDEQ(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDNEQ applies the NEQ predicate on the "pickup_order_id" field.
func PickupOrderIDNEQ(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDIn applies the In predicate on the "pickup_order_id" field.
func PickupOrderIDIn(vs ...int64) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPickupOrderID), v...))
	})
}

// PickupOrderIDNotIn applies the NotIn predicate on the "pickup_order_id" field.
func PickupOrderIDNotIn(vs ...int64) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPickupOrderID), v...))
	})
}

// PickupOrderIDGT applies the GT predicate on the "pickup_order_id" field.
func PickupOrderIDGT(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDGTE applies the GTE predicate on the "pickup_order_id" field.
func PickupOrderIDGTE(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDLT applies the LT predicate on the "pickup_order_id" field.
func PickupOrderIDLT(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPickupOrderID), v))
	})
}

// PickupOrderIDLTE applies the LTE predicate on the "pickup_order_id" field.
func PickupOrderIDLTE(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPickupOrderID), v))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSku), v))
	})
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSku), v...))
	})
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSku), v...))
	})
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSku), v))
	})
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSku), v))
	})
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSku), v))
	})
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSku), v))
	})
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSku), v))
	})
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSku), v))
	})
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSku), v))
	})
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSku), v))
	})
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSku), v))
	})
}

// BarcodeEQ applies the EQ predicate on the "barcode" field.
func BarcodeEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// BarcodeNEQ applies the NEQ predicate on the "barcode" field.
func BarcodeNEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcode), v))
	})
}

// BarcodeIn applies the In predicate on the "barcode" field.
func BarcodeIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcode), v...))
	})
}

// BarcodeNotIn applies the NotIn predicate on the "barcode" field.
func BarcodeNotIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcode), v...))
	})
}

// BarcodeGT applies the GT predicate on the "barcode" field.
func BarcodeGT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcode), v))
	})
}

// BarcodeGTE applies the GTE predicate on the "barcode" field.
func BarcodeGTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcode), v))
	})
}

// BarcodeLT applies the LT predicate on the "barcode" field.
func BarcodeLT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcode), v))
	})
}

// BarcodeLTE applies the LTE predicate on the "barcode" field.
func BarcodeLTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcode), v))
	})
}

// BarcodeContains applies the Contains predicate on the "barcode" field.
func BarcodeContains(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcode), v))
	})
}

// BarcodeHasPrefix applies the HasPrefix predicate on the "barcode" field.
func BarcodeHasPrefix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcode), v))
	})
}

// BarcodeHasSuffix applies the HasSuffix predicate on the "barcode" field.
func BarcodeHasSuffix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcode), v))
	})
}

// BarcodeEqualFold applies the EqualFold predicate on the "barcode" field.
func BarcodeEqualFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcode), v))
	})
}

// BarcodeContainsFold applies the ContainsFold predicate on the "barcode" field.
func BarcodeContainsFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcode), v))
	})
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQty), v))
	})
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...int32) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQty), v...))
	})
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...int32) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQty), v...))
	})
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQty), v))
	})
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQty), v))
	})
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQty), v))
	})
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v int32) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQty), v))
	})
}

// CustomerCodeEQ applies the EQ predicate on the "customer_code" field.
func CustomerCodeEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeNEQ applies the NEQ predicate on the "customer_code" field.
func CustomerCodeNEQ(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeIn applies the In predicate on the "customer_code" field.
func CustomerCodeIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeNotIn applies the NotIn predicate on the "customer_code" field.
func CustomerCodeNotIn(vs ...string) predicate.PickupOrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeGT applies the GT predicate on the "customer_code" field.
func CustomerCodeGT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeGTE applies the GTE predicate on the "customer_code" field.
func CustomerCodeGTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLT applies the LT predicate on the "customer_code" field.
func CustomerCodeLT(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLTE applies the LTE predicate on the "customer_code" field.
func CustomerCodeLTE(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContains applies the Contains predicate on the "customer_code" field.
func CustomerCodeContains(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasPrefix applies the HasPrefix predicate on the "customer_code" field.
func CustomerCodeHasPrefix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasSuffix applies the HasSuffix predicate on the "customer_code" field.
func CustomerCodeHasSuffix(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeEqualFold applies the EqualFold predicate on the "customer_code" field.
func CustomerCodeEqualFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContainsFold applies the ContainsFold predicate on the "customer_code" field.
func CustomerCodeContainsFold(v string) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerCode), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PickupOrderItem) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PickupOrderItem) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PickupOrderItem) predicate.PickupOrderItem {
	return predicate.PickupOrderItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
