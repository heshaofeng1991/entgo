// Code generated by ent, DO NOT EDIT.

package courierorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderNumber applies equality check predicate on the "order_number" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// CourierPlatform applies equality check predicate on the "courier_platform" field. It's identical to CourierPlatformEQ.
func CourierPlatform(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// ShippingMethodCode applies equality check predicate on the "shipping_method_code" field. It's identical to ShippingMethodCodeEQ.
func ShippingMethodCode(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodName applies equality check predicate on the "shipping_method_name" field. It's identical to ShippingMethodNameEQ.
func ShippingMethodName(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodName), v))
	})
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// WaybillNumber applies equality check predicate on the "waybill_number" field. It's identical to WaybillNumberEQ.
func WaybillNumber(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaybillNumber), v))
	})
}

// CourierOrderNumber applies equality check predicate on the "courier_order_number" field. It's identical to CourierOrderNumberEQ.
func CourierOrderNumber(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierOrderNumber), v))
	})
}

// ShippingLabelURL applies equality check predicate on the "shipping_label_url" field. It's identical to ShippingLabelURLEQ.
func ShippingLabelURL(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelURL), v))
	})
}

// TotalItemsPrice applies equality check predicate on the "total_items_price" field. It's identical to TotalItemsPriceEQ.
func TotalItemsPrice(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalItemsPrice), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// PackageCount applies equality check predicate on the "package_count" field. It's identical to PackageCountEQ.
func PackageCount(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageCount), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// ReceiverAddress applies equality check predicate on the "receiver_address" field. It's identical to ReceiverAddressEQ.
func ReceiverAddress(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverAddress), v))
	})
}

// SenderAddress applies equality check predicate on the "sender_address" field. It's identical to SenderAddressEQ.
func SenderAddress(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddress), v))
	})
}

// Items applies equality check predicate on the "items" field. It's identical to ItemsEQ.
func Items(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItems), v))
	})
}

// RequestData applies equality check predicate on the "request_data" field. It's identical to RequestDataEQ.
func RequestData(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestData), v))
	})
}

// ResponseData applies equality check predicate on the "response_data" field. It's identical to ResponseDataEQ.
func ResponseData(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseData), v))
	})
}

// ResultCode applies equality check predicate on the "result_code" field. It's identical to ResultCodeEQ.
func ResultCode(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultCode), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// EnMessage applies equality check predicate on the "en_message" field. It's identical to EnMessageEQ.
func EnMessage(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnMessage), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// OrderNumberEQ applies the EQ predicate on the "order_number" field.
func OrderNumberEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberNEQ applies the NEQ predicate on the "order_number" field.
func OrderNumberNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberIn applies the In predicate on the "order_number" field.
func OrderNumberIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberNotIn applies the NotIn predicate on the "order_number" field.
func OrderNumberNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberGT applies the GT predicate on the "order_number" field.
func OrderNumberGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberGTE applies the GTE predicate on the "order_number" field.
func OrderNumberGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLT applies the LT predicate on the "order_number" field.
func OrderNumberLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLTE applies the LTE predicate on the "order_number" field.
func OrderNumberLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContains applies the Contains predicate on the "order_number" field.
func OrderNumberContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "order_number" field.
func OrderNumberHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "order_number" field.
func OrderNumberHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberEqualFold applies the EqualFold predicate on the "order_number" field.
func OrderNumberEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "order_number" field.
func OrderNumberContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNumber), v))
	})
}

// CourierPlatformEQ applies the EQ predicate on the "courier_platform" field.
func CourierPlatformEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformNEQ applies the NEQ predicate on the "courier_platform" field.
func CourierPlatformNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformIn applies the In predicate on the "courier_platform" field.
func CourierPlatformIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformNotIn applies the NotIn predicate on the "courier_platform" field.
func CourierPlatformNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformGT applies the GT predicate on the "courier_platform" field.
func CourierPlatformGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformGTE applies the GTE predicate on the "courier_platform" field.
func CourierPlatformGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLT applies the LT predicate on the "courier_platform" field.
func CourierPlatformLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLTE applies the LTE predicate on the "courier_platform" field.
func CourierPlatformLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContains applies the Contains predicate on the "courier_platform" field.
func CourierPlatformContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasPrefix applies the HasPrefix predicate on the "courier_platform" field.
func CourierPlatformHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasSuffix applies the HasSuffix predicate on the "courier_platform" field.
func CourierPlatformHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformEqualFold applies the EqualFold predicate on the "courier_platform" field.
func CourierPlatformEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContainsFold applies the ContainsFold predicate on the "courier_platform" field.
func CourierPlatformContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierPlatform), v))
	})
}

// ShippingMethodCodeEQ applies the EQ predicate on the "shipping_method_code" field.
func ShippingMethodCodeEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeNEQ applies the NEQ predicate on the "shipping_method_code" field.
func ShippingMethodCodeNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeIn applies the In predicate on the "shipping_method_code" field.
func ShippingMethodCodeIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMethodCode), v...))
	})
}

// ShippingMethodCodeNotIn applies the NotIn predicate on the "shipping_method_code" field.
func ShippingMethodCodeNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMethodCode), v...))
	})
}

// ShippingMethodCodeGT applies the GT predicate on the "shipping_method_code" field.
func ShippingMethodCodeGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeGTE applies the GTE predicate on the "shipping_method_code" field.
func ShippingMethodCodeGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeLT applies the LT predicate on the "shipping_method_code" field.
func ShippingMethodCodeLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeLTE applies the LTE predicate on the "shipping_method_code" field.
func ShippingMethodCodeLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeContains applies the Contains predicate on the "shipping_method_code" field.
func ShippingMethodCodeContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeHasPrefix applies the HasPrefix predicate on the "shipping_method_code" field.
func ShippingMethodCodeHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeHasSuffix applies the HasSuffix predicate on the "shipping_method_code" field.
func ShippingMethodCodeHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeEqualFold applies the EqualFold predicate on the "shipping_method_code" field.
func ShippingMethodCodeEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodCodeContainsFold applies the ContainsFold predicate on the "shipping_method_code" field.
func ShippingMethodCodeContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMethodCode), v))
	})
}

// ShippingMethodNameEQ applies the EQ predicate on the "shipping_method_name" field.
func ShippingMethodNameEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameNEQ applies the NEQ predicate on the "shipping_method_name" field.
func ShippingMethodNameNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameIn applies the In predicate on the "shipping_method_name" field.
func ShippingMethodNameIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMethodName), v...))
	})
}

// ShippingMethodNameNotIn applies the NotIn predicate on the "shipping_method_name" field.
func ShippingMethodNameNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMethodName), v...))
	})
}

// ShippingMethodNameGT applies the GT predicate on the "shipping_method_name" field.
func ShippingMethodNameGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameGTE applies the GTE predicate on the "shipping_method_name" field.
func ShippingMethodNameGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameLT applies the LT predicate on the "shipping_method_name" field.
func ShippingMethodNameLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameLTE applies the LTE predicate on the "shipping_method_name" field.
func ShippingMethodNameLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameContains applies the Contains predicate on the "shipping_method_name" field.
func ShippingMethodNameContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameHasPrefix applies the HasPrefix predicate on the "shipping_method_name" field.
func ShippingMethodNameHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameHasSuffix applies the HasSuffix predicate on the "shipping_method_name" field.
func ShippingMethodNameHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameEqualFold applies the EqualFold predicate on the "shipping_method_name" field.
func ShippingMethodNameEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameContainsFold applies the ContainsFold predicate on the "shipping_method_name" field.
func ShippingMethodNameContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMethodName), v))
	})
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingURL), v))
	})
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingNumber), v))
	})
}

// WaybillNumberEQ applies the EQ predicate on the "waybill_number" field.
func WaybillNumberEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberNEQ applies the NEQ predicate on the "waybill_number" field.
func WaybillNumberNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberIn applies the In predicate on the "waybill_number" field.
func WaybillNumberIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWaybillNumber), v...))
	})
}

// WaybillNumberNotIn applies the NotIn predicate on the "waybill_number" field.
func WaybillNumberNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWaybillNumber), v...))
	})
}

// WaybillNumberGT applies the GT predicate on the "waybill_number" field.
func WaybillNumberGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberGTE applies the GTE predicate on the "waybill_number" field.
func WaybillNumberGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberLT applies the LT predicate on the "waybill_number" field.
func WaybillNumberLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberLTE applies the LTE predicate on the "waybill_number" field.
func WaybillNumberLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberContains applies the Contains predicate on the "waybill_number" field.
func WaybillNumberContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberHasPrefix applies the HasPrefix predicate on the "waybill_number" field.
func WaybillNumberHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberHasSuffix applies the HasSuffix predicate on the "waybill_number" field.
func WaybillNumberHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberEqualFold applies the EqualFold predicate on the "waybill_number" field.
func WaybillNumberEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberContainsFold applies the ContainsFold predicate on the "waybill_number" field.
func WaybillNumberContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWaybillNumber), v))
	})
}

// CourierOrderNumberEQ applies the EQ predicate on the "courier_order_number" field.
func CourierOrderNumberEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberNEQ applies the NEQ predicate on the "courier_order_number" field.
func CourierOrderNumberNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberIn applies the In predicate on the "courier_order_number" field.
func CourierOrderNumberIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierOrderNumber), v...))
	})
}

// CourierOrderNumberNotIn applies the NotIn predicate on the "courier_order_number" field.
func CourierOrderNumberNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierOrderNumber), v...))
	})
}

// CourierOrderNumberGT applies the GT predicate on the "courier_order_number" field.
func CourierOrderNumberGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberGTE applies the GTE predicate on the "courier_order_number" field.
func CourierOrderNumberGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberLT applies the LT predicate on the "courier_order_number" field.
func CourierOrderNumberLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberLTE applies the LTE predicate on the "courier_order_number" field.
func CourierOrderNumberLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberContains applies the Contains predicate on the "courier_order_number" field.
func CourierOrderNumberContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberHasPrefix applies the HasPrefix predicate on the "courier_order_number" field.
func CourierOrderNumberHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberHasSuffix applies the HasSuffix predicate on the "courier_order_number" field.
func CourierOrderNumberHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberEqualFold applies the EqualFold predicate on the "courier_order_number" field.
func CourierOrderNumberEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberContainsFold applies the ContainsFold predicate on the "courier_order_number" field.
func CourierOrderNumberContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierOrderNumber), v))
	})
}

// ShippingLabelURLEQ applies the EQ predicate on the "shipping_label_url" field.
func ShippingLabelURLEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLNEQ applies the NEQ predicate on the "shipping_label_url" field.
func ShippingLabelURLNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLIn applies the In predicate on the "shipping_label_url" field.
func ShippingLabelURLIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingLabelURL), v...))
	})
}

// ShippingLabelURLNotIn applies the NotIn predicate on the "shipping_label_url" field.
func ShippingLabelURLNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingLabelURL), v...))
	})
}

// ShippingLabelURLGT applies the GT predicate on the "shipping_label_url" field.
func ShippingLabelURLGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLGTE applies the GTE predicate on the "shipping_label_url" field.
func ShippingLabelURLGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLLT applies the LT predicate on the "shipping_label_url" field.
func ShippingLabelURLLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLLTE applies the LTE predicate on the "shipping_label_url" field.
func ShippingLabelURLLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLContains applies the Contains predicate on the "shipping_label_url" field.
func ShippingLabelURLContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLHasPrefix applies the HasPrefix predicate on the "shipping_label_url" field.
func ShippingLabelURLHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLHasSuffix applies the HasSuffix predicate on the "shipping_label_url" field.
func ShippingLabelURLHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLEqualFold applies the EqualFold predicate on the "shipping_label_url" field.
func ShippingLabelURLEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLContainsFold applies the ContainsFold predicate on the "shipping_label_url" field.
func ShippingLabelURLContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingLabelURL), v))
	})
}

// TotalItemsPriceEQ applies the EQ predicate on the "total_items_price" field.
func TotalItemsPriceEQ(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceNEQ applies the NEQ predicate on the "total_items_price" field.
func TotalItemsPriceNEQ(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceIn applies the In predicate on the "total_items_price" field.
func TotalItemsPriceIn(vs ...float64) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalItemsPrice), v...))
	})
}

// TotalItemsPriceNotIn applies the NotIn predicate on the "total_items_price" field.
func TotalItemsPriceNotIn(vs ...float64) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalItemsPrice), v...))
	})
}

// TotalItemsPriceGT applies the GT predicate on the "total_items_price" field.
func TotalItemsPriceGT(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceGTE applies the GTE predicate on the "total_items_price" field.
func TotalItemsPriceGTE(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceLT applies the LT predicate on the "total_items_price" field.
func TotalItemsPriceLT(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceLTE applies the LTE predicate on the "total_items_price" field.
func TotalItemsPriceLTE(v float64) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalItemsPrice), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrency)))
	})
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrency)))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// PackageCountEQ applies the EQ predicate on the "package_count" field.
func PackageCountEQ(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageCount), v))
	})
}

// PackageCountNEQ applies the NEQ predicate on the "package_count" field.
func PackageCountNEQ(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageCount), v))
	})
}

// PackageCountIn applies the In predicate on the "package_count" field.
func PackageCountIn(vs ...int) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPackageCount), v...))
	})
}

// PackageCountNotIn applies the NotIn predicate on the "package_count" field.
func PackageCountNotIn(vs ...int) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPackageCount), v...))
	})
}

// PackageCountGT applies the GT predicate on the "package_count" field.
func PackageCountGT(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageCount), v))
	})
}

// PackageCountGTE applies the GTE predicate on the "package_count" field.
func PackageCountGTE(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageCount), v))
	})
}

// PackageCountLT applies the LT predicate on the "package_count" field.
func PackageCountLT(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageCount), v))
	})
}

// PackageCountLTE applies the LTE predicate on the "package_count" field.
func PackageCountLTE(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageCount), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// ReceiverAddressEQ applies the EQ predicate on the "receiver_address" field.
func ReceiverAddressEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressNEQ applies the NEQ predicate on the "receiver_address" field.
func ReceiverAddressNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressIn applies the In predicate on the "receiver_address" field.
func ReceiverAddressIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiverAddress), v...))
	})
}

// ReceiverAddressNotIn applies the NotIn predicate on the "receiver_address" field.
func ReceiverAddressNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiverAddress), v...))
	})
}

// ReceiverAddressGT applies the GT predicate on the "receiver_address" field.
func ReceiverAddressGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressGTE applies the GTE predicate on the "receiver_address" field.
func ReceiverAddressGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressLT applies the LT predicate on the "receiver_address" field.
func ReceiverAddressLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressLTE applies the LTE predicate on the "receiver_address" field.
func ReceiverAddressLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressContains applies the Contains predicate on the "receiver_address" field.
func ReceiverAddressContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressHasPrefix applies the HasPrefix predicate on the "receiver_address" field.
func ReceiverAddressHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressHasSuffix applies the HasSuffix predicate on the "receiver_address" field.
func ReceiverAddressHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressIsNil applies the IsNil predicate on the "receiver_address" field.
func ReceiverAddressIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverAddress)))
	})
}

// ReceiverAddressNotNil applies the NotNil predicate on the "receiver_address" field.
func ReceiverAddressNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverAddress)))
	})
}

// ReceiverAddressEqualFold applies the EqualFold predicate on the "receiver_address" field.
func ReceiverAddressEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressContainsFold applies the ContainsFold predicate on the "receiver_address" field.
func ReceiverAddressContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverAddress), v))
	})
}

// SenderAddressEQ applies the EQ predicate on the "sender_address" field.
func SenderAddressEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressNEQ applies the NEQ predicate on the "sender_address" field.
func SenderAddressNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressIn applies the In predicate on the "sender_address" field.
func SenderAddressIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSenderAddress), v...))
	})
}

// SenderAddressNotIn applies the NotIn predicate on the "sender_address" field.
func SenderAddressNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSenderAddress), v...))
	})
}

// SenderAddressGT applies the GT predicate on the "sender_address" field.
func SenderAddressGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressGTE applies the GTE predicate on the "sender_address" field.
func SenderAddressGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressLT applies the LT predicate on the "sender_address" field.
func SenderAddressLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressLTE applies the LTE predicate on the "sender_address" field.
func SenderAddressLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressContains applies the Contains predicate on the "sender_address" field.
func SenderAddressContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressHasPrefix applies the HasPrefix predicate on the "sender_address" field.
func SenderAddressHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressHasSuffix applies the HasSuffix predicate on the "sender_address" field.
func SenderAddressHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressIsNil applies the IsNil predicate on the "sender_address" field.
func SenderAddressIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSenderAddress)))
	})
}

// SenderAddressNotNil applies the NotNil predicate on the "sender_address" field.
func SenderAddressNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSenderAddress)))
	})
}

// SenderAddressEqualFold applies the EqualFold predicate on the "sender_address" field.
func SenderAddressEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressContainsFold applies the ContainsFold predicate on the "sender_address" field.
func SenderAddressContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSenderAddress), v))
	})
}

// ItemsEQ applies the EQ predicate on the "items" field.
func ItemsEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItems), v))
	})
}

// ItemsNEQ applies the NEQ predicate on the "items" field.
func ItemsNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItems), v))
	})
}

// ItemsIn applies the In predicate on the "items" field.
func ItemsIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItems), v...))
	})
}

// ItemsNotIn applies the NotIn predicate on the "items" field.
func ItemsNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItems), v...))
	})
}

// ItemsGT applies the GT predicate on the "items" field.
func ItemsGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItems), v))
	})
}

// ItemsGTE applies the GTE predicate on the "items" field.
func ItemsGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItems), v))
	})
}

// ItemsLT applies the LT predicate on the "items" field.
func ItemsLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItems), v))
	})
}

// ItemsLTE applies the LTE predicate on the "items" field.
func ItemsLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItems), v))
	})
}

// ItemsContains applies the Contains predicate on the "items" field.
func ItemsContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItems), v))
	})
}

// ItemsHasPrefix applies the HasPrefix predicate on the "items" field.
func ItemsHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItems), v))
	})
}

// ItemsHasSuffix applies the HasSuffix predicate on the "items" field.
func ItemsHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItems), v))
	})
}

// ItemsIsNil applies the IsNil predicate on the "items" field.
func ItemsIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItems)))
	})
}

// ItemsNotNil applies the NotNil predicate on the "items" field.
func ItemsNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItems)))
	})
}

// ItemsEqualFold applies the EqualFold predicate on the "items" field.
func ItemsEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItems), v))
	})
}

// ItemsContainsFold applies the ContainsFold predicate on the "items" field.
func ItemsContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItems), v))
	})
}

// RequestDataEQ applies the EQ predicate on the "request_data" field.
func RequestDataEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestData), v))
	})
}

// RequestDataNEQ applies the NEQ predicate on the "request_data" field.
func RequestDataNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestData), v))
	})
}

// RequestDataIn applies the In predicate on the "request_data" field.
func RequestDataIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequestData), v...))
	})
}

// RequestDataNotIn applies the NotIn predicate on the "request_data" field.
func RequestDataNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequestData), v...))
	})
}

// RequestDataGT applies the GT predicate on the "request_data" field.
func RequestDataGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestData), v))
	})
}

// RequestDataGTE applies the GTE predicate on the "request_data" field.
func RequestDataGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestData), v))
	})
}

// RequestDataLT applies the LT predicate on the "request_data" field.
func RequestDataLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestData), v))
	})
}

// RequestDataLTE applies the LTE predicate on the "request_data" field.
func RequestDataLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestData), v))
	})
}

// RequestDataContains applies the Contains predicate on the "request_data" field.
func RequestDataContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequestData), v))
	})
}

// RequestDataHasPrefix applies the HasPrefix predicate on the "request_data" field.
func RequestDataHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequestData), v))
	})
}

// RequestDataHasSuffix applies the HasSuffix predicate on the "request_data" field.
func RequestDataHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequestData), v))
	})
}

// RequestDataIsNil applies the IsNil predicate on the "request_data" field.
func RequestDataIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestData)))
	})
}

// RequestDataNotNil applies the NotNil predicate on the "request_data" field.
func RequestDataNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestData)))
	})
}

// RequestDataEqualFold applies the EqualFold predicate on the "request_data" field.
func RequestDataEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequestData), v))
	})
}

// RequestDataContainsFold applies the ContainsFold predicate on the "request_data" field.
func RequestDataContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequestData), v))
	})
}

// ResponseDataEQ applies the EQ predicate on the "response_data" field.
func ResponseDataEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseData), v))
	})
}

// ResponseDataNEQ applies the NEQ predicate on the "response_data" field.
func ResponseDataNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseData), v))
	})
}

// ResponseDataIn applies the In predicate on the "response_data" field.
func ResponseDataIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponseData), v...))
	})
}

// ResponseDataNotIn applies the NotIn predicate on the "response_data" field.
func ResponseDataNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponseData), v...))
	})
}

// ResponseDataGT applies the GT predicate on the "response_data" field.
func ResponseDataGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseData), v))
	})
}

// ResponseDataGTE applies the GTE predicate on the "response_data" field.
func ResponseDataGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseData), v))
	})
}

// ResponseDataLT applies the LT predicate on the "response_data" field.
func ResponseDataLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseData), v))
	})
}

// ResponseDataLTE applies the LTE predicate on the "response_data" field.
func ResponseDataLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseData), v))
	})
}

// ResponseDataContains applies the Contains predicate on the "response_data" field.
func ResponseDataContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResponseData), v))
	})
}

// ResponseDataHasPrefix applies the HasPrefix predicate on the "response_data" field.
func ResponseDataHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResponseData), v))
	})
}

// ResponseDataHasSuffix applies the HasSuffix predicate on the "response_data" field.
func ResponseDataHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResponseData), v))
	})
}

// ResponseDataIsNil applies the IsNil predicate on the "response_data" field.
func ResponseDataIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResponseData)))
	})
}

// ResponseDataNotNil applies the NotNil predicate on the "response_data" field.
func ResponseDataNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResponseData)))
	})
}

// ResponseDataEqualFold applies the EqualFold predicate on the "response_data" field.
func ResponseDataEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResponseData), v))
	})
}

// ResponseDataContainsFold applies the ContainsFold predicate on the "response_data" field.
func ResponseDataContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResponseData), v))
	})
}

// ResultCodeEQ applies the EQ predicate on the "result_code" field.
func ResultCodeEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultCode), v))
	})
}

// ResultCodeNEQ applies the NEQ predicate on the "result_code" field.
func ResultCodeNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultCode), v))
	})
}

// ResultCodeIn applies the In predicate on the "result_code" field.
func ResultCodeIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResultCode), v...))
	})
}

// ResultCodeNotIn applies the NotIn predicate on the "result_code" field.
func ResultCodeNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResultCode), v...))
	})
}

// ResultCodeGT applies the GT predicate on the "result_code" field.
func ResultCodeGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultCode), v))
	})
}

// ResultCodeGTE applies the GTE predicate on the "result_code" field.
func ResultCodeGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultCode), v))
	})
}

// ResultCodeLT applies the LT predicate on the "result_code" field.
func ResultCodeLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultCode), v))
	})
}

// ResultCodeLTE applies the LTE predicate on the "result_code" field.
func ResultCodeLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultCode), v))
	})
}

// ResultCodeContains applies the Contains predicate on the "result_code" field.
func ResultCodeContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResultCode), v))
	})
}

// ResultCodeHasPrefix applies the HasPrefix predicate on the "result_code" field.
func ResultCodeHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResultCode), v))
	})
}

// ResultCodeHasSuffix applies the HasSuffix predicate on the "result_code" field.
func ResultCodeHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResultCode), v))
	})
}

// ResultCodeIsNil applies the IsNil predicate on the "result_code" field.
func ResultCodeIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResultCode)))
	})
}

// ResultCodeNotNil applies the NotNil predicate on the "result_code" field.
func ResultCodeNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResultCode)))
	})
}

// ResultCodeEqualFold applies the EqualFold predicate on the "result_code" field.
func ResultCodeEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResultCode), v))
	})
}

// ResultCodeContainsFold applies the ContainsFold predicate on the "result_code" field.
func ResultCodeContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResultCode), v))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMessage)))
	})
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMessage)))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// EnMessageEQ applies the EQ predicate on the "en_message" field.
func EnMessageEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnMessage), v))
	})
}

// EnMessageNEQ applies the NEQ predicate on the "en_message" field.
func EnMessageNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnMessage), v))
	})
}

// EnMessageIn applies the In predicate on the "en_message" field.
func EnMessageIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnMessage), v...))
	})
}

// EnMessageNotIn applies the NotIn predicate on the "en_message" field.
func EnMessageNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnMessage), v...))
	})
}

// EnMessageGT applies the GT predicate on the "en_message" field.
func EnMessageGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnMessage), v))
	})
}

// EnMessageGTE applies the GTE predicate on the "en_message" field.
func EnMessageGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnMessage), v))
	})
}

// EnMessageLT applies the LT predicate on the "en_message" field.
func EnMessageLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnMessage), v))
	})
}

// EnMessageLTE applies the LTE predicate on the "en_message" field.
func EnMessageLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnMessage), v))
	})
}

// EnMessageContains applies the Contains predicate on the "en_message" field.
func EnMessageContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnMessage), v))
	})
}

// EnMessageHasPrefix applies the HasPrefix predicate on the "en_message" field.
func EnMessageHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnMessage), v))
	})
}

// EnMessageHasSuffix applies the HasSuffix predicate on the "en_message" field.
func EnMessageHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnMessage), v))
	})
}

// EnMessageIsNil applies the IsNil predicate on the "en_message" field.
func EnMessageIsNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnMessage)))
	})
}

// EnMessageNotNil applies the NotNil predicate on the "en_message" field.
func EnMessageNotNil() predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnMessage)))
	})
}

// EnMessageEqualFold applies the EqualFold predicate on the "en_message" field.
func EnMessageEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnMessage), v))
	})
}

// EnMessageContainsFold applies the ContainsFold predicate on the "en_message" field.
func EnMessageContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnMessage), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CourierOrder {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CourierOrder) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CourierOrder) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CourierOrder) predicate.CourierOrder {
	return predicate.CourierOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
