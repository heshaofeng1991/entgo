// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/channelrecommend"
)

// ChannelRecommend is the model entity for the ChannelRecommend schema.
type ChannelRecommend struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode string `json:"country_code,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// 0=>不推荐, 1=>推荐
	IsRecommended int8 `json:"is_recommended,omitempty"`
	// 0=>Inactive, 1=>Active
	Status int8 `json:"status,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelRecommend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelrecommend.FieldID, channelrecommend.FieldChannelID, channelrecommend.FieldIsRecommended, channelrecommend.FieldStatus:
			values[i] = new(sql.NullInt64)
		case channelrecommend.FieldCountryCode, channelrecommend.FieldValue:
			values[i] = new(sql.NullString)
		case channelrecommend.FieldCreatedAt, channelrecommend.FieldUpdatedAt, channelrecommend.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChannelRecommend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelRecommend fields.
func (cr *ChannelRecommend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelrecommend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int64(value.Int64)
		case channelrecommend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case channelrecommend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		case channelrecommend.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cr.DeletedAt = value.Time
			}
		case channelrecommend.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				cr.CountryCode = value.String
			}
		case channelrecommend.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				cr.ChannelID = value.Int64
			}
		case channelrecommend.FieldIsRecommended:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_recommended", values[i])
			} else if value.Valid {
				cr.IsRecommended = int8(value.Int64)
			}
		case channelrecommend.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cr.Status = int8(value.Int64)
			}
		case channelrecommend.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				cr.Value = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChannelRecommend.
// Note that you need to call ChannelRecommend.Unwrap() before calling this method if this ChannelRecommend
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ChannelRecommend) Update() *ChannelRecommendUpdateOne {
	return (&ChannelRecommendClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the ChannelRecommend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ChannelRecommend) Unwrap() *ChannelRecommend {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("gen: ChannelRecommend is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ChannelRecommend) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelRecommend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(cr.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("is_recommended=")
	builder.WriteString(fmt.Sprintf("%v", cr.IsRecommended))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cr.Status))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(cr.Value)
	builder.WriteByte(')')
	return builder.String()
}

// ChannelRecommends is a parsable slice of ChannelRecommend.
type ChannelRecommends []*ChannelRecommend

func (cr ChannelRecommends) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
