// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporderitem"
)

// PickupOrderItem is the model entity for the PickupOrderItem schema.
type PickupOrderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 揽件订单ID
	PickupOrderID int64 `json:"pickup_order_id,omitempty"`
	// 产品ID
	ProductID int64 `json:"product_id,omitempty"`
	// 产品名称
	ProductName string `json:"product_name,omitempty"`
	// 产品SKU
	Sku string `json:"sku,omitempty"`
	// 产品条码
	Barcode string `json:"barcode,omitempty"`
	// 产品数量
	Qty int32 `json:"qty,omitempty"`
	// CustomerCode holds the value of the "customer_code" field.
	CustomerCode string `json:"customer_code,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PickupOrderItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pickuporderitem.FieldID, pickuporderitem.FieldPickupOrderID, pickuporderitem.FieldProductID, pickuporderitem.FieldQty:
			values[i] = new(sql.NullInt64)
		case pickuporderitem.FieldProductName, pickuporderitem.FieldSku, pickuporderitem.FieldBarcode, pickuporderitem.FieldCustomerCode:
			values[i] = new(sql.NullString)
		case pickuporderitem.FieldCreatedAt, pickuporderitem.FieldUpdatedAt, pickuporderitem.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PickupOrderItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PickupOrderItem fields.
func (poi *PickupOrderItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pickuporderitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			poi.ID = int64(value.Int64)
		case pickuporderitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				poi.CreatedAt = value.Time
			}
		case pickuporderitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				poi.UpdatedAt = value.Time
			}
		case pickuporderitem.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				poi.DeletedAt = value.Time
			}
		case pickuporderitem.FieldPickupOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_order_id", values[i])
			} else if value.Valid {
				poi.PickupOrderID = value.Int64
			}
		case pickuporderitem.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				poi.ProductID = value.Int64
			}
		case pickuporderitem.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				poi.ProductName = value.String
			}
		case pickuporderitem.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				poi.Sku = value.String
			}
		case pickuporderitem.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				poi.Barcode = value.String
			}
		case pickuporderitem.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				poi.Qty = int32(value.Int64)
			}
		case pickuporderitem.FieldCustomerCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_code", values[i])
			} else if value.Valid {
				poi.CustomerCode = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PickupOrderItem.
// Note that you need to call PickupOrderItem.Unwrap() before calling this method if this PickupOrderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (poi *PickupOrderItem) Update() *PickupOrderItemUpdateOne {
	return (&PickupOrderItemClient{config: poi.config}).UpdateOne(poi)
}

// Unwrap unwraps the PickupOrderItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (poi *PickupOrderItem) Unwrap() *PickupOrderItem {
	_tx, ok := poi.config.driver.(*txDriver)
	if !ok {
		panic("gen: PickupOrderItem is not a transactional entity")
	}
	poi.config.driver = _tx.drv
	return poi
}

// String implements the fmt.Stringer.
func (poi *PickupOrderItem) String() string {
	var builder strings.Builder
	builder.WriteString("PickupOrderItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", poi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(poi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(poi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(poi.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pickup_order_id=")
	builder.WriteString(fmt.Sprintf("%v", poi.PickupOrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", poi.ProductID))
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(poi.ProductName)
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(poi.Sku)
	builder.WriteString(", ")
	builder.WriteString("barcode=")
	builder.WriteString(poi.Barcode)
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", poi.Qty))
	builder.WriteString(", ")
	builder.WriteString("customer_code=")
	builder.WriteString(poi.CustomerCode)
	builder.WriteByte(')')
	return builder.String()
}

// PickupOrderItems is a parsable slice of PickupOrderItem.
type PickupOrderItems []*PickupOrderItem

func (poi PickupOrderItems) config(cfg config) {
	for _i := range poi {
		poi[_i].config = cfg
	}
}
