// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// Inbound is the model entity for the Inbound schema.
type Inbound struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 来自于客户的外部订单ID
	CustomerOrderID string `json:"customer_order_id,omitempty"`
	// 客户代码
	CustomerCode string `json:"customer_code,omitempty"`
	// 订单追踪条码
	TrackingNumber string `json:"tracking_number,omitempty"`
	// 入库单对应的仓库ID
	WarehouseID int64 `json:"warehouse_id,omitempty"`
	// 入库单信息描述
	Description string `json:"description,omitempty"`
	// 预计到达仓库时间
	EstimatedArrivalAt time.Time `json:"estimated_arrival_at,omitempty"`
	// 发货时间
	ShippedAt time.Time `json:"shipped_at,omitempty"`
	// 入库单状态 0=>Draft; 1=>New; 2=>InTransit; 10=>StartReceived; 20=>CompleteReceived; 30=>StartShelved; 40=>CompleteShelved;  99=>Complete
	Status int8 `json:"status,omitempty"`
	// 发货模式 0 直发转运， 1 仓储模式
	Type int8 `json:"type,omitempty"`
	// 是否上门揽件 0 => false， 1 => true
	IsPickup int8 `json:"is_pickup,omitempty"`
	// PDF URL
	ShippingMarkURL string `json:"shipping_mark_url,omitempty"`
	// 揽件信息ID
	PickupOrderID int64 `json:"pickup_order_id,omitempty"`
	// 物流供应商名称
	CarrierName string `json:"carrier_name,omitempty"`
	// OrderNumber holds the value of the "order_number" field.
	OrderNumber string `json:"order_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InboundQuery when eager-loading is set.
	Edges          InboundEdges `json:"edges"`
	inbound_tenant *int64
}

// InboundEdges holds the relations/edges for other nodes in the graph.
type InboundEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// InboundItems holds the value of the inbound_items edge.
	InboundItems []*InboundItem `json:"inbound_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InboundEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// InboundItemsOrErr returns the InboundItems value or an error if the edge
// was not loaded in eager-loading.
func (e InboundEdges) InboundItemsOrErr() ([]*InboundItem, error) {
	if e.loadedTypes[1] {
		return e.InboundItems, nil
	}
	return nil, &NotLoadedError{edge: "inbound_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inbound) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inbound.FieldID, inbound.FieldWarehouseID, inbound.FieldStatus, inbound.FieldType, inbound.FieldIsPickup, inbound.FieldPickupOrderID:
			values[i] = new(sql.NullInt64)
		case inbound.FieldCustomerOrderID, inbound.FieldCustomerCode, inbound.FieldTrackingNumber, inbound.FieldDescription, inbound.FieldShippingMarkURL, inbound.FieldCarrierName, inbound.FieldOrderNumber:
			values[i] = new(sql.NullString)
		case inbound.FieldCreatedAt, inbound.FieldUpdatedAt, inbound.FieldDeletedAt, inbound.FieldEstimatedArrivalAt, inbound.FieldShippedAt:
			values[i] = new(sql.NullTime)
		case inbound.ForeignKeys[0]: // inbound_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Inbound", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inbound fields.
func (i *Inbound) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inbound.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case inbound.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case inbound.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case inbound.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = value.Time
			}
		case inbound.FieldCustomerOrderID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_order_id", values[j])
			} else if value.Valid {
				i.CustomerOrderID = value.String
			}
		case inbound.FieldCustomerCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_code", values[j])
			} else if value.Valid {
				i.CustomerCode = value.String
			}
		case inbound.FieldTrackingNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[j])
			} else if value.Valid {
				i.TrackingNumber = value.String
			}
		case inbound.FieldWarehouseID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_id", values[j])
			} else if value.Valid {
				i.WarehouseID = value.Int64
			}
		case inbound.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case inbound.FieldEstimatedArrivalAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_arrival_at", values[j])
			} else if value.Valid {
				i.EstimatedArrivalAt = value.Time
			}
		case inbound.FieldShippedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field shipped_at", values[j])
			} else if value.Valid {
				i.ShippedAt = value.Time
			}
		case inbound.FieldStatus:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = int8(value.Int64)
			}
		case inbound.FieldType:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = int8(value.Int64)
			}
		case inbound.FieldIsPickup:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_pickup", values[j])
			} else if value.Valid {
				i.IsPickup = int8(value.Int64)
			}
		case inbound.FieldShippingMarkURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_mark_url", values[j])
			} else if value.Valid {
				i.ShippingMarkURL = value.String
			}
		case inbound.FieldPickupOrderID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_order_id", values[j])
			} else if value.Valid {
				i.PickupOrderID = value.Int64
			}
		case inbound.FieldCarrierName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_name", values[j])
			} else if value.Valid {
				i.CarrierName = value.String
			}
		case inbound.FieldOrderNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[j])
			} else if value.Valid {
				i.OrderNumber = value.String
			}
		case inbound.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inbound_tenant", value)
			} else if value.Valid {
				i.inbound_tenant = new(int64)
				*i.inbound_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Inbound entity.
func (i *Inbound) QueryTenant() *TenantQuery {
	return (&InboundClient{config: i.config}).QueryTenant(i)
}

// QueryInboundItems queries the "inbound_items" edge of the Inbound entity.
func (i *Inbound) QueryInboundItems() *InboundItemQuery {
	return (&InboundClient{config: i.config}).QueryInboundItems(i)
}

// Update returns a builder for updating this Inbound.
// Note that you need to call Inbound.Unwrap() before calling this method if this Inbound
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inbound) Update() *InboundUpdateOne {
	return (&InboundClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Inbound entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inbound) Unwrap() *Inbound {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("gen: Inbound is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inbound) String() string {
	var builder strings.Builder
	builder.WriteString("Inbound(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(i.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_order_id=")
	builder.WriteString(i.CustomerOrderID)
	builder.WriteString(", ")
	builder.WriteString("customer_code=")
	builder.WriteString(i.CustomerCode)
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(i.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("warehouse_id=")
	builder.WriteString(fmt.Sprintf("%v", i.WarehouseID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("estimated_arrival_at=")
	builder.WriteString(i.EstimatedArrivalAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shipped_at=")
	builder.WriteString(i.ShippedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteString(", ")
	builder.WriteString("is_pickup=")
	builder.WriteString(fmt.Sprintf("%v", i.IsPickup))
	builder.WriteString(", ")
	builder.WriteString("shipping_mark_url=")
	builder.WriteString(i.ShippingMarkURL)
	builder.WriteString(", ")
	builder.WriteString("pickup_order_id=")
	builder.WriteString(fmt.Sprintf("%v", i.PickupOrderID))
	builder.WriteString(", ")
	builder.WriteString("carrier_name=")
	builder.WriteString(i.CarrierName)
	builder.WriteString(", ")
	builder.WriteString("order_number=")
	builder.WriteString(i.OrderNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Inbounds is a parsable slice of Inbound.
type Inbounds []*Inbound

func (i Inbounds) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
