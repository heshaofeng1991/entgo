// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InboundItemUpdate is the builder for updating InboundItem entities.
type InboundItemUpdate struct {
	config
	hooks     []Hook
	mutation  *InboundItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InboundItemUpdate builder.
func (iiu *InboundItemUpdate) Where(ps ...predicate.InboundItem) *InboundItemUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetUpdatedAt sets the "updated_at" field.
func (iiu *InboundItemUpdate) SetUpdatedAt(t time.Time) *InboundItemUpdate {
	iiu.mutation.SetUpdatedAt(t)
	return iiu
}

// SetDeletedAt sets the "deleted_at" field.
func (iiu *InboundItemUpdate) SetDeletedAt(t time.Time) *InboundItemUpdate {
	iiu.mutation.SetDeletedAt(t)
	return iiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iiu *InboundItemUpdate) SetNillableDeletedAt(t *time.Time) *InboundItemUpdate {
	if t != nil {
		iiu.SetDeletedAt(*t)
	}
	return iiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iiu *InboundItemUpdate) ClearDeletedAt() *InboundItemUpdate {
	iiu.mutation.ClearDeletedAt()
	return iiu
}

// SetInboundID sets the "inbound_id" field.
func (iiu *InboundItemUpdate) SetInboundID(i int64) *InboundItemUpdate {
	iiu.mutation.SetInboundID(i)
	return iiu
}

// SetNillableInboundID sets the "inbound_id" field if the given value is not nil.
func (iiu *InboundItemUpdate) SetNillableInboundID(i *int64) *InboundItemUpdate {
	if i != nil {
		iiu.SetInboundID(*i)
	}
	return iiu
}

// ClearInboundID clears the value of the "inbound_id" field.
func (iiu *InboundItemUpdate) ClearInboundID() *InboundItemUpdate {
	iiu.mutation.ClearInboundID()
	return iiu
}

// SetProductID sets the "product_id" field.
func (iiu *InboundItemUpdate) SetProductID(i int64) *InboundItemUpdate {
	iiu.mutation.ResetProductID()
	iiu.mutation.SetProductID(i)
	return iiu
}

// AddProductID adds i to the "product_id" field.
func (iiu *InboundItemUpdate) AddProductID(i int64) *InboundItemUpdate {
	iiu.mutation.AddProductID(i)
	return iiu
}

// SetProductName sets the "product_name" field.
func (iiu *InboundItemUpdate) SetProductName(s string) *InboundItemUpdate {
	iiu.mutation.SetProductName(s)
	return iiu
}

// SetSku sets the "sku" field.
func (iiu *InboundItemUpdate) SetSku(s string) *InboundItemUpdate {
	iiu.mutation.SetSku(s)
	return iiu
}

// SetBarcode sets the "barcode" field.
func (iiu *InboundItemUpdate) SetBarcode(s string) *InboundItemUpdate {
	iiu.mutation.SetBarcode(s)
	return iiu
}

// SetQty sets the "qty" field.
func (iiu *InboundItemUpdate) SetQty(i int) *InboundItemUpdate {
	iiu.mutation.ResetQty()
	iiu.mutation.SetQty(i)
	return iiu
}

// AddQty adds i to the "qty" field.
func (iiu *InboundItemUpdate) AddQty(i int) *InboundItemUpdate {
	iiu.mutation.AddQty(i)
	return iiu
}

// SetStatus sets the "status" field.
func (iiu *InboundItemUpdate) SetStatus(i int8) *InboundItemUpdate {
	iiu.mutation.ResetStatus()
	iiu.mutation.SetStatus(i)
	return iiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iiu *InboundItemUpdate) SetNillableStatus(i *int8) *InboundItemUpdate {
	if i != nil {
		iiu.SetStatus(*i)
	}
	return iiu
}

// AddStatus adds i to the "status" field.
func (iiu *InboundItemUpdate) AddStatus(i int8) *InboundItemUpdate {
	iiu.mutation.AddStatus(i)
	return iiu
}

// SetCustomerCode sets the "customer_code" field.
func (iiu *InboundItemUpdate) SetCustomerCode(s string) *InboundItemUpdate {
	iiu.mutation.SetCustomerCode(s)
	return iiu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iiu *InboundItemUpdate) SetTenantID(id int64) *InboundItemUpdate {
	iiu.mutation.SetTenantID(id)
	return iiu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iiu *InboundItemUpdate) SetTenant(t *Tenant) *InboundItemUpdate {
	return iiu.SetTenantID(t.ID)
}

// SetInboundsID sets the "inbounds" edge to the Inbound entity by ID.
func (iiu *InboundItemUpdate) SetInboundsID(id int64) *InboundItemUpdate {
	iiu.mutation.SetInboundsID(id)
	return iiu
}

// SetNillableInboundsID sets the "inbounds" edge to the Inbound entity by ID if the given value is not nil.
func (iiu *InboundItemUpdate) SetNillableInboundsID(id *int64) *InboundItemUpdate {
	if id != nil {
		iiu = iiu.SetInboundsID(*id)
	}
	return iiu
}

// SetInbounds sets the "inbounds" edge to the Inbound entity.
func (iiu *InboundItemUpdate) SetInbounds(i *Inbound) *InboundItemUpdate {
	return iiu.SetInboundsID(i.ID)
}

// Mutation returns the InboundItemMutation object of the builder.
func (iiu *InboundItemUpdate) Mutation() *InboundItemMutation {
	return iiu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iiu *InboundItemUpdate) ClearTenant() *InboundItemUpdate {
	iiu.mutation.ClearTenant()
	return iiu
}

// ClearInbounds clears the "inbounds" edge to the Inbound entity.
func (iiu *InboundItemUpdate) ClearInbounds() *InboundItemUpdate {
	iiu.mutation.ClearInbounds()
	return iiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *InboundItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := iiu.defaults(); err != nil {
		return 0, err
	}
	if len(iiu.hooks) == 0 {
		if err = iiu.check(); err != nil {
			return 0, err
		}
		affected, err = iiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iiu.check(); err != nil {
				return 0, err
			}
			iiu.mutation = mutation
			affected, err = iiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iiu.hooks) - 1; i >= 0; i-- {
			if iiu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InboundItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InboundItemUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InboundItemUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiu *InboundItemUpdate) defaults() error {
	if _, ok := iiu.mutation.UpdatedAt(); !ok {
		if inbounditem.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbounditem.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbounditem.UpdateDefaultUpdatedAt()
		iiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iiu *InboundItemUpdate) check() error {
	if _, ok := iiu.mutation.TenantID(); iiu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "InboundItem.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iiu *InboundItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InboundItemUpdate {
	iiu.modifiers = append(iiu.modifiers, modifiers...)
	return iiu
}

func (iiu *InboundItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inbounditem.Table,
			Columns: inbounditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbounditem.FieldID,
			},
		},
	}
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.UpdatedAt(); ok {
		_spec.SetField(inbounditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iiu.mutation.DeletedAt(); ok {
		_spec.SetField(inbounditem.FieldDeletedAt, field.TypeTime, value)
	}
	if iiu.mutation.DeletedAtCleared() {
		_spec.ClearField(inbounditem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iiu.mutation.ProductID(); ok {
		_spec.SetField(inbounditem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := iiu.mutation.AddedProductID(); ok {
		_spec.AddField(inbounditem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := iiu.mutation.ProductName(); ok {
		_spec.SetField(inbounditem.FieldProductName, field.TypeString, value)
	}
	if value, ok := iiu.mutation.Sku(); ok {
		_spec.SetField(inbounditem.FieldSku, field.TypeString, value)
	}
	if value, ok := iiu.mutation.Barcode(); ok {
		_spec.SetField(inbounditem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := iiu.mutation.Qty(); ok {
		_spec.SetField(inbounditem.FieldQty, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.AddedQty(); ok {
		_spec.AddField(inbounditem.FieldQty, field.TypeInt, value)
	}
	if value, ok := iiu.mutation.Status(); ok {
		_spec.SetField(inbounditem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iiu.mutation.AddedStatus(); ok {
		_spec.AddField(inbounditem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iiu.mutation.CustomerCode(); ok {
		_spec.SetField(inbounditem.FieldCustomerCode, field.TypeString, value)
	}
	if iiu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iiu.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iiu.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.InboundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbound.FieldID,
				},
			},
		}
		edge.Schema = iiu.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.InboundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbound.FieldID,
				},
			},
		}
		edge.Schema = iiu.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iiu.schemaConfig.InboundItem
	ctx = internal.NewSchemaConfigContext(ctx, iiu.schemaConfig)
	_spec.AddModifiers(iiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inbounditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InboundItemUpdateOne is the builder for updating a single InboundItem entity.
type InboundItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InboundItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iiuo *InboundItemUpdateOne) SetUpdatedAt(t time.Time) *InboundItemUpdateOne {
	iiuo.mutation.SetUpdatedAt(t)
	return iiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iiuo *InboundItemUpdateOne) SetDeletedAt(t time.Time) *InboundItemUpdateOne {
	iiuo.mutation.SetDeletedAt(t)
	return iiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iiuo *InboundItemUpdateOne) SetNillableDeletedAt(t *time.Time) *InboundItemUpdateOne {
	if t != nil {
		iiuo.SetDeletedAt(*t)
	}
	return iiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iiuo *InboundItemUpdateOne) ClearDeletedAt() *InboundItemUpdateOne {
	iiuo.mutation.ClearDeletedAt()
	return iiuo
}

// SetInboundID sets the "inbound_id" field.
func (iiuo *InboundItemUpdateOne) SetInboundID(i int64) *InboundItemUpdateOne {
	iiuo.mutation.SetInboundID(i)
	return iiuo
}

// SetNillableInboundID sets the "inbound_id" field if the given value is not nil.
func (iiuo *InboundItemUpdateOne) SetNillableInboundID(i *int64) *InboundItemUpdateOne {
	if i != nil {
		iiuo.SetInboundID(*i)
	}
	return iiuo
}

// ClearInboundID clears the value of the "inbound_id" field.
func (iiuo *InboundItemUpdateOne) ClearInboundID() *InboundItemUpdateOne {
	iiuo.mutation.ClearInboundID()
	return iiuo
}

// SetProductID sets the "product_id" field.
func (iiuo *InboundItemUpdateOne) SetProductID(i int64) *InboundItemUpdateOne {
	iiuo.mutation.ResetProductID()
	iiuo.mutation.SetProductID(i)
	return iiuo
}

// AddProductID adds i to the "product_id" field.
func (iiuo *InboundItemUpdateOne) AddProductID(i int64) *InboundItemUpdateOne {
	iiuo.mutation.AddProductID(i)
	return iiuo
}

// SetProductName sets the "product_name" field.
func (iiuo *InboundItemUpdateOne) SetProductName(s string) *InboundItemUpdateOne {
	iiuo.mutation.SetProductName(s)
	return iiuo
}

// SetSku sets the "sku" field.
func (iiuo *InboundItemUpdateOne) SetSku(s string) *InboundItemUpdateOne {
	iiuo.mutation.SetSku(s)
	return iiuo
}

// SetBarcode sets the "barcode" field.
func (iiuo *InboundItemUpdateOne) SetBarcode(s string) *InboundItemUpdateOne {
	iiuo.mutation.SetBarcode(s)
	return iiuo
}

// SetQty sets the "qty" field.
func (iiuo *InboundItemUpdateOne) SetQty(i int) *InboundItemUpdateOne {
	iiuo.mutation.ResetQty()
	iiuo.mutation.SetQty(i)
	return iiuo
}

// AddQty adds i to the "qty" field.
func (iiuo *InboundItemUpdateOne) AddQty(i int) *InboundItemUpdateOne {
	iiuo.mutation.AddQty(i)
	return iiuo
}

// SetStatus sets the "status" field.
func (iiuo *InboundItemUpdateOne) SetStatus(i int8) *InboundItemUpdateOne {
	iiuo.mutation.ResetStatus()
	iiuo.mutation.SetStatus(i)
	return iiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iiuo *InboundItemUpdateOne) SetNillableStatus(i *int8) *InboundItemUpdateOne {
	if i != nil {
		iiuo.SetStatus(*i)
	}
	return iiuo
}

// AddStatus adds i to the "status" field.
func (iiuo *InboundItemUpdateOne) AddStatus(i int8) *InboundItemUpdateOne {
	iiuo.mutation.AddStatus(i)
	return iiuo
}

// SetCustomerCode sets the "customer_code" field.
func (iiuo *InboundItemUpdateOne) SetCustomerCode(s string) *InboundItemUpdateOne {
	iiuo.mutation.SetCustomerCode(s)
	return iiuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iiuo *InboundItemUpdateOne) SetTenantID(id int64) *InboundItemUpdateOne {
	iiuo.mutation.SetTenantID(id)
	return iiuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iiuo *InboundItemUpdateOne) SetTenant(t *Tenant) *InboundItemUpdateOne {
	return iiuo.SetTenantID(t.ID)
}

// SetInboundsID sets the "inbounds" edge to the Inbound entity by ID.
func (iiuo *InboundItemUpdateOne) SetInboundsID(id int64) *InboundItemUpdateOne {
	iiuo.mutation.SetInboundsID(id)
	return iiuo
}

// SetNillableInboundsID sets the "inbounds" edge to the Inbound entity by ID if the given value is not nil.
func (iiuo *InboundItemUpdateOne) SetNillableInboundsID(id *int64) *InboundItemUpdateOne {
	if id != nil {
		iiuo = iiuo.SetInboundsID(*id)
	}
	return iiuo
}

// SetInbounds sets the "inbounds" edge to the Inbound entity.
func (iiuo *InboundItemUpdateOne) SetInbounds(i *Inbound) *InboundItemUpdateOne {
	return iiuo.SetInboundsID(i.ID)
}

// Mutation returns the InboundItemMutation object of the builder.
func (iiuo *InboundItemUpdateOne) Mutation() *InboundItemMutation {
	return iiuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iiuo *InboundItemUpdateOne) ClearTenant() *InboundItemUpdateOne {
	iiuo.mutation.ClearTenant()
	return iiuo
}

// ClearInbounds clears the "inbounds" edge to the Inbound entity.
func (iiuo *InboundItemUpdateOne) ClearInbounds() *InboundItemUpdateOne {
	iiuo.mutation.ClearInbounds()
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *InboundItemUpdateOne) Select(field string, fields ...string) *InboundItemUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated InboundItem entity.
func (iiuo *InboundItemUpdateOne) Save(ctx context.Context) (*InboundItem, error) {
	var (
		err  error
		node *InboundItem
	)
	if err := iiuo.defaults(); err != nil {
		return nil, err
	}
	if len(iiuo.hooks) == 0 {
		if err = iiuo.check(); err != nil {
			return nil, err
		}
		node, err = iiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iiuo.check(); err != nil {
				return nil, err
			}
			iiuo.mutation = mutation
			node, err = iiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iiuo.hooks) - 1; i >= 0; i-- {
			if iiuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InboundItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InboundItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InboundItemUpdateOne) SaveX(ctx context.Context) *InboundItem {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *InboundItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InboundItemUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiuo *InboundItemUpdateOne) defaults() error {
	if _, ok := iiuo.mutation.UpdatedAt(); !ok {
		if inbounditem.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbounditem.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbounditem.UpdateDefaultUpdatedAt()
		iiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iiuo *InboundItemUpdateOne) check() error {
	if _, ok := iiuo.mutation.TenantID(); iiuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "InboundItem.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iiuo *InboundItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InboundItemUpdateOne {
	iiuo.modifiers = append(iiuo.modifiers, modifiers...)
	return iiuo
}

func (iiuo *InboundItemUpdateOne) sqlSave(ctx context.Context) (_node *InboundItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inbounditem.Table,
			Columns: inbounditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbounditem.FieldID,
			},
		},
	}
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "InboundItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inbounditem.FieldID)
		for _, f := range fields {
			if !inbounditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != inbounditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inbounditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iiuo.mutation.DeletedAt(); ok {
		_spec.SetField(inbounditem.FieldDeletedAt, field.TypeTime, value)
	}
	if iiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inbounditem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iiuo.mutation.ProductID(); ok {
		_spec.SetField(inbounditem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := iiuo.mutation.AddedProductID(); ok {
		_spec.AddField(inbounditem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := iiuo.mutation.ProductName(); ok {
		_spec.SetField(inbounditem.FieldProductName, field.TypeString, value)
	}
	if value, ok := iiuo.mutation.Sku(); ok {
		_spec.SetField(inbounditem.FieldSku, field.TypeString, value)
	}
	if value, ok := iiuo.mutation.Barcode(); ok {
		_spec.SetField(inbounditem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := iiuo.mutation.Qty(); ok {
		_spec.SetField(inbounditem.FieldQty, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.AddedQty(); ok {
		_spec.AddField(inbounditem.FieldQty, field.TypeInt, value)
	}
	if value, ok := iiuo.mutation.Status(); ok {
		_spec.SetField(inbounditem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iiuo.mutation.AddedStatus(); ok {
		_spec.AddField(inbounditem.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iiuo.mutation.CustomerCode(); ok {
		_spec.SetField(inbounditem.FieldCustomerCode, field.TypeString, value)
	}
	if iiuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iiuo.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iiuo.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.InboundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbound.FieldID,
				},
			},
		}
		edge.Schema = iiuo.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.InboundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbound.FieldID,
				},
			},
		}
		edge.Schema = iiuo.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iiuo.schemaConfig.InboundItem
	ctx = internal.NewSchemaConfigContext(ctx, iiuo.schemaConfig)
	_spec.AddModifiers(iiuo.modifiers...)
	_node = &InboundItem{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inbounditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
