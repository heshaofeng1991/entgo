// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(s string) *UserUpdate {
	uu.mutation.SetType(s)
	return uu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableType(s *string) *UserUpdate {
	if s != nil {
		uu.SetType(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (uu *UserUpdate) SetSelectedWarehouseID(i int64) *UserUpdate {
	uu.mutation.ResetSelectedWarehouseID()
	uu.mutation.SetSelectedWarehouseID(i)
	return uu
}

// SetNillableSelectedWarehouseID sets the "selected_warehouse_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSelectedWarehouseID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetSelectedWarehouseID(*i)
	}
	return uu
}

// AddSelectedWarehouseID adds i to the "selected_warehouse_id" field.
func (uu *UserUpdate) AddSelectedWarehouseID(i int64) *UserUpdate {
	uu.mutation.AddSelectedWarehouseID(i)
	return uu
}

// ClearSelectedWarehouseID clears the value of the "selected_warehouse_id" field.
func (uu *UserUpdate) ClearSelectedWarehouseID() *UserUpdate {
	uu.mutation.ClearSelectedWarehouseID()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetCode sets the "code" field.
func (uu *UserUpdate) SetCode(s string) *UserUpdate {
	uu.mutation.SetCode(s)
	return uu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetCode(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int8) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int8) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int8) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// SetGuideFinished sets the "guide_finished" field.
func (uu *UserUpdate) SetGuideFinished(b bool) *UserUpdate {
	uu.mutation.SetGuideFinished(b)
	return uu
}

// SetNillableGuideFinished sets the "guide_finished" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGuideFinished(b *bool) *UserUpdate {
	if b != nil {
		uu.SetGuideFinished(*b)
	}
	return uu
}

// SetGuideStatus sets the "guide_status" field.
func (uu *UserUpdate) SetGuideStatus(i int) *UserUpdate {
	uu.mutation.ResetGuideStatus()
	uu.mutation.SetGuideStatus(i)
	return uu
}

// SetNillableGuideStatus sets the "guide_status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGuideStatus(i *int) *UserUpdate {
	if i != nil {
		uu.SetGuideStatus(*i)
	}
	return uu
}

// AddGuideStatus adds i to the "guide_status" field.
func (uu *UserUpdate) AddGuideStatus(i int) *UserUpdate {
	uu.mutation.AddGuideStatus(i)
	return uu
}

// SetHsObjectID sets the "hs_object_id" field.
func (uu *UserUpdate) SetHsObjectID(s string) *UserUpdate {
	uu.mutation.SetHsObjectID(s)
	return uu
}

// SetNillableHsObjectID sets the "hs_object_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHsObjectID(s *string) *UserUpdate {
	if s != nil {
		uu.SetHsObjectID(*s)
	}
	return uu
}

// SetQuestions sets the "questions" field.
func (uu *UserUpdate) SetQuestions(s string) *UserUpdate {
	uu.mutation.SetQuestions(s)
	return uu
}

// SetNillableQuestions sets the "questions" field if the given value is not nil.
func (uu *UserUpdate) SetNillableQuestions(s *string) *UserUpdate {
	if s != nil {
		uu.SetQuestions(*s)
	}
	return uu
}

// ClearQuestions clears the value of the "questions" field.
func (uu *UserUpdate) ClearQuestions() *UserUpdate {
	uu.mutation.ClearQuestions()
	return uu
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (uu *UserUpdate) SetLastLoggedTime(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoggedTime(t)
	return uu
}

// SetNillableLastLoggedTime sets the "last_logged_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoggedTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoggedTime(*t)
	}
	return uu
}

// ClearLastLoggedTime clears the value of the "last_logged_time" field.
func (uu *UserUpdate) ClearLastLoggedTime() *UserUpdate {
	uu.mutation.ClearLastLoggedTime()
	return uu
}

// SetWebsite sets the "website" field.
func (uu *UserUpdate) SetWebsite(s string) *UserUpdate {
	uu.mutation.SetWebsite(s)
	return uu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWebsite(s *string) *UserUpdate {
	if s != nil {
		uu.SetWebsite(*s)
	}
	return uu
}

// SetPlatform sets the "platform" field.
func (uu *UserUpdate) SetPlatform(s string) *UserUpdate {
	uu.mutation.SetPlatform(s)
	return uu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePlatform(s *string) *UserUpdate {
	if s != nil {
		uu.SetPlatform(*s)
	}
	return uu
}

// SetConcerns sets the "concerns" field.
func (uu *UserUpdate) SetConcerns(s string) *UserUpdate {
	uu.mutation.SetConcerns(s)
	return uu
}

// SetNillableConcerns sets the "concerns" field if the given value is not nil.
func (uu *UserUpdate) SetNillableConcerns(s *string) *UserUpdate {
	if s != nil {
		uu.SetConcerns(*s)
	}
	return uu
}

// SetStoreCode sets the "store_code" field.
func (uu *UserUpdate) SetStoreCode(s string) *UserUpdate {
	uu.mutation.SetStoreCode(s)
	return uu
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStoreCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetStoreCode(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetSource sets the "source" field.
func (uu *UserUpdate) SetSource(s string) *UserUpdate {
	uu.mutation.SetSource(s)
	return uu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSource(s *string) *UserUpdate {
	if s != nil {
		uu.SetSource(*s)
	}
	return uu
}

// SetSourceTag sets the "source_tag" field.
func (uu *UserUpdate) SetSourceTag(s string) *UserUpdate {
	uu.mutation.SetSourceTag(s)
	return uu
}

// SetNillableSourceTag sets the "source_tag" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSourceTag(s *string) *UserUpdate {
	if s != nil {
		uu.SetSourceTag(*s)
	}
	return uu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (uu *UserUpdate) SetTenantID(id int64) *UserUpdate {
	uu.mutation.SetTenantID(id)
	return uu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) SetTenant(t *Tenant) *UserUpdate {
	return uu.SetTenantID(t.ID)
}

// AddAnnouncementIDs adds the "announcements" edge to the Announcements entity by IDs.
func (uu *UserUpdate) AddAnnouncementIDs(ids ...int64) *UserUpdate {
	uu.mutation.AddAnnouncementIDs(ids...)
	return uu
}

// AddAnnouncements adds the "announcements" edges to the Announcements entity.
func (uu *UserUpdate) AddAnnouncements(a ...*Announcements) *UserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAnnouncementIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) ClearTenant() *UserUpdate {
	uu.mutation.ClearTenant()
	return uu
}

// ClearAnnouncements clears all "announcements" edges to the Announcements entity.
func (uu *UserUpdate) ClearAnnouncements() *UserUpdate {
	uu.mutation.ClearAnnouncements()
	return uu
}

// RemoveAnnouncementIDs removes the "announcements" edge to Announcements entities by IDs.
func (uu *UserUpdate) RemoveAnnouncementIDs(ids ...int64) *UserUpdate {
	uu.mutation.RemoveAnnouncementIDs(ids...)
	return uu
}

// RemoveAnnouncements removes "announcements" edges to Announcements entities.
func (uu *UserUpdate) RemoveAnnouncements(a ...*Announcements) *UserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAnnouncementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized user.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if _, ok := uu.mutation.TenantID(); uu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.SelectedWarehouseID(); ok {
		_spec.SetField(user.FieldSelectedWarehouseID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedSelectedWarehouseID(); ok {
		_spec.AddField(user.FieldSelectedWarehouseID, field.TypeInt64, value)
	}
	if uu.mutation.SelectedWarehouseIDCleared() {
		_spec.ClearField(user.FieldSelectedWarehouseID, field.TypeInt64)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Code(); ok {
		_spec.SetField(user.FieldCode, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.GuideFinished(); ok {
		_spec.SetField(user.FieldGuideFinished, field.TypeBool, value)
	}
	if value, ok := uu.mutation.GuideStatus(); ok {
		_spec.SetField(user.FieldGuideStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedGuideStatus(); ok {
		_spec.AddField(user.FieldGuideStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.HsObjectID(); ok {
		_spec.SetField(user.FieldHsObjectID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Questions(); ok {
		_spec.SetField(user.FieldQuestions, field.TypeString, value)
	}
	if uu.mutation.QuestionsCleared() {
		_spec.ClearField(user.FieldQuestions, field.TypeString)
	}
	if value, ok := uu.mutation.LastLoggedTime(); ok {
		_spec.SetField(user.FieldLastLoggedTime, field.TypeTime, value)
	}
	if uu.mutation.LastLoggedTimeCleared() {
		_spec.ClearField(user.FieldLastLoggedTime, field.TypeTime)
	}
	if value, ok := uu.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
	}
	if value, ok := uu.mutation.Platform(); ok {
		_spec.SetField(user.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uu.mutation.Concerns(); ok {
		_spec.SetField(user.FieldConcerns, field.TypeString, value)
	}
	if value, ok := uu.mutation.StoreCode(); ok {
		_spec.SetField(user.FieldStoreCode, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Source(); ok {
		_spec.SetField(user.FieldSource, field.TypeString, value)
	}
	if value, ok := uu.mutation.SourceTag(); ok {
		_spec.SetField(user.FieldSourceTag, field.TypeString, value)
	}
	if uu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Announcements
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAnnouncementsIDs(); len(nodes) > 0 && !uu.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AnnouncementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uu.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uu.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uu.schemaConfig)
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(s string) *UserUpdateOne {
	uuo.mutation.SetType(s)
	return uuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetType(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (uuo *UserUpdateOne) SetSelectedWarehouseID(i int64) *UserUpdateOne {
	uuo.mutation.ResetSelectedWarehouseID()
	uuo.mutation.SetSelectedWarehouseID(i)
	return uuo
}

// SetNillableSelectedWarehouseID sets the "selected_warehouse_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSelectedWarehouseID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetSelectedWarehouseID(*i)
	}
	return uuo
}

// AddSelectedWarehouseID adds i to the "selected_warehouse_id" field.
func (uuo *UserUpdateOne) AddSelectedWarehouseID(i int64) *UserUpdateOne {
	uuo.mutation.AddSelectedWarehouseID(i)
	return uuo
}

// ClearSelectedWarehouseID clears the value of the "selected_warehouse_id" field.
func (uuo *UserUpdateOne) ClearSelectedWarehouseID() *UserUpdateOne {
	uuo.mutation.ClearSelectedWarehouseID()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetCode sets the "code" field.
func (uuo *UserUpdateOne) SetCode(s string) *UserUpdateOne {
	uuo.mutation.SetCode(s)
	return uuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCode(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int8) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int8) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int8) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// SetGuideFinished sets the "guide_finished" field.
func (uuo *UserUpdateOne) SetGuideFinished(b bool) *UserUpdateOne {
	uuo.mutation.SetGuideFinished(b)
	return uuo
}

// SetNillableGuideFinished sets the "guide_finished" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGuideFinished(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetGuideFinished(*b)
	}
	return uuo
}

// SetGuideStatus sets the "guide_status" field.
func (uuo *UserUpdateOne) SetGuideStatus(i int) *UserUpdateOne {
	uuo.mutation.ResetGuideStatus()
	uuo.mutation.SetGuideStatus(i)
	return uuo
}

// SetNillableGuideStatus sets the "guide_status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGuideStatus(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGuideStatus(*i)
	}
	return uuo
}

// AddGuideStatus adds i to the "guide_status" field.
func (uuo *UserUpdateOne) AddGuideStatus(i int) *UserUpdateOne {
	uuo.mutation.AddGuideStatus(i)
	return uuo
}

// SetHsObjectID sets the "hs_object_id" field.
func (uuo *UserUpdateOne) SetHsObjectID(s string) *UserUpdateOne {
	uuo.mutation.SetHsObjectID(s)
	return uuo
}

// SetNillableHsObjectID sets the "hs_object_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHsObjectID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHsObjectID(*s)
	}
	return uuo
}

// SetQuestions sets the "questions" field.
func (uuo *UserUpdateOne) SetQuestions(s string) *UserUpdateOne {
	uuo.mutation.SetQuestions(s)
	return uuo
}

// SetNillableQuestions sets the "questions" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableQuestions(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetQuestions(*s)
	}
	return uuo
}

// ClearQuestions clears the value of the "questions" field.
func (uuo *UserUpdateOne) ClearQuestions() *UserUpdateOne {
	uuo.mutation.ClearQuestions()
	return uuo
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (uuo *UserUpdateOne) SetLastLoggedTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoggedTime(t)
	return uuo
}

// SetNillableLastLoggedTime sets the "last_logged_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoggedTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoggedTime(*t)
	}
	return uuo
}

// ClearLastLoggedTime clears the value of the "last_logged_time" field.
func (uuo *UserUpdateOne) ClearLastLoggedTime() *UserUpdateOne {
	uuo.mutation.ClearLastLoggedTime()
	return uuo
}

// SetWebsite sets the "website" field.
func (uuo *UserUpdateOne) SetWebsite(s string) *UserUpdateOne {
	uuo.mutation.SetWebsite(s)
	return uuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWebsite(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetWebsite(*s)
	}
	return uuo
}

// SetPlatform sets the "platform" field.
func (uuo *UserUpdateOne) SetPlatform(s string) *UserUpdateOne {
	uuo.mutation.SetPlatform(s)
	return uuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePlatform(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPlatform(*s)
	}
	return uuo
}

// SetConcerns sets the "concerns" field.
func (uuo *UserUpdateOne) SetConcerns(s string) *UserUpdateOne {
	uuo.mutation.SetConcerns(s)
	return uuo
}

// SetNillableConcerns sets the "concerns" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableConcerns(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetConcerns(*s)
	}
	return uuo
}

// SetStoreCode sets the "store_code" field.
func (uuo *UserUpdateOne) SetStoreCode(s string) *UserUpdateOne {
	uuo.mutation.SetStoreCode(s)
	return uuo
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStoreCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetStoreCode(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetSource sets the "source" field.
func (uuo *UserUpdateOne) SetSource(s string) *UserUpdateOne {
	uuo.mutation.SetSource(s)
	return uuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSource(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSource(*s)
	}
	return uuo
}

// SetSourceTag sets the "source_tag" field.
func (uuo *UserUpdateOne) SetSourceTag(s string) *UserUpdateOne {
	uuo.mutation.SetSourceTag(s)
	return uuo
}

// SetNillableSourceTag sets the "source_tag" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSourceTag(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSourceTag(*s)
	}
	return uuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (uuo *UserUpdateOne) SetTenantID(id int64) *UserUpdateOne {
	uuo.mutation.SetTenantID(id)
	return uuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) SetTenant(t *Tenant) *UserUpdateOne {
	return uuo.SetTenantID(t.ID)
}

// AddAnnouncementIDs adds the "announcements" edge to the Announcements entity by IDs.
func (uuo *UserUpdateOne) AddAnnouncementIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.AddAnnouncementIDs(ids...)
	return uuo
}

// AddAnnouncements adds the "announcements" edges to the Announcements entity.
func (uuo *UserUpdateOne) AddAnnouncements(a ...*Announcements) *UserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAnnouncementIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) ClearTenant() *UserUpdateOne {
	uuo.mutation.ClearTenant()
	return uuo
}

// ClearAnnouncements clears all "announcements" edges to the Announcements entity.
func (uuo *UserUpdateOne) ClearAnnouncements() *UserUpdateOne {
	uuo.mutation.ClearAnnouncements()
	return uuo
}

// RemoveAnnouncementIDs removes the "announcements" edge to Announcements entities by IDs.
func (uuo *UserUpdateOne) RemoveAnnouncementIDs(ids ...int64) *UserUpdateOne {
	uuo.mutation.RemoveAnnouncementIDs(ids...)
	return uuo
}

// RemoveAnnouncements removes "announcements" edges to Announcements entities.
func (uuo *UserUpdateOne) RemoveAnnouncements(a ...*Announcements) *UserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAnnouncementIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized user.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if _, ok := uuo.mutation.TenantID(); uuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SelectedWarehouseID(); ok {
		_spec.SetField(user.FieldSelectedWarehouseID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedSelectedWarehouseID(); ok {
		_spec.AddField(user.FieldSelectedWarehouseID, field.TypeInt64, value)
	}
	if uuo.mutation.SelectedWarehouseIDCleared() {
		_spec.ClearField(user.FieldSelectedWarehouseID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Code(); ok {
		_spec.SetField(user.FieldCode, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.GuideFinished(); ok {
		_spec.SetField(user.FieldGuideFinished, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.GuideStatus(); ok {
		_spec.SetField(user.FieldGuideStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedGuideStatus(); ok {
		_spec.AddField(user.FieldGuideStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.HsObjectID(); ok {
		_spec.SetField(user.FieldHsObjectID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Questions(); ok {
		_spec.SetField(user.FieldQuestions, field.TypeString, value)
	}
	if uuo.mutation.QuestionsCleared() {
		_spec.ClearField(user.FieldQuestions, field.TypeString)
	}
	if value, ok := uuo.mutation.LastLoggedTime(); ok {
		_spec.SetField(user.FieldLastLoggedTime, field.TypeTime, value)
	}
	if uuo.mutation.LastLoggedTimeCleared() {
		_spec.ClearField(user.FieldLastLoggedTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Platform(); ok {
		_spec.SetField(user.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Concerns(); ok {
		_spec.SetField(user.FieldConcerns, field.TypeString, value)
	}
	if value, ok := uuo.mutation.StoreCode(); ok {
		_spec.SetField(user.FieldStoreCode, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Source(); ok {
		_spec.SetField(user.FieldSource, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SourceTag(); ok {
		_spec.SetField(user.FieldSourceTag, field.TypeString, value)
	}
	if uuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Announcements
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAnnouncementsIDs(); len(nodes) > 0 && !uuo.mutation.AnnouncementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AnnouncementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uuo.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uuo.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uuo.schemaConfig)
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
