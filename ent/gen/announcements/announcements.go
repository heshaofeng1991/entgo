// Code generated by ent, DO NOT EDIT.

package announcements

import (
	"time"
)

const (
	// Label holds the string label denoting the announcements type in the database.
	Label = "announcements"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// FieldEffectiveTime holds the string denoting the effective_time field in the database.
	FieldEffectiveTime = "effective_time"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the announcements in the database.
	Table = "announcements"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "announcements"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "create_by"
)

// Columns holds all SQL columns for announcements fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTitle,
	FieldContent,
	FieldStatus,
	FieldIndex,
	FieldCreateBy,
	FieldExpiration,
	FieldEffectiveTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultContent holds the default value on creation for the "content" field.
	DefaultContent string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultIndex holds the default value on creation for the "index" field.
	DefaultIndex int
	// DefaultCreateBy holds the default value on creation for the "create_by" field.
	DefaultCreateBy int64
	// CreateByValidator is a validator for the "create_by" field. It is called by the builders before save.
	CreateByValidator func(int64) error
)
