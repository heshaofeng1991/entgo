// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/attribute"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// AttributeUpdate is the builder for updating Attribute entities.
type AttributeUpdate struct {
	config
	hooks     []Hook
	mutation  *AttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AttributeUpdate builder.
func (au *AttributeUpdate) Where(ps ...predicate.Attribute) *AttributeUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetType sets the "type" field.
func (au *AttributeUpdate) SetType(i int8) *AttributeUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(i)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableType(i *int8) *AttributeUpdate {
	if i != nil {
		au.SetType(*i)
	}
	return au
}

// AddType adds i to the "type" field.
func (au *AttributeUpdate) AddType(i int8) *AttributeUpdate {
	au.mutation.AddType(i)
	return au
}

// SetValue sets the "value" field.
func (au *AttributeUpdate) SetValue(s string) *AttributeUpdate {
	au.mutation.SetValue(s)
	return au
}

// SetDescription sets the "description" field.
func (au *AttributeUpdate) SetDescription(s string) *AttributeUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableDescription(s *string) *AttributeUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AttributeUpdate) SetStatus(i int8) *AttributeUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableStatus(i *int8) *AttributeUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AttributeUpdate) AddStatus(i int8) *AttributeUpdate {
	au.mutation.AddStatus(i)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AttributeUpdate) SetCreatedAt(t time.Time) *AttributeUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableCreatedAt(t *time.Time) *AttributeUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttributeUpdate) SetUpdatedAt(t time.Time) *AttributeUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttributeUpdate) SetDeletedAt(t time.Time) *AttributeUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableDeletedAt(t *time.Time) *AttributeUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttributeUpdate) ClearDeletedAt() *AttributeUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// Mutation returns the AttributeMutation object of the builder.
func (au *AttributeUpdate) Mutation() *AttributeMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttributeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttributeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttributeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AttributeUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := attribute.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AttributeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttributeUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attribute.Table,
			Columns: attribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: attribute.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(attribute.FieldType, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(attribute.FieldType, field.TypeInt8, value)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(attribute.FieldValue, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(attribute.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(attribute.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(attribute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(attribute.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(attribute.FieldDeletedAt, field.TypeTime)
	}
	_spec.Node.Schema = au.schemaConfig.Attribute
	ctx = internal.NewSchemaConfigContext(ctx, au.schemaConfig)
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AttributeUpdateOne is the builder for updating a single Attribute entity.
type AttributeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (auo *AttributeUpdateOne) SetType(i int8) *AttributeUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(i)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableType(i *int8) *AttributeUpdateOne {
	if i != nil {
		auo.SetType(*i)
	}
	return auo
}

// AddType adds i to the "type" field.
func (auo *AttributeUpdateOne) AddType(i int8) *AttributeUpdateOne {
	auo.mutation.AddType(i)
	return auo
}

// SetValue sets the "value" field.
func (auo *AttributeUpdateOne) SetValue(s string) *AttributeUpdateOne {
	auo.mutation.SetValue(s)
	return auo
}

// SetDescription sets the "description" field.
func (auo *AttributeUpdateOne) SetDescription(s string) *AttributeUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableDescription(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AttributeUpdateOne) SetStatus(i int8) *AttributeUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableStatus(i *int8) *AttributeUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AttributeUpdateOne) AddStatus(i int8) *AttributeUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AttributeUpdateOne) SetCreatedAt(t time.Time) *AttributeUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableCreatedAt(t *time.Time) *AttributeUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttributeUpdateOne) SetUpdatedAt(t time.Time) *AttributeUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttributeUpdateOne) SetDeletedAt(t time.Time) *AttributeUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableDeletedAt(t *time.Time) *AttributeUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttributeUpdateOne) ClearDeletedAt() *AttributeUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// Mutation returns the AttributeMutation object of the builder.
func (auo *AttributeUpdateOne) Mutation() *AttributeMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttributeUpdateOne) Select(field string, fields ...string) *AttributeUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attribute entity.
func (auo *AttributeUpdateOne) Save(ctx context.Context) (*Attribute, error) {
	var (
		err  error
		node *Attribute
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attribute)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttributeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttributeUpdateOne) SaveX(ctx context.Context) *Attribute {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttributeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AttributeUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := attribute.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AttributeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AttributeUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AttributeUpdateOne) sqlSave(ctx context.Context) (_node *Attribute, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attribute.Table,
			Columns: attribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: attribute.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Attribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attribute.FieldID)
		for _, f := range fields {
			if !attribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != attribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(attribute.FieldType, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(attribute.FieldType, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(attribute.FieldValue, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(attribute.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(attribute.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(attribute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(attribute.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(attribute.FieldDeletedAt, field.TypeTime)
	}
	_spec.Node.Schema = auo.schemaConfig.Attribute
	ctx = internal.NewSchemaConfigContext(ctx, auo.schemaConfig)
	_spec.AddModifiers(auo.modifiers...)
	_node = &Attribute{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
