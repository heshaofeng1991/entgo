// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
)

// ChannelCreate is the builder for creating a Channel entity.
type ChannelCreate struct {
	config
	mutation *ChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChannelCreate) SetCreatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableCreatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChannelCreate) SetUpdatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableUpdatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ChannelCreate) SetDeletedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableDeletedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetWarehouseID sets the "warehouse_id" field.
func (cc *ChannelCreate) SetWarehouseID(i int64) *ChannelCreate {
	cc.mutation.SetWarehouseID(i)
	return cc
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableWarehouseID(i *int64) *ChannelCreate {
	if i != nil {
		cc.SetWarehouseID(*i)
	}
	return cc
}

// SetCourierPlatform sets the "courier_platform" field.
func (cc *ChannelCreate) SetCourierPlatform(s string) *ChannelCreate {
	cc.mutation.SetCourierPlatform(s)
	return cc
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableCourierPlatform(s *string) *ChannelCreate {
	if s != nil {
		cc.SetCourierPlatform(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ChannelCreate) SetName(s string) *ChannelCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *ChannelCreate) SetCode(s string) *ChannelCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetType sets the "type" field.
func (cc *ChannelCreate) SetType(i int8) *ChannelCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (cc *ChannelCreate) SetQuotationCurrency(s string) *ChannelCreate {
	cc.mutation.SetQuotationCurrency(s)
	return cc
}

// SetNillableQuotationCurrency sets the "quotation_currency" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableQuotationCurrency(s *string) *ChannelCreate {
	if s != nil {
		cc.SetQuotationCurrency(*s)
	}
	return cc
}

// SetVolumeFactor sets the "volume_factor" field.
func (cc *ChannelCreate) SetVolumeFactor(i int32) *ChannelCreate {
	cc.mutation.SetVolumeFactor(i)
	return cc
}

// SetNillableVolumeFactor sets the "volume_factor" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableVolumeFactor(i *int32) *ChannelCreate {
	if i != nil {
		cc.SetVolumeFactor(*i)
	}
	return cc
}

// SetEnName sets the "en_name" field.
func (cc *ChannelCreate) SetEnName(s string) *ChannelCreate {
	cc.mutation.SetEnName(s)
	return cc
}

// SetNillableEnName sets the "en_name" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableEnName(s *string) *ChannelCreate {
	if s != nil {
		cc.SetEnName(*s)
	}
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *ChannelCreate) SetDisplayName(s string) *ChannelCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableDisplayName(s *string) *ChannelCreate {
	if s != nil {
		cc.SetDisplayName(*s)
	}
	return cc
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (cc *ChannelCreate) SetHasTrackingNumber(i int8) *ChannelCreate {
	cc.mutation.SetHasTrackingNumber(i)
	return cc
}

// SetNillableHasTrackingNumber sets the "has_tracking_number" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableHasTrackingNumber(i *int8) *ChannelCreate {
	if i != nil {
		cc.SetHasTrackingNumber(*i)
	}
	return cc
}

// SetMinNormalDays sets the "min_normal_days" field.
func (cc *ChannelCreate) SetMinNormalDays(i int32) *ChannelCreate {
	cc.mutation.SetMinNormalDays(i)
	return cc
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMinNormalDays(i *int32) *ChannelCreate {
	if i != nil {
		cc.SetMinNormalDays(*i)
	}
	return cc
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (cc *ChannelCreate) SetMaxNormalDays(i int32) *ChannelCreate {
	cc.mutation.SetMaxNormalDays(i)
	return cc
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMaxNormalDays(i *int32) *ChannelCreate {
	if i != nil {
		cc.SetMaxNormalDays(*i)
	}
	return cc
}

// SetMaxWeight sets the "max_weight" field.
func (cc *ChannelCreate) SetMaxWeight(i int) *ChannelCreate {
	cc.mutation.SetMaxWeight(i)
	return cc
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMaxWeight(i *int) *ChannelCreate {
	if i != nil {
		cc.SetMaxWeight(*i)
	}
	return cc
}

// SetMaxLength sets the "max_length" field.
func (cc *ChannelCreate) SetMaxLength(i int) *ChannelCreate {
	cc.mutation.SetMaxLength(i)
	return cc
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMaxLength(i *int) *ChannelCreate {
	if i != nil {
		cc.SetMaxLength(*i)
	}
	return cc
}

// SetMinLength sets the "min_length" field.
func (cc *ChannelCreate) SetMinLength(i int) *ChannelCreate {
	cc.mutation.SetMinLength(i)
	return cc
}

// SetNillableMinLength sets the "min_length" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMinLength(i *int) *ChannelCreate {
	if i != nil {
		cc.SetMinLength(*i)
	}
	return cc
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (cc *ChannelCreate) SetMaxThreeSideSum(i int) *ChannelCreate {
	cc.mutation.SetMaxThreeSideSum(i)
	return cc
}

// SetNillableMaxThreeSideSum sets the "max_three_side_sum" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableMaxThreeSideSum(i *int) *ChannelCreate {
	if i != nil {
		cc.SetMaxThreeSideSum(*i)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *ChannelCreate) SetDescription(s string) *ChannelCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableDescription(s *string) *ChannelCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetSortingPort sets the "sorting_port" field.
func (cc *ChannelCreate) SetSortingPort(i int32) *ChannelCreate {
	cc.mutation.SetSortingPort(i)
	return cc
}

// SetNillableSortingPort sets the "sorting_port" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableSortingPort(i *int32) *ChannelCreate {
	if i != nil {
		cc.SetSortingPort(*i)
	}
	return cc
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (cc *ChannelCreate) SetPrepayTariff(b bool) *ChannelCreate {
	cc.mutation.SetPrepayTariff(b)
	return cc
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (cc *ChannelCreate) SetNillablePrepayTariff(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetPrepayTariff(*b)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ChannelCreate) SetStatus(i int8) *ChannelCreate {
	cc.mutation.SetStatus(i)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableStatus(i *int8) *ChannelCreate {
	if i != nil {
		cc.SetStatus(*i)
	}
	return cc
}

// SetTest sets the "test" field.
func (cc *ChannelCreate) SetTest(b bool) *ChannelCreate {
	cc.mutation.SetTest(b)
	return cc
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableTest(b *bool) *ChannelCreate {
	if b != nil {
		cc.SetTest(*b)
	}
	return cc
}

// SetOptions sets the "options" field.
func (cc *ChannelCreate) SetOptions(s string) *ChannelCreate {
	cc.mutation.SetOptions(s)
	return cc
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableOptions(s *string) *ChannelCreate {
	if s != nil {
		cc.SetOptions(*s)
	}
	return cc
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (cc *ChannelCreate) SetExcludeAttributes(s string) *ChannelCreate {
	cc.mutation.SetExcludeAttributes(s)
	return cc
}

// SetNillableExcludeAttributes sets the "exclude_attributes" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableExcludeAttributes(s *string) *ChannelCreate {
	if s != nil {
		cc.SetExcludeAttributes(*s)
	}
	return cc
}

// SetBattery sets the "battery" field.
func (cc *ChannelCreate) SetBattery(i int8) *ChannelCreate {
	cc.mutation.SetBattery(i)
	return cc
}

// SetVirtual sets the "virtual" field.
func (cc *ChannelCreate) SetVirtual(i int8) *ChannelCreate {
	cc.mutation.SetVirtual(i)
	return cc
}

// SetNillableVirtual sets the "virtual" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableVirtual(i *int8) *ChannelCreate {
	if i != nil {
		cc.SetVirtual(*i)
	}
	return cc
}

// SetChannelType sets the "channel_type" field.
func (cc *ChannelCreate) SetChannelType(i int8) *ChannelCreate {
	cc.mutation.SetChannelType(i)
	return cc
}

// SetNillableChannelType sets the "channel_type" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableChannelType(i *int8) *ChannelCreate {
	if i != nil {
		cc.SetChannelType(*i)
	}
	return cc
}

// SetDeliverDuty sets the "deliver_duty" field.
func (cc *ChannelCreate) SetDeliverDuty(s string) *ChannelCreate {
	cc.mutation.SetDeliverDuty(s)
	return cc
}

// SetNillableDeliverDuty sets the "deliver_duty" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableDeliverDuty(s *string) *ChannelCreate {
	if s != nil {
		cc.SetDeliverDuty(*s)
	}
	return cc
}

// SetSpecial sets the "special" field.
func (cc *ChannelCreate) SetSpecial(i int8) *ChannelCreate {
	cc.mutation.SetSpecial(i)
	return cc
}

// SetNillableSpecial sets the "special" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableSpecial(i *int8) *ChannelCreate {
	if i != nil {
		cc.SetSpecial(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChannelCreate) SetID(i int64) *ChannelCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddChannelCostIDs adds the "channel_costs" edge to the ChannelCost entity by IDs.
func (cc *ChannelCreate) AddChannelCostIDs(ids ...int64) *ChannelCreate {
	cc.mutation.AddChannelCostIDs(ids...)
	return cc
}

// AddChannelCosts adds the "channel_costs" edges to the ChannelCost entity.
func (cc *ChannelCreate) AddChannelCosts(c ...*ChannelCost) *ChannelCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChannelCostIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cc *ChannelCreate) AddOrderIDs(ids ...int64) *ChannelCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the Order entity.
func (cc *ChannelCreate) AddOrders(o ...*Order) *ChannelCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cc *ChannelCreate) Mutation() *ChannelMutation {
	return cc.mutation
}

// Save creates the Channel in the database.
func (cc *ChannelCreate) Save(ctx context.Context) (*Channel, error) {
	var (
		err  error
		node *Channel
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Channel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChannelCreate) SaveX(ctx context.Context) *Channel {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChannelCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChannelCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChannelCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := channel.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := channel.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.WarehouseID(); !ok {
		v := channel.DefaultWarehouseID
		cc.mutation.SetWarehouseID(v)
	}
	if _, ok := cc.mutation.CourierPlatform(); !ok {
		v := channel.DefaultCourierPlatform
		cc.mutation.SetCourierPlatform(v)
	}
	if _, ok := cc.mutation.QuotationCurrency(); !ok {
		v := channel.DefaultQuotationCurrency
		cc.mutation.SetQuotationCurrency(v)
	}
	if _, ok := cc.mutation.VolumeFactor(); !ok {
		v := channel.DefaultVolumeFactor
		cc.mutation.SetVolumeFactor(v)
	}
	if _, ok := cc.mutation.EnName(); !ok {
		v := channel.DefaultEnName
		cc.mutation.SetEnName(v)
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		v := channel.DefaultDisplayName
		cc.mutation.SetDisplayName(v)
	}
	if _, ok := cc.mutation.HasTrackingNumber(); !ok {
		v := channel.DefaultHasTrackingNumber
		cc.mutation.SetHasTrackingNumber(v)
	}
	if _, ok := cc.mutation.MinNormalDays(); !ok {
		v := channel.DefaultMinNormalDays
		cc.mutation.SetMinNormalDays(v)
	}
	if _, ok := cc.mutation.MaxNormalDays(); !ok {
		v := channel.DefaultMaxNormalDays
		cc.mutation.SetMaxNormalDays(v)
	}
	if _, ok := cc.mutation.MaxWeight(); !ok {
		v := channel.DefaultMaxWeight
		cc.mutation.SetMaxWeight(v)
	}
	if _, ok := cc.mutation.MaxLength(); !ok {
		v := channel.DefaultMaxLength
		cc.mutation.SetMaxLength(v)
	}
	if _, ok := cc.mutation.MinLength(); !ok {
		v := channel.DefaultMinLength
		cc.mutation.SetMinLength(v)
	}
	if _, ok := cc.mutation.MaxThreeSideSum(); !ok {
		v := channel.DefaultMaxThreeSideSum
		cc.mutation.SetMaxThreeSideSum(v)
	}
	if _, ok := cc.mutation.Description(); !ok {
		v := channel.DefaultDescription
		cc.mutation.SetDescription(v)
	}
	if _, ok := cc.mutation.SortingPort(); !ok {
		v := channel.DefaultSortingPort
		cc.mutation.SetSortingPort(v)
	}
	if _, ok := cc.mutation.PrepayTariff(); !ok {
		v := channel.DefaultPrepayTariff
		cc.mutation.SetPrepayTariff(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := channel.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Test(); !ok {
		v := channel.DefaultTest
		cc.mutation.SetTest(v)
	}
	if _, ok := cc.mutation.Virtual(); !ok {
		v := channel.DefaultVirtual
		cc.mutation.SetVirtual(v)
	}
	if _, ok := cc.mutation.ChannelType(); !ok {
		v := channel.DefaultChannelType
		cc.mutation.SetChannelType(v)
	}
	if _, ok := cc.mutation.DeliverDuty(); !ok {
		v := channel.DefaultDeliverDuty
		cc.mutation.SetDeliverDuty(v)
	}
	if _, ok := cc.mutation.Special(); !ok {
		v := channel.DefaultSpecial
		cc.mutation.SetSpecial(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChannelCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Channel.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Channel.updated_at"`)}
	}
	if _, ok := cc.mutation.WarehouseID(); !ok {
		return &ValidationError{Name: "warehouse_id", err: errors.New(`gen: missing required field "Channel.warehouse_id"`)}
	}
	if _, ok := cc.mutation.CourierPlatform(); !ok {
		return &ValidationError{Name: "courier_platform", err: errors.New(`gen: missing required field "Channel.courier_platform"`)}
	}
	if v, ok := cc.mutation.CourierPlatform(); ok {
		if err := channel.CourierPlatformValidator(v); err != nil {
			return &ValidationError{Name: "courier_platform", err: fmt.Errorf(`gen: validator failed for field "Channel.courier_platform": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Channel.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := channel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Channel.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "Channel.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := channel.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`gen: validator failed for field "Channel.code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "Channel.type"`)}
	}
	if _, ok := cc.mutation.QuotationCurrency(); !ok {
		return &ValidationError{Name: "quotation_currency", err: errors.New(`gen: missing required field "Channel.quotation_currency"`)}
	}
	if v, ok := cc.mutation.QuotationCurrency(); ok {
		if err := channel.QuotationCurrencyValidator(v); err != nil {
			return &ValidationError{Name: "quotation_currency", err: fmt.Errorf(`gen: validator failed for field "Channel.quotation_currency": %w`, err)}
		}
	}
	if _, ok := cc.mutation.VolumeFactor(); !ok {
		return &ValidationError{Name: "volume_factor", err: errors.New(`gen: missing required field "Channel.volume_factor"`)}
	}
	if _, ok := cc.mutation.EnName(); !ok {
		return &ValidationError{Name: "en_name", err: errors.New(`gen: missing required field "Channel.en_name"`)}
	}
	if v, ok := cc.mutation.EnName(); ok {
		if err := channel.EnNameValidator(v); err != nil {
			return &ValidationError{Name: "en_name", err: fmt.Errorf(`gen: validator failed for field "Channel.en_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`gen: missing required field "Channel.display_name"`)}
	}
	if v, ok := cc.mutation.DisplayName(); ok {
		if err := channel.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`gen: validator failed for field "Channel.display_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.HasTrackingNumber(); !ok {
		return &ValidationError{Name: "has_tracking_number", err: errors.New(`gen: missing required field "Channel.has_tracking_number"`)}
	}
	if _, ok := cc.mutation.MinNormalDays(); !ok {
		return &ValidationError{Name: "min_normal_days", err: errors.New(`gen: missing required field "Channel.min_normal_days"`)}
	}
	if _, ok := cc.mutation.MaxNormalDays(); !ok {
		return &ValidationError{Name: "max_normal_days", err: errors.New(`gen: missing required field "Channel.max_normal_days"`)}
	}
	if _, ok := cc.mutation.MaxWeight(); !ok {
		return &ValidationError{Name: "max_weight", err: errors.New(`gen: missing required field "Channel.max_weight"`)}
	}
	if _, ok := cc.mutation.MaxLength(); !ok {
		return &ValidationError{Name: "max_length", err: errors.New(`gen: missing required field "Channel.max_length"`)}
	}
	if _, ok := cc.mutation.MinLength(); !ok {
		return &ValidationError{Name: "min_length", err: errors.New(`gen: missing required field "Channel.min_length"`)}
	}
	if _, ok := cc.mutation.MaxThreeSideSum(); !ok {
		return &ValidationError{Name: "max_three_side_sum", err: errors.New(`gen: missing required field "Channel.max_three_side_sum"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`gen: missing required field "Channel.description"`)}
	}
	if _, ok := cc.mutation.SortingPort(); !ok {
		return &ValidationError{Name: "sorting_port", err: errors.New(`gen: missing required field "Channel.sorting_port"`)}
	}
	if _, ok := cc.mutation.PrepayTariff(); !ok {
		return &ValidationError{Name: "prepay_tariff", err: errors.New(`gen: missing required field "Channel.prepay_tariff"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Channel.status"`)}
	}
	if _, ok := cc.mutation.Test(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`gen: missing required field "Channel.test"`)}
	}
	if _, ok := cc.mutation.Battery(); !ok {
		return &ValidationError{Name: "battery", err: errors.New(`gen: missing required field "Channel.battery"`)}
	}
	if _, ok := cc.mutation.Virtual(); !ok {
		return &ValidationError{Name: "virtual", err: errors.New(`gen: missing required field "Channel.virtual"`)}
	}
	if _, ok := cc.mutation.ChannelType(); !ok {
		return &ValidationError{Name: "channel_type", err: errors.New(`gen: missing required field "Channel.channel_type"`)}
	}
	if _, ok := cc.mutation.DeliverDuty(); !ok {
		return &ValidationError{Name: "deliver_duty", err: errors.New(`gen: missing required field "Channel.deliver_duty"`)}
	}
	if _, ok := cc.mutation.Special(); !ok {
		return &ValidationError{Name: "special", err: errors.New(`gen: missing required field "Channel.special"`)}
	}
	return nil
}

func (cc *ChannelCreate) sqlSave(ctx context.Context) (*Channel, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cc *ChannelCreate) createSpec() (*Channel, *sqlgraph.CreateSpec) {
	var (
		_node = &Channel{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: channel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channel.FieldID,
			},
		}
	)
	_spec.Schema = cc.schemaConfig.Channel
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(channel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.WarehouseID(); ok {
		_spec.SetField(channel.FieldWarehouseID, field.TypeInt64, value)
		_node.WarehouseID = value
	}
	if value, ok := cc.mutation.CourierPlatform(); ok {
		_spec.SetField(channel.FieldCourierPlatform, field.TypeString, value)
		_node.CourierPlatform = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(channel.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.QuotationCurrency(); ok {
		_spec.SetField(channel.FieldQuotationCurrency, field.TypeString, value)
		_node.QuotationCurrency = value
	}
	if value, ok := cc.mutation.VolumeFactor(); ok {
		_spec.SetField(channel.FieldVolumeFactor, field.TypeInt32, value)
		_node.VolumeFactor = value
	}
	if value, ok := cc.mutation.EnName(); ok {
		_spec.SetField(channel.FieldEnName, field.TypeString, value)
		_node.EnName = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(channel.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.HasTrackingNumber(); ok {
		_spec.SetField(channel.FieldHasTrackingNumber, field.TypeInt8, value)
		_node.HasTrackingNumber = value
	}
	if value, ok := cc.mutation.MinNormalDays(); ok {
		_spec.SetField(channel.FieldMinNormalDays, field.TypeInt32, value)
		_node.MinNormalDays = value
	}
	if value, ok := cc.mutation.MaxNormalDays(); ok {
		_spec.SetField(channel.FieldMaxNormalDays, field.TypeInt32, value)
		_node.MaxNormalDays = value
	}
	if value, ok := cc.mutation.MaxWeight(); ok {
		_spec.SetField(channel.FieldMaxWeight, field.TypeInt, value)
		_node.MaxWeight = value
	}
	if value, ok := cc.mutation.MaxLength(); ok {
		_spec.SetField(channel.FieldMaxLength, field.TypeInt, value)
		_node.MaxLength = value
	}
	if value, ok := cc.mutation.MinLength(); ok {
		_spec.SetField(channel.FieldMinLength, field.TypeInt, value)
		_node.MinLength = value
	}
	if value, ok := cc.mutation.MaxThreeSideSum(); ok {
		_spec.SetField(channel.FieldMaxThreeSideSum, field.TypeInt, value)
		_node.MaxThreeSideSum = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(channel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.SortingPort(); ok {
		_spec.SetField(channel.FieldSortingPort, field.TypeInt32, value)
		_node.SortingPort = value
	}
	if value, ok := cc.mutation.PrepayTariff(); ok {
		_spec.SetField(channel.FieldPrepayTariff, field.TypeBool, value)
		_node.PrepayTariff = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(channel.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Test(); ok {
		_spec.SetField(channel.FieldTest, field.TypeBool, value)
		_node.Test = value
	}
	if value, ok := cc.mutation.Options(); ok {
		_spec.SetField(channel.FieldOptions, field.TypeString, value)
		_node.Options = value
	}
	if value, ok := cc.mutation.ExcludeAttributes(); ok {
		_spec.SetField(channel.FieldExcludeAttributes, field.TypeString, value)
		_node.ExcludeAttributes = value
	}
	if value, ok := cc.mutation.Battery(); ok {
		_spec.SetField(channel.FieldBattery, field.TypeInt8, value)
		_node.Battery = value
	}
	if value, ok := cc.mutation.Virtual(); ok {
		_spec.SetField(channel.FieldVirtual, field.TypeInt8, value)
		_node.Virtual = value
	}
	if value, ok := cc.mutation.ChannelType(); ok {
		_spec.SetField(channel.FieldChannelType, field.TypeInt8, value)
		_node.ChannelType = value
	}
	if value, ok := cc.mutation.DeliverDuty(); ok {
		_spec.SetField(channel.FieldDeliverDuty, field.TypeString, value)
		_node.DeliverDuty = value
	}
	if value, ok := cc.mutation.Special(); ok {
		_spec.SetField(channel.FieldSpecial, field.TypeInt8, value)
		_node.Special = value
	}
	if nodes := cc.mutation.ChannelCostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channelcost.FieldID,
				},
			},
		}
		edge.Schema = cc.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = cc.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Channel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ChannelCreate) OnConflict(opts ...sql.ConflictOption) *ChannelUpsertOne {
	cc.conflict = opts
	return &ChannelUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChannelCreate) OnConflictColumns(columns ...string) *ChannelUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChannelUpsertOne{
		create: cc,
	}
}

type (
	// ChannelUpsertOne is the builder for "upsert"-ing
	//  one Channel node.
	ChannelUpsertOne struct {
		create *ChannelCreate
	}

	// ChannelUpsert is the "OnConflict" setter.
	ChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsert) SetUpdatedAt(v time.Time) *ChannelUpsert {
	u.Set(channel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateUpdatedAt() *ChannelUpsert {
	u.SetExcluded(channel.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelUpsert) SetDeletedAt(v time.Time) *ChannelUpsert {
	u.Set(channel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateDeletedAt() *ChannelUpsert {
	u.SetExcluded(channel.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelUpsert) ClearDeletedAt() *ChannelUpsert {
	u.SetNull(channel.FieldDeletedAt)
	return u
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *ChannelUpsert) SetWarehouseID(v int64) *ChannelUpsert {
	u.Set(channel.FieldWarehouseID, v)
	return u
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateWarehouseID() *ChannelUpsert {
	u.SetExcluded(channel.FieldWarehouseID)
	return u
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *ChannelUpsert) AddWarehouseID(v int64) *ChannelUpsert {
	u.Add(channel.FieldWarehouseID, v)
	return u
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *ChannelUpsert) SetCourierPlatform(v string) *ChannelUpsert {
	u.Set(channel.FieldCourierPlatform, v)
	return u
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateCourierPlatform() *ChannelUpsert {
	u.SetExcluded(channel.FieldCourierPlatform)
	return u
}

// SetName sets the "name" field.
func (u *ChannelUpsert) SetName(v string) *ChannelUpsert {
	u.Set(channel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateName() *ChannelUpsert {
	u.SetExcluded(channel.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *ChannelUpsert) SetCode(v string) *ChannelUpsert {
	u.Set(channel.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateCode() *ChannelUpsert {
	u.SetExcluded(channel.FieldCode)
	return u
}

// SetType sets the "type" field.
func (u *ChannelUpsert) SetType(v int8) *ChannelUpsert {
	u.Set(channel.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateType() *ChannelUpsert {
	u.SetExcluded(channel.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *ChannelUpsert) AddType(v int8) *ChannelUpsert {
	u.Add(channel.FieldType, v)
	return u
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (u *ChannelUpsert) SetQuotationCurrency(v string) *ChannelUpsert {
	u.Set(channel.FieldQuotationCurrency, v)
	return u
}

// UpdateQuotationCurrency sets the "quotation_currency" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateQuotationCurrency() *ChannelUpsert {
	u.SetExcluded(channel.FieldQuotationCurrency)
	return u
}

// SetVolumeFactor sets the "volume_factor" field.
func (u *ChannelUpsert) SetVolumeFactor(v int32) *ChannelUpsert {
	u.Set(channel.FieldVolumeFactor, v)
	return u
}

// UpdateVolumeFactor sets the "volume_factor" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateVolumeFactor() *ChannelUpsert {
	u.SetExcluded(channel.FieldVolumeFactor)
	return u
}

// AddVolumeFactor adds v to the "volume_factor" field.
func (u *ChannelUpsert) AddVolumeFactor(v int32) *ChannelUpsert {
	u.Add(channel.FieldVolumeFactor, v)
	return u
}

// SetEnName sets the "en_name" field.
func (u *ChannelUpsert) SetEnName(v string) *ChannelUpsert {
	u.Set(channel.FieldEnName, v)
	return u
}

// UpdateEnName sets the "en_name" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateEnName() *ChannelUpsert {
	u.SetExcluded(channel.FieldEnName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ChannelUpsert) SetDisplayName(v string) *ChannelUpsert {
	u.Set(channel.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateDisplayName() *ChannelUpsert {
	u.SetExcluded(channel.FieldDisplayName)
	return u
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (u *ChannelUpsert) SetHasTrackingNumber(v int8) *ChannelUpsert {
	u.Set(channel.FieldHasTrackingNumber, v)
	return u
}

// UpdateHasTrackingNumber sets the "has_tracking_number" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateHasTrackingNumber() *ChannelUpsert {
	u.SetExcluded(channel.FieldHasTrackingNumber)
	return u
}

// AddHasTrackingNumber adds v to the "has_tracking_number" field.
func (u *ChannelUpsert) AddHasTrackingNumber(v int8) *ChannelUpsert {
	u.Add(channel.FieldHasTrackingNumber, v)
	return u
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelUpsert) SetMinNormalDays(v int32) *ChannelUpsert {
	u.Set(channel.FieldMinNormalDays, v)
	return u
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMinNormalDays() *ChannelUpsert {
	u.SetExcluded(channel.FieldMinNormalDays)
	return u
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelUpsert) AddMinNormalDays(v int32) *ChannelUpsert {
	u.Add(channel.FieldMinNormalDays, v)
	return u
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelUpsert) SetMaxNormalDays(v int32) *ChannelUpsert {
	u.Set(channel.FieldMaxNormalDays, v)
	return u
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMaxNormalDays() *ChannelUpsert {
	u.SetExcluded(channel.FieldMaxNormalDays)
	return u
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelUpsert) AddMaxNormalDays(v int32) *ChannelUpsert {
	u.Add(channel.FieldMaxNormalDays, v)
	return u
}

// SetMaxWeight sets the "max_weight" field.
func (u *ChannelUpsert) SetMaxWeight(v int) *ChannelUpsert {
	u.Set(channel.FieldMaxWeight, v)
	return u
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMaxWeight() *ChannelUpsert {
	u.SetExcluded(channel.FieldMaxWeight)
	return u
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *ChannelUpsert) AddMaxWeight(v int) *ChannelUpsert {
	u.Add(channel.FieldMaxWeight, v)
	return u
}

// SetMaxLength sets the "max_length" field.
func (u *ChannelUpsert) SetMaxLength(v int) *ChannelUpsert {
	u.Set(channel.FieldMaxLength, v)
	return u
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMaxLength() *ChannelUpsert {
	u.SetExcluded(channel.FieldMaxLength)
	return u
}

// AddMaxLength adds v to the "max_length" field.
func (u *ChannelUpsert) AddMaxLength(v int) *ChannelUpsert {
	u.Add(channel.FieldMaxLength, v)
	return u
}

// SetMinLength sets the "min_length" field.
func (u *ChannelUpsert) SetMinLength(v int) *ChannelUpsert {
	u.Set(channel.FieldMinLength, v)
	return u
}

// UpdateMinLength sets the "min_length" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMinLength() *ChannelUpsert {
	u.SetExcluded(channel.FieldMinLength)
	return u
}

// AddMinLength adds v to the "min_length" field.
func (u *ChannelUpsert) AddMinLength(v int) *ChannelUpsert {
	u.Add(channel.FieldMinLength, v)
	return u
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (u *ChannelUpsert) SetMaxThreeSideSum(v int) *ChannelUpsert {
	u.Set(channel.FieldMaxThreeSideSum, v)
	return u
}

// UpdateMaxThreeSideSum sets the "max_three_side_sum" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateMaxThreeSideSum() *ChannelUpsert {
	u.SetExcluded(channel.FieldMaxThreeSideSum)
	return u
}

// AddMaxThreeSideSum adds v to the "max_three_side_sum" field.
func (u *ChannelUpsert) AddMaxThreeSideSum(v int) *ChannelUpsert {
	u.Add(channel.FieldMaxThreeSideSum, v)
	return u
}

// SetDescription sets the "description" field.
func (u *ChannelUpsert) SetDescription(v string) *ChannelUpsert {
	u.Set(channel.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateDescription() *ChannelUpsert {
	u.SetExcluded(channel.FieldDescription)
	return u
}

// SetSortingPort sets the "sorting_port" field.
func (u *ChannelUpsert) SetSortingPort(v int32) *ChannelUpsert {
	u.Set(channel.FieldSortingPort, v)
	return u
}

// UpdateSortingPort sets the "sorting_port" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateSortingPort() *ChannelUpsert {
	u.SetExcluded(channel.FieldSortingPort)
	return u
}

// AddSortingPort adds v to the "sorting_port" field.
func (u *ChannelUpsert) AddSortingPort(v int32) *ChannelUpsert {
	u.Add(channel.FieldSortingPort, v)
	return u
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *ChannelUpsert) SetPrepayTariff(v bool) *ChannelUpsert {
	u.Set(channel.FieldPrepayTariff, v)
	return u
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *ChannelUpsert) UpdatePrepayTariff() *ChannelUpsert {
	u.SetExcluded(channel.FieldPrepayTariff)
	return u
}

// SetStatus sets the "status" field.
func (u *ChannelUpsert) SetStatus(v int8) *ChannelUpsert {
	u.Set(channel.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateStatus() *ChannelUpsert {
	u.SetExcluded(channel.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ChannelUpsert) AddStatus(v int8) *ChannelUpsert {
	u.Add(channel.FieldStatus, v)
	return u
}

// SetTest sets the "test" field.
func (u *ChannelUpsert) SetTest(v bool) *ChannelUpsert {
	u.Set(channel.FieldTest, v)
	return u
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateTest() *ChannelUpsert {
	u.SetExcluded(channel.FieldTest)
	return u
}

// SetOptions sets the "options" field.
func (u *ChannelUpsert) SetOptions(v string) *ChannelUpsert {
	u.Set(channel.FieldOptions, v)
	return u
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateOptions() *ChannelUpsert {
	u.SetExcluded(channel.FieldOptions)
	return u
}

// ClearOptions clears the value of the "options" field.
func (u *ChannelUpsert) ClearOptions() *ChannelUpsert {
	u.SetNull(channel.FieldOptions)
	return u
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (u *ChannelUpsert) SetExcludeAttributes(v string) *ChannelUpsert {
	u.Set(channel.FieldExcludeAttributes, v)
	return u
}

// UpdateExcludeAttributes sets the "exclude_attributes" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateExcludeAttributes() *ChannelUpsert {
	u.SetExcluded(channel.FieldExcludeAttributes)
	return u
}

// ClearExcludeAttributes clears the value of the "exclude_attributes" field.
func (u *ChannelUpsert) ClearExcludeAttributes() *ChannelUpsert {
	u.SetNull(channel.FieldExcludeAttributes)
	return u
}

// SetBattery sets the "battery" field.
func (u *ChannelUpsert) SetBattery(v int8) *ChannelUpsert {
	u.Set(channel.FieldBattery, v)
	return u
}

// UpdateBattery sets the "battery" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateBattery() *ChannelUpsert {
	u.SetExcluded(channel.FieldBattery)
	return u
}

// AddBattery adds v to the "battery" field.
func (u *ChannelUpsert) AddBattery(v int8) *ChannelUpsert {
	u.Add(channel.FieldBattery, v)
	return u
}

// SetVirtual sets the "virtual" field.
func (u *ChannelUpsert) SetVirtual(v int8) *ChannelUpsert {
	u.Set(channel.FieldVirtual, v)
	return u
}

// UpdateVirtual sets the "virtual" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateVirtual() *ChannelUpsert {
	u.SetExcluded(channel.FieldVirtual)
	return u
}

// AddVirtual adds v to the "virtual" field.
func (u *ChannelUpsert) AddVirtual(v int8) *ChannelUpsert {
	u.Add(channel.FieldVirtual, v)
	return u
}

// SetChannelType sets the "channel_type" field.
func (u *ChannelUpsert) SetChannelType(v int8) *ChannelUpsert {
	u.Set(channel.FieldChannelType, v)
	return u
}

// UpdateChannelType sets the "channel_type" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateChannelType() *ChannelUpsert {
	u.SetExcluded(channel.FieldChannelType)
	return u
}

// AddChannelType adds v to the "channel_type" field.
func (u *ChannelUpsert) AddChannelType(v int8) *ChannelUpsert {
	u.Add(channel.FieldChannelType, v)
	return u
}

// SetDeliverDuty sets the "deliver_duty" field.
func (u *ChannelUpsert) SetDeliverDuty(v string) *ChannelUpsert {
	u.Set(channel.FieldDeliverDuty, v)
	return u
}

// UpdateDeliverDuty sets the "deliver_duty" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateDeliverDuty() *ChannelUpsert {
	u.SetExcluded(channel.FieldDeliverDuty)
	return u
}

// SetSpecial sets the "special" field.
func (u *ChannelUpsert) SetSpecial(v int8) *ChannelUpsert {
	u.Set(channel.FieldSpecial, v)
	return u
}

// UpdateSpecial sets the "special" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateSpecial() *ChannelUpsert {
	u.SetExcluded(channel.FieldSpecial)
	return u
}

// AddSpecial adds v to the "special" field.
func (u *ChannelUpsert) AddSpecial(v int8) *ChannelUpsert {
	u.Add(channel.FieldSpecial, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelUpsertOne) UpdateNewValues() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channel.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelUpsertOne) Ignore() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelUpsertOne) DoNothing() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCreate.OnConflict
// documentation for more info.
func (u *ChannelUpsertOne) Update(set func(*ChannelUpsert)) *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsertOne) SetUpdatedAt(v time.Time) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateUpdatedAt() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelUpsertOne) SetDeletedAt(v time.Time) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateDeletedAt() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelUpsertOne) ClearDeletedAt() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *ChannelUpsertOne) SetWarehouseID(v int64) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *ChannelUpsertOne) AddWarehouseID(v int64) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateWarehouseID() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *ChannelUpsertOne) SetCourierPlatform(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateCourierPlatform() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetName sets the "name" field.
func (u *ChannelUpsertOne) SetName(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateName() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *ChannelUpsertOne) SetCode(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateCode() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateCode()
	})
}

// SetType sets the "type" field.
func (u *ChannelUpsertOne) SetType(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ChannelUpsertOne) AddType(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateType() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateType()
	})
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (u *ChannelUpsertOne) SetQuotationCurrency(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetQuotationCurrency(v)
	})
}

// UpdateQuotationCurrency sets the "quotation_currency" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateQuotationCurrency() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateQuotationCurrency()
	})
}

// SetVolumeFactor sets the "volume_factor" field.
func (u *ChannelUpsertOne) SetVolumeFactor(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetVolumeFactor(v)
	})
}

// AddVolumeFactor adds v to the "volume_factor" field.
func (u *ChannelUpsertOne) AddVolumeFactor(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddVolumeFactor(v)
	})
}

// UpdateVolumeFactor sets the "volume_factor" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateVolumeFactor() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateVolumeFactor()
	})
}

// SetEnName sets the "en_name" field.
func (u *ChannelUpsertOne) SetEnName(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetEnName(v)
	})
}

// UpdateEnName sets the "en_name" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateEnName() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateEnName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ChannelUpsertOne) SetDisplayName(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateDisplayName() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDisplayName()
	})
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (u *ChannelUpsertOne) SetHasTrackingNumber(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetHasTrackingNumber(v)
	})
}

// AddHasTrackingNumber adds v to the "has_tracking_number" field.
func (u *ChannelUpsertOne) AddHasTrackingNumber(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddHasTrackingNumber(v)
	})
}

// UpdateHasTrackingNumber sets the "has_tracking_number" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateHasTrackingNumber() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateHasTrackingNumber()
	})
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelUpsertOne) SetMinNormalDays(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMinNormalDays(v)
	})
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelUpsertOne) AddMinNormalDays(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMinNormalDays(v)
	})
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMinNormalDays() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMinNormalDays()
	})
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelUpsertOne) SetMaxNormalDays(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxNormalDays(v)
	})
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelUpsertOne) AddMaxNormalDays(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxNormalDays(v)
	})
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMaxNormalDays() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxNormalDays()
	})
}

// SetMaxWeight sets the "max_weight" field.
func (u *ChannelUpsertOne) SetMaxWeight(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxWeight(v)
	})
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *ChannelUpsertOne) AddMaxWeight(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxWeight(v)
	})
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMaxWeight() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxWeight()
	})
}

// SetMaxLength sets the "max_length" field.
func (u *ChannelUpsertOne) SetMaxLength(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxLength(v)
	})
}

// AddMaxLength adds v to the "max_length" field.
func (u *ChannelUpsertOne) AddMaxLength(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxLength(v)
	})
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMaxLength() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxLength()
	})
}

// SetMinLength sets the "min_length" field.
func (u *ChannelUpsertOne) SetMinLength(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMinLength(v)
	})
}

// AddMinLength adds v to the "min_length" field.
func (u *ChannelUpsertOne) AddMinLength(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMinLength(v)
	})
}

// UpdateMinLength sets the "min_length" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMinLength() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMinLength()
	})
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (u *ChannelUpsertOne) SetMaxThreeSideSum(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxThreeSideSum(v)
	})
}

// AddMaxThreeSideSum adds v to the "max_three_side_sum" field.
func (u *ChannelUpsertOne) AddMaxThreeSideSum(v int) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxThreeSideSum(v)
	})
}

// UpdateMaxThreeSideSum sets the "max_three_side_sum" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateMaxThreeSideSum() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxThreeSideSum()
	})
}

// SetDescription sets the "description" field.
func (u *ChannelUpsertOne) SetDescription(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateDescription() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDescription()
	})
}

// SetSortingPort sets the "sorting_port" field.
func (u *ChannelUpsertOne) SetSortingPort(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSortingPort(v)
	})
}

// AddSortingPort adds v to the "sorting_port" field.
func (u *ChannelUpsertOne) AddSortingPort(v int32) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddSortingPort(v)
	})
}

// UpdateSortingPort sets the "sorting_port" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateSortingPort() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSortingPort()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *ChannelUpsertOne) SetPrepayTariff(v bool) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdatePrepayTariff() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelUpsertOne) SetStatus(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelUpsertOne) AddStatus(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateStatus() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateStatus()
	})
}

// SetTest sets the "test" field.
func (u *ChannelUpsertOne) SetTest(v bool) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateTest() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateTest()
	})
}

// SetOptions sets the "options" field.
func (u *ChannelUpsertOne) SetOptions(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateOptions() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *ChannelUpsertOne) ClearOptions() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearOptions()
	})
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (u *ChannelUpsertOne) SetExcludeAttributes(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetExcludeAttributes(v)
	})
}

// UpdateExcludeAttributes sets the "exclude_attributes" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateExcludeAttributes() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateExcludeAttributes()
	})
}

// ClearExcludeAttributes clears the value of the "exclude_attributes" field.
func (u *ChannelUpsertOne) ClearExcludeAttributes() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearExcludeAttributes()
	})
}

// SetBattery sets the "battery" field.
func (u *ChannelUpsertOne) SetBattery(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetBattery(v)
	})
}

// AddBattery adds v to the "battery" field.
func (u *ChannelUpsertOne) AddBattery(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddBattery(v)
	})
}

// UpdateBattery sets the "battery" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateBattery() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateBattery()
	})
}

// SetVirtual sets the "virtual" field.
func (u *ChannelUpsertOne) SetVirtual(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetVirtual(v)
	})
}

// AddVirtual adds v to the "virtual" field.
func (u *ChannelUpsertOne) AddVirtual(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddVirtual(v)
	})
}

// UpdateVirtual sets the "virtual" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateVirtual() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateVirtual()
	})
}

// SetChannelType sets the "channel_type" field.
func (u *ChannelUpsertOne) SetChannelType(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetChannelType(v)
	})
}

// AddChannelType adds v to the "channel_type" field.
func (u *ChannelUpsertOne) AddChannelType(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddChannelType(v)
	})
}

// UpdateChannelType sets the "channel_type" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateChannelType() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateChannelType()
	})
}

// SetDeliverDuty sets the "deliver_duty" field.
func (u *ChannelUpsertOne) SetDeliverDuty(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDeliverDuty(v)
	})
}

// UpdateDeliverDuty sets the "deliver_duty" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateDeliverDuty() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDeliverDuty()
	})
}

// SetSpecial sets the "special" field.
func (u *ChannelUpsertOne) SetSpecial(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSpecial(v)
	})
}

// AddSpecial adds v to the "special" field.
func (u *ChannelUpsertOne) AddSpecial(v int8) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.AddSpecial(v)
	})
}

// UpdateSpecial sets the "special" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateSpecial() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSpecial()
	})
}

// Exec executes the query.
func (u *ChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelCreateBulk is the builder for creating many Channel entities in bulk.
type ChannelCreateBulk struct {
	config
	builders []*ChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the Channel entities in the database.
func (ccb *ChannelCreateBulk) Save(ctx context.Context) ([]*Channel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Channel, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChannelCreateBulk) SaveX(ctx context.Context) []*Channel {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChannelCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Channel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelUpsertBulk {
	ccb.conflict = opts
	return &ChannelUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChannelCreateBulk) OnConflictColumns(columns ...string) *ChannelUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChannelUpsertBulk{
		create: ccb,
	}
}

// ChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of Channel nodes.
type ChannelUpsertBulk struct {
	create *ChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelUpsertBulk) UpdateNewValues() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channel.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelUpsertBulk) Ignore() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelUpsertBulk) DoNothing() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelUpsertBulk) Update(set func(*ChannelUpsert)) *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsertBulk) SetUpdatedAt(v time.Time) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateUpdatedAt() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelUpsertBulk) SetDeletedAt(v time.Time) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateDeletedAt() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelUpsertBulk) ClearDeletedAt() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *ChannelUpsertBulk) SetWarehouseID(v int64) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *ChannelUpsertBulk) AddWarehouseID(v int64) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateWarehouseID() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *ChannelUpsertBulk) SetCourierPlatform(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateCourierPlatform() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetName sets the "name" field.
func (u *ChannelUpsertBulk) SetName(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateName() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *ChannelUpsertBulk) SetCode(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateCode() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateCode()
	})
}

// SetType sets the "type" field.
func (u *ChannelUpsertBulk) SetType(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *ChannelUpsertBulk) AddType(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateType() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateType()
	})
}

// SetQuotationCurrency sets the "quotation_currency" field.
func (u *ChannelUpsertBulk) SetQuotationCurrency(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetQuotationCurrency(v)
	})
}

// UpdateQuotationCurrency sets the "quotation_currency" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateQuotationCurrency() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateQuotationCurrency()
	})
}

// SetVolumeFactor sets the "volume_factor" field.
func (u *ChannelUpsertBulk) SetVolumeFactor(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetVolumeFactor(v)
	})
}

// AddVolumeFactor adds v to the "volume_factor" field.
func (u *ChannelUpsertBulk) AddVolumeFactor(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddVolumeFactor(v)
	})
}

// UpdateVolumeFactor sets the "volume_factor" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateVolumeFactor() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateVolumeFactor()
	})
}

// SetEnName sets the "en_name" field.
func (u *ChannelUpsertBulk) SetEnName(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetEnName(v)
	})
}

// UpdateEnName sets the "en_name" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateEnName() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateEnName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ChannelUpsertBulk) SetDisplayName(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateDisplayName() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDisplayName()
	})
}

// SetHasTrackingNumber sets the "has_tracking_number" field.
func (u *ChannelUpsertBulk) SetHasTrackingNumber(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetHasTrackingNumber(v)
	})
}

// AddHasTrackingNumber adds v to the "has_tracking_number" field.
func (u *ChannelUpsertBulk) AddHasTrackingNumber(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddHasTrackingNumber(v)
	})
}

// UpdateHasTrackingNumber sets the "has_tracking_number" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateHasTrackingNumber() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateHasTrackingNumber()
	})
}

// SetMinNormalDays sets the "min_normal_days" field.
func (u *ChannelUpsertBulk) SetMinNormalDays(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMinNormalDays(v)
	})
}

// AddMinNormalDays adds v to the "min_normal_days" field.
func (u *ChannelUpsertBulk) AddMinNormalDays(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMinNormalDays(v)
	})
}

// UpdateMinNormalDays sets the "min_normal_days" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMinNormalDays() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMinNormalDays()
	})
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (u *ChannelUpsertBulk) SetMaxNormalDays(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxNormalDays(v)
	})
}

// AddMaxNormalDays adds v to the "max_normal_days" field.
func (u *ChannelUpsertBulk) AddMaxNormalDays(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxNormalDays(v)
	})
}

// UpdateMaxNormalDays sets the "max_normal_days" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMaxNormalDays() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxNormalDays()
	})
}

// SetMaxWeight sets the "max_weight" field.
func (u *ChannelUpsertBulk) SetMaxWeight(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxWeight(v)
	})
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *ChannelUpsertBulk) AddMaxWeight(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxWeight(v)
	})
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMaxWeight() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxWeight()
	})
}

// SetMaxLength sets the "max_length" field.
func (u *ChannelUpsertBulk) SetMaxLength(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxLength(v)
	})
}

// AddMaxLength adds v to the "max_length" field.
func (u *ChannelUpsertBulk) AddMaxLength(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxLength(v)
	})
}

// UpdateMaxLength sets the "max_length" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMaxLength() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxLength()
	})
}

// SetMinLength sets the "min_length" field.
func (u *ChannelUpsertBulk) SetMinLength(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMinLength(v)
	})
}

// AddMinLength adds v to the "min_length" field.
func (u *ChannelUpsertBulk) AddMinLength(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMinLength(v)
	})
}

// UpdateMinLength sets the "min_length" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMinLength() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMinLength()
	})
}

// SetMaxThreeSideSum sets the "max_three_side_sum" field.
func (u *ChannelUpsertBulk) SetMaxThreeSideSum(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetMaxThreeSideSum(v)
	})
}

// AddMaxThreeSideSum adds v to the "max_three_side_sum" field.
func (u *ChannelUpsertBulk) AddMaxThreeSideSum(v int) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddMaxThreeSideSum(v)
	})
}

// UpdateMaxThreeSideSum sets the "max_three_side_sum" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateMaxThreeSideSum() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateMaxThreeSideSum()
	})
}

// SetDescription sets the "description" field.
func (u *ChannelUpsertBulk) SetDescription(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateDescription() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDescription()
	})
}

// SetSortingPort sets the "sorting_port" field.
func (u *ChannelUpsertBulk) SetSortingPort(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSortingPort(v)
	})
}

// AddSortingPort adds v to the "sorting_port" field.
func (u *ChannelUpsertBulk) AddSortingPort(v int32) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddSortingPort(v)
	})
}

// UpdateSortingPort sets the "sorting_port" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateSortingPort() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSortingPort()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *ChannelUpsertBulk) SetPrepayTariff(v bool) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdatePrepayTariff() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelUpsertBulk) SetStatus(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelUpsertBulk) AddStatus(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateStatus() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateStatus()
	})
}

// SetTest sets the "test" field.
func (u *ChannelUpsertBulk) SetTest(v bool) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateTest() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateTest()
	})
}

// SetOptions sets the "options" field.
func (u *ChannelUpsertBulk) SetOptions(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateOptions() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *ChannelUpsertBulk) ClearOptions() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearOptions()
	})
}

// SetExcludeAttributes sets the "exclude_attributes" field.
func (u *ChannelUpsertBulk) SetExcludeAttributes(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetExcludeAttributes(v)
	})
}

// UpdateExcludeAttributes sets the "exclude_attributes" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateExcludeAttributes() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateExcludeAttributes()
	})
}

// ClearExcludeAttributes clears the value of the "exclude_attributes" field.
func (u *ChannelUpsertBulk) ClearExcludeAttributes() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.ClearExcludeAttributes()
	})
}

// SetBattery sets the "battery" field.
func (u *ChannelUpsertBulk) SetBattery(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetBattery(v)
	})
}

// AddBattery adds v to the "battery" field.
func (u *ChannelUpsertBulk) AddBattery(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddBattery(v)
	})
}

// UpdateBattery sets the "battery" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateBattery() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateBattery()
	})
}

// SetVirtual sets the "virtual" field.
func (u *ChannelUpsertBulk) SetVirtual(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetVirtual(v)
	})
}

// AddVirtual adds v to the "virtual" field.
func (u *ChannelUpsertBulk) AddVirtual(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddVirtual(v)
	})
}

// UpdateVirtual sets the "virtual" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateVirtual() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateVirtual()
	})
}

// SetChannelType sets the "channel_type" field.
func (u *ChannelUpsertBulk) SetChannelType(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetChannelType(v)
	})
}

// AddChannelType adds v to the "channel_type" field.
func (u *ChannelUpsertBulk) AddChannelType(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddChannelType(v)
	})
}

// UpdateChannelType sets the "channel_type" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateChannelType() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateChannelType()
	})
}

// SetDeliverDuty sets the "deliver_duty" field.
func (u *ChannelUpsertBulk) SetDeliverDuty(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDeliverDuty(v)
	})
}

// UpdateDeliverDuty sets the "deliver_duty" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateDeliverDuty() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDeliverDuty()
	})
}

// SetSpecial sets the "special" field.
func (u *ChannelUpsertBulk) SetSpecial(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSpecial(v)
	})
}

// AddSpecial adds v to the "special" field.
func (u *ChannelUpsertBulk) AddSpecial(v int8) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.AddSpecial(v)
	})
}

// UpdateSpecial sets the "special" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateSpecial() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSpecial()
	})
}

// Exec executes the query.
func (u *ChannelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
