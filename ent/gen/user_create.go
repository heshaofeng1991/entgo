// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetType sets the "type" field.
func (uc *UserCreate) SetType(s string) *UserCreate {
	uc.mutation.SetType(s)
	return uc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uc *UserCreate) SetNillableType(s *string) *UserCreate {
	if s != nil {
		uc.SetType(*s)
	}
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (uc *UserCreate) SetSelectedWarehouseID(i int64) *UserCreate {
	uc.mutation.SetSelectedWarehouseID(i)
	return uc
}

// SetNillableSelectedWarehouseID sets the "selected_warehouse_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableSelectedWarehouseID(i *int64) *UserCreate {
	if i != nil {
		uc.SetSelectedWarehouseID(*i)
	}
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetCode sets the "code" field.
func (uc *UserCreate) SetCode(s string) *UserCreate {
	uc.mutation.SetCode(s)
	return uc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uc *UserCreate) SetNillableCode(s *string) *UserCreate {
	if s != nil {
		uc.SetCode(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(i int8) *UserCreate {
	uc.mutation.SetStatus(i)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(i *int8) *UserCreate {
	if i != nil {
		uc.SetStatus(*i)
	}
	return uc
}

// SetGuideFinished sets the "guide_finished" field.
func (uc *UserCreate) SetGuideFinished(b bool) *UserCreate {
	uc.mutation.SetGuideFinished(b)
	return uc
}

// SetNillableGuideFinished sets the "guide_finished" field if the given value is not nil.
func (uc *UserCreate) SetNillableGuideFinished(b *bool) *UserCreate {
	if b != nil {
		uc.SetGuideFinished(*b)
	}
	return uc
}

// SetGuideStatus sets the "guide_status" field.
func (uc *UserCreate) SetGuideStatus(i int) *UserCreate {
	uc.mutation.SetGuideStatus(i)
	return uc
}

// SetNillableGuideStatus sets the "guide_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableGuideStatus(i *int) *UserCreate {
	if i != nil {
		uc.SetGuideStatus(*i)
	}
	return uc
}

// SetHsObjectID sets the "hs_object_id" field.
func (uc *UserCreate) SetHsObjectID(s string) *UserCreate {
	uc.mutation.SetHsObjectID(s)
	return uc
}

// SetNillableHsObjectID sets the "hs_object_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableHsObjectID(s *string) *UserCreate {
	if s != nil {
		uc.SetHsObjectID(*s)
	}
	return uc
}

// SetQuestions sets the "questions" field.
func (uc *UserCreate) SetQuestions(s string) *UserCreate {
	uc.mutation.SetQuestions(s)
	return uc
}

// SetNillableQuestions sets the "questions" field if the given value is not nil.
func (uc *UserCreate) SetNillableQuestions(s *string) *UserCreate {
	if s != nil {
		uc.SetQuestions(*s)
	}
	return uc
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (uc *UserCreate) SetLastLoggedTime(t time.Time) *UserCreate {
	uc.mutation.SetLastLoggedTime(t)
	return uc
}

// SetNillableLastLoggedTime sets the "last_logged_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoggedTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLoggedTime(*t)
	}
	return uc
}

// SetWebsite sets the "website" field.
func (uc *UserCreate) SetWebsite(s string) *UserCreate {
	uc.mutation.SetWebsite(s)
	return uc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uc *UserCreate) SetNillableWebsite(s *string) *UserCreate {
	if s != nil {
		uc.SetWebsite(*s)
	}
	return uc
}

// SetPlatform sets the "platform" field.
func (uc *UserCreate) SetPlatform(s string) *UserCreate {
	uc.mutation.SetPlatform(s)
	return uc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uc *UserCreate) SetNillablePlatform(s *string) *UserCreate {
	if s != nil {
		uc.SetPlatform(*s)
	}
	return uc
}

// SetConcerns sets the "concerns" field.
func (uc *UserCreate) SetConcerns(s string) *UserCreate {
	uc.mutation.SetConcerns(s)
	return uc
}

// SetNillableConcerns sets the "concerns" field if the given value is not nil.
func (uc *UserCreate) SetNillableConcerns(s *string) *UserCreate {
	if s != nil {
		uc.SetConcerns(*s)
	}
	return uc
}

// SetStoreCode sets the "store_code" field.
func (uc *UserCreate) SetStoreCode(s string) *UserCreate {
	uc.mutation.SetStoreCode(s)
	return uc
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (uc *UserCreate) SetNillableStoreCode(s *string) *UserCreate {
	if s != nil {
		uc.SetStoreCode(*s)
	}
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetSource sets the "source" field.
func (uc *UserCreate) SetSource(s string) *UserCreate {
	uc.mutation.SetSource(s)
	return uc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (uc *UserCreate) SetNillableSource(s *string) *UserCreate {
	if s != nil {
		uc.SetSource(*s)
	}
	return uc
}

// SetSourceTag sets the "source_tag" field.
func (uc *UserCreate) SetSourceTag(s string) *UserCreate {
	uc.mutation.SetSourceTag(s)
	return uc
}

// SetNillableSourceTag sets the "source_tag" field if the given value is not nil.
func (uc *UserCreate) SetNillableSourceTag(s *string) *UserCreate {
	if s != nil {
		uc.SetSourceTag(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (uc *UserCreate) SetTenantID(id int64) *UserCreate {
	uc.mutation.SetTenantID(id)
	return uc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uc *UserCreate) SetTenant(t *Tenant) *UserCreate {
	return uc.SetTenantID(t.ID)
}

// AddAnnouncementIDs adds the "announcements" edge to the Announcements entity by IDs.
func (uc *UserCreate) AddAnnouncementIDs(ids ...int64) *UserCreate {
	uc.mutation.AddAnnouncementIDs(ids...)
	return uc
}

// AddAnnouncements adds the "announcements" edges to the Announcements entity.
func (uc *UserCreate) AddAnnouncements(a ...*Announcements) *UserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAnnouncementIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized user.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		if user.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized user.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Name(); !ok {
		v := user.DefaultName
		uc.mutation.SetName(v)
	}
	if _, ok := uc.mutation.GetType(); !ok {
		v := user.DefaultType
		uc.mutation.SetType(v)
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		v := user.DefaultAvatar
		uc.mutation.SetAvatar(v)
	}
	if _, ok := uc.mutation.Code(); !ok {
		v := user.DefaultCode
		uc.mutation.SetCode(v)
	}
	if _, ok := uc.mutation.Status(); !ok {
		v := user.DefaultStatus
		uc.mutation.SetStatus(v)
	}
	if _, ok := uc.mutation.GuideFinished(); !ok {
		v := user.DefaultGuideFinished
		uc.mutation.SetGuideFinished(v)
	}
	if _, ok := uc.mutation.GuideStatus(); !ok {
		v := user.DefaultGuideStatus
		uc.mutation.SetGuideStatus(v)
	}
	if _, ok := uc.mutation.HsObjectID(); !ok {
		v := user.DefaultHsObjectID
		uc.mutation.SetHsObjectID(v)
	}
	if _, ok := uc.mutation.Website(); !ok {
		v := user.DefaultWebsite
		uc.mutation.SetWebsite(v)
	}
	if _, ok := uc.mutation.Platform(); !ok {
		v := user.DefaultPlatform
		uc.mutation.SetPlatform(v)
	}
	if _, ok := uc.mutation.Concerns(); !ok {
		v := user.DefaultConcerns
		uc.mutation.SetConcerns(v)
	}
	if _, ok := uc.mutation.StoreCode(); !ok {
		v := user.DefaultStoreCode
		uc.mutation.SetStoreCode(v)
	}
	if _, ok := uc.mutation.Phone(); !ok {
		v := user.DefaultPhone
		uc.mutation.SetPhone(v)
	}
	if _, ok := uc.mutation.Source(); !ok {
		v := user.DefaultSource
		uc.mutation.SetSource(v)
	}
	if _, ok := uc.mutation.SourceTag(); !ok {
		v := user.DefaultSourceTag
		uc.mutation.SetSourceTag(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`gen: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "User.type"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`gen: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`gen: missing required field "User.avatar"`)}
	}
	if _, ok := uc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "User.code"`)}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "User.status"`)}
	}
	if _, ok := uc.mutation.GuideFinished(); !ok {
		return &ValidationError{Name: "guide_finished", err: errors.New(`gen: missing required field "User.guide_finished"`)}
	}
	if _, ok := uc.mutation.GuideStatus(); !ok {
		return &ValidationError{Name: "guide_status", err: errors.New(`gen: missing required field "User.guide_status"`)}
	}
	if _, ok := uc.mutation.HsObjectID(); !ok {
		return &ValidationError{Name: "hs_object_id", err: errors.New(`gen: missing required field "User.hs_object_id"`)}
	}
	if _, ok := uc.mutation.Website(); !ok {
		return &ValidationError{Name: "website", err: errors.New(`gen: missing required field "User.website"`)}
	}
	if _, ok := uc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`gen: missing required field "User.platform"`)}
	}
	if _, ok := uc.mutation.Concerns(); !ok {
		return &ValidationError{Name: "concerns", err: errors.New(`gen: missing required field "User.concerns"`)}
	}
	if _, ok := uc.mutation.StoreCode(); !ok {
		return &ValidationError{Name: "store_code", err: errors.New(`gen: missing required field "User.store_code"`)}
	}
	if _, ok := uc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`gen: missing required field "User.phone"`)}
	}
	if _, ok := uc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`gen: missing required field "User.source"`)}
	}
	if _, ok := uc.mutation.SourceTag(); !ok {
		return &ValidationError{Name: "source_tag", err: errors.New(`gen: missing required field "User.source_tag"`)}
	}
	if _, ok := uc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "User.tenant"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		}
	)
	_spec.Schema = uc.schemaConfig.User
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.SelectedWarehouseID(); ok {
		_spec.SetField(user.FieldSelectedWarehouseID, field.TypeInt64, value)
		_node.SelectedWarehouseID = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := uc.mutation.Code(); ok {
		_spec.SetField(user.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.GuideFinished(); ok {
		_spec.SetField(user.FieldGuideFinished, field.TypeBool, value)
		_node.GuideFinished = value
	}
	if value, ok := uc.mutation.GuideStatus(); ok {
		_spec.SetField(user.FieldGuideStatus, field.TypeInt, value)
		_node.GuideStatus = value
	}
	if value, ok := uc.mutation.HsObjectID(); ok {
		_spec.SetField(user.FieldHsObjectID, field.TypeString, value)
		_node.HsObjectID = value
	}
	if value, ok := uc.mutation.Questions(); ok {
		_spec.SetField(user.FieldQuestions, field.TypeString, value)
		_node.Questions = value
	}
	if value, ok := uc.mutation.LastLoggedTime(); ok {
		_spec.SetField(user.FieldLastLoggedTime, field.TypeTime, value)
		_node.LastLoggedTime = value
	}
	if value, ok := uc.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := uc.mutation.Platform(); ok {
		_spec.SetField(user.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := uc.mutation.Concerns(); ok {
		_spec.SetField(user.FieldConcerns, field.TypeString, value)
		_node.Concerns = value
	}
	if value, ok := uc.mutation.StoreCode(); ok {
		_spec.SetField(user.FieldStoreCode, field.TypeString, value)
		_node.StoreCode = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Source(); ok {
		_spec.SetField(user.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := uc.mutation.SourceTag(); ok {
		_spec.SetField(user.FieldSourceTag, field.TypeString, value)
		_node.SourceTag = value
	}
	if nodes := uc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AnnouncementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: announcements.FieldID,
				},
			},
		}
		edge.Schema = uc.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetType sets the "type" field.
func (u *UserUpsert) SetType(v string) *UserUpsert {
	u.Set(user.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsert) UpdateType() *UserUpsert {
	u.SetExcluded(user.FieldType)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (u *UserUpsert) SetSelectedWarehouseID(v int64) *UserUpsert {
	u.Set(user.FieldSelectedWarehouseID, v)
	return u
}

// UpdateSelectedWarehouseID sets the "selected_warehouse_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateSelectedWarehouseID() *UserUpsert {
	u.SetExcluded(user.FieldSelectedWarehouseID)
	return u
}

// AddSelectedWarehouseID adds v to the "selected_warehouse_id" field.
func (u *UserUpsert) AddSelectedWarehouseID(v int64) *UserUpsert {
	u.Add(user.FieldSelectedWarehouseID, v)
	return u
}

// ClearSelectedWarehouseID clears the value of the "selected_warehouse_id" field.
func (u *UserUpsert) ClearSelectedWarehouseID() *UserUpsert {
	u.SetNull(user.FieldSelectedWarehouseID)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsert) SetAvatar(v string) *UserUpsert {
	u.Set(user.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatar() *UserUpsert {
	u.SetExcluded(user.FieldAvatar)
	return u
}

// SetCode sets the "code" field.
func (u *UserUpsert) SetCode(v string) *UserUpsert {
	u.Set(user.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *UserUpsert) UpdateCode() *UserUpsert {
	u.SetExcluded(user.FieldCode)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v int8) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *UserUpsert) AddStatus(v int8) *UserUpsert {
	u.Add(user.FieldStatus, v)
	return u
}

// SetGuideFinished sets the "guide_finished" field.
func (u *UserUpsert) SetGuideFinished(v bool) *UserUpsert {
	u.Set(user.FieldGuideFinished, v)
	return u
}

// UpdateGuideFinished sets the "guide_finished" field to the value that was provided on create.
func (u *UserUpsert) UpdateGuideFinished() *UserUpsert {
	u.SetExcluded(user.FieldGuideFinished)
	return u
}

// SetGuideStatus sets the "guide_status" field.
func (u *UserUpsert) SetGuideStatus(v int) *UserUpsert {
	u.Set(user.FieldGuideStatus, v)
	return u
}

// UpdateGuideStatus sets the "guide_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateGuideStatus() *UserUpsert {
	u.SetExcluded(user.FieldGuideStatus)
	return u
}

// AddGuideStatus adds v to the "guide_status" field.
func (u *UserUpsert) AddGuideStatus(v int) *UserUpsert {
	u.Add(user.FieldGuideStatus, v)
	return u
}

// SetHsObjectID sets the "hs_object_id" field.
func (u *UserUpsert) SetHsObjectID(v string) *UserUpsert {
	u.Set(user.FieldHsObjectID, v)
	return u
}

// UpdateHsObjectID sets the "hs_object_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateHsObjectID() *UserUpsert {
	u.SetExcluded(user.FieldHsObjectID)
	return u
}

// SetQuestions sets the "questions" field.
func (u *UserUpsert) SetQuestions(v string) *UserUpsert {
	u.Set(user.FieldQuestions, v)
	return u
}

// UpdateQuestions sets the "questions" field to the value that was provided on create.
func (u *UserUpsert) UpdateQuestions() *UserUpsert {
	u.SetExcluded(user.FieldQuestions)
	return u
}

// ClearQuestions clears the value of the "questions" field.
func (u *UserUpsert) ClearQuestions() *UserUpsert {
	u.SetNull(user.FieldQuestions)
	return u
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (u *UserUpsert) SetLastLoggedTime(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLoggedTime, v)
	return u
}

// UpdateLastLoggedTime sets the "last_logged_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoggedTime() *UserUpsert {
	u.SetExcluded(user.FieldLastLoggedTime)
	return u
}

// ClearLastLoggedTime clears the value of the "last_logged_time" field.
func (u *UserUpsert) ClearLastLoggedTime() *UserUpsert {
	u.SetNull(user.FieldLastLoggedTime)
	return u
}

// SetWebsite sets the "website" field.
func (u *UserUpsert) SetWebsite(v string) *UserUpsert {
	u.Set(user.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *UserUpsert) UpdateWebsite() *UserUpsert {
	u.SetExcluded(user.FieldWebsite)
	return u
}

// SetPlatform sets the "platform" field.
func (u *UserUpsert) SetPlatform(v string) *UserUpsert {
	u.Set(user.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserUpsert) UpdatePlatform() *UserUpsert {
	u.SetExcluded(user.FieldPlatform)
	return u
}

// SetConcerns sets the "concerns" field.
func (u *UserUpsert) SetConcerns(v string) *UserUpsert {
	u.Set(user.FieldConcerns, v)
	return u
}

// UpdateConcerns sets the "concerns" field to the value that was provided on create.
func (u *UserUpsert) UpdateConcerns() *UserUpsert {
	u.SetExcluded(user.FieldConcerns)
	return u
}

// SetStoreCode sets the "store_code" field.
func (u *UserUpsert) SetStoreCode(v string) *UserUpsert {
	u.Set(user.FieldStoreCode, v)
	return u
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *UserUpsert) UpdateStoreCode() *UserUpsert {
	u.SetExcluded(user.FieldStoreCode)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// SetSource sets the "source" field.
func (u *UserUpsert) SetSource(v string) *UserUpsert {
	u.Set(user.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *UserUpsert) UpdateSource() *UserUpsert {
	u.SetExcluded(user.FieldSource)
	return u
}

// SetSourceTag sets the "source_tag" field.
func (u *UserUpsert) SetSourceTag(v string) *UserUpsert {
	u.Set(user.FieldSourceTag, v)
	return u
}

// UpdateSourceTag sets the "source_tag" field to the value that was provided on create.
func (u *UserUpsert) UpdateSourceTag() *UserUpsert {
	u.SetExcluded(user.FieldSourceTag)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertOne) SetType(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (u *UserUpsertOne) SetSelectedWarehouseID(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSelectedWarehouseID(v)
	})
}

// AddSelectedWarehouseID adds v to the "selected_warehouse_id" field.
func (u *UserUpsertOne) AddSelectedWarehouseID(v int64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddSelectedWarehouseID(v)
	})
}

// UpdateSelectedWarehouseID sets the "selected_warehouse_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSelectedWarehouseID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSelectedWarehouseID()
	})
}

// ClearSelectedWarehouseID clears the value of the "selected_warehouse_id" field.
func (u *UserUpsertOne) ClearSelectedWarehouseID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSelectedWarehouseID()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertOne) SetAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// SetCode sets the "code" field.
func (u *UserUpsertOne) SetCode(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCode() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v int8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertOne) AddStatus(v int8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetGuideFinished sets the "guide_finished" field.
func (u *UserUpsertOne) SetGuideFinished(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGuideFinished(v)
	})
}

// UpdateGuideFinished sets the "guide_finished" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGuideFinished() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGuideFinished()
	})
}

// SetGuideStatus sets the "guide_status" field.
func (u *UserUpsertOne) SetGuideStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGuideStatus(v)
	})
}

// AddGuideStatus adds v to the "guide_status" field.
func (u *UserUpsertOne) AddGuideStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddGuideStatus(v)
	})
}

// UpdateGuideStatus sets the "guide_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGuideStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGuideStatus()
	})
}

// SetHsObjectID sets the "hs_object_id" field.
func (u *UserUpsertOne) SetHsObjectID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHsObjectID(v)
	})
}

// UpdateHsObjectID sets the "hs_object_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHsObjectID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHsObjectID()
	})
}

// SetQuestions sets the "questions" field.
func (u *UserUpsertOne) SetQuestions(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetQuestions(v)
	})
}

// UpdateQuestions sets the "questions" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateQuestions() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateQuestions()
	})
}

// ClearQuestions clears the value of the "questions" field.
func (u *UserUpsertOne) ClearQuestions() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearQuestions()
	})
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (u *UserUpsertOne) SetLastLoggedTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoggedTime(v)
	})
}

// UpdateLastLoggedTime sets the "last_logged_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoggedTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoggedTime()
	})
}

// ClearLastLoggedTime clears the value of the "last_logged_time" field.
func (u *UserUpsertOne) ClearLastLoggedTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoggedTime()
	})
}

// SetWebsite sets the "website" field.
func (u *UserUpsertOne) SetWebsite(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateWebsite() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWebsite()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserUpsertOne) SetPlatform(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePlatform() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePlatform()
	})
}

// SetConcerns sets the "concerns" field.
func (u *UserUpsertOne) SetConcerns(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetConcerns(v)
	})
}

// UpdateConcerns sets the "concerns" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateConcerns() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateConcerns()
	})
}

// SetStoreCode sets the "store_code" field.
func (u *UserUpsertOne) SetStoreCode(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStoreCode(v)
	})
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStoreCode() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStoreCode()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetSource sets the "source" field.
func (u *UserUpsertOne) SetSource(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSource() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSource()
	})
}

// SetSourceTag sets the "source_tag" field.
func (u *UserUpsertOne) SetSourceTag(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSourceTag(v)
	})
}

// UpdateSourceTag sets the "source_tag" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSourceTag() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSourceTag()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertBulk) SetType(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetSelectedWarehouseID sets the "selected_warehouse_id" field.
func (u *UserUpsertBulk) SetSelectedWarehouseID(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSelectedWarehouseID(v)
	})
}

// AddSelectedWarehouseID adds v to the "selected_warehouse_id" field.
func (u *UserUpsertBulk) AddSelectedWarehouseID(v int64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddSelectedWarehouseID(v)
	})
}

// UpdateSelectedWarehouseID sets the "selected_warehouse_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSelectedWarehouseID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSelectedWarehouseID()
	})
}

// ClearSelectedWarehouseID clears the value of the "selected_warehouse_id" field.
func (u *UserUpsertBulk) ClearSelectedWarehouseID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSelectedWarehouseID()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertBulk) SetAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// SetCode sets the "code" field.
func (u *UserUpsertBulk) SetCode(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCode() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v int8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertBulk) AddStatus(v int8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetGuideFinished sets the "guide_finished" field.
func (u *UserUpsertBulk) SetGuideFinished(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGuideFinished(v)
	})
}

// UpdateGuideFinished sets the "guide_finished" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGuideFinished() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGuideFinished()
	})
}

// SetGuideStatus sets the "guide_status" field.
func (u *UserUpsertBulk) SetGuideStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGuideStatus(v)
	})
}

// AddGuideStatus adds v to the "guide_status" field.
func (u *UserUpsertBulk) AddGuideStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddGuideStatus(v)
	})
}

// UpdateGuideStatus sets the "guide_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGuideStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGuideStatus()
	})
}

// SetHsObjectID sets the "hs_object_id" field.
func (u *UserUpsertBulk) SetHsObjectID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHsObjectID(v)
	})
}

// UpdateHsObjectID sets the "hs_object_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHsObjectID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHsObjectID()
	})
}

// SetQuestions sets the "questions" field.
func (u *UserUpsertBulk) SetQuestions(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetQuestions(v)
	})
}

// UpdateQuestions sets the "questions" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateQuestions() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateQuestions()
	})
}

// ClearQuestions clears the value of the "questions" field.
func (u *UserUpsertBulk) ClearQuestions() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearQuestions()
	})
}

// SetLastLoggedTime sets the "last_logged_time" field.
func (u *UserUpsertBulk) SetLastLoggedTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoggedTime(v)
	})
}

// UpdateLastLoggedTime sets the "last_logged_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoggedTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoggedTime()
	})
}

// ClearLastLoggedTime clears the value of the "last_logged_time" field.
func (u *UserUpsertBulk) ClearLastLoggedTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoggedTime()
	})
}

// SetWebsite sets the "website" field.
func (u *UserUpsertBulk) SetWebsite(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateWebsite() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateWebsite()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserUpsertBulk) SetPlatform(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePlatform() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePlatform()
	})
}

// SetConcerns sets the "concerns" field.
func (u *UserUpsertBulk) SetConcerns(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetConcerns(v)
	})
}

// UpdateConcerns sets the "concerns" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateConcerns() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateConcerns()
	})
}

// SetStoreCode sets the "store_code" field.
func (u *UserUpsertBulk) SetStoreCode(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStoreCode(v)
	})
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStoreCode() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStoreCode()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetSource sets the "source" field.
func (u *UserUpsertBulk) SetSource(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSource() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSource()
	})
}

// SetSourceTag sets the "source_tag" field.
func (u *UserUpsertBulk) SetSourceTag(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSourceTag(v)
	})
}

// UpdateSourceTag sets the "source_tag" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSourceTag() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSourceTag()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
