// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporder"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// PickupOrderUpdate is the builder for updating PickupOrder entities.
type PickupOrderUpdate struct {
	config
	hooks     []Hook
	mutation  *PickupOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PickupOrderUpdate builder.
func (pou *PickupOrderUpdate) Where(ps ...predicate.PickupOrder) *PickupOrderUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetUpdatedAt sets the "updated_at" field.
func (pou *PickupOrderUpdate) SetUpdatedAt(t time.Time) *PickupOrderUpdate {
	pou.mutation.SetUpdatedAt(t)
	return pou
}

// SetDeletedAt sets the "deleted_at" field.
func (pou *PickupOrderUpdate) SetDeletedAt(t time.Time) *PickupOrderUpdate {
	pou.mutation.SetDeletedAt(t)
	return pou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pou *PickupOrderUpdate) SetNillableDeletedAt(t *time.Time) *PickupOrderUpdate {
	if t != nil {
		pou.SetDeletedAt(*t)
	}
	return pou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pou *PickupOrderUpdate) ClearDeletedAt() *PickupOrderUpdate {
	pou.mutation.ClearDeletedAt()
	return pou
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (pou *PickupOrderUpdate) SetRequestedPickupAt(t time.Time) *PickupOrderUpdate {
	pou.mutation.SetRequestedPickupAt(t)
	return pou
}

// SetNillableRequestedPickupAt sets the "requested_pickup_at" field if the given value is not nil.
func (pou *PickupOrderUpdate) SetNillableRequestedPickupAt(t *time.Time) *PickupOrderUpdate {
	if t != nil {
		pou.SetRequestedPickupAt(*t)
	}
	return pou
}

// ClearRequestedPickupAt clears the value of the "requested_pickup_at" field.
func (pou *PickupOrderUpdate) ClearRequestedPickupAt() *PickupOrderUpdate {
	pou.mutation.ClearRequestedPickupAt()
	return pou
}

// SetStatus sets the "status" field.
func (pou *PickupOrderUpdate) SetStatus(i int8) *PickupOrderUpdate {
	pou.mutation.ResetStatus()
	pou.mutation.SetStatus(i)
	return pou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pou *PickupOrderUpdate) SetNillableStatus(i *int8) *PickupOrderUpdate {
	if i != nil {
		pou.SetStatus(*i)
	}
	return pou
}

// AddStatus adds i to the "status" field.
func (pou *PickupOrderUpdate) AddStatus(i int8) *PickupOrderUpdate {
	pou.mutation.AddStatus(i)
	return pou
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (pou *PickupOrderUpdate) SetSenderAddressInfo(s string) *PickupOrderUpdate {
	pou.mutation.SetSenderAddressInfo(s)
	return pou
}

// SetNillableSenderAddressInfo sets the "sender_address_info" field if the given value is not nil.
func (pou *PickupOrderUpdate) SetNillableSenderAddressInfo(s *string) *PickupOrderUpdate {
	if s != nil {
		pou.SetSenderAddressInfo(*s)
	}
	return pou
}

// ClearSenderAddressInfo clears the value of the "sender_address_info" field.
func (pou *PickupOrderUpdate) ClearSenderAddressInfo() *PickupOrderUpdate {
	pou.mutation.ClearSenderAddressInfo()
	return pou
}

// Mutation returns the PickupOrderMutation object of the builder.
func (pou *PickupOrderUpdate) Mutation() *PickupOrderMutation {
	return pou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PickupOrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pou.defaults()
	if len(pou.hooks) == 0 {
		affected, err = pou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pou.mutation = mutation
			affected, err = pou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pou.hooks) - 1; i >= 0; i-- {
			if pou.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PickupOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PickupOrderUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PickupOrderUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pou *PickupOrderUpdate) defaults() {
	if _, ok := pou.mutation.UpdatedAt(); !ok {
		v := pickuporder.UpdateDefaultUpdatedAt()
		pou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pou *PickupOrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PickupOrderUpdate {
	pou.modifiers = append(pou.modifiers, modifiers...)
	return pou
}

func (pou *PickupOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pickuporder.Table,
			Columns: pickuporder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporder.FieldID,
			},
		},
	}
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pou.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporder.FieldDeletedAt, field.TypeTime, value)
	}
	if pou.mutation.DeletedAtCleared() {
		_spec.ClearField(pickuporder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pou.mutation.RequestedPickupAt(); ok {
		_spec.SetField(pickuporder.FieldRequestedPickupAt, field.TypeTime, value)
	}
	if pou.mutation.RequestedPickupAtCleared() {
		_spec.ClearField(pickuporder.FieldRequestedPickupAt, field.TypeTime)
	}
	if value, ok := pou.mutation.Status(); ok {
		_spec.SetField(pickuporder.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pou.mutation.AddedStatus(); ok {
		_spec.AddField(pickuporder.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pou.mutation.SenderAddressInfo(); ok {
		_spec.SetField(pickuporder.FieldSenderAddressInfo, field.TypeString, value)
	}
	if pou.mutation.SenderAddressInfoCleared() {
		_spec.ClearField(pickuporder.FieldSenderAddressInfo, field.TypeString)
	}
	_spec.Node.Schema = pou.schemaConfig.PickupOrder
	ctx = internal.NewSchemaConfigContext(ctx, pou.schemaConfig)
	_spec.AddModifiers(pou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pickuporder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PickupOrderUpdateOne is the builder for updating a single PickupOrder entity.
type PickupOrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PickupOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pouo *PickupOrderUpdateOne) SetUpdatedAt(t time.Time) *PickupOrderUpdateOne {
	pouo.mutation.SetUpdatedAt(t)
	return pouo
}

// SetDeletedAt sets the "deleted_at" field.
func (pouo *PickupOrderUpdateOne) SetDeletedAt(t time.Time) *PickupOrderUpdateOne {
	pouo.mutation.SetDeletedAt(t)
	return pouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pouo *PickupOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *PickupOrderUpdateOne {
	if t != nil {
		pouo.SetDeletedAt(*t)
	}
	return pouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pouo *PickupOrderUpdateOne) ClearDeletedAt() *PickupOrderUpdateOne {
	pouo.mutation.ClearDeletedAt()
	return pouo
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (pouo *PickupOrderUpdateOne) SetRequestedPickupAt(t time.Time) *PickupOrderUpdateOne {
	pouo.mutation.SetRequestedPickupAt(t)
	return pouo
}

// SetNillableRequestedPickupAt sets the "requested_pickup_at" field if the given value is not nil.
func (pouo *PickupOrderUpdateOne) SetNillableRequestedPickupAt(t *time.Time) *PickupOrderUpdateOne {
	if t != nil {
		pouo.SetRequestedPickupAt(*t)
	}
	return pouo
}

// ClearRequestedPickupAt clears the value of the "requested_pickup_at" field.
func (pouo *PickupOrderUpdateOne) ClearRequestedPickupAt() *PickupOrderUpdateOne {
	pouo.mutation.ClearRequestedPickupAt()
	return pouo
}

// SetStatus sets the "status" field.
func (pouo *PickupOrderUpdateOne) SetStatus(i int8) *PickupOrderUpdateOne {
	pouo.mutation.ResetStatus()
	pouo.mutation.SetStatus(i)
	return pouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pouo *PickupOrderUpdateOne) SetNillableStatus(i *int8) *PickupOrderUpdateOne {
	if i != nil {
		pouo.SetStatus(*i)
	}
	return pouo
}

// AddStatus adds i to the "status" field.
func (pouo *PickupOrderUpdateOne) AddStatus(i int8) *PickupOrderUpdateOne {
	pouo.mutation.AddStatus(i)
	return pouo
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (pouo *PickupOrderUpdateOne) SetSenderAddressInfo(s string) *PickupOrderUpdateOne {
	pouo.mutation.SetSenderAddressInfo(s)
	return pouo
}

// SetNillableSenderAddressInfo sets the "sender_address_info" field if the given value is not nil.
func (pouo *PickupOrderUpdateOne) SetNillableSenderAddressInfo(s *string) *PickupOrderUpdateOne {
	if s != nil {
		pouo.SetSenderAddressInfo(*s)
	}
	return pouo
}

// ClearSenderAddressInfo clears the value of the "sender_address_info" field.
func (pouo *PickupOrderUpdateOne) ClearSenderAddressInfo() *PickupOrderUpdateOne {
	pouo.mutation.ClearSenderAddressInfo()
	return pouo
}

// Mutation returns the PickupOrderMutation object of the builder.
func (pouo *PickupOrderUpdateOne) Mutation() *PickupOrderMutation {
	return pouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PickupOrderUpdateOne) Select(field string, fields ...string) *PickupOrderUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PickupOrder entity.
func (pouo *PickupOrderUpdateOne) Save(ctx context.Context) (*PickupOrder, error) {
	var (
		err  error
		node *PickupOrder
	)
	pouo.defaults()
	if len(pouo.hooks) == 0 {
		node, err = pouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pouo.mutation = mutation
			node, err = pouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pouo.hooks) - 1; i >= 0; i-- {
			if pouo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PickupOrder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PickupOrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PickupOrderUpdateOne) SaveX(ctx context.Context) *PickupOrder {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PickupOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PickupOrderUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouo *PickupOrderUpdateOne) defaults() {
	if _, ok := pouo.mutation.UpdatedAt(); !ok {
		v := pickuporder.UpdateDefaultUpdatedAt()
		pouo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pouo *PickupOrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PickupOrderUpdateOne {
	pouo.modifiers = append(pouo.modifiers, modifiers...)
	return pouo
}

func (pouo *PickupOrderUpdateOne) sqlSave(ctx context.Context) (_node *PickupOrder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pickuporder.Table,
			Columns: pickuporder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporder.FieldID,
			},
		},
	}
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "PickupOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pickuporder.FieldID)
		for _, f := range fields {
			if !pickuporder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != pickuporder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pouo.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporder.FieldDeletedAt, field.TypeTime, value)
	}
	if pouo.mutation.DeletedAtCleared() {
		_spec.ClearField(pickuporder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pouo.mutation.RequestedPickupAt(); ok {
		_spec.SetField(pickuporder.FieldRequestedPickupAt, field.TypeTime, value)
	}
	if pouo.mutation.RequestedPickupAtCleared() {
		_spec.ClearField(pickuporder.FieldRequestedPickupAt, field.TypeTime)
	}
	if value, ok := pouo.mutation.Status(); ok {
		_spec.SetField(pickuporder.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pouo.mutation.AddedStatus(); ok {
		_spec.AddField(pickuporder.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := pouo.mutation.SenderAddressInfo(); ok {
		_spec.SetField(pickuporder.FieldSenderAddressInfo, field.TypeString, value)
	}
	if pouo.mutation.SenderAddressInfoCleared() {
		_spec.ClearField(pickuporder.FieldSenderAddressInfo, field.TypeString)
	}
	_spec.Node.Schema = pouo.schemaConfig.PickupOrder
	ctx = internal.NewSchemaConfigContext(ctx, pouo.schemaConfig)
	_spec.AddModifiers(pouo.modifiers...)
	_node = &PickupOrder{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pickuporder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
