// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// StoreQuery is the builder for querying Store entities.
type StoreQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.Store
	withTenant           *TenantQuery
	withOrders           *OrderQuery
	withPlatformProducts *PlatformProductQuery
	withFKs              bool
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StoreQuery builder.
func (sq *StoreQuery) Where(ps ...predicate.Store) *StoreQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit adds a limit step to the query.
func (sq *StoreQuery) Limit(limit int) *StoreQuery {
	sq.limit = &limit
	return sq
}

// Offset adds an offset step to the query.
func (sq *StoreQuery) Offset(offset int) *StoreQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StoreQuery) Unique(unique bool) *StoreQuery {
	sq.unique = &unique
	return sq
}

// Order adds an order step to the query.
func (sq *StoreQuery) Order(o ...OrderFunc) *StoreQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sq *StoreQuery) QueryTenant() *TenantQuery {
	query := &TenantQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.TenantTable, store.TenantColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Store
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (sq *StoreQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.OrdersTable, store.OrdersColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlatformProducts chains the current query on the "platform_products" edge.
func (sq *StoreQuery) QueryPlatformProducts() *PlatformProductQuery {
	query := &PlatformProductQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(platformproduct.Table, platformproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.PlatformProductsTable, store.PlatformProductsColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.PlatformProduct
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Store entity from the query.
// Returns a *NotFoundError when no Store was found.
func (sq *StoreQuery) First(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{store.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StoreQuery) FirstX(ctx context.Context) *Store {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Store ID from the query.
// Returns a *NotFoundError when no Store ID was found.
func (sq *StoreQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{store.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StoreQuery) FirstIDX(ctx context.Context) int64 {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Store entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Store entity is found.
// Returns a *NotFoundError when no Store entities are found.
func (sq *StoreQuery) Only(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{store.Label}
	default:
		return nil, &NotSingularError{store.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StoreQuery) OnlyX(ctx context.Context) *Store {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Store ID in the query.
// Returns a *NotSingularError when more than one Store ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StoreQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{store.Label}
	default:
		err = &NotSingularError{store.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StoreQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Stores.
func (sq *StoreQuery) All(ctx context.Context) ([]*Store, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sq *StoreQuery) AllX(ctx context.Context) []*Store {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Store IDs.
func (sq *StoreQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := sq.Select(store.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StoreQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StoreQuery) Count(ctx context.Context) (int, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StoreQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StoreQuery) Exist(ctx context.Context) (bool, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StoreQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StoreQuery) Clone() *StoreQuery {
	if sq == nil {
		return nil
	}
	return &StoreQuery{
		config:               sq.config,
		limit:                sq.limit,
		offset:               sq.offset,
		order:                append([]OrderFunc{}, sq.order...),
		predicates:           append([]predicate.Store{}, sq.predicates...),
		withTenant:           sq.withTenant.Clone(),
		withOrders:           sq.withOrders.Clone(),
		withPlatformProducts: sq.withPlatformProducts.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithTenant(opts ...func(*TenantQuery)) *StoreQuery {
	query := &TenantQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withTenant = query
	return sq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithOrders(opts ...func(*OrderQuery)) *StoreQuery {
	query := &OrderQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withOrders = query
	return sq
}

// WithPlatformProducts tells the query-builder to eager-load the nodes that are connected to
// the "platform_products" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithPlatformProducts(opts ...func(*PlatformProductQuery)) *StoreQuery {
	query := &PlatformProductQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withPlatformProducts = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Store.Query().
//		GroupBy(store.FieldCreatedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (sq *StoreQuery) GroupBy(field string, fields ...string) *StoreGroupBy {
	grbuild := &StoreGroupBy{config: sq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sq.sqlQuery(ctx), nil
	}
	grbuild.label = store.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Store.Query().
//		Select(store.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *StoreQuery) Select(fields ...string) *StoreSelect {
	sq.fields = append(sq.fields, fields...)
	selbuild := &StoreSelect{StoreQuery: sq}
	selbuild.label = store.Label
	selbuild.flds, selbuild.scan = &sq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a StoreSelect configured with the given aggregations.
func (sq *StoreQuery) Aggregate(fns ...AggregateFunc) *StoreSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StoreQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sq.fields {
		if !store.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	if store.Policy == nil {
		return errors.New("gen: uninitialized store.Policy (forgotten import gen/runtime?)")
	}
	if err := store.Policy.EvalQuery(ctx, sq); err != nil {
		return err
	}
	return nil
}

func (sq *StoreQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Store, error) {
	var (
		nodes       = []*Store{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [3]bool{
			sq.withTenant != nil,
			sq.withOrders != nil,
			sq.withPlatformProducts != nil,
		}
	)
	if sq.withTenant != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, store.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Store).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Store{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sq.schemaConfig.Store
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withTenant; query != nil {
		if err := sq.loadTenant(ctx, query, nodes, nil,
			func(n *Store, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOrders; query != nil {
		if err := sq.loadOrders(ctx, query, nodes,
			func(n *Store) { n.Edges.Orders = []*Order{} },
			func(n *Store, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPlatformProducts; query != nil {
		if err := sq.loadPlatformProducts(ctx, query, nodes,
			func(n *Store) { n.Edges.PlatformProducts = []*PlatformProduct{} },
			func(n *Store, e *PlatformProduct) { n.Edges.PlatformProducts = append(n.Edges.PlatformProducts, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StoreQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Store, init func(*Store), assign func(*Store, *Tenant)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Store)
	for i := range nodes {
		if nodes[i].store_tenant == nil {
			continue
		}
		fk := *nodes[i].store_tenant
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_tenant" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Store, init func(*Store), assign func(*Store, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(store.OrdersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StoreQuery) loadPlatformProducts(ctx context.Context, query *PlatformProductQuery, nodes []*Store, init func(*Store), assign func(*Store, *PlatformProduct)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.InValues(store.PlatformProductsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *StoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Schema = sq.schemaConfig.Store
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StoreQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (sq *StoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: store.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for i := range fields {
			if fields[i] != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(store.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = store.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	t1.Schema(sq.schemaConfig.Store)
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *StoreQuery) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// StoreGroupBy is the group-by builder for Store entities.
type StoreGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StoreGroupBy) Aggregate(fns ...AggregateFunc) *StoreGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgb *StoreGroupBy) Scan(ctx context.Context, v any) error {
	query, err := sgb.path(ctx)
	if err != nil {
		return err
	}
	sgb.sql = query
	return sgb.sqlScan(ctx, v)
}

func (sgb *StoreGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range sgb.fields {
		if !store.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgb *StoreGroupBy) sqlQuery() *sql.Selector {
	selector := sgb.sql.Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgb.fields)+len(sgb.fns))
		for _, f := range sgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgb.fields...)...)
}

// StoreSelect is the builder for selecting fields of Store entities.
type StoreSelect struct {
	*StoreQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StoreSelect) Aggregate(fns ...AggregateFunc) *StoreSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StoreSelect) Scan(ctx context.Context, v any) error {
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	ss.sql = ss.StoreQuery.sqlQuery(ctx)
	return ss.sqlScan(ctx, v)
}

func (ss *StoreSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(ss.sql))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ss.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ss.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ss.sql.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *StoreSelect) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
