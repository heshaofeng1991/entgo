// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StoreCreate) SetCreatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableCreatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StoreCreate) SetUpdatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableUpdatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StoreCreate) SetDeletedAt(t time.Time) *StoreCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableDeletedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetStoreURL sets the "store_url" field.
func (sc *StoreCreate) SetStoreURL(s string) *StoreCreate {
	sc.mutation.SetStoreURL(s)
	return sc
}

// SetPlatform sets the "platform" field.
func (sc *StoreCreate) SetPlatform(s string) *StoreCreate {
	sc.mutation.SetPlatform(s)
	return sc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (sc *StoreCreate) SetNillablePlatform(s *string) *StoreCreate {
	if s != nil {
		sc.SetPlatform(*s)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StoreCreate) SetName(s string) *StoreCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *StoreCreate) SetNillableName(s *string) *StoreCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetCode sets the "code" field.
func (sc *StoreCreate) SetCode(s string) *StoreCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sc *StoreCreate) SetNillableCode(s *string) *StoreCreate {
	if s != nil {
		sc.SetCode(*s)
	}
	return sc
}

// SetEmail sets the "email" field.
func (sc *StoreCreate) SetEmail(s string) *StoreCreate {
	sc.mutation.SetEmail(s)
	return sc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sc *StoreCreate) SetNillableEmail(s *string) *StoreCreate {
	if s != nil {
		sc.SetEmail(*s)
	}
	return sc
}

// SetAccessToken sets the "access_token" field.
func (sc *StoreCreate) SetAccessToken(s string) *StoreCreate {
	sc.mutation.SetAccessToken(s)
	return sc
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (sc *StoreCreate) SetNillableAccessToken(s *string) *StoreCreate {
	if s != nil {
		sc.SetAccessToken(*s)
	}
	return sc
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (sc *StoreCreate) SetTimezoneOffset(i int8) *StoreCreate {
	sc.mutation.SetTimezoneOffset(i)
	return sc
}

// SetNillableTimezoneOffset sets the "timezone_offset" field if the given value is not nil.
func (sc *StoreCreate) SetNillableTimezoneOffset(i *int8) *StoreCreate {
	if i != nil {
		sc.SetTimezoneOffset(*i)
	}
	return sc
}

// SetScope sets the "scope" field.
func (sc *StoreCreate) SetScope(s string) *StoreCreate {
	sc.mutation.SetScope(s)
	return sc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (sc *StoreCreate) SetNillableScope(s *string) *StoreCreate {
	if s != nil {
		sc.SetScope(*s)
	}
	return sc
}

// SetLocationID sets the "location_id" field.
func (sc *StoreCreate) SetLocationID(s string) *StoreCreate {
	sc.mutation.SetLocationID(s)
	return sc
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (sc *StoreCreate) SetNillableLocationID(s *string) *StoreCreate {
	if s != nil {
		sc.SetLocationID(*s)
	}
	return sc
}

// SetLocations sets the "locations" field.
func (sc *StoreCreate) SetLocations(s string) *StoreCreate {
	sc.mutation.SetLocations(s)
	return sc
}

// SetNillableLocations sets the "locations" field if the given value is not nil.
func (sc *StoreCreate) SetNillableLocations(s *string) *StoreCreate {
	if s != nil {
		sc.SetLocations(*s)
	}
	return sc
}

// SetStoreCurrency sets the "store_currency" field.
func (sc *StoreCreate) SetStoreCurrency(s string) *StoreCreate {
	sc.mutation.SetStoreCurrency(s)
	return sc
}

// SetNillableStoreCurrency sets the "store_currency" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStoreCurrency(s *string) *StoreCreate {
	if s != nil {
		sc.SetStoreCurrency(*s)
	}
	return sc
}

// SetInitialStatus sets the "initial_status" field.
func (sc *StoreCreate) SetInitialStatus(i int8) *StoreCreate {
	sc.mutation.SetInitialStatus(i)
	return sc
}

// SetNillableInitialStatus sets the "initial_status" field if the given value is not nil.
func (sc *StoreCreate) SetNillableInitialStatus(i *int8) *StoreCreate {
	if i != nil {
		sc.SetInitialStatus(*i)
	}
	return sc
}

// SetState sets the "state" field.
func (sc *StoreCreate) SetState(s string) *StoreCreate {
	sc.mutation.SetState(s)
	return sc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sc *StoreCreate) SetNillableState(s *string) *StoreCreate {
	if s != nil {
		sc.SetState(*s)
	}
	return sc
}

// SetTimestamp sets the "timestamp" field.
func (sc *StoreCreate) SetTimestamp(i int32) *StoreCreate {
	sc.mutation.SetTimestamp(i)
	return sc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (sc *StoreCreate) SetNillableTimestamp(i *int32) *StoreCreate {
	if i != nil {
		sc.SetTimestamp(*i)
	}
	return sc
}

// SetNonce sets the "nonce" field.
func (sc *StoreCreate) SetNonce(s string) *StoreCreate {
	sc.mutation.SetNonce(s)
	return sc
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (sc *StoreCreate) SetNillableNonce(s *string) *StoreCreate {
	if s != nil {
		sc.SetNonce(*s)
	}
	return sc
}

// SetBalance sets the "balance" field.
func (sc *StoreCreate) SetBalance(f float64) *StoreCreate {
	sc.mutation.SetBalance(f)
	return sc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (sc *StoreCreate) SetNillableBalance(f *float64) *StoreCreate {
	if f != nil {
		sc.SetBalance(*f)
	}
	return sc
}

// SetCurrency sets the "currency" field.
func (sc *StoreCreate) SetCurrency(s string) *StoreCreate {
	sc.mutation.SetCurrency(s)
	return sc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (sc *StoreCreate) SetNillableCurrency(s *string) *StoreCreate {
	if s != nil {
		sc.SetCurrency(*s)
	}
	return sc
}

// SetHandlingFee sets the "handling_fee" field.
func (sc *StoreCreate) SetHandlingFee(f float64) *StoreCreate {
	sc.mutation.SetHandlingFee(f)
	return sc
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (sc *StoreCreate) SetNillableHandlingFee(f *float64) *StoreCreate {
	if f != nil {
		sc.SetHandlingFee(*f)
	}
	return sc
}

// SetShippingOption sets the "shipping_option" field.
func (sc *StoreCreate) SetShippingOption(i int8) *StoreCreate {
	sc.mutation.SetShippingOption(i)
	return sc
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (sc *StoreCreate) SetNillableShippingOption(i *int8) *StoreCreate {
	if i != nil {
		sc.SetShippingOption(*i)
	}
	return sc
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (sc *StoreCreate) SetDefaultWarehouse(i int64) *StoreCreate {
	sc.mutation.SetDefaultWarehouse(i)
	return sc
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (sc *StoreCreate) SetNillableDefaultWarehouse(i *int64) *StoreCreate {
	if i != nil {
		sc.SetDefaultWarehouse(*i)
	}
	return sc
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (sc *StoreCreate) SetPrepayTariff(i int8) *StoreCreate {
	sc.mutation.SetPrepayTariff(i)
	return sc
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (sc *StoreCreate) SetNillablePrepayTariff(i *int8) *StoreCreate {
	if i != nil {
		sc.SetPrepayTariff(*i)
	}
	return sc
}

// SetIossNumber sets the "ioss_number" field.
func (sc *StoreCreate) SetIossNumber(s string) *StoreCreate {
	sc.mutation.SetIossNumber(s)
	return sc
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (sc *StoreCreate) SetNillableIossNumber(s *string) *StoreCreate {
	if s != nil {
		sc.SetIossNumber(*s)
	}
	return sc
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (sc *StoreCreate) SetIossCountryCode(s string) *StoreCreate {
	sc.mutation.SetIossCountryCode(s)
	return sc
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (sc *StoreCreate) SetNillableIossCountryCode(s *string) *StoreCreate {
	if s != nil {
		sc.SetIossCountryCode(*s)
	}
	return sc
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (sc *StoreCreate) SetUkVatNumber(s string) *StoreCreate {
	sc.mutation.SetUkVatNumber(s)
	return sc
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (sc *StoreCreate) SetNillableUkVatNumber(s *string) *StoreCreate {
	if s != nil {
		sc.SetUkVatNumber(*s)
	}
	return sc
}

// SetStoreCode sets the "store_code" field.
func (sc *StoreCreate) SetStoreCode(s string) *StoreCreate {
	sc.mutation.SetStoreCode(s)
	return sc
}

// SetNillableStoreCode sets the "store_code" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStoreCode(s *string) *StoreCreate {
	if s != nil {
		sc.SetStoreCode(*s)
	}
	return sc
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (sc *StoreCreate) SetPresetChannelIds(s string) *StoreCreate {
	sc.mutation.SetPresetChannelIds(s)
	return sc
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (sc *StoreCreate) SetNillablePresetChannelIds(s *string) *StoreCreate {
	if s != nil {
		sc.SetPresetChannelIds(*s)
	}
	return sc
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (sc *StoreCreate) SetTestChannelIds(s string) *StoreCreate {
	sc.mutation.SetTestChannelIds(s)
	return sc
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (sc *StoreCreate) SetNillableTestChannelIds(s *string) *StoreCreate {
	if s != nil {
		sc.SetTestChannelIds(*s)
	}
	return sc
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (sc *StoreCreate) SetFirstInboundAt(t time.Time) *StoreCreate {
	sc.mutation.SetFirstInboundAt(t)
	return sc
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableFirstInboundAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetFirstInboundAt(*t)
	}
	return sc
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (sc *StoreCreate) SetStorageUnitPrice(f float64) *StoreCreate {
	sc.mutation.SetStorageUnitPrice(f)
	return sc
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStorageUnitPrice(f *float64) *StoreCreate {
	if f != nil {
		sc.SetStorageUnitPrice(*f)
	}
	return sc
}

// SetIntegrationAt sets the "integration_at" field.
func (sc *StoreCreate) SetIntegrationAt(t time.Time) *StoreCreate {
	sc.mutation.SetIntegrationAt(t)
	return sc
}

// SetNillableIntegrationAt sets the "integration_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableIntegrationAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetIntegrationAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StoreCreate) SetID(i int64) *StoreCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (sc *StoreCreate) SetTenantID(id int64) *StoreCreate {
	sc.mutation.SetTenantID(id)
	return sc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sc *StoreCreate) SetTenant(t *Tenant) *StoreCreate {
	return sc.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (sc *StoreCreate) AddOrderIDs(ids ...int64) *StoreCreate {
	sc.mutation.AddOrderIDs(ids...)
	return sc
}

// AddOrders adds the "orders" edges to the Order entity.
func (sc *StoreCreate) AddOrders(o ...*Order) *StoreCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sc.AddOrderIDs(ids...)
}

// AddPlatformProductIDs adds the "platform_products" edge to the PlatformProduct entity by IDs.
func (sc *StoreCreate) AddPlatformProductIDs(ids ...int64) *StoreCreate {
	sc.mutation.AddPlatformProductIDs(ids...)
	return sc
}

// AddPlatformProducts adds the "platform_products" edges to the PlatformProduct entity.
func (sc *StoreCreate) AddPlatformProducts(p ...*PlatformProduct) *StoreCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPlatformProductIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	var (
		err  error
		node *Store
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Store)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if store.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized store.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := store.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if store.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized store.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := store.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Platform(); !ok {
		v := store.DefaultPlatform
		sc.mutation.SetPlatform(v)
	}
	if _, ok := sc.mutation.Name(); !ok {
		v := store.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.Code(); !ok {
		v := store.DefaultCode
		sc.mutation.SetCode(v)
	}
	if _, ok := sc.mutation.Email(); !ok {
		v := store.DefaultEmail
		sc.mutation.SetEmail(v)
	}
	if _, ok := sc.mutation.AccessToken(); !ok {
		v := store.DefaultAccessToken
		sc.mutation.SetAccessToken(v)
	}
	if _, ok := sc.mutation.TimezoneOffset(); !ok {
		v := store.DefaultTimezoneOffset
		sc.mutation.SetTimezoneOffset(v)
	}
	if _, ok := sc.mutation.Scope(); !ok {
		v := store.DefaultScope
		sc.mutation.SetScope(v)
	}
	if _, ok := sc.mutation.LocationID(); !ok {
		v := store.DefaultLocationID
		sc.mutation.SetLocationID(v)
	}
	if _, ok := sc.mutation.StoreCurrency(); !ok {
		v := store.DefaultStoreCurrency
		sc.mutation.SetStoreCurrency(v)
	}
	if _, ok := sc.mutation.InitialStatus(); !ok {
		v := store.DefaultInitialStatus
		sc.mutation.SetInitialStatus(v)
	}
	if _, ok := sc.mutation.State(); !ok {
		v := store.DefaultState
		sc.mutation.SetState(v)
	}
	if _, ok := sc.mutation.Timestamp(); !ok {
		v := store.DefaultTimestamp
		sc.mutation.SetTimestamp(v)
	}
	if _, ok := sc.mutation.Nonce(); !ok {
		v := store.DefaultNonce
		sc.mutation.SetNonce(v)
	}
	if _, ok := sc.mutation.Balance(); !ok {
		v := store.DefaultBalance
		sc.mutation.SetBalance(v)
	}
	if _, ok := sc.mutation.Currency(); !ok {
		v := store.DefaultCurrency
		sc.mutation.SetCurrency(v)
	}
	if _, ok := sc.mutation.HandlingFee(); !ok {
		v := store.DefaultHandlingFee
		sc.mutation.SetHandlingFee(v)
	}
	if _, ok := sc.mutation.ShippingOption(); !ok {
		v := store.DefaultShippingOption
		sc.mutation.SetShippingOption(v)
	}
	if _, ok := sc.mutation.DefaultWarehouse(); !ok {
		v := store.DefaultDefaultWarehouse
		sc.mutation.SetDefaultWarehouse(v)
	}
	if _, ok := sc.mutation.PrepayTariff(); !ok {
		v := store.DefaultPrepayTariff
		sc.mutation.SetPrepayTariff(v)
	}
	if _, ok := sc.mutation.IossNumber(); !ok {
		v := store.DefaultIossNumber
		sc.mutation.SetIossNumber(v)
	}
	if _, ok := sc.mutation.IossCountryCode(); !ok {
		v := store.DefaultIossCountryCode
		sc.mutation.SetIossCountryCode(v)
	}
	if _, ok := sc.mutation.UkVatNumber(); !ok {
		v := store.DefaultUkVatNumber
		sc.mutation.SetUkVatNumber(v)
	}
	if _, ok := sc.mutation.StoreCode(); !ok {
		v := store.DefaultStoreCode
		sc.mutation.SetStoreCode(v)
	}
	if _, ok := sc.mutation.StorageUnitPrice(); !ok {
		v := store.DefaultStorageUnitPrice
		sc.mutation.SetStorageUnitPrice(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Store.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Store.updated_at"`)}
	}
	if _, ok := sc.mutation.StoreURL(); !ok {
		return &ValidationError{Name: "store_url", err: errors.New(`gen: missing required field "Store.store_url"`)}
	}
	if _, ok := sc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`gen: missing required field "Store.platform"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Store.name"`)}
	}
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "Store.code"`)}
	}
	if _, ok := sc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`gen: missing required field "Store.email"`)}
	}
	if _, ok := sc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`gen: missing required field "Store.access_token"`)}
	}
	if _, ok := sc.mutation.TimezoneOffset(); !ok {
		return &ValidationError{Name: "timezone_offset", err: errors.New(`gen: missing required field "Store.timezone_offset"`)}
	}
	if _, ok := sc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`gen: missing required field "Store.scope"`)}
	}
	if _, ok := sc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`gen: missing required field "Store.location_id"`)}
	}
	if _, ok := sc.mutation.StoreCurrency(); !ok {
		return &ValidationError{Name: "store_currency", err: errors.New(`gen: missing required field "Store.store_currency"`)}
	}
	if _, ok := sc.mutation.InitialStatus(); !ok {
		return &ValidationError{Name: "initial_status", err: errors.New(`gen: missing required field "Store.initial_status"`)}
	}
	if _, ok := sc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`gen: missing required field "Store.state"`)}
	}
	if _, ok := sc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`gen: missing required field "Store.timestamp"`)}
	}
	if _, ok := sc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`gen: missing required field "Store.nonce"`)}
	}
	if _, ok := sc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`gen: missing required field "Store.balance"`)}
	}
	if _, ok := sc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`gen: missing required field "Store.currency"`)}
	}
	if _, ok := sc.mutation.HandlingFee(); !ok {
		return &ValidationError{Name: "handling_fee", err: errors.New(`gen: missing required field "Store.handling_fee"`)}
	}
	if _, ok := sc.mutation.ShippingOption(); !ok {
		return &ValidationError{Name: "shipping_option", err: errors.New(`gen: missing required field "Store.shipping_option"`)}
	}
	if _, ok := sc.mutation.DefaultWarehouse(); !ok {
		return &ValidationError{Name: "default_warehouse", err: errors.New(`gen: missing required field "Store.default_warehouse"`)}
	}
	if _, ok := sc.mutation.PrepayTariff(); !ok {
		return &ValidationError{Name: "prepay_tariff", err: errors.New(`gen: missing required field "Store.prepay_tariff"`)}
	}
	if _, ok := sc.mutation.IossNumber(); !ok {
		return &ValidationError{Name: "ioss_number", err: errors.New(`gen: missing required field "Store.ioss_number"`)}
	}
	if _, ok := sc.mutation.IossCountryCode(); !ok {
		return &ValidationError{Name: "ioss_country_code", err: errors.New(`gen: missing required field "Store.ioss_country_code"`)}
	}
	if _, ok := sc.mutation.UkVatNumber(); !ok {
		return &ValidationError{Name: "uk_vat_number", err: errors.New(`gen: missing required field "Store.uk_vat_number"`)}
	}
	if _, ok := sc.mutation.StoreCode(); !ok {
		return &ValidationError{Name: "store_code", err: errors.New(`gen: missing required field "Store.store_code"`)}
	}
	if _, ok := sc.mutation.StorageUnitPrice(); !ok {
		return &ValidationError{Name: "storage_unit_price", err: errors.New(`gen: missing required field "Store.storage_unit_price"`)}
	}
	if _, ok := sc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "Store.tenant"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: store.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: store.FieldID,
			},
		}
	)
	_spec.Schema = sc.schemaConfig.Store
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(store.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.StoreURL(); ok {
		_spec.SetField(store.FieldStoreURL, field.TypeString, value)
		_node.StoreURL = value
	}
	if value, ok := sc.mutation.Platform(); ok {
		_spec.SetField(store.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(store.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.Email(); ok {
		_spec.SetField(store.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := sc.mutation.AccessToken(); ok {
		_spec.SetField(store.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := sc.mutation.TimezoneOffset(); ok {
		_spec.SetField(store.FieldTimezoneOffset, field.TypeInt8, value)
		_node.TimezoneOffset = value
	}
	if value, ok := sc.mutation.Scope(); ok {
		_spec.SetField(store.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := sc.mutation.LocationID(); ok {
		_spec.SetField(store.FieldLocationID, field.TypeString, value)
		_node.LocationID = value
	}
	if value, ok := sc.mutation.Locations(); ok {
		_spec.SetField(store.FieldLocations, field.TypeString, value)
		_node.Locations = value
	}
	if value, ok := sc.mutation.StoreCurrency(); ok {
		_spec.SetField(store.FieldStoreCurrency, field.TypeString, value)
		_node.StoreCurrency = value
	}
	if value, ok := sc.mutation.InitialStatus(); ok {
		_spec.SetField(store.FieldInitialStatus, field.TypeInt8, value)
		_node.InitialStatus = value
	}
	if value, ok := sc.mutation.State(); ok {
		_spec.SetField(store.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := sc.mutation.Timestamp(); ok {
		_spec.SetField(store.FieldTimestamp, field.TypeInt32, value)
		_node.Timestamp = value
	}
	if value, ok := sc.mutation.Nonce(); ok {
		_spec.SetField(store.FieldNonce, field.TypeString, value)
		_node.Nonce = value
	}
	if value, ok := sc.mutation.Balance(); ok {
		_spec.SetField(store.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := sc.mutation.Currency(); ok {
		_spec.SetField(store.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sc.mutation.HandlingFee(); ok {
		_spec.SetField(store.FieldHandlingFee, field.TypeFloat64, value)
		_node.HandlingFee = value
	}
	if value, ok := sc.mutation.ShippingOption(); ok {
		_spec.SetField(store.FieldShippingOption, field.TypeInt8, value)
		_node.ShippingOption = value
	}
	if value, ok := sc.mutation.DefaultWarehouse(); ok {
		_spec.SetField(store.FieldDefaultWarehouse, field.TypeInt64, value)
		_node.DefaultWarehouse = value
	}
	if value, ok := sc.mutation.PrepayTariff(); ok {
		_spec.SetField(store.FieldPrepayTariff, field.TypeInt8, value)
		_node.PrepayTariff = value
	}
	if value, ok := sc.mutation.IossNumber(); ok {
		_spec.SetField(store.FieldIossNumber, field.TypeString, value)
		_node.IossNumber = value
	}
	if value, ok := sc.mutation.IossCountryCode(); ok {
		_spec.SetField(store.FieldIossCountryCode, field.TypeString, value)
		_node.IossCountryCode = value
	}
	if value, ok := sc.mutation.UkVatNumber(); ok {
		_spec.SetField(store.FieldUkVatNumber, field.TypeString, value)
		_node.UkVatNumber = value
	}
	if value, ok := sc.mutation.StoreCode(); ok {
		_spec.SetField(store.FieldStoreCode, field.TypeString, value)
		_node.StoreCode = value
	}
	if value, ok := sc.mutation.PresetChannelIds(); ok {
		_spec.SetField(store.FieldPresetChannelIds, field.TypeString, value)
		_node.PresetChannelIds = value
	}
	if value, ok := sc.mutation.TestChannelIds(); ok {
		_spec.SetField(store.FieldTestChannelIds, field.TypeString, value)
		_node.TestChannelIds = value
	}
	if value, ok := sc.mutation.FirstInboundAt(); ok {
		_spec.SetField(store.FieldFirstInboundAt, field.TypeTime, value)
		_node.FirstInboundAt = value
	}
	if value, ok := sc.mutation.StorageUnitPrice(); ok {
		_spec.SetField(store.FieldStorageUnitPrice, field.TypeFloat64, value)
		_node.StorageUnitPrice = value
	}
	if value, ok := sc.mutation.IntegrationAt(); ok {
		_spec.SetField(store.FieldIntegrationAt, field.TypeTime, value)
		_node.IntegrationAt = value
	}
	if nodes := sc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = sc.schemaConfig.Store
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.store_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = sc.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PlatformProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = sc.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *StoreCreate) OnConflict(opts ...sql.ConflictOption) *StoreUpsertOne {
	sc.conflict = opts
	return &StoreUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StoreCreate) OnConflictColumns(columns ...string) *StoreUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertOne{
		create: sc,
	}
}

type (
	// StoreUpsertOne is the builder for "upsert"-ing
	//  one Store node.
	StoreUpsertOne struct {
		create *StoreCreate
	}

	// StoreUpsert is the "OnConflict" setter.
	StoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsert) SetUpdatedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateUpdatedAt() *StoreUpsert {
	u.SetExcluded(store.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsert) SetDeletedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDeletedAt() *StoreUpsert {
	u.SetExcluded(store.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsert) ClearDeletedAt() *StoreUpsert {
	u.SetNull(store.FieldDeletedAt)
	return u
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsert) SetStoreURL(v string) *StoreUpsert {
	u.Set(store.FieldStoreURL, v)
	return u
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStoreURL() *StoreUpsert {
	u.SetExcluded(store.FieldStoreURL)
	return u
}

// SetPlatform sets the "platform" field.
func (u *StoreUpsert) SetPlatform(v string) *StoreUpsert {
	u.Set(store.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *StoreUpsert) UpdatePlatform() *StoreUpsert {
	u.SetExcluded(store.FieldPlatform)
	return u
}

// SetName sets the "name" field.
func (u *StoreUpsert) SetName(v string) *StoreUpsert {
	u.Set(store.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsert) UpdateName() *StoreUpsert {
	u.SetExcluded(store.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *StoreUpsert) SetCode(v string) *StoreUpsert {
	u.Set(store.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCode() *StoreUpsert {
	u.SetExcluded(store.FieldCode)
	return u
}

// SetEmail sets the "email" field.
func (u *StoreUpsert) SetEmail(v string) *StoreUpsert {
	u.Set(store.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *StoreUpsert) UpdateEmail() *StoreUpsert {
	u.SetExcluded(store.FieldEmail)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *StoreUpsert) SetAccessToken(v string) *StoreUpsert {
	u.Set(store.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *StoreUpsert) UpdateAccessToken() *StoreUpsert {
	u.SetExcluded(store.FieldAccessToken)
	return u
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (u *StoreUpsert) SetTimezoneOffset(v int8) *StoreUpsert {
	u.Set(store.FieldTimezoneOffset, v)
	return u
}

// UpdateTimezoneOffset sets the "timezone_offset" field to the value that was provided on create.
func (u *StoreUpsert) UpdateTimezoneOffset() *StoreUpsert {
	u.SetExcluded(store.FieldTimezoneOffset)
	return u
}

// AddTimezoneOffset adds v to the "timezone_offset" field.
func (u *StoreUpsert) AddTimezoneOffset(v int8) *StoreUpsert {
	u.Add(store.FieldTimezoneOffset, v)
	return u
}

// SetScope sets the "scope" field.
func (u *StoreUpsert) SetScope(v string) *StoreUpsert {
	u.Set(store.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *StoreUpsert) UpdateScope() *StoreUpsert {
	u.SetExcluded(store.FieldScope)
	return u
}

// SetLocationID sets the "location_id" field.
func (u *StoreUpsert) SetLocationID(v string) *StoreUpsert {
	u.Set(store.FieldLocationID, v)
	return u
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *StoreUpsert) UpdateLocationID() *StoreUpsert {
	u.SetExcluded(store.FieldLocationID)
	return u
}

// SetLocations sets the "locations" field.
func (u *StoreUpsert) SetLocations(v string) *StoreUpsert {
	u.Set(store.FieldLocations, v)
	return u
}

// UpdateLocations sets the "locations" field to the value that was provided on create.
func (u *StoreUpsert) UpdateLocations() *StoreUpsert {
	u.SetExcluded(store.FieldLocations)
	return u
}

// ClearLocations clears the value of the "locations" field.
func (u *StoreUpsert) ClearLocations() *StoreUpsert {
	u.SetNull(store.FieldLocations)
	return u
}

// SetStoreCurrency sets the "store_currency" field.
func (u *StoreUpsert) SetStoreCurrency(v string) *StoreUpsert {
	u.Set(store.FieldStoreCurrency, v)
	return u
}

// UpdateStoreCurrency sets the "store_currency" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStoreCurrency() *StoreUpsert {
	u.SetExcluded(store.FieldStoreCurrency)
	return u
}

// SetInitialStatus sets the "initial_status" field.
func (u *StoreUpsert) SetInitialStatus(v int8) *StoreUpsert {
	u.Set(store.FieldInitialStatus, v)
	return u
}

// UpdateInitialStatus sets the "initial_status" field to the value that was provided on create.
func (u *StoreUpsert) UpdateInitialStatus() *StoreUpsert {
	u.SetExcluded(store.FieldInitialStatus)
	return u
}

// AddInitialStatus adds v to the "initial_status" field.
func (u *StoreUpsert) AddInitialStatus(v int8) *StoreUpsert {
	u.Add(store.FieldInitialStatus, v)
	return u
}

// SetState sets the "state" field.
func (u *StoreUpsert) SetState(v string) *StoreUpsert {
	u.Set(store.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StoreUpsert) UpdateState() *StoreUpsert {
	u.SetExcluded(store.FieldState)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *StoreUpsert) SetTimestamp(v int32) *StoreUpsert {
	u.Set(store.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *StoreUpsert) UpdateTimestamp() *StoreUpsert {
	u.SetExcluded(store.FieldTimestamp)
	return u
}

// AddTimestamp adds v to the "timestamp" field.
func (u *StoreUpsert) AddTimestamp(v int32) *StoreUpsert {
	u.Add(store.FieldTimestamp, v)
	return u
}

// SetNonce sets the "nonce" field.
func (u *StoreUpsert) SetNonce(v string) *StoreUpsert {
	u.Set(store.FieldNonce, v)
	return u
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *StoreUpsert) UpdateNonce() *StoreUpsert {
	u.SetExcluded(store.FieldNonce)
	return u
}

// SetBalance sets the "balance" field.
func (u *StoreUpsert) SetBalance(v float64) *StoreUpsert {
	u.Set(store.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *StoreUpsert) UpdateBalance() *StoreUpsert {
	u.SetExcluded(store.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *StoreUpsert) AddBalance(v float64) *StoreUpsert {
	u.Add(store.FieldBalance, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsert) SetCurrency(v string) *StoreUpsert {
	u.Set(store.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCurrency() *StoreUpsert {
	u.SetExcluded(store.FieldCurrency)
	return u
}

// SetHandlingFee sets the "handling_fee" field.
func (u *StoreUpsert) SetHandlingFee(v float64) *StoreUpsert {
	u.Set(store.FieldHandlingFee, v)
	return u
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *StoreUpsert) UpdateHandlingFee() *StoreUpsert {
	u.SetExcluded(store.FieldHandlingFee)
	return u
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *StoreUpsert) AddHandlingFee(v float64) *StoreUpsert {
	u.Add(store.FieldHandlingFee, v)
	return u
}

// SetShippingOption sets the "shipping_option" field.
func (u *StoreUpsert) SetShippingOption(v int8) *StoreUpsert {
	u.Set(store.FieldShippingOption, v)
	return u
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *StoreUpsert) UpdateShippingOption() *StoreUpsert {
	u.SetExcluded(store.FieldShippingOption)
	return u
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *StoreUpsert) AddShippingOption(v int8) *StoreUpsert {
	u.Add(store.FieldShippingOption, v)
	return u
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *StoreUpsert) SetDefaultWarehouse(v int64) *StoreUpsert {
	u.Set(store.FieldDefaultWarehouse, v)
	return u
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDefaultWarehouse() *StoreUpsert {
	u.SetExcluded(store.FieldDefaultWarehouse)
	return u
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *StoreUpsert) AddDefaultWarehouse(v int64) *StoreUpsert {
	u.Add(store.FieldDefaultWarehouse, v)
	return u
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *StoreUpsert) SetPrepayTariff(v int8) *StoreUpsert {
	u.Set(store.FieldPrepayTariff, v)
	return u
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *StoreUpsert) UpdatePrepayTariff() *StoreUpsert {
	u.SetExcluded(store.FieldPrepayTariff)
	return u
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *StoreUpsert) AddPrepayTariff(v int8) *StoreUpsert {
	u.Add(store.FieldPrepayTariff, v)
	return u
}

// SetIossNumber sets the "ioss_number" field.
func (u *StoreUpsert) SetIossNumber(v string) *StoreUpsert {
	u.Set(store.FieldIossNumber, v)
	return u
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *StoreUpsert) UpdateIossNumber() *StoreUpsert {
	u.SetExcluded(store.FieldIossNumber)
	return u
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *StoreUpsert) SetIossCountryCode(v string) *StoreUpsert {
	u.Set(store.FieldIossCountryCode, v)
	return u
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *StoreUpsert) UpdateIossCountryCode() *StoreUpsert {
	u.SetExcluded(store.FieldIossCountryCode)
	return u
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *StoreUpsert) SetUkVatNumber(v string) *StoreUpsert {
	u.Set(store.FieldUkVatNumber, v)
	return u
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *StoreUpsert) UpdateUkVatNumber() *StoreUpsert {
	u.SetExcluded(store.FieldUkVatNumber)
	return u
}

// SetStoreCode sets the "store_code" field.
func (u *StoreUpsert) SetStoreCode(v string) *StoreUpsert {
	u.Set(store.FieldStoreCode, v)
	return u
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStoreCode() *StoreUpsert {
	u.SetExcluded(store.FieldStoreCode)
	return u
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *StoreUpsert) SetPresetChannelIds(v string) *StoreUpsert {
	u.Set(store.FieldPresetChannelIds, v)
	return u
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *StoreUpsert) UpdatePresetChannelIds() *StoreUpsert {
	u.SetExcluded(store.FieldPresetChannelIds)
	return u
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *StoreUpsert) ClearPresetChannelIds() *StoreUpsert {
	u.SetNull(store.FieldPresetChannelIds)
	return u
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *StoreUpsert) SetTestChannelIds(v string) *StoreUpsert {
	u.Set(store.FieldTestChannelIds, v)
	return u
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *StoreUpsert) UpdateTestChannelIds() *StoreUpsert {
	u.SetExcluded(store.FieldTestChannelIds)
	return u
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *StoreUpsert) ClearTestChannelIds() *StoreUpsert {
	u.SetNull(store.FieldTestChannelIds)
	return u
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *StoreUpsert) SetFirstInboundAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldFirstInboundAt, v)
	return u
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateFirstInboundAt() *StoreUpsert {
	u.SetExcluded(store.FieldFirstInboundAt)
	return u
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *StoreUpsert) ClearFirstInboundAt() *StoreUpsert {
	u.SetNull(store.FieldFirstInboundAt)
	return u
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *StoreUpsert) SetStorageUnitPrice(v float64) *StoreUpsert {
	u.Set(store.FieldStorageUnitPrice, v)
	return u
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStorageUnitPrice() *StoreUpsert {
	u.SetExcluded(store.FieldStorageUnitPrice)
	return u
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *StoreUpsert) AddStorageUnitPrice(v float64) *StoreUpsert {
	u.Add(store.FieldStorageUnitPrice, v)
	return u
}

// SetIntegrationAt sets the "integration_at" field.
func (u *StoreUpsert) SetIntegrationAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldIntegrationAt, v)
	return u
}

// UpdateIntegrationAt sets the "integration_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateIntegrationAt() *StoreUpsert {
	u.SetExcluded(store.FieldIntegrationAt)
	return u
}

// ClearIntegrationAt clears the value of the "integration_at" field.
func (u *StoreUpsert) ClearIntegrationAt() *StoreUpsert {
	u.SetNull(store.FieldIntegrationAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(store.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StoreUpsertOne) UpdateNewValues() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(store.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(store.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StoreUpsertOne) Ignore() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertOne) DoNothing() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreate.OnConflict
// documentation for more info.
func (u *StoreUpsertOne) Update(set func(*StoreUpsert)) *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertOne) SetUpdatedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateUpdatedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsertOne) SetDeletedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDeletedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsertOne) ClearDeletedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsertOne) SetStoreURL(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStoreURL() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreURL()
	})
}

// SetPlatform sets the "platform" field.
func (u *StoreUpsertOne) SetPlatform(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdatePlatform() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePlatform()
	})
}

// SetName sets the "name" field.
func (u *StoreUpsertOne) SetName(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateName() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *StoreUpsertOne) SetCode(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCode() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCode()
	})
}

// SetEmail sets the "email" field.
func (u *StoreUpsertOne) SetEmail(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateEmail() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateEmail()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *StoreUpsertOne) SetAccessToken(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateAccessToken() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateAccessToken()
	})
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (u *StoreUpsertOne) SetTimezoneOffset(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetTimezoneOffset(v)
	})
}

// AddTimezoneOffset adds v to the "timezone_offset" field.
func (u *StoreUpsertOne) AddTimezoneOffset(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddTimezoneOffset(v)
	})
}

// UpdateTimezoneOffset sets the "timezone_offset" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateTimezoneOffset() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTimezoneOffset()
	})
}

// SetScope sets the "scope" field.
func (u *StoreUpsertOne) SetScope(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateScope() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateScope()
	})
}

// SetLocationID sets the "location_id" field.
func (u *StoreUpsertOne) SetLocationID(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetLocationID(v)
	})
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateLocationID() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLocationID()
	})
}

// SetLocations sets the "locations" field.
func (u *StoreUpsertOne) SetLocations(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetLocations(v)
	})
}

// UpdateLocations sets the "locations" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateLocations() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLocations()
	})
}

// ClearLocations clears the value of the "locations" field.
func (u *StoreUpsertOne) ClearLocations() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearLocations()
	})
}

// SetStoreCurrency sets the "store_currency" field.
func (u *StoreUpsertOne) SetStoreCurrency(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreCurrency(v)
	})
}

// UpdateStoreCurrency sets the "store_currency" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStoreCurrency() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreCurrency()
	})
}

// SetInitialStatus sets the "initial_status" field.
func (u *StoreUpsertOne) SetInitialStatus(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetInitialStatus(v)
	})
}

// AddInitialStatus adds v to the "initial_status" field.
func (u *StoreUpsertOne) AddInitialStatus(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddInitialStatus(v)
	})
}

// UpdateInitialStatus sets the "initial_status" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateInitialStatus() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateInitialStatus()
	})
}

// SetState sets the "state" field.
func (u *StoreUpsertOne) SetState(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateState() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateState()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *StoreUpsertOne) SetTimestamp(v int32) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *StoreUpsertOne) AddTimestamp(v int32) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateTimestamp() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTimestamp()
	})
}

// SetNonce sets the "nonce" field.
func (u *StoreUpsertOne) SetNonce(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateNonce() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateNonce()
	})
}

// SetBalance sets the "balance" field.
func (u *StoreUpsertOne) SetBalance(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *StoreUpsertOne) AddBalance(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateBalance() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsertOne) SetCurrency(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCurrency() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCurrency()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *StoreUpsertOne) SetHandlingFee(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *StoreUpsertOne) AddHandlingFee(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateHandlingFee() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetShippingOption sets the "shipping_option" field.
func (u *StoreUpsertOne) SetShippingOption(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetShippingOption(v)
	})
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *StoreUpsertOne) AddShippingOption(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddShippingOption(v)
	})
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateShippingOption() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateShippingOption()
	})
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *StoreUpsertOne) SetDefaultWarehouse(v int64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDefaultWarehouse(v)
	})
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *StoreUpsertOne) AddDefaultWarehouse(v int64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddDefaultWarehouse(v)
	})
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDefaultWarehouse() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDefaultWarehouse()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *StoreUpsertOne) SetPrepayTariff(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetPrepayTariff(v)
	})
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *StoreUpsertOne) AddPrepayTariff(v int8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdatePrepayTariff() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetIossNumber sets the "ioss_number" field.
func (u *StoreUpsertOne) SetIossNumber(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetIossNumber(v)
	})
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateIossNumber() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIossNumber()
	})
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *StoreUpsertOne) SetIossCountryCode(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetIossCountryCode(v)
	})
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateIossCountryCode() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIossCountryCode()
	})
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *StoreUpsertOne) SetUkVatNumber(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetUkVatNumber(v)
	})
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateUkVatNumber() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUkVatNumber()
	})
}

// SetStoreCode sets the "store_code" field.
func (u *StoreUpsertOne) SetStoreCode(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreCode(v)
	})
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStoreCode() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreCode()
	})
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *StoreUpsertOne) SetPresetChannelIds(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetPresetChannelIds(v)
	})
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdatePresetChannelIds() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePresetChannelIds()
	})
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *StoreUpsertOne) ClearPresetChannelIds() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearPresetChannelIds()
	})
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *StoreUpsertOne) SetTestChannelIds(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetTestChannelIds(v)
	})
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateTestChannelIds() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTestChannelIds()
	})
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *StoreUpsertOne) ClearTestChannelIds() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearTestChannelIds()
	})
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *StoreUpsertOne) SetFirstInboundAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetFirstInboundAt(v)
	})
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateFirstInboundAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateFirstInboundAt()
	})
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *StoreUpsertOne) ClearFirstInboundAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearFirstInboundAt()
	})
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *StoreUpsertOne) SetStorageUnitPrice(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStorageUnitPrice(v)
	})
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *StoreUpsertOne) AddStorageUnitPrice(v float64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddStorageUnitPrice(v)
	})
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStorageUnitPrice() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStorageUnitPrice()
	})
}

// SetIntegrationAt sets the "integration_at" field.
func (u *StoreUpsertOne) SetIntegrationAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntegrationAt(v)
	})
}

// UpdateIntegrationAt sets the "integration_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateIntegrationAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntegrationAt()
	})
}

// ClearIntegrationAt clears the value of the "integration_at" field.
func (u *StoreUpsertOne) ClearIntegrationAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearIntegrationAt()
	})
}

// Exec executes the query.
func (u *StoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for StoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StoreUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StoreUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	builders []*StoreCreate
	conflict []sql.ConflictOption
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *StoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *StoreUpsertBulk {
	scb.conflict = opts
	return &StoreUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StoreCreateBulk) OnConflictColumns(columns ...string) *StoreUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertBulk{
		create: scb,
	}
}

// StoreUpsertBulk is the builder for "upsert"-ing
// a bulk of Store nodes.
type StoreUpsertBulk struct {
	create *StoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(store.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StoreUpsertBulk) UpdateNewValues() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(store.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(store.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StoreUpsertBulk) Ignore() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertBulk) DoNothing() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreateBulk.OnConflict
// documentation for more info.
func (u *StoreUpsertBulk) Update(set func(*StoreUpsert)) *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertBulk) SetUpdatedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateUpdatedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsertBulk) SetDeletedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDeletedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsertBulk) ClearDeletedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *StoreUpsertBulk) SetStoreURL(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStoreURL() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreURL()
	})
}

// SetPlatform sets the "platform" field.
func (u *StoreUpsertBulk) SetPlatform(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdatePlatform() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePlatform()
	})
}

// SetName sets the "name" field.
func (u *StoreUpsertBulk) SetName(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateName() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *StoreUpsertBulk) SetCode(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCode() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCode()
	})
}

// SetEmail sets the "email" field.
func (u *StoreUpsertBulk) SetEmail(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateEmail() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateEmail()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *StoreUpsertBulk) SetAccessToken(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateAccessToken() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateAccessToken()
	})
}

// SetTimezoneOffset sets the "timezone_offset" field.
func (u *StoreUpsertBulk) SetTimezoneOffset(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetTimezoneOffset(v)
	})
}

// AddTimezoneOffset adds v to the "timezone_offset" field.
func (u *StoreUpsertBulk) AddTimezoneOffset(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddTimezoneOffset(v)
	})
}

// UpdateTimezoneOffset sets the "timezone_offset" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateTimezoneOffset() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTimezoneOffset()
	})
}

// SetScope sets the "scope" field.
func (u *StoreUpsertBulk) SetScope(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateScope() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateScope()
	})
}

// SetLocationID sets the "location_id" field.
func (u *StoreUpsertBulk) SetLocationID(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetLocationID(v)
	})
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateLocationID() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLocationID()
	})
}

// SetLocations sets the "locations" field.
func (u *StoreUpsertBulk) SetLocations(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetLocations(v)
	})
}

// UpdateLocations sets the "locations" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateLocations() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLocations()
	})
}

// ClearLocations clears the value of the "locations" field.
func (u *StoreUpsertBulk) ClearLocations() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearLocations()
	})
}

// SetStoreCurrency sets the "store_currency" field.
func (u *StoreUpsertBulk) SetStoreCurrency(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreCurrency(v)
	})
}

// UpdateStoreCurrency sets the "store_currency" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStoreCurrency() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreCurrency()
	})
}

// SetInitialStatus sets the "initial_status" field.
func (u *StoreUpsertBulk) SetInitialStatus(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetInitialStatus(v)
	})
}

// AddInitialStatus adds v to the "initial_status" field.
func (u *StoreUpsertBulk) AddInitialStatus(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddInitialStatus(v)
	})
}

// UpdateInitialStatus sets the "initial_status" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateInitialStatus() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateInitialStatus()
	})
}

// SetState sets the "state" field.
func (u *StoreUpsertBulk) SetState(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateState() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateState()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *StoreUpsertBulk) SetTimestamp(v int32) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *StoreUpsertBulk) AddTimestamp(v int32) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateTimestamp() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTimestamp()
	})
}

// SetNonce sets the "nonce" field.
func (u *StoreUpsertBulk) SetNonce(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateNonce() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateNonce()
	})
}

// SetBalance sets the "balance" field.
func (u *StoreUpsertBulk) SetBalance(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *StoreUpsertBulk) AddBalance(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateBalance() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrency sets the "currency" field.
func (u *StoreUpsertBulk) SetCurrency(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCurrency() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCurrency()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *StoreUpsertBulk) SetHandlingFee(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *StoreUpsertBulk) AddHandlingFee(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateHandlingFee() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetShippingOption sets the "shipping_option" field.
func (u *StoreUpsertBulk) SetShippingOption(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetShippingOption(v)
	})
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *StoreUpsertBulk) AddShippingOption(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddShippingOption(v)
	})
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateShippingOption() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateShippingOption()
	})
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *StoreUpsertBulk) SetDefaultWarehouse(v int64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDefaultWarehouse(v)
	})
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *StoreUpsertBulk) AddDefaultWarehouse(v int64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddDefaultWarehouse(v)
	})
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDefaultWarehouse() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDefaultWarehouse()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *StoreUpsertBulk) SetPrepayTariff(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetPrepayTariff(v)
	})
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *StoreUpsertBulk) AddPrepayTariff(v int8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdatePrepayTariff() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetIossNumber sets the "ioss_number" field.
func (u *StoreUpsertBulk) SetIossNumber(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetIossNumber(v)
	})
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateIossNumber() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIossNumber()
	})
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *StoreUpsertBulk) SetIossCountryCode(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetIossCountryCode(v)
	})
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateIossCountryCode() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIossCountryCode()
	})
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *StoreUpsertBulk) SetUkVatNumber(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetUkVatNumber(v)
	})
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateUkVatNumber() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUkVatNumber()
	})
}

// SetStoreCode sets the "store_code" field.
func (u *StoreUpsertBulk) SetStoreCode(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStoreCode(v)
	})
}

// UpdateStoreCode sets the "store_code" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStoreCode() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStoreCode()
	})
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *StoreUpsertBulk) SetPresetChannelIds(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetPresetChannelIds(v)
	})
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdatePresetChannelIds() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdatePresetChannelIds()
	})
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *StoreUpsertBulk) ClearPresetChannelIds() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearPresetChannelIds()
	})
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *StoreUpsertBulk) SetTestChannelIds(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetTestChannelIds(v)
	})
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateTestChannelIds() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateTestChannelIds()
	})
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *StoreUpsertBulk) ClearTestChannelIds() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearTestChannelIds()
	})
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *StoreUpsertBulk) SetFirstInboundAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetFirstInboundAt(v)
	})
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateFirstInboundAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateFirstInboundAt()
	})
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *StoreUpsertBulk) ClearFirstInboundAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearFirstInboundAt()
	})
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *StoreUpsertBulk) SetStorageUnitPrice(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStorageUnitPrice(v)
	})
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *StoreUpsertBulk) AddStorageUnitPrice(v float64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddStorageUnitPrice(v)
	})
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStorageUnitPrice() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStorageUnitPrice()
	})
}

// SetIntegrationAt sets the "integration_at" field.
func (u *StoreUpsertBulk) SetIntegrationAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetIntegrationAt(v)
	})
}

// UpdateIntegrationAt sets the "integration_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateIntegrationAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateIntegrationAt()
	})
}

// ClearIntegrationAt clears the value of the "integration_at" field.
func (u *StoreUpsertBulk) ClearIntegrationAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearIntegrationAt()
	})
}

// Exec executes the query.
func (u *StoreUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the StoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for StoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
