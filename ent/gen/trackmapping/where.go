// Code generated by ent, DO NOT EDIT.

package trackmapping

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// ExtTrackingNumber applies equality check predicate on the "ext_tracking_number" field. It's identical to ExtTrackingNumberEQ.
func ExtTrackingNumber(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtTrackingNumber), v))
	})
}

// TrackDetails applies equality check predicate on the "track_details" field. It's identical to TrackDetailsEQ.
func TrackDetails(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackDetails), v))
	})
}

// LastUpdatedAt applies equality check predicate on the "last_updated_at" field. It's identical to LastUpdatedAtEQ.
func LastUpdatedAt(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUpdatedAt), v))
	})
}

// CourierPlatform applies equality check predicate on the "courier_platform" field. It's identical to CourierPlatformEQ.
func CourierPlatform(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Flag applies equality check predicate on the "flag" field. It's identical to FlagEQ.
func Flag(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlag), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingURL), v))
	})
}

// ExtTrackingNumberEQ applies the EQ predicate on the "ext_tracking_number" field.
func ExtTrackingNumberEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberNEQ applies the NEQ predicate on the "ext_tracking_number" field.
func ExtTrackingNumberNEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberIn applies the In predicate on the "ext_tracking_number" field.
func ExtTrackingNumberIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtTrackingNumber), v...))
	})
}

// ExtTrackingNumberNotIn applies the NotIn predicate on the "ext_tracking_number" field.
func ExtTrackingNumberNotIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtTrackingNumber), v...))
	})
}

// ExtTrackingNumberGT applies the GT predicate on the "ext_tracking_number" field.
func ExtTrackingNumberGT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberGTE applies the GTE predicate on the "ext_tracking_number" field.
func ExtTrackingNumberGTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberLT applies the LT predicate on the "ext_tracking_number" field.
func ExtTrackingNumberLT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberLTE applies the LTE predicate on the "ext_tracking_number" field.
func ExtTrackingNumberLTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberContains applies the Contains predicate on the "ext_tracking_number" field.
func ExtTrackingNumberContains(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberHasPrefix applies the HasPrefix predicate on the "ext_tracking_number" field.
func ExtTrackingNumberHasPrefix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberHasSuffix applies the HasSuffix predicate on the "ext_tracking_number" field.
func ExtTrackingNumberHasSuffix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberEqualFold applies the EqualFold predicate on the "ext_tracking_number" field.
func ExtTrackingNumberEqualFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtTrackingNumber), v))
	})
}

// ExtTrackingNumberContainsFold applies the ContainsFold predicate on the "ext_tracking_number" field.
func ExtTrackingNumberContainsFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtTrackingNumber), v))
	})
}

// TrackDetailsEQ applies the EQ predicate on the "track_details" field.
func TrackDetailsEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsNEQ applies the NEQ predicate on the "track_details" field.
func TrackDetailsNEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsIn applies the In predicate on the "track_details" field.
func TrackDetailsIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackDetails), v...))
	})
}

// TrackDetailsNotIn applies the NotIn predicate on the "track_details" field.
func TrackDetailsNotIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackDetails), v...))
	})
}

// TrackDetailsGT applies the GT predicate on the "track_details" field.
func TrackDetailsGT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsGTE applies the GTE predicate on the "track_details" field.
func TrackDetailsGTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsLT applies the LT predicate on the "track_details" field.
func TrackDetailsLT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsLTE applies the LTE predicate on the "track_details" field.
func TrackDetailsLTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsContains applies the Contains predicate on the "track_details" field.
func TrackDetailsContains(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsHasPrefix applies the HasPrefix predicate on the "track_details" field.
func TrackDetailsHasPrefix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsHasSuffix applies the HasSuffix predicate on the "track_details" field.
func TrackDetailsHasSuffix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsIsNil applies the IsNil predicate on the "track_details" field.
func TrackDetailsIsNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackDetails)))
	})
}

// TrackDetailsNotNil applies the NotNil predicate on the "track_details" field.
func TrackDetailsNotNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackDetails)))
	})
}

// TrackDetailsEqualFold applies the EqualFold predicate on the "track_details" field.
func TrackDetailsEqualFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackDetails), v))
	})
}

// TrackDetailsContainsFold applies the ContainsFold predicate on the "track_details" field.
func TrackDetailsContainsFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackDetails), v))
	})
}

// LastUpdatedAtEQ applies the EQ predicate on the "last_updated_at" field.
func LastUpdatedAtEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtNEQ applies the NEQ predicate on the "last_updated_at" field.
func LastUpdatedAtNEQ(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtIn applies the In predicate on the "last_updated_at" field.
func LastUpdatedAtIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastUpdatedAt), v...))
	})
}

// LastUpdatedAtNotIn applies the NotIn predicate on the "last_updated_at" field.
func LastUpdatedAtNotIn(vs ...time.Time) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastUpdatedAt), v...))
	})
}

// LastUpdatedAtGT applies the GT predicate on the "last_updated_at" field.
func LastUpdatedAtGT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtGTE applies the GTE predicate on the "last_updated_at" field.
func LastUpdatedAtGTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtLT applies the LT predicate on the "last_updated_at" field.
func LastUpdatedAtLT(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtLTE applies the LTE predicate on the "last_updated_at" field.
func LastUpdatedAtLTE(v time.Time) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastUpdatedAt), v))
	})
}

// LastUpdatedAtIsNil applies the IsNil predicate on the "last_updated_at" field.
func LastUpdatedAtIsNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastUpdatedAt)))
	})
}

// LastUpdatedAtNotNil applies the NotNil predicate on the "last_updated_at" field.
func LastUpdatedAtNotNil() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastUpdatedAt)))
	})
}

// CourierPlatformEQ applies the EQ predicate on the "courier_platform" field.
func CourierPlatformEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformNEQ applies the NEQ predicate on the "courier_platform" field.
func CourierPlatformNEQ(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformIn applies the In predicate on the "courier_platform" field.
func CourierPlatformIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformNotIn applies the NotIn predicate on the "courier_platform" field.
func CourierPlatformNotIn(vs ...string) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformGT applies the GT predicate on the "courier_platform" field.
func CourierPlatformGT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformGTE applies the GTE predicate on the "courier_platform" field.
func CourierPlatformGTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLT applies the LT predicate on the "courier_platform" field.
func CourierPlatformLT(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLTE applies the LTE predicate on the "courier_platform" field.
func CourierPlatformLTE(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContains applies the Contains predicate on the "courier_platform" field.
func CourierPlatformContains(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasPrefix applies the HasPrefix predicate on the "courier_platform" field.
func CourierPlatformHasPrefix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasSuffix applies the HasSuffix predicate on the "courier_platform" field.
func CourierPlatformHasSuffix(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformEqualFold applies the EqualFold predicate on the "courier_platform" field.
func CourierPlatformEqualFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContainsFold applies the ContainsFold predicate on the "courier_platform" field.
func CourierPlatformContainsFold(v string) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierPlatform), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// FlagEQ applies the EQ predicate on the "flag" field.
func FlagEQ(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlag), v))
	})
}

// FlagNEQ applies the NEQ predicate on the "flag" field.
func FlagNEQ(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlag), v))
	})
}

// FlagIn applies the In predicate on the "flag" field.
func FlagIn(vs ...int8) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFlag), v...))
	})
}

// FlagNotIn applies the NotIn predicate on the "flag" field.
func FlagNotIn(vs ...int8) predicate.TrackMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFlag), v...))
	})
}

// FlagGT applies the GT predicate on the "flag" field.
func FlagGT(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlag), v))
	})
}

// FlagGTE applies the GTE predicate on the "flag" field.
func FlagGTE(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlag), v))
	})
}

// FlagLT applies the LT predicate on the "flag" field.
func FlagLT(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlag), v))
	})
}

// FlagLTE applies the LTE predicate on the "flag" field.
func FlagLTE(v int8) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlag), v))
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.TrackMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.TrackMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TrackMapping) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TrackMapping) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TrackMapping) predicate.TrackMapping {
	return predicate.TrackMapping(func(s *sql.Selector) {
		p(s.Not())
	})
}
