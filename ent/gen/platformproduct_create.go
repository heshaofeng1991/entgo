// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// PlatformProductCreate is the builder for creating a PlatformProduct entity.
type PlatformProductCreate struct {
	config
	mutation *PlatformProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PlatformProductCreate) SetCreatedAt(t time.Time) *PlatformProductCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableCreatedAt(t *time.Time) *PlatformProductCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PlatformProductCreate) SetUpdatedAt(t time.Time) *PlatformProductCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableUpdatedAt(t *time.Time) *PlatformProductCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetDeletedAt sets the "deleted_at" field.
func (ppc *PlatformProductCreate) SetDeletedAt(t time.Time) *PlatformProductCreate {
	ppc.mutation.SetDeletedAt(t)
	return ppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableDeletedAt(t *time.Time) *PlatformProductCreate {
	if t != nil {
		ppc.SetDeletedAt(*t)
	}
	return ppc
}

// SetStoreID sets the "store_id" field.
func (ppc *PlatformProductCreate) SetStoreID(i int64) *PlatformProductCreate {
	ppc.mutation.SetStoreID(i)
	return ppc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableStoreID(i *int64) *PlatformProductCreate {
	if i != nil {
		ppc.SetStoreID(*i)
	}
	return ppc
}

// SetListingID sets the "listing_id" field.
func (ppc *PlatformProductCreate) SetListingID(s string) *PlatformProductCreate {
	ppc.mutation.SetListingID(s)
	return ppc
}

// SetCollectionID sets the "collection_id" field.
func (ppc *PlatformProductCreate) SetCollectionID(s string) *PlatformProductCreate {
	ppc.mutation.SetCollectionID(s)
	return ppc
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableCollectionID(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetCollectionID(*s)
	}
	return ppc
}

// SetListingSku sets the "listing_sku" field.
func (ppc *PlatformProductCreate) SetListingSku(s string) *PlatformProductCreate {
	ppc.mutation.SetListingSku(s)
	return ppc
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableListingSku(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetListingSku(*s)
	}
	return ppc
}

// SetBarcode sets the "barcode" field.
func (ppc *PlatformProductCreate) SetBarcode(s string) *PlatformProductCreate {
	ppc.mutation.SetBarcode(s)
	return ppc
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableBarcode(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetBarcode(*s)
	}
	return ppc
}

// SetName sets the "name" field.
func (ppc *PlatformProductCreate) SetName(s string) *PlatformProductCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableName(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetName(*s)
	}
	return ppc
}

// SetImages sets the "images" field.
func (ppc *PlatformProductCreate) SetImages(s string) *PlatformProductCreate {
	ppc.mutation.SetImages(s)
	return ppc
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableImages(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetImages(*s)
	}
	return ppc
}

// SetVendor sets the "vendor" field.
func (ppc *PlatformProductCreate) SetVendor(s string) *PlatformProductCreate {
	ppc.mutation.SetVendor(s)
	return ppc
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableVendor(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetVendor(*s)
	}
	return ppc
}

// SetSellingPrice sets the "selling_price" field.
func (ppc *PlatformProductCreate) SetSellingPrice(f float64) *PlatformProductCreate {
	ppc.mutation.SetSellingPrice(f)
	return ppc
}

// SetNillableSellingPrice sets the "selling_price" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableSellingPrice(f *float64) *PlatformProductCreate {
	if f != nil {
		ppc.SetSellingPrice(*f)
	}
	return ppc
}

// SetCurrency sets the "currency" field.
func (ppc *PlatformProductCreate) SetCurrency(s string) *PlatformProductCreate {
	ppc.mutation.SetCurrency(s)
	return ppc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableCurrency(s *string) *PlatformProductCreate {
	if s != nil {
		ppc.SetCurrency(*s)
	}
	return ppc
}

// SetGrams sets the "grams" field.
func (ppc *PlatformProductCreate) SetGrams(i int) *PlatformProductCreate {
	ppc.mutation.SetGrams(i)
	return ppc
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableGrams(i *int) *PlatformProductCreate {
	if i != nil {
		ppc.SetGrams(*i)
	}
	return ppc
}

// SetPlatformStatus sets the "platform_status" field.
func (ppc *PlatformProductCreate) SetPlatformStatus(i int8) *PlatformProductCreate {
	ppc.mutation.SetPlatformStatus(i)
	return ppc
}

// SetNillablePlatformStatus sets the "platform_status" field if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillablePlatformStatus(i *int8) *PlatformProductCreate {
	if i != nil {
		ppc.SetPlatformStatus(*i)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *PlatformProductCreate) SetID(i int64) *PlatformProductCreate {
	ppc.mutation.SetID(i)
	return ppc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ppc *PlatformProductCreate) SetTenantID(id int64) *PlatformProductCreate {
	ppc.mutation.SetTenantID(id)
	return ppc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ppc *PlatformProductCreate) SetTenant(t *Tenant) *PlatformProductCreate {
	return ppc.SetTenantID(t.ID)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (ppc *PlatformProductCreate) AddProductMappingIDs(ids ...int64) *PlatformProductCreate {
	ppc.mutation.AddProductMappingIDs(ids...)
	return ppc
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (ppc *PlatformProductCreate) AddProductMappings(p ...*ProductMapping) *PlatformProductCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddProductMappingIDs(ids...)
}

// SetStoresID sets the "stores" edge to the Store entity by ID.
func (ppc *PlatformProductCreate) SetStoresID(id int64) *PlatformProductCreate {
	ppc.mutation.SetStoresID(id)
	return ppc
}

// SetNillableStoresID sets the "stores" edge to the Store entity by ID if the given value is not nil.
func (ppc *PlatformProductCreate) SetNillableStoresID(id *int64) *PlatformProductCreate {
	if id != nil {
		ppc = ppc.SetStoresID(*id)
	}
	return ppc
}

// SetStores sets the "stores" edge to the Store entity.
func (ppc *PlatformProductCreate) SetStores(s *Store) *PlatformProductCreate {
	return ppc.SetStoresID(s.ID)
}

// Mutation returns the PlatformProductMutation object of the builder.
func (ppc *PlatformProductCreate) Mutation() *PlatformProductMutation {
	return ppc.mutation
}

// Save creates the PlatformProduct in the database.
func (ppc *PlatformProductCreate) Save(ctx context.Context) (*PlatformProduct, error) {
	var (
		err  error
		node *PlatformProduct
	)
	if err := ppc.defaults(); err != nil {
		return nil, err
	}
	if len(ppc.hooks) == 0 {
		if err = ppc.check(); err != nil {
			return nil, err
		}
		node, err = ppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlatformProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppc.check(); err != nil {
				return nil, err
			}
			ppc.mutation = mutation
			if node, err = ppc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ppc.hooks) - 1; i >= 0; i-- {
			if ppc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ppc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ppc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlatformProduct)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlatformProductMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PlatformProductCreate) SaveX(ctx context.Context) *PlatformProduct {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PlatformProductCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PlatformProductCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PlatformProductCreate) defaults() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		if platformproduct.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized platformproduct.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := platformproduct.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		if platformproduct.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized platformproduct.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := platformproduct.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.StoreID(); !ok {
		v := platformproduct.DefaultStoreID
		ppc.mutation.SetStoreID(v)
	}
	if _, ok := ppc.mutation.CollectionID(); !ok {
		v := platformproduct.DefaultCollectionID
		ppc.mutation.SetCollectionID(v)
	}
	if _, ok := ppc.mutation.ListingSku(); !ok {
		v := platformproduct.DefaultListingSku
		ppc.mutation.SetListingSku(v)
	}
	if _, ok := ppc.mutation.Barcode(); !ok {
		v := platformproduct.DefaultBarcode
		ppc.mutation.SetBarcode(v)
	}
	if _, ok := ppc.mutation.Name(); !ok {
		v := platformproduct.DefaultName
		ppc.mutation.SetName(v)
	}
	if _, ok := ppc.mutation.SellingPrice(); !ok {
		v := platformproduct.DefaultSellingPrice
		ppc.mutation.SetSellingPrice(v)
	}
	if _, ok := ppc.mutation.Currency(); !ok {
		v := platformproduct.DefaultCurrency
		ppc.mutation.SetCurrency(v)
	}
	if _, ok := ppc.mutation.Grams(); !ok {
		v := platformproduct.DefaultGrams
		ppc.mutation.SetGrams(v)
	}
	if _, ok := ppc.mutation.PlatformStatus(); !ok {
		v := platformproduct.DefaultPlatformStatus
		ppc.mutation.SetPlatformStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PlatformProductCreate) check() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "PlatformProduct.created_at"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "PlatformProduct.updated_at"`)}
	}
	if _, ok := ppc.mutation.ListingID(); !ok {
		return &ValidationError{Name: "listing_id", err: errors.New(`gen: missing required field "PlatformProduct.listing_id"`)}
	}
	if v, ok := ppc.mutation.ListingID(); ok {
		if err := platformproduct.ListingIDValidator(v); err != nil {
			return &ValidationError{Name: "listing_id", err: fmt.Errorf(`gen: validator failed for field "PlatformProduct.listing_id": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection_id", err: errors.New(`gen: missing required field "PlatformProduct.collection_id"`)}
	}
	if _, ok := ppc.mutation.ListingSku(); !ok {
		return &ValidationError{Name: "listing_sku", err: errors.New(`gen: missing required field "PlatformProduct.listing_sku"`)}
	}
	if _, ok := ppc.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`gen: missing required field "PlatformProduct.barcode"`)}
	}
	if _, ok := ppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "PlatformProduct.name"`)}
	}
	if _, ok := ppc.mutation.SellingPrice(); !ok {
		return &ValidationError{Name: "selling_price", err: errors.New(`gen: missing required field "PlatformProduct.selling_price"`)}
	}
	if _, ok := ppc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`gen: missing required field "PlatformProduct.currency"`)}
	}
	if _, ok := ppc.mutation.Grams(); !ok {
		return &ValidationError{Name: "grams", err: errors.New(`gen: missing required field "PlatformProduct.grams"`)}
	}
	if _, ok := ppc.mutation.PlatformStatus(); !ok {
		return &ValidationError{Name: "platform_status", err: errors.New(`gen: missing required field "PlatformProduct.platform_status"`)}
	}
	if _, ok := ppc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "PlatformProduct.tenant"`)}
	}
	return nil
}

func (ppc *PlatformProductCreate) sqlSave(ctx context.Context) (*PlatformProduct, error) {
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ppc *PlatformProductCreate) createSpec() (*PlatformProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &PlatformProduct{config: ppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: platformproduct.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: platformproduct.FieldID,
			},
		}
	)
	_spec.Schema = ppc.schemaConfig.PlatformProduct
	_spec.OnConflict = ppc.conflict
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(platformproduct.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(platformproduct.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.DeletedAt(); ok {
		_spec.SetField(platformproduct.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ppc.mutation.ListingID(); ok {
		_spec.SetField(platformproduct.FieldListingID, field.TypeString, value)
		_node.ListingID = value
	}
	if value, ok := ppc.mutation.CollectionID(); ok {
		_spec.SetField(platformproduct.FieldCollectionID, field.TypeString, value)
		_node.CollectionID = value
	}
	if value, ok := ppc.mutation.ListingSku(); ok {
		_spec.SetField(platformproduct.FieldListingSku, field.TypeString, value)
		_node.ListingSku = value
	}
	if value, ok := ppc.mutation.Barcode(); ok {
		_spec.SetField(platformproduct.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(platformproduct.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Images(); ok {
		_spec.SetField(platformproduct.FieldImages, field.TypeString, value)
		_node.Images = value
	}
	if value, ok := ppc.mutation.Vendor(); ok {
		_spec.SetField(platformproduct.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := ppc.mutation.SellingPrice(); ok {
		_spec.SetField(platformproduct.FieldSellingPrice, field.TypeFloat64, value)
		_node.SellingPrice = value
	}
	if value, ok := ppc.mutation.Currency(); ok {
		_spec.SetField(platformproduct.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ppc.mutation.Grams(); ok {
		_spec.SetField(platformproduct.FieldGrams, field.TypeInt, value)
		_node.Grams = value
	}
	if value, ok := ppc.mutation.PlatformStatus(); ok {
		_spec.SetField(platformproduct.FieldPlatformStatus, field.TypeInt8, value)
		_node.PlatformStatus = value
	}
	if nodes := ppc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ppc.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_product_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppc.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ppc.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlatformProduct.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppc *PlatformProductCreate) OnConflict(opts ...sql.ConflictOption) *PlatformProductUpsertOne {
	ppc.conflict = opts
	return &PlatformProductUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *PlatformProductCreate) OnConflictColumns(columns ...string) *PlatformProductUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &PlatformProductUpsertOne{
		create: ppc,
	}
}

type (
	// PlatformProductUpsertOne is the builder for "upsert"-ing
	//  one PlatformProduct node.
	PlatformProductUpsertOne struct {
		create *PlatformProductCreate
	}

	// PlatformProductUpsert is the "OnConflict" setter.
	PlatformProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformProductUpsert) SetUpdatedAt(v time.Time) *PlatformProductUpsert {
	u.Set(platformproduct.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateUpdatedAt() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformProductUpsert) SetDeletedAt(v time.Time) *PlatformProductUpsert {
	u.Set(platformproduct.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateDeletedAt() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlatformProductUpsert) ClearDeletedAt() *PlatformProductUpsert {
	u.SetNull(platformproduct.FieldDeletedAt)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *PlatformProductUpsert) SetStoreID(v int64) *PlatformProductUpsert {
	u.Set(platformproduct.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateStoreID() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *PlatformProductUpsert) ClearStoreID() *PlatformProductUpsert {
	u.SetNull(platformproduct.FieldStoreID)
	return u
}

// SetListingID sets the "listing_id" field.
func (u *PlatformProductUpsert) SetListingID(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldListingID, v)
	return u
}

// UpdateListingID sets the "listing_id" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateListingID() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldListingID)
	return u
}

// SetCollectionID sets the "collection_id" field.
func (u *PlatformProductUpsert) SetCollectionID(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldCollectionID, v)
	return u
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateCollectionID() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldCollectionID)
	return u
}

// SetListingSku sets the "listing_sku" field.
func (u *PlatformProductUpsert) SetListingSku(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldListingSku, v)
	return u
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateListingSku() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldListingSku)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *PlatformProductUpsert) SetBarcode(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateBarcode() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldBarcode)
	return u
}

// SetName sets the "name" field.
func (u *PlatformProductUpsert) SetName(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateName() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldName)
	return u
}

// SetImages sets the "images" field.
func (u *PlatformProductUpsert) SetImages(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateImages() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *PlatformProductUpsert) ClearImages() *PlatformProductUpsert {
	u.SetNull(platformproduct.FieldImages)
	return u
}

// SetVendor sets the "vendor" field.
func (u *PlatformProductUpsert) SetVendor(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldVendor, v)
	return u
}

// UpdateVendor sets the "vendor" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateVendor() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldVendor)
	return u
}

// ClearVendor clears the value of the "vendor" field.
func (u *PlatformProductUpsert) ClearVendor() *PlatformProductUpsert {
	u.SetNull(platformproduct.FieldVendor)
	return u
}

// SetSellingPrice sets the "selling_price" field.
func (u *PlatformProductUpsert) SetSellingPrice(v float64) *PlatformProductUpsert {
	u.Set(platformproduct.FieldSellingPrice, v)
	return u
}

// UpdateSellingPrice sets the "selling_price" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateSellingPrice() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldSellingPrice)
	return u
}

// AddSellingPrice adds v to the "selling_price" field.
func (u *PlatformProductUpsert) AddSellingPrice(v float64) *PlatformProductUpsert {
	u.Add(platformproduct.FieldSellingPrice, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *PlatformProductUpsert) SetCurrency(v string) *PlatformProductUpsert {
	u.Set(platformproduct.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateCurrency() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldCurrency)
	return u
}

// SetGrams sets the "grams" field.
func (u *PlatformProductUpsert) SetGrams(v int) *PlatformProductUpsert {
	u.Set(platformproduct.FieldGrams, v)
	return u
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdateGrams() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldGrams)
	return u
}

// AddGrams adds v to the "grams" field.
func (u *PlatformProductUpsert) AddGrams(v int) *PlatformProductUpsert {
	u.Add(platformproduct.FieldGrams, v)
	return u
}

// SetPlatformStatus sets the "platform_status" field.
func (u *PlatformProductUpsert) SetPlatformStatus(v int8) *PlatformProductUpsert {
	u.Set(platformproduct.FieldPlatformStatus, v)
	return u
}

// UpdatePlatformStatus sets the "platform_status" field to the value that was provided on create.
func (u *PlatformProductUpsert) UpdatePlatformStatus() *PlatformProductUpsert {
	u.SetExcluded(platformproduct.FieldPlatformStatus)
	return u
}

// AddPlatformStatus adds v to the "platform_status" field.
func (u *PlatformProductUpsert) AddPlatformStatus(v int8) *PlatformProductUpsert {
	u.Add(platformproduct.FieldPlatformStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platformproduct.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformProductUpsertOne) UpdateNewValues() *PlatformProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(platformproduct.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(platformproduct.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlatformProductUpsertOne) Ignore() *PlatformProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformProductUpsertOne) DoNothing() *PlatformProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformProductCreate.OnConflict
// documentation for more info.
func (u *PlatformProductUpsertOne) Update(set func(*PlatformProductUpsert)) *PlatformProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformProductUpsertOne) SetUpdatedAt(v time.Time) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateUpdatedAt() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformProductUpsertOne) SetDeletedAt(v time.Time) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateDeletedAt() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlatformProductUpsertOne) ClearDeletedAt() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStoreID sets the "store_id" field.
func (u *PlatformProductUpsertOne) SetStoreID(v int64) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateStoreID() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *PlatformProductUpsertOne) ClearStoreID() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearStoreID()
	})
}

// SetListingID sets the "listing_id" field.
func (u *PlatformProductUpsertOne) SetListingID(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetListingID(v)
	})
}

// UpdateListingID sets the "listing_id" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateListingID() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateListingID()
	})
}

// SetCollectionID sets the "collection_id" field.
func (u *PlatformProductUpsertOne) SetCollectionID(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetCollectionID(v)
	})
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateCollectionID() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateCollectionID()
	})
}

// SetListingSku sets the "listing_sku" field.
func (u *PlatformProductUpsertOne) SetListingSku(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetListingSku(v)
	})
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateListingSku() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateListingSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *PlatformProductUpsertOne) SetBarcode(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateBarcode() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateBarcode()
	})
}

// SetName sets the "name" field.
func (u *PlatformProductUpsertOne) SetName(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateName() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateName()
	})
}

// SetImages sets the "images" field.
func (u *PlatformProductUpsertOne) SetImages(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateImages() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *PlatformProductUpsertOne) ClearImages() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearImages()
	})
}

// SetVendor sets the "vendor" field.
func (u *PlatformProductUpsertOne) SetVendor(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetVendor(v)
	})
}

// UpdateVendor sets the "vendor" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateVendor() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateVendor()
	})
}

// ClearVendor clears the value of the "vendor" field.
func (u *PlatformProductUpsertOne) ClearVendor() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearVendor()
	})
}

// SetSellingPrice sets the "selling_price" field.
func (u *PlatformProductUpsertOne) SetSellingPrice(v float64) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetSellingPrice(v)
	})
}

// AddSellingPrice adds v to the "selling_price" field.
func (u *PlatformProductUpsertOne) AddSellingPrice(v float64) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddSellingPrice(v)
	})
}

// UpdateSellingPrice sets the "selling_price" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateSellingPrice() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateSellingPrice()
	})
}

// SetCurrency sets the "currency" field.
func (u *PlatformProductUpsertOne) SetCurrency(v string) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateCurrency() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateCurrency()
	})
}

// SetGrams sets the "grams" field.
func (u *PlatformProductUpsertOne) SetGrams(v int) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *PlatformProductUpsertOne) AddGrams(v int) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdateGrams() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateGrams()
	})
}

// SetPlatformStatus sets the "platform_status" field.
func (u *PlatformProductUpsertOne) SetPlatformStatus(v int8) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetPlatformStatus(v)
	})
}

// AddPlatformStatus adds v to the "platform_status" field.
func (u *PlatformProductUpsertOne) AddPlatformStatus(v int8) *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddPlatformStatus(v)
	})
}

// UpdatePlatformStatus sets the "platform_status" field to the value that was provided on create.
func (u *PlatformProductUpsertOne) UpdatePlatformStatus() *PlatformProductUpsertOne {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdatePlatformStatus()
	})
}

// Exec executes the query.
func (u *PlatformProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PlatformProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlatformProductUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlatformProductUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlatformProductCreateBulk is the builder for creating many PlatformProduct entities in bulk.
type PlatformProductCreateBulk struct {
	config
	builders []*PlatformProductCreate
	conflict []sql.ConflictOption
}

// Save creates the PlatformProduct entities in the database.
func (ppcb *PlatformProductCreateBulk) Save(ctx context.Context) ([]*PlatformProduct, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PlatformProduct, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlatformProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PlatformProductCreateBulk) SaveX(ctx context.Context) []*PlatformProduct {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PlatformProductCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PlatformProductCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlatformProduct.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlatformProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppcb *PlatformProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlatformProductUpsertBulk {
	ppcb.conflict = opts
	return &PlatformProductUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *PlatformProductCreateBulk) OnConflictColumns(columns ...string) *PlatformProductUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &PlatformProductUpsertBulk{
		create: ppcb,
	}
}

// PlatformProductUpsertBulk is the builder for "upsert"-ing
// a bulk of PlatformProduct nodes.
type PlatformProductUpsertBulk struct {
	create *PlatformProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(platformproduct.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlatformProductUpsertBulk) UpdateNewValues() *PlatformProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(platformproduct.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(platformproduct.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlatformProduct.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlatformProductUpsertBulk) Ignore() *PlatformProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlatformProductUpsertBulk) DoNothing() *PlatformProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlatformProductCreateBulk.OnConflict
// documentation for more info.
func (u *PlatformProductUpsertBulk) Update(set func(*PlatformProductUpsert)) *PlatformProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlatformProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlatformProductUpsertBulk) SetUpdatedAt(v time.Time) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateUpdatedAt() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlatformProductUpsertBulk) SetDeletedAt(v time.Time) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateDeletedAt() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlatformProductUpsertBulk) ClearDeletedAt() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStoreID sets the "store_id" field.
func (u *PlatformProductUpsertBulk) SetStoreID(v int64) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateStoreID() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *PlatformProductUpsertBulk) ClearStoreID() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearStoreID()
	})
}

// SetListingID sets the "listing_id" field.
func (u *PlatformProductUpsertBulk) SetListingID(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetListingID(v)
	})
}

// UpdateListingID sets the "listing_id" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateListingID() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateListingID()
	})
}

// SetCollectionID sets the "collection_id" field.
func (u *PlatformProductUpsertBulk) SetCollectionID(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetCollectionID(v)
	})
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateCollectionID() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateCollectionID()
	})
}

// SetListingSku sets the "listing_sku" field.
func (u *PlatformProductUpsertBulk) SetListingSku(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetListingSku(v)
	})
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateListingSku() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateListingSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *PlatformProductUpsertBulk) SetBarcode(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateBarcode() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateBarcode()
	})
}

// SetName sets the "name" field.
func (u *PlatformProductUpsertBulk) SetName(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateName() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateName()
	})
}

// SetImages sets the "images" field.
func (u *PlatformProductUpsertBulk) SetImages(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateImages() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *PlatformProductUpsertBulk) ClearImages() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearImages()
	})
}

// SetVendor sets the "vendor" field.
func (u *PlatformProductUpsertBulk) SetVendor(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetVendor(v)
	})
}

// UpdateVendor sets the "vendor" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateVendor() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateVendor()
	})
}

// ClearVendor clears the value of the "vendor" field.
func (u *PlatformProductUpsertBulk) ClearVendor() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.ClearVendor()
	})
}

// SetSellingPrice sets the "selling_price" field.
func (u *PlatformProductUpsertBulk) SetSellingPrice(v float64) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetSellingPrice(v)
	})
}

// AddSellingPrice adds v to the "selling_price" field.
func (u *PlatformProductUpsertBulk) AddSellingPrice(v float64) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddSellingPrice(v)
	})
}

// UpdateSellingPrice sets the "selling_price" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateSellingPrice() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateSellingPrice()
	})
}

// SetCurrency sets the "currency" field.
func (u *PlatformProductUpsertBulk) SetCurrency(v string) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateCurrency() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateCurrency()
	})
}

// SetGrams sets the "grams" field.
func (u *PlatformProductUpsertBulk) SetGrams(v int) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *PlatformProductUpsertBulk) AddGrams(v int) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdateGrams() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdateGrams()
	})
}

// SetPlatformStatus sets the "platform_status" field.
func (u *PlatformProductUpsertBulk) SetPlatformStatus(v int8) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.SetPlatformStatus(v)
	})
}

// AddPlatformStatus adds v to the "platform_status" field.
func (u *PlatformProductUpsertBulk) AddPlatformStatus(v int8) *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.AddPlatformStatus(v)
	})
}

// UpdatePlatformStatus sets the "platform_status" field to the value that was provided on create.
func (u *PlatformProductUpsertBulk) UpdatePlatformStatus() *PlatformProductUpsertBulk {
	return u.Update(func(s *PlatformProductUpsert) {
		s.UpdatePlatformStatus()
	})
}

// Exec executes the query.
func (u *PlatformProductUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the PlatformProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PlatformProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlatformProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
