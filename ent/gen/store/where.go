// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// StoreURL applies equality check predicate on the "store_url" field. It's identical to StoreURLEQ.
func StoreURL(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreURL), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// TimezoneOffset applies equality check predicate on the "timezone_offset" field. It's identical to TimezoneOffsetEQ.
func TimezoneOffset(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimezoneOffset), v))
	})
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationID), v))
	})
}

// Locations applies equality check predicate on the "locations" field. It's identical to LocationsEQ.
func Locations(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocations), v))
	})
}

// StoreCurrency applies equality check predicate on the "store_currency" field. It's identical to StoreCurrencyEQ.
func StoreCurrency(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCurrency), v))
	})
}

// InitialStatus applies equality check predicate on the "initial_status" field. It's identical to InitialStatusEQ.
func InitialStatus(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialStatus), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNonce), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// HandlingFee applies equality check predicate on the "handling_fee" field. It's identical to HandlingFeeEQ.
func HandlingFee(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// ShippingOption applies equality check predicate on the "shipping_option" field. It's identical to ShippingOptionEQ.
func ShippingOption(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingOption), v))
	})
}

// DefaultWarehouse applies equality check predicate on the "default_warehouse" field. It's identical to DefaultWarehouseEQ.
func DefaultWarehouse(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultWarehouse), v))
	})
}

// PrepayTariff applies equality check predicate on the "prepay_tariff" field. It's identical to PrepayTariffEQ.
func PrepayTariff(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// IossNumber applies equality check predicate on the "ioss_number" field. It's identical to IossNumberEQ.
func IossNumber(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossCountryCode applies equality check predicate on the "ioss_country_code" field. It's identical to IossCountryCodeEQ.
func IossCountryCode(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// UkVatNumber applies equality check predicate on the "uk_vat_number" field. It's identical to UkVatNumberEQ.
func UkVatNumber(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// StoreCode applies equality check predicate on the "store_code" field. It's identical to StoreCodeEQ.
func StoreCode(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCode), v))
	})
}

// PresetChannelIds applies equality check predicate on the "preset_channel_ids" field. It's identical to PresetChannelIdsEQ.
func PresetChannelIds(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPresetChannelIds), v))
	})
}

// TestChannelIds applies equality check predicate on the "test_channel_ids" field. It's identical to TestChannelIdsEQ.
func TestChannelIds(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestChannelIds), v))
	})
}

// FirstInboundAt applies equality check predicate on the "first_inbound_at" field. It's identical to FirstInboundAtEQ.
func FirstInboundAt(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstInboundAt), v))
	})
}

// StorageUnitPrice applies equality check predicate on the "storage_unit_price" field. It's identical to StorageUnitPriceEQ.
func StorageUnitPrice(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageUnitPrice), v))
	})
}

// IntegrationAt applies equality check predicate on the "integration_at" field. It's identical to IntegrationAtEQ.
func IntegrationAt(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntegrationAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// StoreURLEQ applies the EQ predicate on the "store_url" field.
func StoreURLEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreURL), v))
	})
}

// StoreURLNEQ applies the NEQ predicate on the "store_url" field.
func StoreURLNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreURL), v))
	})
}

// StoreURLIn applies the In predicate on the "store_url" field.
func StoreURLIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreURL), v...))
	})
}

// StoreURLNotIn applies the NotIn predicate on the "store_url" field.
func StoreURLNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreURL), v...))
	})
}

// StoreURLGT applies the GT predicate on the "store_url" field.
func StoreURLGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreURL), v))
	})
}

// StoreURLGTE applies the GTE predicate on the "store_url" field.
func StoreURLGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreURL), v))
	})
}

// StoreURLLT applies the LT predicate on the "store_url" field.
func StoreURLLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreURL), v))
	})
}

// StoreURLLTE applies the LTE predicate on the "store_url" field.
func StoreURLLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreURL), v))
	})
}

// StoreURLContains applies the Contains predicate on the "store_url" field.
func StoreURLContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreURL), v))
	})
}

// StoreURLHasPrefix applies the HasPrefix predicate on the "store_url" field.
func StoreURLHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreURL), v))
	})
}

// StoreURLHasSuffix applies the HasSuffix predicate on the "store_url" field.
func StoreURLHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreURL), v))
	})
}

// StoreURLEqualFold applies the EqualFold predicate on the "store_url" field.
func StoreURLEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreURL), v))
	})
}

// StoreURLContainsFold applies the ContainsFold predicate on the "store_url" field.
func StoreURLContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreURL), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessToken), v))
	})
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccessToken), v...))
	})
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessToken), v))
	})
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessToken), v))
	})
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessToken), v))
	})
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessToken), v))
	})
}

// TimezoneOffsetEQ applies the EQ predicate on the "timezone_offset" field.
func TimezoneOffsetEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimezoneOffset), v))
	})
}

// TimezoneOffsetNEQ applies the NEQ predicate on the "timezone_offset" field.
func TimezoneOffsetNEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimezoneOffset), v))
	})
}

// TimezoneOffsetIn applies the In predicate on the "timezone_offset" field.
func TimezoneOffsetIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimezoneOffset), v...))
	})
}

// TimezoneOffsetNotIn applies the NotIn predicate on the "timezone_offset" field.
func TimezoneOffsetNotIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimezoneOffset), v...))
	})
}

// TimezoneOffsetGT applies the GT predicate on the "timezone_offset" field.
func TimezoneOffsetGT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimezoneOffset), v))
	})
}

// TimezoneOffsetGTE applies the GTE predicate on the "timezone_offset" field.
func TimezoneOffsetGTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimezoneOffset), v))
	})
}

// TimezoneOffsetLT applies the LT predicate on the "timezone_offset" field.
func TimezoneOffsetLT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimezoneOffset), v))
	})
}

// TimezoneOffsetLTE applies the LTE predicate on the "timezone_offset" field.
func TimezoneOffsetLTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimezoneOffset), v))
	})
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScope), v))
	})
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScope), v))
	})
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScope), v...))
	})
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScope), v...))
	})
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScope), v))
	})
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScope), v))
	})
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScope), v))
	})
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScope), v))
	})
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScope), v))
	})
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScope), v))
	})
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScope), v))
	})
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScope), v))
	})
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScope), v))
	})
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationID), v))
	})
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationID), v))
	})
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocationID), v...))
	})
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocationID), v...))
	})
}

// LocationIDGT applies the GT predicate on the "location_id" field.
func LocationIDGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationID), v))
	})
}

// LocationIDGTE applies the GTE predicate on the "location_id" field.
func LocationIDGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationID), v))
	})
}

// LocationIDLT applies the LT predicate on the "location_id" field.
func LocationIDLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationID), v))
	})
}

// LocationIDLTE applies the LTE predicate on the "location_id" field.
func LocationIDLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationID), v))
	})
}

// LocationIDContains applies the Contains predicate on the "location_id" field.
func LocationIDContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocationID), v))
	})
}

// LocationIDHasPrefix applies the HasPrefix predicate on the "location_id" field.
func LocationIDHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocationID), v))
	})
}

// LocationIDHasSuffix applies the HasSuffix predicate on the "location_id" field.
func LocationIDHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocationID), v))
	})
}

// LocationIDEqualFold applies the EqualFold predicate on the "location_id" field.
func LocationIDEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocationID), v))
	})
}

// LocationIDContainsFold applies the ContainsFold predicate on the "location_id" field.
func LocationIDContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocationID), v))
	})
}

// LocationsEQ applies the EQ predicate on the "locations" field.
func LocationsEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocations), v))
	})
}

// LocationsNEQ applies the NEQ predicate on the "locations" field.
func LocationsNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocations), v))
	})
}

// LocationsIn applies the In predicate on the "locations" field.
func LocationsIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocations), v...))
	})
}

// LocationsNotIn applies the NotIn predicate on the "locations" field.
func LocationsNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocations), v...))
	})
}

// LocationsGT applies the GT predicate on the "locations" field.
func LocationsGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocations), v))
	})
}

// LocationsGTE applies the GTE predicate on the "locations" field.
func LocationsGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocations), v))
	})
}

// LocationsLT applies the LT predicate on the "locations" field.
func LocationsLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocations), v))
	})
}

// LocationsLTE applies the LTE predicate on the "locations" field.
func LocationsLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocations), v))
	})
}

// LocationsContains applies the Contains predicate on the "locations" field.
func LocationsContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocations), v))
	})
}

// LocationsHasPrefix applies the HasPrefix predicate on the "locations" field.
func LocationsHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocations), v))
	})
}

// LocationsHasSuffix applies the HasSuffix predicate on the "locations" field.
func LocationsHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocations), v))
	})
}

// LocationsIsNil applies the IsNil predicate on the "locations" field.
func LocationsIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocations)))
	})
}

// LocationsNotNil applies the NotNil predicate on the "locations" field.
func LocationsNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocations)))
	})
}

// LocationsEqualFold applies the EqualFold predicate on the "locations" field.
func LocationsEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocations), v))
	})
}

// LocationsContainsFold applies the ContainsFold predicate on the "locations" field.
func LocationsContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocations), v))
	})
}

// StoreCurrencyEQ applies the EQ predicate on the "store_currency" field.
func StoreCurrencyEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyNEQ applies the NEQ predicate on the "store_currency" field.
func StoreCurrencyNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyIn applies the In predicate on the "store_currency" field.
func StoreCurrencyIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreCurrency), v...))
	})
}

// StoreCurrencyNotIn applies the NotIn predicate on the "store_currency" field.
func StoreCurrencyNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreCurrency), v...))
	})
}

// StoreCurrencyGT applies the GT predicate on the "store_currency" field.
func StoreCurrencyGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyGTE applies the GTE predicate on the "store_currency" field.
func StoreCurrencyGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyLT applies the LT predicate on the "store_currency" field.
func StoreCurrencyLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyLTE applies the LTE predicate on the "store_currency" field.
func StoreCurrencyLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyContains applies the Contains predicate on the "store_currency" field.
func StoreCurrencyContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyHasPrefix applies the HasPrefix predicate on the "store_currency" field.
func StoreCurrencyHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyHasSuffix applies the HasSuffix predicate on the "store_currency" field.
func StoreCurrencyHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyEqualFold applies the EqualFold predicate on the "store_currency" field.
func StoreCurrencyEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreCurrency), v))
	})
}

// StoreCurrencyContainsFold applies the ContainsFold predicate on the "store_currency" field.
func StoreCurrencyContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreCurrency), v))
	})
}

// InitialStatusEQ applies the EQ predicate on the "initial_status" field.
func InitialStatusEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialStatus), v))
	})
}

// InitialStatusNEQ applies the NEQ predicate on the "initial_status" field.
func InitialStatusNEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInitialStatus), v))
	})
}

// InitialStatusIn applies the In predicate on the "initial_status" field.
func InitialStatusIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInitialStatus), v...))
	})
}

// InitialStatusNotIn applies the NotIn predicate on the "initial_status" field.
func InitialStatusNotIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInitialStatus), v...))
	})
}

// InitialStatusGT applies the GT predicate on the "initial_status" field.
func InitialStatusGT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInitialStatus), v))
	})
}

// InitialStatusGTE applies the GTE predicate on the "initial_status" field.
func InitialStatusGTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInitialStatus), v))
	})
}

// InitialStatusLT applies the LT predicate on the "initial_status" field.
func InitialStatusLT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInitialStatus), v))
	})
}

// InitialStatusLTE applies the LTE predicate on the "initial_status" field.
func InitialStatusLTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInitialStatus), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...int32) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...int32) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v int32) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNonce), v))
	})
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNonce), v))
	})
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNonce), v...))
	})
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNonce), v...))
	})
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNonce), v))
	})
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNonce), v))
	})
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNonce), v))
	})
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNonce), v))
	})
}

// NonceContains applies the Contains predicate on the "nonce" field.
func NonceContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNonce), v))
	})
}

// NonceHasPrefix applies the HasPrefix predicate on the "nonce" field.
func NonceHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNonce), v))
	})
}

// NonceHasSuffix applies the HasSuffix predicate on the "nonce" field.
func NonceHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNonce), v))
	})
}

// NonceEqualFold applies the EqualFold predicate on the "nonce" field.
func NonceEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNonce), v))
	})
}

// NonceContainsFold applies the ContainsFold predicate on the "nonce" field.
func NonceContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNonce), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// HandlingFeeEQ applies the EQ predicate on the "handling_fee" field.
func HandlingFeeEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeNEQ applies the NEQ predicate on the "handling_fee" field.
func HandlingFeeNEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeIn applies the In predicate on the "handling_fee" field.
func HandlingFeeIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeNotIn applies the NotIn predicate on the "handling_fee" field.
func HandlingFeeNotIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeGT applies the GT predicate on the "handling_fee" field.
func HandlingFeeGT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeGTE applies the GTE predicate on the "handling_fee" field.
func HandlingFeeGTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLT applies the LT predicate on the "handling_fee" field.
func HandlingFeeLT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLTE applies the LTE predicate on the "handling_fee" field.
func HandlingFeeLTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlingFee), v))
	})
}

// ShippingOptionEQ applies the EQ predicate on the "shipping_option" field.
func ShippingOptionEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionNEQ applies the NEQ predicate on the "shipping_option" field.
func ShippingOptionNEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionIn applies the In predicate on the "shipping_option" field.
func ShippingOptionIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingOption), v...))
	})
}

// ShippingOptionNotIn applies the NotIn predicate on the "shipping_option" field.
func ShippingOptionNotIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingOption), v...))
	})
}

// ShippingOptionGT applies the GT predicate on the "shipping_option" field.
func ShippingOptionGT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionGTE applies the GTE predicate on the "shipping_option" field.
func ShippingOptionGTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionLT applies the LT predicate on the "shipping_option" field.
func ShippingOptionLT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionLTE applies the LTE predicate on the "shipping_option" field.
func ShippingOptionLTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingOption), v))
	})
}

// DefaultWarehouseEQ applies the EQ predicate on the "default_warehouse" field.
func DefaultWarehouseEQ(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseNEQ applies the NEQ predicate on the "default_warehouse" field.
func DefaultWarehouseNEQ(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseIn applies the In predicate on the "default_warehouse" field.
func DefaultWarehouseIn(vs ...int64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDefaultWarehouse), v...))
	})
}

// DefaultWarehouseNotIn applies the NotIn predicate on the "default_warehouse" field.
func DefaultWarehouseNotIn(vs ...int64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDefaultWarehouse), v...))
	})
}

// DefaultWarehouseGT applies the GT predicate on the "default_warehouse" field.
func DefaultWarehouseGT(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseGTE applies the GTE predicate on the "default_warehouse" field.
func DefaultWarehouseGTE(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseLT applies the LT predicate on the "default_warehouse" field.
func DefaultWarehouseLT(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseLTE applies the LTE predicate on the "default_warehouse" field.
func DefaultWarehouseLTE(v int64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultWarehouse), v))
	})
}

// PrepayTariffEQ applies the EQ predicate on the "prepay_tariff" field.
func PrepayTariffEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffNEQ applies the NEQ predicate on the "prepay_tariff" field.
func PrepayTariffNEQ(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffIn applies the In predicate on the "prepay_tariff" field.
func PrepayTariffIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrepayTariff), v...))
	})
}

// PrepayTariffNotIn applies the NotIn predicate on the "prepay_tariff" field.
func PrepayTariffNotIn(vs ...int8) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrepayTariff), v...))
	})
}

// PrepayTariffGT applies the GT predicate on the "prepay_tariff" field.
func PrepayTariffGT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffGTE applies the GTE predicate on the "prepay_tariff" field.
func PrepayTariffGTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffLT applies the LT predicate on the "prepay_tariff" field.
func PrepayTariffLT(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffLTE applies the LTE predicate on the "prepay_tariff" field.
func PrepayTariffLTE(v int8) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrepayTariff), v))
	})
}

// IossNumberEQ applies the EQ predicate on the "ioss_number" field.
func IossNumberEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberNEQ applies the NEQ predicate on the "ioss_number" field.
func IossNumberNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberIn applies the In predicate on the "ioss_number" field.
func IossNumberIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossNumber), v...))
	})
}

// IossNumberNotIn applies the NotIn predicate on the "ioss_number" field.
func IossNumberNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossNumber), v...))
	})
}

// IossNumberGT applies the GT predicate on the "ioss_number" field.
func IossNumberGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossNumber), v))
	})
}

// IossNumberGTE applies the GTE predicate on the "ioss_number" field.
func IossNumberGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberLT applies the LT predicate on the "ioss_number" field.
func IossNumberLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossNumber), v))
	})
}

// IossNumberLTE applies the LTE predicate on the "ioss_number" field.
func IossNumberLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberContains applies the Contains predicate on the "ioss_number" field.
func IossNumberContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasPrefix applies the HasPrefix predicate on the "ioss_number" field.
func IossNumberHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasSuffix applies the HasSuffix predicate on the "ioss_number" field.
func IossNumberHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossNumber), v))
	})
}

// IossNumberEqualFold applies the EqualFold predicate on the "ioss_number" field.
func IossNumberEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossNumber), v))
	})
}

// IossNumberContainsFold applies the ContainsFold predicate on the "ioss_number" field.
func IossNumberContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossNumber), v))
	})
}

// IossCountryCodeEQ applies the EQ predicate on the "ioss_country_code" field.
func IossCountryCodeEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeNEQ applies the NEQ predicate on the "ioss_country_code" field.
func IossCountryCodeNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeIn applies the In predicate on the "ioss_country_code" field.
func IossCountryCodeIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeNotIn applies the NotIn predicate on the "ioss_country_code" field.
func IossCountryCodeNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeGT applies the GT predicate on the "ioss_country_code" field.
func IossCountryCodeGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeGTE applies the GTE predicate on the "ioss_country_code" field.
func IossCountryCodeGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLT applies the LT predicate on the "ioss_country_code" field.
func IossCountryCodeLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLTE applies the LTE predicate on the "ioss_country_code" field.
func IossCountryCodeLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContains applies the Contains predicate on the "ioss_country_code" field.
func IossCountryCodeContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasPrefix applies the HasPrefix predicate on the "ioss_country_code" field.
func IossCountryCodeHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasSuffix applies the HasSuffix predicate on the "ioss_country_code" field.
func IossCountryCodeHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeEqualFold applies the EqualFold predicate on the "ioss_country_code" field.
func IossCountryCodeEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContainsFold applies the ContainsFold predicate on the "ioss_country_code" field.
func IossCountryCodeContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossCountryCode), v))
	})
}

// UkVatNumberEQ applies the EQ predicate on the "uk_vat_number" field.
func UkVatNumberEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberNEQ applies the NEQ predicate on the "uk_vat_number" field.
func UkVatNumberNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberIn applies the In predicate on the "uk_vat_number" field.
func UkVatNumberIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberNotIn applies the NotIn predicate on the "uk_vat_number" field.
func UkVatNumberNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberGT applies the GT predicate on the "uk_vat_number" field.
func UkVatNumberGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberGTE applies the GTE predicate on the "uk_vat_number" field.
func UkVatNumberGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLT applies the LT predicate on the "uk_vat_number" field.
func UkVatNumberLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLTE applies the LTE predicate on the "uk_vat_number" field.
func UkVatNumberLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContains applies the Contains predicate on the "uk_vat_number" field.
func UkVatNumberContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasPrefix applies the HasPrefix predicate on the "uk_vat_number" field.
func UkVatNumberHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasSuffix applies the HasSuffix predicate on the "uk_vat_number" field.
func UkVatNumberHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberEqualFold applies the EqualFold predicate on the "uk_vat_number" field.
func UkVatNumberEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContainsFold applies the ContainsFold predicate on the "uk_vat_number" field.
func UkVatNumberContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUkVatNumber), v))
	})
}

// StoreCodeEQ applies the EQ predicate on the "store_code" field.
func StoreCodeEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCode), v))
	})
}

// StoreCodeNEQ applies the NEQ predicate on the "store_code" field.
func StoreCodeNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreCode), v))
	})
}

// StoreCodeIn applies the In predicate on the "store_code" field.
func StoreCodeIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreCode), v...))
	})
}

// StoreCodeNotIn applies the NotIn predicate on the "store_code" field.
func StoreCodeNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreCode), v...))
	})
}

// StoreCodeGT applies the GT predicate on the "store_code" field.
func StoreCodeGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreCode), v))
	})
}

// StoreCodeGTE applies the GTE predicate on the "store_code" field.
func StoreCodeGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreCode), v))
	})
}

// StoreCodeLT applies the LT predicate on the "store_code" field.
func StoreCodeLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreCode), v))
	})
}

// StoreCodeLTE applies the LTE predicate on the "store_code" field.
func StoreCodeLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreCode), v))
	})
}

// StoreCodeContains applies the Contains predicate on the "store_code" field.
func StoreCodeContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreCode), v))
	})
}

// StoreCodeHasPrefix applies the HasPrefix predicate on the "store_code" field.
func StoreCodeHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreCode), v))
	})
}

// StoreCodeHasSuffix applies the HasSuffix predicate on the "store_code" field.
func StoreCodeHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreCode), v))
	})
}

// StoreCodeEqualFold applies the EqualFold predicate on the "store_code" field.
func StoreCodeEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreCode), v))
	})
}

// StoreCodeContainsFold applies the ContainsFold predicate on the "store_code" field.
func StoreCodeContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreCode), v))
	})
}

// PresetChannelIdsEQ applies the EQ predicate on the "preset_channel_ids" field.
func PresetChannelIdsEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsNEQ applies the NEQ predicate on the "preset_channel_ids" field.
func PresetChannelIdsNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsIn applies the In predicate on the "preset_channel_ids" field.
func PresetChannelIdsIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPresetChannelIds), v...))
	})
}

// PresetChannelIdsNotIn applies the NotIn predicate on the "preset_channel_ids" field.
func PresetChannelIdsNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPresetChannelIds), v...))
	})
}

// PresetChannelIdsGT applies the GT predicate on the "preset_channel_ids" field.
func PresetChannelIdsGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsGTE applies the GTE predicate on the "preset_channel_ids" field.
func PresetChannelIdsGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsLT applies the LT predicate on the "preset_channel_ids" field.
func PresetChannelIdsLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsLTE applies the LTE predicate on the "preset_channel_ids" field.
func PresetChannelIdsLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsContains applies the Contains predicate on the "preset_channel_ids" field.
func PresetChannelIdsContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsHasPrefix applies the HasPrefix predicate on the "preset_channel_ids" field.
func PresetChannelIdsHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsHasSuffix applies the HasSuffix predicate on the "preset_channel_ids" field.
func PresetChannelIdsHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsIsNil applies the IsNil predicate on the "preset_channel_ids" field.
func PresetChannelIdsIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPresetChannelIds)))
	})
}

// PresetChannelIdsNotNil applies the NotNil predicate on the "preset_channel_ids" field.
func PresetChannelIdsNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPresetChannelIds)))
	})
}

// PresetChannelIdsEqualFold applies the EqualFold predicate on the "preset_channel_ids" field.
func PresetChannelIdsEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsContainsFold applies the ContainsFold predicate on the "preset_channel_ids" field.
func PresetChannelIdsContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPresetChannelIds), v))
	})
}

// TestChannelIdsEQ applies the EQ predicate on the "test_channel_ids" field.
func TestChannelIdsEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsNEQ applies the NEQ predicate on the "test_channel_ids" field.
func TestChannelIdsNEQ(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsIn applies the In predicate on the "test_channel_ids" field.
func TestChannelIdsIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTestChannelIds), v...))
	})
}

// TestChannelIdsNotIn applies the NotIn predicate on the "test_channel_ids" field.
func TestChannelIdsNotIn(vs ...string) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTestChannelIds), v...))
	})
}

// TestChannelIdsGT applies the GT predicate on the "test_channel_ids" field.
func TestChannelIdsGT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsGTE applies the GTE predicate on the "test_channel_ids" field.
func TestChannelIdsGTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsLT applies the LT predicate on the "test_channel_ids" field.
func TestChannelIdsLT(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsLTE applies the LTE predicate on the "test_channel_ids" field.
func TestChannelIdsLTE(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsContains applies the Contains predicate on the "test_channel_ids" field.
func TestChannelIdsContains(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsHasPrefix applies the HasPrefix predicate on the "test_channel_ids" field.
func TestChannelIdsHasPrefix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsHasSuffix applies the HasSuffix predicate on the "test_channel_ids" field.
func TestChannelIdsHasSuffix(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsIsNil applies the IsNil predicate on the "test_channel_ids" field.
func TestChannelIdsIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestChannelIds)))
	})
}

// TestChannelIdsNotNil applies the NotNil predicate on the "test_channel_ids" field.
func TestChannelIdsNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestChannelIds)))
	})
}

// TestChannelIdsEqualFold applies the EqualFold predicate on the "test_channel_ids" field.
func TestChannelIdsEqualFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsContainsFold applies the ContainsFold predicate on the "test_channel_ids" field.
func TestChannelIdsContainsFold(v string) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTestChannelIds), v))
	})
}

// FirstInboundAtEQ applies the EQ predicate on the "first_inbound_at" field.
func FirstInboundAtEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtNEQ applies the NEQ predicate on the "first_inbound_at" field.
func FirstInboundAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtIn applies the In predicate on the "first_inbound_at" field.
func FirstInboundAtIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstInboundAt), v...))
	})
}

// FirstInboundAtNotIn applies the NotIn predicate on the "first_inbound_at" field.
func FirstInboundAtNotIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstInboundAt), v...))
	})
}

// FirstInboundAtGT applies the GT predicate on the "first_inbound_at" field.
func FirstInboundAtGT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtGTE applies the GTE predicate on the "first_inbound_at" field.
func FirstInboundAtGTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtLT applies the LT predicate on the "first_inbound_at" field.
func FirstInboundAtLT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtLTE applies the LTE predicate on the "first_inbound_at" field.
func FirstInboundAtLTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtIsNil applies the IsNil predicate on the "first_inbound_at" field.
func FirstInboundAtIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstInboundAt)))
	})
}

// FirstInboundAtNotNil applies the NotNil predicate on the "first_inbound_at" field.
func FirstInboundAtNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstInboundAt)))
	})
}

// StorageUnitPriceEQ applies the EQ predicate on the "storage_unit_price" field.
func StorageUnitPriceEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceNEQ applies the NEQ predicate on the "storage_unit_price" field.
func StorageUnitPriceNEQ(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceIn applies the In predicate on the "storage_unit_price" field.
func StorageUnitPriceIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStorageUnitPrice), v...))
	})
}

// StorageUnitPriceNotIn applies the NotIn predicate on the "storage_unit_price" field.
func StorageUnitPriceNotIn(vs ...float64) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStorageUnitPrice), v...))
	})
}

// StorageUnitPriceGT applies the GT predicate on the "storage_unit_price" field.
func StorageUnitPriceGT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceGTE applies the GTE predicate on the "storage_unit_price" field.
func StorageUnitPriceGTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceLT applies the LT predicate on the "storage_unit_price" field.
func StorageUnitPriceLT(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceLTE applies the LTE predicate on the "storage_unit_price" field.
func StorageUnitPriceLTE(v float64) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorageUnitPrice), v))
	})
}

// IntegrationAtEQ applies the EQ predicate on the "integration_at" field.
func IntegrationAtEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtNEQ applies the NEQ predicate on the "integration_at" field.
func IntegrationAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtIn applies the In predicate on the "integration_at" field.
func IntegrationAtIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIntegrationAt), v...))
	})
}

// IntegrationAtNotIn applies the NotIn predicate on the "integration_at" field.
func IntegrationAtNotIn(vs ...time.Time) predicate.Store {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIntegrationAt), v...))
	})
}

// IntegrationAtGT applies the GT predicate on the "integration_at" field.
func IntegrationAtGT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtGTE applies the GTE predicate on the "integration_at" field.
func IntegrationAtGTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtLT applies the LT predicate on the "integration_at" field.
func IntegrationAtLT(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtLTE applies the LTE predicate on the "integration_at" field.
func IntegrationAtLTE(v time.Time) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntegrationAt), v))
	})
}

// IntegrationAtIsNil applies the IsNil predicate on the "integration_at" field.
func IntegrationAtIsNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIntegrationAt)))
	})
}

// IntegrationAtNotNil applies the NotNil predicate on the "integration_at" field.
func IntegrationAtNotNil() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIntegrationAt)))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Store
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Store
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlatformProducts applies the HasEdge predicate on the "platform_products" edge.
func HasPlatformProducts() predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlatformProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlatformProductsTable, PlatformProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlatformProductsWith applies the HasEdge predicate on the "platform_products" edge with a given conditions (other predicates).
func HasPlatformProductsWith(preds ...predicate.PlatformProduct) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlatformProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlatformProductsTable, PlatformProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		p(s.Not())
	})
}
