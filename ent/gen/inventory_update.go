// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InventoryUpdate is the builder for updating Inventory entities.
type InventoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iu *InventoryUpdate) Where(ps ...predicate.Inventory) *InventoryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InventoryUpdate) SetUpdatedAt(t time.Time) *InventoryUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InventoryUpdate) SetDeletedAt(t time.Time) *InventoryUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableDeletedAt(t *time.Time) *InventoryUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InventoryUpdate) ClearDeletedAt() *InventoryUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetProductID sets the "product_id" field.
func (iu *InventoryUpdate) SetProductID(i int64) *InventoryUpdate {
	iu.mutation.SetProductID(i)
	return iu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableProductID(i *int64) *InventoryUpdate {
	if i != nil {
		iu.SetProductID(*i)
	}
	return iu
}

// ClearProductID clears the value of the "product_id" field.
func (iu *InventoryUpdate) ClearProductID() *InventoryUpdate {
	iu.mutation.ClearProductID()
	return iu
}

// SetWarehouseID sets the "warehouse_id" field.
func (iu *InventoryUpdate) SetWarehouseID(i int64) *InventoryUpdate {
	iu.mutation.ResetWarehouseID()
	iu.mutation.SetWarehouseID(i)
	return iu
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (iu *InventoryUpdate) AddWarehouseID(i int64) *InventoryUpdate {
	iu.mutation.AddWarehouseID(i)
	return iu
}

// SetStorageQty sets the "storage_qty" field.
func (iu *InventoryUpdate) SetStorageQty(i int32) *InventoryUpdate {
	iu.mutation.ResetStorageQty()
	iu.mutation.SetStorageQty(i)
	return iu
}

// SetNillableStorageQty sets the "storage_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableStorageQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetStorageQty(*i)
	}
	return iu
}

// AddStorageQty adds i to the "storage_qty" field.
func (iu *InventoryUpdate) AddStorageQty(i int32) *InventoryUpdate {
	iu.mutation.AddStorageQty(i)
	return iu
}

// SetAvailableQty sets the "available_qty" field.
func (iu *InventoryUpdate) SetAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.ResetAvailableQty()
	iu.mutation.SetAvailableQty(i)
	return iu
}

// SetNillableAvailableQty sets the "available_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableAvailableQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetAvailableQty(*i)
	}
	return iu
}

// AddAvailableQty adds i to the "available_qty" field.
func (iu *InventoryUpdate) AddAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.AddAvailableQty(i)
	return iu
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (iu *InventoryUpdate) SetPrepareShipQty(i int32) *InventoryUpdate {
	iu.mutation.ResetPrepareShipQty()
	iu.mutation.SetPrepareShipQty(i)
	return iu
}

// SetNillablePrepareShipQty sets the "prepare_ship_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillablePrepareShipQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetPrepareShipQty(*i)
	}
	return iu
}

// AddPrepareShipQty adds i to the "prepare_ship_qty" field.
func (iu *InventoryUpdate) AddPrepareShipQty(i int32) *InventoryUpdate {
	iu.mutation.AddPrepareShipQty(i)
	return iu
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (iu *InventoryUpdate) SetPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.ResetPrepareShelveQty()
	iu.mutation.SetPrepareShelveQty(i)
	return iu
}

// SetNillablePrepareShelveQty sets the "prepare_shelve_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillablePrepareShelveQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetPrepareShelveQty(*i)
	}
	return iu
}

// AddPrepareShelveQty adds i to the "prepare_shelve_qty" field.
func (iu *InventoryUpdate) AddPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.AddPrepareShelveQty(i)
	return iu
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (iu *InventoryUpdate) SetQuicktronStorageQty(i int32) *InventoryUpdate {
	iu.mutation.ResetQuicktronStorageQty()
	iu.mutation.SetQuicktronStorageQty(i)
	return iu
}

// SetNillableQuicktronStorageQty sets the "quicktron_storage_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableQuicktronStorageQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetQuicktronStorageQty(*i)
	}
	return iu
}

// AddQuicktronStorageQty adds i to the "quicktron_storage_qty" field.
func (iu *InventoryUpdate) AddQuicktronStorageQty(i int32) *InventoryUpdate {
	iu.mutation.AddQuicktronStorageQty(i)
	return iu
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (iu *InventoryUpdate) SetQuicktronAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.ResetQuicktronAvailableQty()
	iu.mutation.SetQuicktronAvailableQty(i)
	return iu
}

// SetNillableQuicktronAvailableQty sets the "quicktron_available_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableQuicktronAvailableQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetQuicktronAvailableQty(*i)
	}
	return iu
}

// AddQuicktronAvailableQty adds i to the "quicktron_available_qty" field.
func (iu *InventoryUpdate) AddQuicktronAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.AddQuicktronAvailableQty(i)
	return iu
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (iu *InventoryUpdate) SetQuicktronPrepareOutboundQty(i int32) *InventoryUpdate {
	iu.mutation.ResetQuicktronPrepareOutboundQty()
	iu.mutation.SetQuicktronPrepareOutboundQty(i)
	return iu
}

// SetNillableQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableQuicktronPrepareOutboundQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetQuicktronPrepareOutboundQty(*i)
	}
	return iu
}

// AddQuicktronPrepareOutboundQty adds i to the "quicktron_prepare_outbound_qty" field.
func (iu *InventoryUpdate) AddQuicktronPrepareOutboundQty(i int32) *InventoryUpdate {
	iu.mutation.AddQuicktronPrepareOutboundQty(i)
	return iu
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (iu *InventoryUpdate) SetQuicktronPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.ResetQuicktronPrepareShelveQty()
	iu.mutation.SetQuicktronPrepareShelveQty(i)
	return iu
}

// SetNillableQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableQuicktronPrepareShelveQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetQuicktronPrepareShelveQty(*i)
	}
	return iu
}

// AddQuicktronPrepareShelveQty adds i to the "quicktron_prepare_shelve_qty" field.
func (iu *InventoryUpdate) AddQuicktronPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.AddQuicktronPrepareShelveQty(i)
	return iu
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (iu *InventoryUpdate) SetNormalStorageQty(i int32) *InventoryUpdate {
	iu.mutation.ResetNormalStorageQty()
	iu.mutation.SetNormalStorageQty(i)
	return iu
}

// SetNillableNormalStorageQty sets the "normal_storage_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableNormalStorageQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetNormalStorageQty(*i)
	}
	return iu
}

// AddNormalStorageQty adds i to the "normal_storage_qty" field.
func (iu *InventoryUpdate) AddNormalStorageQty(i int32) *InventoryUpdate {
	iu.mutation.AddNormalStorageQty(i)
	return iu
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (iu *InventoryUpdate) SetNormalAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.ResetNormalAvailableQty()
	iu.mutation.SetNormalAvailableQty(i)
	return iu
}

// SetNillableNormalAvailableQty sets the "normal_available_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableNormalAvailableQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetNormalAvailableQty(*i)
	}
	return iu
}

// AddNormalAvailableQty adds i to the "normal_available_qty" field.
func (iu *InventoryUpdate) AddNormalAvailableQty(i int32) *InventoryUpdate {
	iu.mutation.AddNormalAvailableQty(i)
	return iu
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (iu *InventoryUpdate) SetNormalPrepareOutboundQty(i int32) *InventoryUpdate {
	iu.mutation.ResetNormalPrepareOutboundQty()
	iu.mutation.SetNormalPrepareOutboundQty(i)
	return iu
}

// SetNillableNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableNormalPrepareOutboundQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetNormalPrepareOutboundQty(*i)
	}
	return iu
}

// AddNormalPrepareOutboundQty adds i to the "normal_prepare_outbound_qty" field.
func (iu *InventoryUpdate) AddNormalPrepareOutboundQty(i int32) *InventoryUpdate {
	iu.mutation.AddNormalPrepareOutboundQty(i)
	return iu
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (iu *InventoryUpdate) SetNormalPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.ResetNormalPrepareShelveQty()
	iu.mutation.SetNormalPrepareShelveQty(i)
	return iu
}

// SetNillableNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableNormalPrepareShelveQty(i *int32) *InventoryUpdate {
	if i != nil {
		iu.SetNormalPrepareShelveQty(*i)
	}
	return iu
}

// AddNormalPrepareShelveQty adds i to the "normal_prepare_shelve_qty" field.
func (iu *InventoryUpdate) AddNormalPrepareShelveQty(i int32) *InventoryUpdate {
	iu.mutation.AddNormalPrepareShelveQty(i)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InventoryUpdate) SetStatus(i int8) *InventoryUpdate {
	iu.mutation.ResetStatus()
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableStatus(i *int8) *InventoryUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// AddStatus adds i to the "status" field.
func (iu *InventoryUpdate) AddStatus(i int8) *InventoryUpdate {
	iu.mutation.AddStatus(i)
	return iu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iu *InventoryUpdate) SetTenantID(id int64) *InventoryUpdate {
	iu.mutation.SetTenantID(id)
	return iu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iu *InventoryUpdate) SetTenant(t *Tenant) *InventoryUpdate {
	return iu.SetTenantID(t.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (iu *InventoryUpdate) SetProductsID(id int64) *InventoryUpdate {
	iu.mutation.SetProductsID(id)
	return iu
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (iu *InventoryUpdate) SetNillableProductsID(id *int64) *InventoryUpdate {
	if id != nil {
		iu = iu.SetProductsID(*id)
	}
	return iu
}

// SetProducts sets the "products" edge to the Product entity.
func (iu *InventoryUpdate) SetProducts(p *Product) *InventoryUpdate {
	return iu.SetProductsID(p.ID)
}

// Mutation returns the InventoryMutation object of the builder.
func (iu *InventoryUpdate) Mutation() *InventoryMutation {
	return iu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iu *InventoryUpdate) ClearTenant() *InventoryUpdate {
	iu.mutation.ClearTenant()
	return iu
}

// ClearProducts clears the "products" edge to the Product entity.
func (iu *InventoryUpdate) ClearProducts() *InventoryUpdate {
	iu.mutation.ClearProducts()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InventoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InventoryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InventoryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InventoryUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if inventory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inventory.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inventory.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iu *InventoryUpdate) check() error {
	if _, ok := iu.mutation.TenantID(); iu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Inventory.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InventoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventory.Table,
			Columns: inventory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inventory.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.WarehouseID(); ok {
		_spec.SetField(inventory.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedWarehouseID(); ok {
		_spec.AddField(inventory.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.StorageQty(); ok {
		_spec.SetField(inventory.FieldStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedStorageQty(); ok {
		_spec.AddField(inventory.FieldStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AvailableQty(); ok {
		_spec.SetField(inventory.FieldAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedAvailableQty(); ok {
		_spec.AddField(inventory.FieldAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.PrepareShipQty(); ok {
		_spec.SetField(inventory.FieldPrepareShipQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedPrepareShipQty(); ok {
		_spec.AddField(inventory.FieldPrepareShipQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.PrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.QuicktronStorageQty(); ok {
		_spec.SetField(inventory.FieldQuicktronStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedQuicktronStorageQty(); ok {
		_spec.AddField(inventory.FieldQuicktronStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.QuicktronAvailableQty(); ok {
		_spec.SetField(inventory.FieldQuicktronAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedQuicktronAvailableQty(); ok {
		_spec.AddField(inventory.FieldQuicktronAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.QuicktronPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedQuicktronPrepareOutboundQty(); ok {
		_spec.AddField(inventory.FieldQuicktronPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.QuicktronPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedQuicktronPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldQuicktronPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.NormalStorageQty(); ok {
		_spec.SetField(inventory.FieldNormalStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedNormalStorageQty(); ok {
		_spec.AddField(inventory.FieldNormalStorageQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.NormalAvailableQty(); ok {
		_spec.SetField(inventory.FieldNormalAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedNormalAvailableQty(); ok {
		_spec.AddField(inventory.FieldNormalAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.NormalPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedNormalPrepareOutboundQty(); ok {
		_spec.AddField(inventory.FieldNormalPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.NormalPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedNormalPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldNormalPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(inventory.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.AddedStatus(); ok {
		_spec.AddField(inventory.FieldStatus, field.TypeInt8, value)
	}
	if iu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iu.schemaConfig.Inventory
	ctx = internal.NewSchemaConfigContext(ctx, iu.schemaConfig)
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InventoryUpdateOne is the builder for updating a single Inventory entity.
type InventoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InventoryUpdateOne) SetUpdatedAt(t time.Time) *InventoryUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InventoryUpdateOne) SetDeletedAt(t time.Time) *InventoryUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableDeletedAt(t *time.Time) *InventoryUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InventoryUpdateOne) ClearDeletedAt() *InventoryUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetProductID sets the "product_id" field.
func (iuo *InventoryUpdateOne) SetProductID(i int64) *InventoryUpdateOne {
	iuo.mutation.SetProductID(i)
	return iuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableProductID(i *int64) *InventoryUpdateOne {
	if i != nil {
		iuo.SetProductID(*i)
	}
	return iuo
}

// ClearProductID clears the value of the "product_id" field.
func (iuo *InventoryUpdateOne) ClearProductID() *InventoryUpdateOne {
	iuo.mutation.ClearProductID()
	return iuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (iuo *InventoryUpdateOne) SetWarehouseID(i int64) *InventoryUpdateOne {
	iuo.mutation.ResetWarehouseID()
	iuo.mutation.SetWarehouseID(i)
	return iuo
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (iuo *InventoryUpdateOne) AddWarehouseID(i int64) *InventoryUpdateOne {
	iuo.mutation.AddWarehouseID(i)
	return iuo
}

// SetStorageQty sets the "storage_qty" field.
func (iuo *InventoryUpdateOne) SetStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetStorageQty()
	iuo.mutation.SetStorageQty(i)
	return iuo
}

// SetNillableStorageQty sets the "storage_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableStorageQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetStorageQty(*i)
	}
	return iuo
}

// AddStorageQty adds i to the "storage_qty" field.
func (iuo *InventoryUpdateOne) AddStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddStorageQty(i)
	return iuo
}

// SetAvailableQty sets the "available_qty" field.
func (iuo *InventoryUpdateOne) SetAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetAvailableQty()
	iuo.mutation.SetAvailableQty(i)
	return iuo
}

// SetNillableAvailableQty sets the "available_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableAvailableQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetAvailableQty(*i)
	}
	return iuo
}

// AddAvailableQty adds i to the "available_qty" field.
func (iuo *InventoryUpdateOne) AddAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddAvailableQty(i)
	return iuo
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (iuo *InventoryUpdateOne) SetPrepareShipQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetPrepareShipQty()
	iuo.mutation.SetPrepareShipQty(i)
	return iuo
}

// SetNillablePrepareShipQty sets the "prepare_ship_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillablePrepareShipQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetPrepareShipQty(*i)
	}
	return iuo
}

// AddPrepareShipQty adds i to the "prepare_ship_qty" field.
func (iuo *InventoryUpdateOne) AddPrepareShipQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddPrepareShipQty(i)
	return iuo
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) SetPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetPrepareShelveQty()
	iuo.mutation.SetPrepareShelveQty(i)
	return iuo
}

// SetNillablePrepareShelveQty sets the "prepare_shelve_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillablePrepareShelveQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetPrepareShelveQty(*i)
	}
	return iuo
}

// AddPrepareShelveQty adds i to the "prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) AddPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddPrepareShelveQty(i)
	return iuo
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (iuo *InventoryUpdateOne) SetQuicktronStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetQuicktronStorageQty()
	iuo.mutation.SetQuicktronStorageQty(i)
	return iuo
}

// SetNillableQuicktronStorageQty sets the "quicktron_storage_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableQuicktronStorageQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetQuicktronStorageQty(*i)
	}
	return iuo
}

// AddQuicktronStorageQty adds i to the "quicktron_storage_qty" field.
func (iuo *InventoryUpdateOne) AddQuicktronStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddQuicktronStorageQty(i)
	return iuo
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (iuo *InventoryUpdateOne) SetQuicktronAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetQuicktronAvailableQty()
	iuo.mutation.SetQuicktronAvailableQty(i)
	return iuo
}

// SetNillableQuicktronAvailableQty sets the "quicktron_available_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableQuicktronAvailableQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetQuicktronAvailableQty(*i)
	}
	return iuo
}

// AddQuicktronAvailableQty adds i to the "quicktron_available_qty" field.
func (iuo *InventoryUpdateOne) AddQuicktronAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddQuicktronAvailableQty(i)
	return iuo
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (iuo *InventoryUpdateOne) SetQuicktronPrepareOutboundQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetQuicktronPrepareOutboundQty()
	iuo.mutation.SetQuicktronPrepareOutboundQty(i)
	return iuo
}

// SetNillableQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableQuicktronPrepareOutboundQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetQuicktronPrepareOutboundQty(*i)
	}
	return iuo
}

// AddQuicktronPrepareOutboundQty adds i to the "quicktron_prepare_outbound_qty" field.
func (iuo *InventoryUpdateOne) AddQuicktronPrepareOutboundQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddQuicktronPrepareOutboundQty(i)
	return iuo
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) SetQuicktronPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetQuicktronPrepareShelveQty()
	iuo.mutation.SetQuicktronPrepareShelveQty(i)
	return iuo
}

// SetNillableQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableQuicktronPrepareShelveQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetQuicktronPrepareShelveQty(*i)
	}
	return iuo
}

// AddQuicktronPrepareShelveQty adds i to the "quicktron_prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) AddQuicktronPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddQuicktronPrepareShelveQty(i)
	return iuo
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (iuo *InventoryUpdateOne) SetNormalStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetNormalStorageQty()
	iuo.mutation.SetNormalStorageQty(i)
	return iuo
}

// SetNillableNormalStorageQty sets the "normal_storage_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableNormalStorageQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetNormalStorageQty(*i)
	}
	return iuo
}

// AddNormalStorageQty adds i to the "normal_storage_qty" field.
func (iuo *InventoryUpdateOne) AddNormalStorageQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddNormalStorageQty(i)
	return iuo
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (iuo *InventoryUpdateOne) SetNormalAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetNormalAvailableQty()
	iuo.mutation.SetNormalAvailableQty(i)
	return iuo
}

// SetNillableNormalAvailableQty sets the "normal_available_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableNormalAvailableQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetNormalAvailableQty(*i)
	}
	return iuo
}

// AddNormalAvailableQty adds i to the "normal_available_qty" field.
func (iuo *InventoryUpdateOne) AddNormalAvailableQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddNormalAvailableQty(i)
	return iuo
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (iuo *InventoryUpdateOne) SetNormalPrepareOutboundQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetNormalPrepareOutboundQty()
	iuo.mutation.SetNormalPrepareOutboundQty(i)
	return iuo
}

// SetNillableNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableNormalPrepareOutboundQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetNormalPrepareOutboundQty(*i)
	}
	return iuo
}

// AddNormalPrepareOutboundQty adds i to the "normal_prepare_outbound_qty" field.
func (iuo *InventoryUpdateOne) AddNormalPrepareOutboundQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddNormalPrepareOutboundQty(i)
	return iuo
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) SetNormalPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.ResetNormalPrepareShelveQty()
	iuo.mutation.SetNormalPrepareShelveQty(i)
	return iuo
}

// SetNillableNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableNormalPrepareShelveQty(i *int32) *InventoryUpdateOne {
	if i != nil {
		iuo.SetNormalPrepareShelveQty(*i)
	}
	return iuo
}

// AddNormalPrepareShelveQty adds i to the "normal_prepare_shelve_qty" field.
func (iuo *InventoryUpdateOne) AddNormalPrepareShelveQty(i int32) *InventoryUpdateOne {
	iuo.mutation.AddNormalPrepareShelveQty(i)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InventoryUpdateOne) SetStatus(i int8) *InventoryUpdateOne {
	iuo.mutation.ResetStatus()
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableStatus(i *int8) *InventoryUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// AddStatus adds i to the "status" field.
func (iuo *InventoryUpdateOne) AddStatus(i int8) *InventoryUpdateOne {
	iuo.mutation.AddStatus(i)
	return iuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iuo *InventoryUpdateOne) SetTenantID(id int64) *InventoryUpdateOne {
	iuo.mutation.SetTenantID(id)
	return iuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iuo *InventoryUpdateOne) SetTenant(t *Tenant) *InventoryUpdateOne {
	return iuo.SetTenantID(t.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (iuo *InventoryUpdateOne) SetProductsID(id int64) *InventoryUpdateOne {
	iuo.mutation.SetProductsID(id)
	return iuo
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableProductsID(id *int64) *InventoryUpdateOne {
	if id != nil {
		iuo = iuo.SetProductsID(*id)
	}
	return iuo
}

// SetProducts sets the "products" edge to the Product entity.
func (iuo *InventoryUpdateOne) SetProducts(p *Product) *InventoryUpdateOne {
	return iuo.SetProductsID(p.ID)
}

// Mutation returns the InventoryMutation object of the builder.
func (iuo *InventoryUpdateOne) Mutation() *InventoryMutation {
	return iuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iuo *InventoryUpdateOne) ClearTenant() *InventoryUpdateOne {
	iuo.mutation.ClearTenant()
	return iuo
}

// ClearProducts clears the "products" edge to the Product entity.
func (iuo *InventoryUpdateOne) ClearProducts() *InventoryUpdateOne {
	iuo.mutation.ClearProducts()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InventoryUpdateOne) Select(field string, fields ...string) *InventoryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inventory entity.
func (iuo *InventoryUpdateOne) Save(ctx context.Context) (*Inventory, error) {
	var (
		err  error
		node *Inventory
	)
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Inventory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InventoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InventoryUpdateOne) SaveX(ctx context.Context) *Inventory {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InventoryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InventoryUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if inventory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inventory.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inventory.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InventoryUpdateOne) check() error {
	if _, ok := iuo.mutation.TenantID(); iuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Inventory.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InventoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InventoryUpdateOne) sqlSave(ctx context.Context) (_node *Inventory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventory.Table,
			Columns: inventory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inventory.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Inventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventory.FieldID)
		for _, f := range fields {
			if !inventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != inventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.WarehouseID(); ok {
		_spec.SetField(inventory.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedWarehouseID(); ok {
		_spec.AddField(inventory.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.StorageQty(); ok {
		_spec.SetField(inventory.FieldStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedStorageQty(); ok {
		_spec.AddField(inventory.FieldStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AvailableQty(); ok {
		_spec.SetField(inventory.FieldAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedAvailableQty(); ok {
		_spec.AddField(inventory.FieldAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.PrepareShipQty(); ok {
		_spec.SetField(inventory.FieldPrepareShipQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedPrepareShipQty(); ok {
		_spec.AddField(inventory.FieldPrepareShipQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.PrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.QuicktronStorageQty(); ok {
		_spec.SetField(inventory.FieldQuicktronStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedQuicktronStorageQty(); ok {
		_spec.AddField(inventory.FieldQuicktronStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.QuicktronAvailableQty(); ok {
		_spec.SetField(inventory.FieldQuicktronAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedQuicktronAvailableQty(); ok {
		_spec.AddField(inventory.FieldQuicktronAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.QuicktronPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedQuicktronPrepareOutboundQty(); ok {
		_spec.AddField(inventory.FieldQuicktronPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.QuicktronPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedQuicktronPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldQuicktronPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.NormalStorageQty(); ok {
		_spec.SetField(inventory.FieldNormalStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedNormalStorageQty(); ok {
		_spec.AddField(inventory.FieldNormalStorageQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.NormalAvailableQty(); ok {
		_spec.SetField(inventory.FieldNormalAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedNormalAvailableQty(); ok {
		_spec.AddField(inventory.FieldNormalAvailableQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.NormalPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedNormalPrepareOutboundQty(); ok {
		_spec.AddField(inventory.FieldNormalPrepareOutboundQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.NormalPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedNormalPrepareShelveQty(); ok {
		_spec.AddField(inventory.FieldNormalPrepareShelveQty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(inventory.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.AddedStatus(); ok {
		_spec.AddField(inventory.FieldStatus, field.TypeInt8, value)
	}
	if iuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inventory
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iuo.schemaConfig.Inventory
	ctx = internal.NewSchemaConfigContext(ctx, iuo.schemaConfig)
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Inventory{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
