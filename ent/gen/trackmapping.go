// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/trackmapping"
)

// TrackMapping is the model entity for the TrackMapping schema.
type TrackMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// TrackingNumber holds the value of the "tracking_number" field.
	TrackingNumber string `json:"tracking_number,omitempty"`
	// TrackingURL holds the value of the "tracking_url" field.
	TrackingURL string `json:"tracking_url,omitempty"`
	// ExtTrackingNumber holds the value of the "ext_tracking_number" field.
	ExtTrackingNumber string `json:"ext_tracking_number,omitempty"`
	// TrackDetails holds the value of the "track_details" field.
	TrackDetails string `json:"track_details,omitempty"`
	// LastUpdatedAt holds the value of the "last_updated_at" field.
	LastUpdatedAt time.Time `json:"last_updated_at,omitempty"`
	// CourierPlatform holds the value of the "courier_platform" field.
	CourierPlatform string `json:"courier_platform,omitempty"`
	// Status holds the value of the "status" field.
	Status int32 `json:"status,omitempty"`
	// Flag holds the value of the "flag" field.
	Flag int8 `json:"flag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackMappingQuery when eager-loading is set.
	Edges TrackMappingEdges `json:"edges"`
}

// TrackMappingEdges holds the relations/edges for other nodes in the graph.
type TrackMappingEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackMappingEdges) OrdersOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Orders == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrackMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trackmapping.FieldID, trackmapping.FieldOrderID, trackmapping.FieldStatus, trackmapping.FieldFlag:
			values[i] = new(sql.NullInt64)
		case trackmapping.FieldTrackingNumber, trackmapping.FieldTrackingURL, trackmapping.FieldExtTrackingNumber, trackmapping.FieldTrackDetails, trackmapping.FieldCourierPlatform:
			values[i] = new(sql.NullString)
		case trackmapping.FieldCreatedAt, trackmapping.FieldUpdatedAt, trackmapping.FieldDeletedAt, trackmapping.FieldLastUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TrackMapping", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrackMapping fields.
func (tm *TrackMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trackmapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tm.ID = int64(value.Int64)
		case trackmapping.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tm.CreatedAt = value.Time
			}
		case trackmapping.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tm.UpdatedAt = value.Time
			}
		case trackmapping.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tm.DeletedAt = value.Time
			}
		case trackmapping.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				tm.OrderID = value.Int64
			}
		case trackmapping.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				tm.TrackingNumber = value.String
			}
		case trackmapping.FieldTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_url", values[i])
			} else if value.Valid {
				tm.TrackingURL = value.String
			}
		case trackmapping.FieldExtTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext_tracking_number", values[i])
			} else if value.Valid {
				tm.ExtTrackingNumber = value.String
			}
		case trackmapping.FieldTrackDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_details", values[i])
			} else if value.Valid {
				tm.TrackDetails = value.String
			}
		case trackmapping.FieldLastUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_at", values[i])
			} else if value.Valid {
				tm.LastUpdatedAt = value.Time
			}
		case trackmapping.FieldCourierPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courier_platform", values[i])
			} else if value.Valid {
				tm.CourierPlatform = value.String
			}
		case trackmapping.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tm.Status = int32(value.Int64)
			}
		case trackmapping.FieldFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flag", values[i])
			} else if value.Valid {
				tm.Flag = int8(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the TrackMapping entity.
func (tm *TrackMapping) QueryOrders() *OrderQuery {
	return (&TrackMappingClient{config: tm.config}).QueryOrders(tm)
}

// Update returns a builder for updating this TrackMapping.
// Note that you need to call TrackMapping.Unwrap() before calling this method if this TrackMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TrackMapping) Update() *TrackMappingUpdateOne {
	return (&TrackMappingClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the TrackMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TrackMapping) Unwrap() *TrackMapping {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("gen: TrackMapping is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TrackMapping) String() string {
	var builder strings.Builder
	builder.WriteString("TrackMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", tm.OrderID))
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(tm.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("tracking_url=")
	builder.WriteString(tm.TrackingURL)
	builder.WriteString(", ")
	builder.WriteString("ext_tracking_number=")
	builder.WriteString(tm.ExtTrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("track_details=")
	builder.WriteString(tm.TrackDetails)
	builder.WriteString(", ")
	builder.WriteString("last_updated_at=")
	builder.WriteString(tm.LastUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("courier_platform=")
	builder.WriteString(tm.CourierPlatform)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tm.Status))
	builder.WriteString(", ")
	builder.WriteString("flag=")
	builder.WriteString(fmt.Sprintf("%v", tm.Flag))
	builder.WriteByte(')')
	return builder.String()
}

// TrackMappings is a parsable slice of TrackMapping.
type TrackMappings []*TrackMapping

func (tm TrackMappings) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
