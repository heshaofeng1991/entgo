// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporder"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// PickupOrderQuery is the builder for querying PickupOrder entities.
type PickupOrderQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PickupOrder
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PickupOrderQuery builder.
func (poq *PickupOrderQuery) Where(ps ...predicate.PickupOrder) *PickupOrderQuery {
	poq.predicates = append(poq.predicates, ps...)
	return poq
}

// Limit adds a limit step to the query.
func (poq *PickupOrderQuery) Limit(limit int) *PickupOrderQuery {
	poq.limit = &limit
	return poq
}

// Offset adds an offset step to the query.
func (poq *PickupOrderQuery) Offset(offset int) *PickupOrderQuery {
	poq.offset = &offset
	return poq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (poq *PickupOrderQuery) Unique(unique bool) *PickupOrderQuery {
	poq.unique = &unique
	return poq
}

// Order adds an order step to the query.
func (poq *PickupOrderQuery) Order(o ...OrderFunc) *PickupOrderQuery {
	poq.order = append(poq.order, o...)
	return poq
}

// First returns the first PickupOrder entity from the query.
// Returns a *NotFoundError when no PickupOrder was found.
func (poq *PickupOrderQuery) First(ctx context.Context) (*PickupOrder, error) {
	nodes, err := poq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{pickuporder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (poq *PickupOrderQuery) FirstX(ctx context.Context) *PickupOrder {
	node, err := poq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PickupOrder ID from the query.
// Returns a *NotFoundError when no PickupOrder ID was found.
func (poq *PickupOrderQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = poq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pickuporder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (poq *PickupOrderQuery) FirstIDX(ctx context.Context) int64 {
	id, err := poq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PickupOrder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PickupOrder entity is found.
// Returns a *NotFoundError when no PickupOrder entities are found.
func (poq *PickupOrderQuery) Only(ctx context.Context) (*PickupOrder, error) {
	nodes, err := poq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{pickuporder.Label}
	default:
		return nil, &NotSingularError{pickuporder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (poq *PickupOrderQuery) OnlyX(ctx context.Context) *PickupOrder {
	node, err := poq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PickupOrder ID in the query.
// Returns a *NotSingularError when more than one PickupOrder ID is found.
// Returns a *NotFoundError when no entities are found.
func (poq *PickupOrderQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = poq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pickuporder.Label}
	default:
		err = &NotSingularError{pickuporder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (poq *PickupOrderQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := poq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PickupOrders.
func (poq *PickupOrderQuery) All(ctx context.Context) ([]*PickupOrder, error) {
	if err := poq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return poq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (poq *PickupOrderQuery) AllX(ctx context.Context) []*PickupOrder {
	nodes, err := poq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PickupOrder IDs.
func (poq *PickupOrderQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := poq.Select(pickuporder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (poq *PickupOrderQuery) IDsX(ctx context.Context) []int64 {
	ids, err := poq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (poq *PickupOrderQuery) Count(ctx context.Context) (int, error) {
	if err := poq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return poq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (poq *PickupOrderQuery) CountX(ctx context.Context) int {
	count, err := poq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (poq *PickupOrderQuery) Exist(ctx context.Context) (bool, error) {
	if err := poq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return poq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (poq *PickupOrderQuery) ExistX(ctx context.Context) bool {
	exist, err := poq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PickupOrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (poq *PickupOrderQuery) Clone() *PickupOrderQuery {
	if poq == nil {
		return nil
	}
	return &PickupOrderQuery{
		config:     poq.config,
		limit:      poq.limit,
		offset:     poq.offset,
		order:      append([]OrderFunc{}, poq.order...),
		predicates: append([]predicate.PickupOrder{}, poq.predicates...),
		// clone intermediate query.
		sql:    poq.sql.Clone(),
		path:   poq.path,
		unique: poq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PickupOrder.Query().
//		GroupBy(pickuporder.FieldCreatedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (poq *PickupOrderQuery) GroupBy(field string, fields ...string) *PickupOrderGroupBy {
	grbuild := &PickupOrderGroupBy{config: poq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := poq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return poq.sqlQuery(ctx), nil
	}
	grbuild.label = pickuporder.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PickupOrder.Query().
//		Select(pickuporder.FieldCreatedAt).
//		Scan(ctx, &v)
func (poq *PickupOrderQuery) Select(fields ...string) *PickupOrderSelect {
	poq.fields = append(poq.fields, fields...)
	selbuild := &PickupOrderSelect{PickupOrderQuery: poq}
	selbuild.label = pickuporder.Label
	selbuild.flds, selbuild.scan = &poq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a PickupOrderSelect configured with the given aggregations.
func (poq *PickupOrderQuery) Aggregate(fns ...AggregateFunc) *PickupOrderSelect {
	return poq.Select().Aggregate(fns...)
}

func (poq *PickupOrderQuery) prepareQuery(ctx context.Context) error {
	for _, f := range poq.fields {
		if !pickuporder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if poq.path != nil {
		prev, err := poq.path(ctx)
		if err != nil {
			return err
		}
		poq.sql = prev
	}
	return nil
}

func (poq *PickupOrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PickupOrder, error) {
	var (
		nodes = []*PickupOrder{}
		_spec = poq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PickupOrder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PickupOrder{config: poq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = poq.schemaConfig.PickupOrder
	ctx = internal.NewSchemaConfigContext(ctx, poq.schemaConfig)
	if len(poq.modifiers) > 0 {
		_spec.Modifiers = poq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, poq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (poq *PickupOrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := poq.querySpec()
	_spec.Node.Schema = poq.schemaConfig.PickupOrder
	ctx = internal.NewSchemaConfigContext(ctx, poq.schemaConfig)
	if len(poq.modifiers) > 0 {
		_spec.Modifiers = poq.modifiers
	}
	_spec.Node.Columns = poq.fields
	if len(poq.fields) > 0 {
		_spec.Unique = poq.unique != nil && *poq.unique
	}
	return sqlgraph.CountNodes(ctx, poq.driver, _spec)
}

func (poq *PickupOrderQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := poq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (poq *PickupOrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pickuporder.Table,
			Columns: pickuporder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporder.FieldID,
			},
		},
		From:   poq.sql,
		Unique: true,
	}
	if unique := poq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := poq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pickuporder.FieldID)
		for i := range fields {
			if fields[i] != pickuporder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := poq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := poq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := poq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := poq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (poq *PickupOrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(poq.driver.Dialect())
	t1 := builder.Table(pickuporder.Table)
	columns := poq.fields
	if len(columns) == 0 {
		columns = pickuporder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if poq.sql != nil {
		selector = poq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if poq.unique != nil && *poq.unique {
		selector.Distinct()
	}
	t1.Schema(poq.schemaConfig.PickupOrder)
	ctx = internal.NewSchemaConfigContext(ctx, poq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range poq.modifiers {
		m(selector)
	}
	for _, p := range poq.predicates {
		p(selector)
	}
	for _, p := range poq.order {
		p(selector)
	}
	if offset := poq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := poq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (poq *PickupOrderQuery) Modify(modifiers ...func(s *sql.Selector)) *PickupOrderSelect {
	poq.modifiers = append(poq.modifiers, modifiers...)
	return poq.Select()
}

// PickupOrderGroupBy is the group-by builder for PickupOrder entities.
type PickupOrderGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pogb *PickupOrderGroupBy) Aggregate(fns ...AggregateFunc) *PickupOrderGroupBy {
	pogb.fns = append(pogb.fns, fns...)
	return pogb
}

// Scan applies the group-by query and scans the result into the given value.
func (pogb *PickupOrderGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pogb.path(ctx)
	if err != nil {
		return err
	}
	pogb.sql = query
	return pogb.sqlScan(ctx, v)
}

func (pogb *PickupOrderGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pogb.fields {
		if !pickuporder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pogb *PickupOrderGroupBy) sqlQuery() *sql.Selector {
	selector := pogb.sql.Select()
	aggregation := make([]string, 0, len(pogb.fns))
	for _, fn := range pogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pogb.fields)+len(pogb.fns))
		for _, f := range pogb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pogb.fields...)...)
}

// PickupOrderSelect is the builder for selecting fields of PickupOrder entities.
type PickupOrderSelect struct {
	*PickupOrderQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pos *PickupOrderSelect) Aggregate(fns ...AggregateFunc) *PickupOrderSelect {
	pos.fns = append(pos.fns, fns...)
	return pos
}

// Scan applies the selector query and scans the result into the given value.
func (pos *PickupOrderSelect) Scan(ctx context.Context, v any) error {
	if err := pos.prepareQuery(ctx); err != nil {
		return err
	}
	pos.sql = pos.PickupOrderQuery.sqlQuery(ctx)
	return pos.sqlScan(ctx, v)
}

func (pos *PickupOrderSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pos.fns))
	for _, fn := range pos.fns {
		aggregation = append(aggregation, fn(pos.sql))
	}
	switch n := len(*pos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pos.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pos.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pos.sql.Query()
	if err := pos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pos *PickupOrderSelect) Modify(modifiers ...func(s *sql.Selector)) *PickupOrderSelect {
	pos.modifiers = append(pos.modifiers, modifiers...)
	return pos
}
