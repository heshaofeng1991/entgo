// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// PlatformProductID applies equality check predicate on the "platform_product_id" field. It's identical to PlatformProductIDEQ.
func PlatformProductID(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformProductID), v))
	})
}

// Barcode applies equality check predicate on the "barcode" field. It's identical to BarcodeEQ.
func Barcode(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// FulfillmentService applies equality check predicate on the "fulfillment_service" field. It's identical to FulfillmentServiceEQ.
func FulfillmentService(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentService), v))
	})
}

// ExtOrderItemID applies equality check predicate on the "ext_order_item_id" field. It's identical to ExtOrderItemIDEQ.
func ExtOrderItemID(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtOrderItemID), v))
	})
}

// ExtProductID applies equality check predicate on the "ext_product_id" field. It's identical to ExtProductIDEQ.
func ExtProductID(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtProductID), v))
	})
}

// IsCustomItem applies equality check predicate on the "is_custom_item" field. It's identical to IsCustomItemEQ.
func IsCustomItem(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCustomItem), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DeclaredCnName applies equality check predicate on the "declared_cn_name" field. It's identical to DeclaredCnNameEQ.
func DeclaredCnName(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredCnName), v))
	})
}

// HsCode applies equality check predicate on the "hs_code" field. It's identical to HsCodeEQ.
func HsCode(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHsCode), v))
	})
}

// Material applies equality check predicate on the "material" field. It's identical to MaterialEQ.
func Material(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterial), v))
	})
}

// Purpose applies equality check predicate on the "purpose" field. It's identical to PurposeEQ.
func Purpose(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurpose), v))
	})
}

// Images applies equality check predicate on the "images" field. It's identical to ImagesEQ.
func Images(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// Attributes applies equality check predicate on the "attributes" field. It's identical to AttributesEQ.
func Attributes(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributes), v))
	})
}

// Grams applies equality check predicate on the "grams" field. It's identical to GramsEQ.
func Grams(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// DeclaredValueInUsd applies equality check predicate on the "declared_value_in_usd" field. It's identical to DeclaredValueInUsdEQ.
func DeclaredValueInUsd(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInEur applies equality check predicate on the "declared_value_in_eur" field. It's identical to DeclaredValueInEurEQ.
func DeclaredValueInEur(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// FulfillQty applies equality check predicate on the "fulfill_qty" field. It's identical to FulfillQtyEQ.
func FulfillQty(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillQty), v))
	})
}

// RequiresShipping applies equality check predicate on the "requires_shipping" field. It's identical to RequiresShippingEQ.
func RequiresShipping(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiresShipping), v))
	})
}

// GiftCard applies equality check predicate on the "gift_card" field. It's identical to GiftCardEQ.
func GiftCard(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGiftCard), v))
	})
}

// Taxable applies equality check predicate on the "taxable" field. It's identical to TaxableEQ.
func Taxable(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxable), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// ListingSku applies equality check predicate on the "listing_sku" field. It's identical to ListingSkuEQ.
func ListingSku(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingSku), v))
	})
}

// DeclaredEnName applies equality check predicate on the "declared_en_name" field. It's identical to DeclaredEnNameEQ.
func DeclaredEnName(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredEnName), v))
	})
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// CustomerCode applies equality check predicate on the "customer_code" field. It's identical to CustomerCodeEQ.
func CustomerCode(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// PlatformProductIDEQ applies the EQ predicate on the "platform_product_id" field.
func PlatformProductIDEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDNEQ applies the NEQ predicate on the "platform_product_id" field.
func PlatformProductIDNEQ(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDIn applies the In predicate on the "platform_product_id" field.
func PlatformProductIDIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformProductID), v...))
	})
}

// PlatformProductIDNotIn applies the NotIn predicate on the "platform_product_id" field.
func PlatformProductIDNotIn(vs ...int64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformProductID), v...))
	})
}

// PlatformProductIDGT applies the GT predicate on the "platform_product_id" field.
func PlatformProductIDGT(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDGTE applies the GTE predicate on the "platform_product_id" field.
func PlatformProductIDGTE(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDLT applies the LT predicate on the "platform_product_id" field.
func PlatformProductIDLT(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDLTE applies the LTE predicate on the "platform_product_id" field.
func PlatformProductIDLTE(v int64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDIsNil applies the IsNil predicate on the "platform_product_id" field.
func PlatformProductIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformProductID)))
	})
}

// PlatformProductIDNotNil applies the NotNil predicate on the "platform_product_id" field.
func PlatformProductIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformProductID)))
	})
}

// BarcodeEQ applies the EQ predicate on the "barcode" field.
func BarcodeEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// BarcodeNEQ applies the NEQ predicate on the "barcode" field.
func BarcodeNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcode), v))
	})
}

// BarcodeIn applies the In predicate on the "barcode" field.
func BarcodeIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcode), v...))
	})
}

// BarcodeNotIn applies the NotIn predicate on the "barcode" field.
func BarcodeNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcode), v...))
	})
}

// BarcodeGT applies the GT predicate on the "barcode" field.
func BarcodeGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcode), v))
	})
}

// BarcodeGTE applies the GTE predicate on the "barcode" field.
func BarcodeGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcode), v))
	})
}

// BarcodeLT applies the LT predicate on the "barcode" field.
func BarcodeLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcode), v))
	})
}

// BarcodeLTE applies the LTE predicate on the "barcode" field.
func BarcodeLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcode), v))
	})
}

// BarcodeContains applies the Contains predicate on the "barcode" field.
func BarcodeContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcode), v))
	})
}

// BarcodeHasPrefix applies the HasPrefix predicate on the "barcode" field.
func BarcodeHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcode), v))
	})
}

// BarcodeHasSuffix applies the HasSuffix predicate on the "barcode" field.
func BarcodeHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcode), v))
	})
}

// BarcodeEqualFold applies the EqualFold predicate on the "barcode" field.
func BarcodeEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcode), v))
	})
}

// BarcodeContainsFold applies the ContainsFold predicate on the "barcode" field.
func BarcodeContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcode), v))
	})
}

// FulfillmentServiceEQ applies the EQ predicate on the "fulfillment_service" field.
func FulfillmentServiceEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceNEQ applies the NEQ predicate on the "fulfillment_service" field.
func FulfillmentServiceNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceIn applies the In predicate on the "fulfillment_service" field.
func FulfillmentServiceIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFulfillmentService), v...))
	})
}

// FulfillmentServiceNotIn applies the NotIn predicate on the "fulfillment_service" field.
func FulfillmentServiceNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFulfillmentService), v...))
	})
}

// FulfillmentServiceGT applies the GT predicate on the "fulfillment_service" field.
func FulfillmentServiceGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceGTE applies the GTE predicate on the "fulfillment_service" field.
func FulfillmentServiceGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceLT applies the LT predicate on the "fulfillment_service" field.
func FulfillmentServiceLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceLTE applies the LTE predicate on the "fulfillment_service" field.
func FulfillmentServiceLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceContains applies the Contains predicate on the "fulfillment_service" field.
func FulfillmentServiceContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceHasPrefix applies the HasPrefix predicate on the "fulfillment_service" field.
func FulfillmentServiceHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceHasSuffix applies the HasSuffix predicate on the "fulfillment_service" field.
func FulfillmentServiceHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceEqualFold applies the EqualFold predicate on the "fulfillment_service" field.
func FulfillmentServiceEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFulfillmentService), v))
	})
}

// FulfillmentServiceContainsFold applies the ContainsFold predicate on the "fulfillment_service" field.
func FulfillmentServiceContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFulfillmentService), v))
	})
}

// ExtOrderItemIDEQ applies the EQ predicate on the "ext_order_item_id" field.
func ExtOrderItemIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDNEQ applies the NEQ predicate on the "ext_order_item_id" field.
func ExtOrderItemIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDIn applies the In predicate on the "ext_order_item_id" field.
func ExtOrderItemIDIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtOrderItemID), v...))
	})
}

// ExtOrderItemIDNotIn applies the NotIn predicate on the "ext_order_item_id" field.
func ExtOrderItemIDNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtOrderItemID), v...))
	})
}

// ExtOrderItemIDGT applies the GT predicate on the "ext_order_item_id" field.
func ExtOrderItemIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDGTE applies the GTE predicate on the "ext_order_item_id" field.
func ExtOrderItemIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDLT applies the LT predicate on the "ext_order_item_id" field.
func ExtOrderItemIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDLTE applies the LTE predicate on the "ext_order_item_id" field.
func ExtOrderItemIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDContains applies the Contains predicate on the "ext_order_item_id" field.
func ExtOrderItemIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDHasPrefix applies the HasPrefix predicate on the "ext_order_item_id" field.
func ExtOrderItemIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDHasSuffix applies the HasSuffix predicate on the "ext_order_item_id" field.
func ExtOrderItemIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDEqualFold applies the EqualFold predicate on the "ext_order_item_id" field.
func ExtOrderItemIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtOrderItemID), v))
	})
}

// ExtOrderItemIDContainsFold applies the ContainsFold predicate on the "ext_order_item_id" field.
func ExtOrderItemIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtOrderItemID), v))
	})
}

// ExtProductIDEQ applies the EQ predicate on the "ext_product_id" field.
func ExtProductIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDNEQ applies the NEQ predicate on the "ext_product_id" field.
func ExtProductIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDIn applies the In predicate on the "ext_product_id" field.
func ExtProductIDIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtProductID), v...))
	})
}

// ExtProductIDNotIn applies the NotIn predicate on the "ext_product_id" field.
func ExtProductIDNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtProductID), v...))
	})
}

// ExtProductIDGT applies the GT predicate on the "ext_product_id" field.
func ExtProductIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDGTE applies the GTE predicate on the "ext_product_id" field.
func ExtProductIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDLT applies the LT predicate on the "ext_product_id" field.
func ExtProductIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDLTE applies the LTE predicate on the "ext_product_id" field.
func ExtProductIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDContains applies the Contains predicate on the "ext_product_id" field.
func ExtProductIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDHasPrefix applies the HasPrefix predicate on the "ext_product_id" field.
func ExtProductIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDHasSuffix applies the HasSuffix predicate on the "ext_product_id" field.
func ExtProductIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDEqualFold applies the EqualFold predicate on the "ext_product_id" field.
func ExtProductIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtProductID), v))
	})
}

// ExtProductIDContainsFold applies the ContainsFold predicate on the "ext_product_id" field.
func ExtProductIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtProductID), v))
	})
}

// IsCustomItemEQ applies the EQ predicate on the "is_custom_item" field.
func IsCustomItemEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCustomItem), v))
	})
}

// IsCustomItemNEQ applies the NEQ predicate on the "is_custom_item" field.
func IsCustomItemNEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsCustomItem), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DeclaredCnNameEQ applies the EQ predicate on the "declared_cn_name" field.
func DeclaredCnNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameNEQ applies the NEQ predicate on the "declared_cn_name" field.
func DeclaredCnNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameIn applies the In predicate on the "declared_cn_name" field.
func DeclaredCnNameIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredCnName), v...))
	})
}

// DeclaredCnNameNotIn applies the NotIn predicate on the "declared_cn_name" field.
func DeclaredCnNameNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredCnName), v...))
	})
}

// DeclaredCnNameGT applies the GT predicate on the "declared_cn_name" field.
func DeclaredCnNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameGTE applies the GTE predicate on the "declared_cn_name" field.
func DeclaredCnNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameLT applies the LT predicate on the "declared_cn_name" field.
func DeclaredCnNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameLTE applies the LTE predicate on the "declared_cn_name" field.
func DeclaredCnNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameContains applies the Contains predicate on the "declared_cn_name" field.
func DeclaredCnNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameHasPrefix applies the HasPrefix predicate on the "declared_cn_name" field.
func DeclaredCnNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameHasSuffix applies the HasSuffix predicate on the "declared_cn_name" field.
func DeclaredCnNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameIsNil applies the IsNil predicate on the "declared_cn_name" field.
func DeclaredCnNameIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredCnName)))
	})
}

// DeclaredCnNameNotNil applies the NotNil predicate on the "declared_cn_name" field.
func DeclaredCnNameNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredCnName)))
	})
}

// DeclaredCnNameEqualFold applies the EqualFold predicate on the "declared_cn_name" field.
func DeclaredCnNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeclaredCnName), v))
	})
}

// DeclaredCnNameContainsFold applies the ContainsFold predicate on the "declared_cn_name" field.
func DeclaredCnNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeclaredCnName), v))
	})
}

// HsCodeEQ applies the EQ predicate on the "hs_code" field.
func HsCodeEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHsCode), v))
	})
}

// HsCodeNEQ applies the NEQ predicate on the "hs_code" field.
func HsCodeNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHsCode), v))
	})
}

// HsCodeIn applies the In predicate on the "hs_code" field.
func HsCodeIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHsCode), v...))
	})
}

// HsCodeNotIn applies the NotIn predicate on the "hs_code" field.
func HsCodeNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHsCode), v...))
	})
}

// HsCodeGT applies the GT predicate on the "hs_code" field.
func HsCodeGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHsCode), v))
	})
}

// HsCodeGTE applies the GTE predicate on the "hs_code" field.
func HsCodeGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHsCode), v))
	})
}

// HsCodeLT applies the LT predicate on the "hs_code" field.
func HsCodeLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHsCode), v))
	})
}

// HsCodeLTE applies the LTE predicate on the "hs_code" field.
func HsCodeLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHsCode), v))
	})
}

// HsCodeContains applies the Contains predicate on the "hs_code" field.
func HsCodeContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHsCode), v))
	})
}

// HsCodeHasPrefix applies the HasPrefix predicate on the "hs_code" field.
func HsCodeHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHsCode), v))
	})
}

// HsCodeHasSuffix applies the HasSuffix predicate on the "hs_code" field.
func HsCodeHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHsCode), v))
	})
}

// HsCodeEqualFold applies the EqualFold predicate on the "hs_code" field.
func HsCodeEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHsCode), v))
	})
}

// HsCodeContainsFold applies the ContainsFold predicate on the "hs_code" field.
func HsCodeContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHsCode), v))
	})
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterial), v))
	})
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterial), v))
	})
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaterial), v...))
	})
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaterial), v...))
	})
}

// MaterialGT applies the GT predicate on the "material" field.
func MaterialGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterial), v))
	})
}

// MaterialGTE applies the GTE predicate on the "material" field.
func MaterialGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterial), v))
	})
}

// MaterialLT applies the LT predicate on the "material" field.
func MaterialLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterial), v))
	})
}

// MaterialLTE applies the LTE predicate on the "material" field.
func MaterialLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterial), v))
	})
}

// MaterialContains applies the Contains predicate on the "material" field.
func MaterialContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaterial), v))
	})
}

// MaterialHasPrefix applies the HasPrefix predicate on the "material" field.
func MaterialHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaterial), v))
	})
}

// MaterialHasSuffix applies the HasSuffix predicate on the "material" field.
func MaterialHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaterial), v))
	})
}

// MaterialEqualFold applies the EqualFold predicate on the "material" field.
func MaterialEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaterial), v))
	})
}

// MaterialContainsFold applies the ContainsFold predicate on the "material" field.
func MaterialContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaterial), v))
	})
}

// PurposeEQ applies the EQ predicate on the "purpose" field.
func PurposeEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurpose), v))
	})
}

// PurposeNEQ applies the NEQ predicate on the "purpose" field.
func PurposeNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurpose), v))
	})
}

// PurposeIn applies the In predicate on the "purpose" field.
func PurposeIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPurpose), v...))
	})
}

// PurposeNotIn applies the NotIn predicate on the "purpose" field.
func PurposeNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPurpose), v...))
	})
}

// PurposeGT applies the GT predicate on the "purpose" field.
func PurposeGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurpose), v))
	})
}

// PurposeGTE applies the GTE predicate on the "purpose" field.
func PurposeGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurpose), v))
	})
}

// PurposeLT applies the LT predicate on the "purpose" field.
func PurposeLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurpose), v))
	})
}

// PurposeLTE applies the LTE predicate on the "purpose" field.
func PurposeLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurpose), v))
	})
}

// PurposeContains applies the Contains predicate on the "purpose" field.
func PurposeContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPurpose), v))
	})
}

// PurposeHasPrefix applies the HasPrefix predicate on the "purpose" field.
func PurposeHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPurpose), v))
	})
}

// PurposeHasSuffix applies the HasSuffix predicate on the "purpose" field.
func PurposeHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPurpose), v))
	})
}

// PurposeEqualFold applies the EqualFold predicate on the "purpose" field.
func PurposeEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPurpose), v))
	})
}

// PurposeContainsFold applies the ContainsFold predicate on the "purpose" field.
func PurposeContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPurpose), v))
	})
}

// ImagesEQ applies the EQ predicate on the "images" field.
func ImagesEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// ImagesNEQ applies the NEQ predicate on the "images" field.
func ImagesNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImages), v))
	})
}

// ImagesIn applies the In predicate on the "images" field.
func ImagesIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImages), v...))
	})
}

// ImagesNotIn applies the NotIn predicate on the "images" field.
func ImagesNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImages), v...))
	})
}

// ImagesGT applies the GT predicate on the "images" field.
func ImagesGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImages), v))
	})
}

// ImagesGTE applies the GTE predicate on the "images" field.
func ImagesGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImages), v))
	})
}

// ImagesLT applies the LT predicate on the "images" field.
func ImagesLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImages), v))
	})
}

// ImagesLTE applies the LTE predicate on the "images" field.
func ImagesLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImages), v))
	})
}

// ImagesContains applies the Contains predicate on the "images" field.
func ImagesContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImages), v))
	})
}

// ImagesHasPrefix applies the HasPrefix predicate on the "images" field.
func ImagesHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImages), v))
	})
}

// ImagesHasSuffix applies the HasSuffix predicate on the "images" field.
func ImagesHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImages), v))
	})
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImages)))
	})
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImages)))
	})
}

// ImagesEqualFold applies the EqualFold predicate on the "images" field.
func ImagesEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImages), v))
	})
}

// ImagesContainsFold applies the ContainsFold predicate on the "images" field.
func ImagesContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImages), v))
	})
}

// AttributesEQ applies the EQ predicate on the "attributes" field.
func AttributesEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributes), v))
	})
}

// AttributesNEQ applies the NEQ predicate on the "attributes" field.
func AttributesNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttributes), v))
	})
}

// AttributesIn applies the In predicate on the "attributes" field.
func AttributesIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAttributes), v...))
	})
}

// AttributesNotIn applies the NotIn predicate on the "attributes" field.
func AttributesNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAttributes), v...))
	})
}

// AttributesGT applies the GT predicate on the "attributes" field.
func AttributesGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttributes), v))
	})
}

// AttributesGTE applies the GTE predicate on the "attributes" field.
func AttributesGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttributes), v))
	})
}

// AttributesLT applies the LT predicate on the "attributes" field.
func AttributesLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttributes), v))
	})
}

// AttributesLTE applies the LTE predicate on the "attributes" field.
func AttributesLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttributes), v))
	})
}

// AttributesContains applies the Contains predicate on the "attributes" field.
func AttributesContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAttributes), v))
	})
}

// AttributesHasPrefix applies the HasPrefix predicate on the "attributes" field.
func AttributesHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAttributes), v))
	})
}

// AttributesHasSuffix applies the HasSuffix predicate on the "attributes" field.
func AttributesHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAttributes), v))
	})
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttributes)))
	})
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttributes)))
	})
}

// AttributesEqualFold applies the EqualFold predicate on the "attributes" field.
func AttributesEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAttributes), v))
	})
}

// AttributesContainsFold applies the ContainsFold predicate on the "attributes" field.
func AttributesContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAttributes), v))
	})
}

// GramsEQ applies the EQ predicate on the "grams" field.
func GramsEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// GramsNEQ applies the NEQ predicate on the "grams" field.
func GramsNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrams), v))
	})
}

// GramsIn applies the In predicate on the "grams" field.
func GramsIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGrams), v...))
	})
}

// GramsNotIn applies the NotIn predicate on the "grams" field.
func GramsNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGrams), v...))
	})
}

// GramsGT applies the GT predicate on the "grams" field.
func GramsGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrams), v))
	})
}

// GramsGTE applies the GTE predicate on the "grams" field.
func GramsGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrams), v))
	})
}

// GramsLT applies the LT predicate on the "grams" field.
func GramsLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrams), v))
	})
}

// GramsLTE applies the LTE predicate on the "grams" field.
func GramsLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrams), v))
	})
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLength), v))
	})
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLength), v))
	})
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLength), v...))
	})
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLength), v...))
	})
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLength), v))
	})
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLength), v))
	})
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLength), v))
	})
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLength), v))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQty), v))
	})
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQty), v...))
	})
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQty), v...))
	})
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQty), v))
	})
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQty), v))
	})
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQty), v))
	})
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQty), v))
	})
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// DeclaredValueInUsdEQ applies the EQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdNEQ applies the NEQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdIn applies the In predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdNotIn applies the NotIn predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNotIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdGT applies the GT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdGTE applies the GTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLT applies the LT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLTE applies the LTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInEurEQ applies the EQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurNEQ applies the NEQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurIn applies the In predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurNotIn applies the NotIn predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNotIn(vs ...float64) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurGT applies the GT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurGTE applies the GTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLT applies the LT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLTE applies the LTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// FulfillQtyEQ applies the EQ predicate on the "fulfill_qty" field.
func FulfillQtyEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillQty), v))
	})
}

// FulfillQtyNEQ applies the NEQ predicate on the "fulfill_qty" field.
func FulfillQtyNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillQty), v))
	})
}

// FulfillQtyIn applies the In predicate on the "fulfill_qty" field.
func FulfillQtyIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFulfillQty), v...))
	})
}

// FulfillQtyNotIn applies the NotIn predicate on the "fulfill_qty" field.
func FulfillQtyNotIn(vs ...int) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFulfillQty), v...))
	})
}

// FulfillQtyGT applies the GT predicate on the "fulfill_qty" field.
func FulfillQtyGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFulfillQty), v))
	})
}

// FulfillQtyGTE applies the GTE predicate on the "fulfill_qty" field.
func FulfillQtyGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFulfillQty), v))
	})
}

// FulfillQtyLT applies the LT predicate on the "fulfill_qty" field.
func FulfillQtyLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFulfillQty), v))
	})
}

// FulfillQtyLTE applies the LTE predicate on the "fulfill_qty" field.
func FulfillQtyLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFulfillQty), v))
	})
}

// RequiresShippingEQ applies the EQ predicate on the "requires_shipping" field.
func RequiresShippingEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiresShipping), v))
	})
}

// RequiresShippingNEQ applies the NEQ predicate on the "requires_shipping" field.
func RequiresShippingNEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequiresShipping), v))
	})
}

// GiftCardEQ applies the EQ predicate on the "gift_card" field.
func GiftCardEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGiftCard), v))
	})
}

// GiftCardNEQ applies the NEQ predicate on the "gift_card" field.
func GiftCardNEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGiftCard), v))
	})
}

// TaxableEQ applies the EQ predicate on the "taxable" field.
func TaxableEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxable), v))
	})
}

// TaxableNEQ applies the NEQ predicate on the "taxable" field.
func TaxableNEQ(v bool) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxable), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSku), v))
	})
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSku), v))
	})
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSku), v...))
	})
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSku), v...))
	})
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSku), v))
	})
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSku), v))
	})
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSku), v))
	})
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSku), v))
	})
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSku), v))
	})
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSku), v))
	})
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSku), v))
	})
}

// SkuIsNil applies the IsNil predicate on the "sku" field.
func SkuIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSku)))
	})
}

// SkuNotNil applies the NotNil predicate on the "sku" field.
func SkuNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSku)))
	})
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSku), v))
	})
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSku), v))
	})
}

// ListingSkuEQ applies the EQ predicate on the "listing_sku" field.
func ListingSkuEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingSku), v))
	})
}

// ListingSkuNEQ applies the NEQ predicate on the "listing_sku" field.
func ListingSkuNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListingSku), v))
	})
}

// ListingSkuIn applies the In predicate on the "listing_sku" field.
func ListingSkuIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldListingSku), v...))
	})
}

// ListingSkuNotIn applies the NotIn predicate on the "listing_sku" field.
func ListingSkuNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldListingSku), v...))
	})
}

// ListingSkuGT applies the GT predicate on the "listing_sku" field.
func ListingSkuGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListingSku), v))
	})
}

// ListingSkuGTE applies the GTE predicate on the "listing_sku" field.
func ListingSkuGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListingSku), v))
	})
}

// ListingSkuLT applies the LT predicate on the "listing_sku" field.
func ListingSkuLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListingSku), v))
	})
}

// ListingSkuLTE applies the LTE predicate on the "listing_sku" field.
func ListingSkuLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListingSku), v))
	})
}

// ListingSkuContains applies the Contains predicate on the "listing_sku" field.
func ListingSkuContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldListingSku), v))
	})
}

// ListingSkuHasPrefix applies the HasPrefix predicate on the "listing_sku" field.
func ListingSkuHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldListingSku), v))
	})
}

// ListingSkuHasSuffix applies the HasSuffix predicate on the "listing_sku" field.
func ListingSkuHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldListingSku), v))
	})
}

// ListingSkuIsNil applies the IsNil predicate on the "listing_sku" field.
func ListingSkuIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldListingSku)))
	})
}

// ListingSkuNotNil applies the NotNil predicate on the "listing_sku" field.
func ListingSkuNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldListingSku)))
	})
}

// ListingSkuEqualFold applies the EqualFold predicate on the "listing_sku" field.
func ListingSkuEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldListingSku), v))
	})
}

// ListingSkuContainsFold applies the ContainsFold predicate on the "listing_sku" field.
func ListingSkuContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldListingSku), v))
	})
}

// DeclaredEnNameEQ applies the EQ predicate on the "declared_en_name" field.
func DeclaredEnNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameNEQ applies the NEQ predicate on the "declared_en_name" field.
func DeclaredEnNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameIn applies the In predicate on the "declared_en_name" field.
func DeclaredEnNameIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredEnName), v...))
	})
}

// DeclaredEnNameNotIn applies the NotIn predicate on the "declared_en_name" field.
func DeclaredEnNameNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredEnName), v...))
	})
}

// DeclaredEnNameGT applies the GT predicate on the "declared_en_name" field.
func DeclaredEnNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameGTE applies the GTE predicate on the "declared_en_name" field.
func DeclaredEnNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameLT applies the LT predicate on the "declared_en_name" field.
func DeclaredEnNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameLTE applies the LTE predicate on the "declared_en_name" field.
func DeclaredEnNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameContains applies the Contains predicate on the "declared_en_name" field.
func DeclaredEnNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameHasPrefix applies the HasPrefix predicate on the "declared_en_name" field.
func DeclaredEnNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameHasSuffix applies the HasSuffix predicate on the "declared_en_name" field.
func DeclaredEnNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameIsNil applies the IsNil predicate on the "declared_en_name" field.
func DeclaredEnNameIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredEnName)))
	})
}

// DeclaredEnNameNotNil applies the NotNil predicate on the "declared_en_name" field.
func DeclaredEnNameNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredEnName)))
	})
}

// DeclaredEnNameEqualFold applies the EqualFold predicate on the "declared_en_name" field.
func DeclaredEnNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeclaredEnName), v))
	})
}

// DeclaredEnNameContainsFold applies the ContainsFold predicate on the "declared_en_name" field.
func DeclaredEnNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeclaredEnName), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameIsNil applies the IsNil predicate on the "product_name" field.
func ProductNameIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductName)))
	})
}

// ProductNameNotNil applies the NotNil predicate on the "product_name" field.
func ProductNameNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductName)))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// CustomerCodeEQ applies the EQ predicate on the "customer_code" field.
func CustomerCodeEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeNEQ applies the NEQ predicate on the "customer_code" field.
func CustomerCodeNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeIn applies the In predicate on the "customer_code" field.
func CustomerCodeIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeNotIn applies the NotIn predicate on the "customer_code" field.
func CustomerCodeNotIn(vs ...string) predicate.OrderItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeGT applies the GT predicate on the "customer_code" field.
func CustomerCodeGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeGTE applies the GTE predicate on the "customer_code" field.
func CustomerCodeGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLT applies the LT predicate on the "customer_code" field.
func CustomerCodeLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLTE applies the LTE predicate on the "customer_code" field.
func CustomerCodeLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContains applies the Contains predicate on the "customer_code" field.
func CustomerCodeContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasPrefix applies the HasPrefix predicate on the "customer_code" field.
func CustomerCodeHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasSuffix applies the HasSuffix predicate on the "customer_code" field.
func CustomerCodeHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeEqualFold applies the EqualFold predicate on the "customer_code" field.
func CustomerCodeEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContainsFold applies the ContainsFold predicate on the "customer_code" field.
func CustomerCodeContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerCode), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
