// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the store type in the database.
	Label = "store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldStoreURL holds the string denoting the store_url field in the database.
	FieldStoreURL = "store_url"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldTimezoneOffset holds the string denoting the timezone_offset field in the database.
	FieldTimezoneOffset = "timezone_offset"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldLocationID holds the string denoting the location_id field in the database.
	FieldLocationID = "location_id"
	// FieldLocations holds the string denoting the locations field in the database.
	FieldLocations = "locations"
	// FieldStoreCurrency holds the string denoting the store_currency field in the database.
	FieldStoreCurrency = "store_currency"
	// FieldInitialStatus holds the string denoting the initial_status field in the database.
	FieldInitialStatus = "initial_status"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldHandlingFee holds the string denoting the handling_fee field in the database.
	FieldHandlingFee = "handling_fee"
	// FieldShippingOption holds the string denoting the shipping_option field in the database.
	FieldShippingOption = "shipping_option"
	// FieldDefaultWarehouse holds the string denoting the default_warehouse field in the database.
	FieldDefaultWarehouse = "default_warehouse"
	// FieldPrepayTariff holds the string denoting the prepay_tariff field in the database.
	FieldPrepayTariff = "prepay_tariff"
	// FieldIossNumber holds the string denoting the ioss_number field in the database.
	FieldIossNumber = "ioss_number"
	// FieldIossCountryCode holds the string denoting the ioss_country_code field in the database.
	FieldIossCountryCode = "ioss_country_code"
	// FieldUkVatNumber holds the string denoting the uk_vat_number field in the database.
	FieldUkVatNumber = "uk_vat_number"
	// FieldStoreCode holds the string denoting the store_code field in the database.
	FieldStoreCode = "store_code"
	// FieldPresetChannelIds holds the string denoting the preset_channel_ids field in the database.
	FieldPresetChannelIds = "preset_channel_ids"
	// FieldTestChannelIds holds the string denoting the test_channel_ids field in the database.
	FieldTestChannelIds = "test_channel_ids"
	// FieldFirstInboundAt holds the string denoting the first_inbound_at field in the database.
	FieldFirstInboundAt = "first_inbound_at"
	// FieldStorageUnitPrice holds the string denoting the storage_unit_price field in the database.
	FieldStorageUnitPrice = "storage_unit_price"
	// FieldIntegrationAt holds the string denoting the integration_at field in the database.
	FieldIntegrationAt = "integration_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgePlatformProducts holds the string denoting the platform_products edge name in mutations.
	EdgePlatformProducts = "platform_products"
	// Table holds the table name of the store in the database.
	Table = "stores"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "stores"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "store_tenant"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "store_id"
	// PlatformProductsTable is the table that holds the platform_products relation/edge.
	PlatformProductsTable = "platform_products"
	// PlatformProductsInverseTable is the table name for the PlatformProduct entity.
	// It exists in this package in order to avoid circular dependency with the "platformproduct" package.
	PlatformProductsInverseTable = "platform_products"
	// PlatformProductsColumn is the table column denoting the platform_products relation/edge.
	PlatformProductsColumn = "store_id"
)

// Columns holds all SQL columns for store fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldStoreURL,
	FieldPlatform,
	FieldName,
	FieldCode,
	FieldEmail,
	FieldAccessToken,
	FieldTimezoneOffset,
	FieldScope,
	FieldLocationID,
	FieldLocations,
	FieldStoreCurrency,
	FieldInitialStatus,
	FieldState,
	FieldTimestamp,
	FieldNonce,
	FieldBalance,
	FieldCurrency,
	FieldHandlingFee,
	FieldShippingOption,
	FieldDefaultWarehouse,
	FieldPrepayTariff,
	FieldIossNumber,
	FieldIossCountryCode,
	FieldUkVatNumber,
	FieldStoreCode,
	FieldPresetChannelIds,
	FieldTestChannelIds,
	FieldFirstInboundAt,
	FieldStorageUnitPrice,
	FieldIntegrationAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stores"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"store_tenant",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/heshaofeng1991/entgo/ent/gen/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPlatform holds the default value on creation for the "platform" field.
	DefaultPlatform string
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultAccessToken holds the default value on creation for the "access_token" field.
	DefaultAccessToken string
	// DefaultTimezoneOffset holds the default value on creation for the "timezone_offset" field.
	DefaultTimezoneOffset int8
	// DefaultScope holds the default value on creation for the "scope" field.
	DefaultScope string
	// DefaultLocationID holds the default value on creation for the "location_id" field.
	DefaultLocationID string
	// DefaultStoreCurrency holds the default value on creation for the "store_currency" field.
	DefaultStoreCurrency string
	// DefaultInitialStatus holds the default value on creation for the "initial_status" field.
	DefaultInitialStatus int8
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp int32
	// DefaultNonce holds the default value on creation for the "nonce" field.
	DefaultNonce string
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultHandlingFee holds the default value on creation for the "handling_fee" field.
	DefaultHandlingFee float64
	// DefaultShippingOption holds the default value on creation for the "shipping_option" field.
	DefaultShippingOption int8
	// DefaultDefaultWarehouse holds the default value on creation for the "default_warehouse" field.
	DefaultDefaultWarehouse int64
	// DefaultPrepayTariff holds the default value on creation for the "prepay_tariff" field.
	DefaultPrepayTariff int8
	// DefaultIossNumber holds the default value on creation for the "ioss_number" field.
	DefaultIossNumber string
	// DefaultIossCountryCode holds the default value on creation for the "ioss_country_code" field.
	DefaultIossCountryCode string
	// DefaultUkVatNumber holds the default value on creation for the "uk_vat_number" field.
	DefaultUkVatNumber string
	// DefaultStoreCode holds the default value on creation for the "store_code" field.
	DefaultStoreCode string
	// DefaultStorageUnitPrice holds the default value on creation for the "storage_unit_price" field.
	DefaultStorageUnitPrice float64
)
