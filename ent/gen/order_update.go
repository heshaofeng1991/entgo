// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderholdreason"
	"github.com/heshaofeng1991/entgo/ent/gen/orderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/trackmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrderUpdate) SetDeletedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeletedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrderUpdate) ClearDeletedAt() *OrderUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetOrderNumber sets the "order_number" field.
func (ou *OrderUpdate) SetOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetOrderNumber(s)
	return ou
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderNumber(*s)
	}
	return ou
}

// SetMode sets the "mode" field.
func (ou *OrderUpdate) SetMode(i int8) *OrderUpdate {
	ou.mutation.ResetMode()
	ou.mutation.SetMode(i)
	return ou
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMode(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetMode(*i)
	}
	return ou
}

// AddMode adds i to the "mode" field.
func (ou *OrderUpdate) AddMode(i int8) *OrderUpdate {
	ou.mutation.AddMode(i)
	return ou
}

// SetType sets the "type" field.
func (ou *OrderUpdate) SetType(i int8) *OrderUpdate {
	ou.mutation.ResetType()
	ou.mutation.SetType(i)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableType(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetType(*i)
	}
	return ou
}

// AddType adds i to the "type" field.
func (ou *OrderUpdate) AddType(i int8) *OrderUpdate {
	ou.mutation.AddType(i)
	return ou
}

// SetOffline sets the "offline" field.
func (ou *OrderUpdate) SetOffline(b bool) *OrderUpdate {
	ou.mutation.SetOffline(b)
	return ou
}

// SetNillableOffline sets the "offline" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOffline(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetOffline(*b)
	}
	return ou
}

// SetStoreID sets the "store_id" field.
func (ou *OrderUpdate) SetStoreID(i int64) *OrderUpdate {
	ou.mutation.SetStoreID(i)
	return ou
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStoreID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetStoreID(*i)
	}
	return ou
}

// ClearStoreID clears the value of the "store_id" field.
func (ou *OrderUpdate) ClearStoreID() *OrderUpdate {
	ou.mutation.ClearStoreID()
	return ou
}

// SetWarehouseID sets the "warehouse_id" field.
func (ou *OrderUpdate) SetWarehouseID(i int64) *OrderUpdate {
	ou.mutation.SetWarehouseID(i)
	return ou
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableWarehouseID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetWarehouseID(*i)
	}
	return ou
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (ou *OrderUpdate) ClearWarehouseID() *OrderUpdate {
	ou.mutation.ClearWarehouseID()
	return ou
}

// SetCustomerCode sets the "customer_code" field.
func (ou *OrderUpdate) SetCustomerCode(s string) *OrderUpdate {
	ou.mutation.SetCustomerCode(s)
	return ou
}

// SetNillableCustomerCode sets the "customer_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCustomerCode(*s)
	}
	return ou
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (ou *OrderUpdate) SetPrepayTariff(b bool) *OrderUpdate {
	ou.mutation.SetPrepayTariff(b)
	return ou
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrepayTariff(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetPrepayTariff(*b)
	}
	return ou
}

// SetIossNumber sets the "ioss_number" field.
func (ou *OrderUpdate) SetIossNumber(s string) *OrderUpdate {
	ou.mutation.SetIossNumber(s)
	return ou
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIossNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetIossNumber(*s)
	}
	return ou
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (ou *OrderUpdate) SetIossCountryCode(s string) *OrderUpdate {
	ou.mutation.SetIossCountryCode(s)
	return ou
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIossCountryCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetIossCountryCode(*s)
	}
	return ou
}

// SetIossNumberType sets the "ioss_number_type" field.
func (ou *OrderUpdate) SetIossNumberType(i int8) *OrderUpdate {
	ou.mutation.ResetIossNumberType()
	ou.mutation.SetIossNumberType(i)
	return ou
}

// SetNillableIossNumberType sets the "ioss_number_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIossNumberType(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetIossNumberType(*i)
	}
	return ou
}

// AddIossNumberType adds i to the "ioss_number_type" field.
func (ou *OrderUpdate) AddIossNumberType(i int8) *OrderUpdate {
	ou.mutation.AddIossNumberType(i)
	return ou
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (ou *OrderUpdate) SetUkVatNumber(s string) *OrderUpdate {
	ou.mutation.SetUkVatNumber(s)
	return ou
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUkVatNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetUkVatNumber(*s)
	}
	return ou
}

// SetInboundOrderNumber sets the "inbound_order_number" field.
func (ou *OrderUpdate) SetInboundOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetInboundOrderNumber(s)
	return ou
}

// SetNillableInboundOrderNumber sets the "inbound_order_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableInboundOrderNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetInboundOrderNumber(*s)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(i int8) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(i)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetStatus(*i)
	}
	return ou
}

// AddStatus adds i to the "status" field.
func (ou *OrderUpdate) AddStatus(i int8) *OrderUpdate {
	ou.mutation.AddStatus(i)
	return ou
}

// SetSqsStatus sets the "sqs_status" field.
func (ou *OrderUpdate) SetSqsStatus(b bool) *OrderUpdate {
	ou.mutation.SetSqsStatus(b)
	return ou
}

// SetNillableSqsStatus sets the "sqs_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSqsStatus(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetSqsStatus(*b)
	}
	return ou
}

// ClearSqsStatus clears the value of the "sqs_status" field.
func (ou *OrderUpdate) ClearSqsStatus() *OrderUpdate {
	ou.mutation.ClearSqsStatus()
	return ou
}

// SetHoldStatus sets the "hold_status" field.
func (ou *OrderUpdate) SetHoldStatus(b bool) *OrderUpdate {
	ou.mutation.SetHoldStatus(b)
	return ou
}

// SetNillableHoldStatus sets the "hold_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableHoldStatus(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetHoldStatus(*b)
	}
	return ou
}

// ClearHoldStatus clears the value of the "hold_status" field.
func (ou *OrderUpdate) ClearHoldStatus() *OrderUpdate {
	ou.mutation.ClearHoldStatus()
	return ou
}

// SetPaymentStatus sets the "payment_status" field.
func (ou *OrderUpdate) SetPaymentStatus(i int8) *OrderUpdate {
	ou.mutation.ResetPaymentStatus()
	ou.mutation.SetPaymentStatus(i)
	return ou
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentStatus(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetPaymentStatus(*i)
	}
	return ou
}

// AddPaymentStatus adds i to the "payment_status" field.
func (ou *OrderUpdate) AddPaymentStatus(i int8) *OrderUpdate {
	ou.mutation.AddPaymentStatus(i)
	return ou
}

// ClearPaymentStatus clears the value of the "payment_status" field.
func (ou *OrderUpdate) ClearPaymentStatus() *OrderUpdate {
	ou.mutation.ClearPaymentStatus()
	return ou
}

// SetCancelRequest sets the "cancel_request" field.
func (ou *OrderUpdate) SetCancelRequest(i int8) *OrderUpdate {
	ou.mutation.ResetCancelRequest()
	ou.mutation.SetCancelRequest(i)
	return ou
}

// SetNillableCancelRequest sets the "cancel_request" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCancelRequest(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetCancelRequest(*i)
	}
	return ou
}

// AddCancelRequest adds i to the "cancel_request" field.
func (ou *OrderUpdate) AddCancelRequest(i int8) *OrderUpdate {
	ou.mutation.AddCancelRequest(i)
	return ou
}

// ClearCancelRequest clears the value of the "cancel_request" field.
func (ou *OrderUpdate) ClearCancelRequest() *OrderUpdate {
	ou.mutation.ClearCancelRequest()
	return ou
}

// SetPlatform sets the "platform" field.
func (ou *OrderUpdate) SetPlatform(s string) *OrderUpdate {
	ou.mutation.SetPlatform(s)
	return ou
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatform(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPlatform(*s)
	}
	return ou
}

// SetPlatformOrderID sets the "platform_order_id" field.
func (ou *OrderUpdate) SetPlatformOrderID(s string) *OrderUpdate {
	ou.mutation.SetPlatformOrderID(s)
	return ou
}

// SetNillablePlatformOrderID sets the "platform_order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatformOrderID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPlatformOrderID(*s)
	}
	return ou
}

// ClearPlatformOrderID clears the value of the "platform_order_id" field.
func (ou *OrderUpdate) ClearPlatformOrderID() *OrderUpdate {
	ou.mutation.ClearPlatformOrderID()
	return ou
}

// SetPlatformOrderNo sets the "platform_order_no" field.
func (ou *OrderUpdate) SetPlatformOrderNo(s string) *OrderUpdate {
	ou.mutation.SetPlatformOrderNo(s)
	return ou
}

// SetNillablePlatformOrderNo sets the "platform_order_no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatformOrderNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPlatformOrderNo(*s)
	}
	return ou
}

// ClearPlatformOrderNo clears the value of the "platform_order_no" field.
func (ou *OrderUpdate) ClearPlatformOrderNo() *OrderUpdate {
	ou.mutation.ClearPlatformOrderNo()
	return ou
}

// SetPlatformOrderStatusURL sets the "platform_order_status_url" field.
func (ou *OrderUpdate) SetPlatformOrderStatusURL(s string) *OrderUpdate {
	ou.mutation.SetPlatformOrderStatusURL(s)
	return ou
}

// SetNillablePlatformOrderStatusURL sets the "platform_order_status_url" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatformOrderStatusURL(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPlatformOrderStatusURL(*s)
	}
	return ou
}

// ClearPlatformOrderStatusURL clears the value of the "platform_order_status_url" field.
func (ou *OrderUpdate) ClearPlatformOrderStatusURL() *OrderUpdate {
	ou.mutation.ClearPlatformOrderStatusURL()
	return ou
}

// SetPlatformStatus sets the "platform_status" field.
func (ou *OrderUpdate) SetPlatformStatus(s string) *OrderUpdate {
	ou.mutation.SetPlatformStatus(s)
	return ou
}

// SetNillablePlatformStatus sets the "platform_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatformStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPlatformStatus(*s)
	}
	return ou
}

// ClearPlatformStatus clears the value of the "platform_status" field.
func (ou *OrderUpdate) ClearPlatformStatus() *OrderUpdate {
	ou.mutation.ClearPlatformStatus()
	return ou
}

// SetPaidStatus sets the "paid_status" field.
func (ou *OrderUpdate) SetPaidStatus(s string) *OrderUpdate {
	ou.mutation.SetPaidStatus(s)
	return ou
}

// SetNillablePaidStatus sets the "paid_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaidStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaidStatus(*s)
	}
	return ou
}

// ClearPaidStatus clears the value of the "paid_status" field.
func (ou *OrderUpdate) ClearPaidStatus() *OrderUpdate {
	ou.mutation.ClearPaidStatus()
	return ou
}

// SetFulfillmentPushed sets the "fulfillment_pushed" field.
func (ou *OrderUpdate) SetFulfillmentPushed(b bool) *OrderUpdate {
	ou.mutation.SetFulfillmentPushed(b)
	return ou
}

// SetNillableFulfillmentPushed sets the "fulfillment_pushed" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableFulfillmentPushed(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetFulfillmentPushed(*b)
	}
	return ou
}

// ClearFulfillmentPushed clears the value of the "fulfillment_pushed" field.
func (ou *OrderUpdate) ClearFulfillmentPushed() *OrderUpdate {
	ou.mutation.ClearFulfillmentPushed()
	return ou
}

// SetFulfillmentStatus sets the "fulfillment_status" field.
func (ou *OrderUpdate) SetFulfillmentStatus(s string) *OrderUpdate {
	ou.mutation.SetFulfillmentStatus(s)
	return ou
}

// SetNillableFulfillmentStatus sets the "fulfillment_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableFulfillmentStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetFulfillmentStatus(*s)
	}
	return ou
}

// ClearFulfillmentStatus clears the value of the "fulfillment_status" field.
func (ou *OrderUpdate) ClearFulfillmentStatus() *OrderUpdate {
	ou.mutation.ClearFulfillmentStatus()
	return ou
}

// SetPlatformCreatedAt sets the "platform_created_at" field.
func (ou *OrderUpdate) SetPlatformCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPlatformCreatedAt(t)
	return ou
}

// SetNillablePlatformCreatedAt sets the "platform_created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlatformCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPlatformCreatedAt(*t)
	}
	return ou
}

// ClearPlatformCreatedAt clears the value of the "platform_created_at" field.
func (ou *OrderUpdate) ClearPlatformCreatedAt() *OrderUpdate {
	ou.mutation.ClearPlatformCreatedAt()
	return ou
}

// SetLocationID sets the "location_id" field.
func (ou *OrderUpdate) SetLocationID(s string) *OrderUpdate {
	ou.mutation.SetLocationID(s)
	return ou
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLocationID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetLocationID(*s)
	}
	return ou
}

// ClearLocationID clears the value of the "location_id" field.
func (ou *OrderUpdate) ClearLocationID() *OrderUpdate {
	ou.mutation.ClearLocationID()
	return ou
}

// SetTags sets the "tags" field.
func (ou *OrderUpdate) SetTags(s string) *OrderUpdate {
	ou.mutation.SetTags(s)
	return ou
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTags(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTags(*s)
	}
	return ou
}

// ClearTags clears the value of the "tags" field.
func (ou *OrderUpdate) ClearTags() *OrderUpdate {
	ou.mutation.ClearTags()
	return ou
}

// SetNote sets the "note" field.
func (ou *OrderUpdate) SetNote(s string) *OrderUpdate {
	ou.mutation.SetNote(s)
	return ou
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNote(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNote(*s)
	}
	return ou
}

// ClearNote clears the value of the "note" field.
func (ou *OrderUpdate) ClearNote() *OrderUpdate {
	ou.mutation.ClearNote()
	return ou
}

// SetCancelReason sets the "cancel_reason" field.
func (ou *OrderUpdate) SetCancelReason(s string) *OrderUpdate {
	ou.mutation.SetCancelReason(s)
	return ou
}

// SetNillableCancelReason sets the "cancel_reason" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCancelReason(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCancelReason(*s)
	}
	return ou
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (ou *OrderUpdate) ClearCancelReason() *OrderUpdate {
	ou.mutation.ClearCancelReason()
	return ou
}

// SetCancelledAt sets the "cancelled_at" field.
func (ou *OrderUpdate) SetCancelledAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCancelledAt(t)
	return ou
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCancelledAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCancelledAt(*t)
	}
	return ou
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (ou *OrderUpdate) ClearCancelledAt() *OrderUpdate {
	ou.mutation.ClearCancelledAt()
	return ou
}

// SetClosedAt sets the "closed_at" field.
func (ou *OrderUpdate) SetClosedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetClosedAt(t)
	return ou
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableClosedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetClosedAt(*t)
	}
	return ou
}

// ClearClosedAt clears the value of the "closed_at" field.
func (ou *OrderUpdate) ClearClosedAt() *OrderUpdate {
	ou.mutation.ClearClosedAt()
	return ou
}

// SetContactEmail sets the "contact_email" field.
func (ou *OrderUpdate) SetContactEmail(s string) *OrderUpdate {
	ou.mutation.SetContactEmail(s)
	return ou
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableContactEmail(s *string) *OrderUpdate {
	if s != nil {
		ou.SetContactEmail(*s)
	}
	return ou
}

// SetContactPhone sets the "contact_phone" field.
func (ou *OrderUpdate) SetContactPhone(s string) *OrderUpdate {
	ou.mutation.SetContactPhone(s)
	return ou
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableContactPhone(s *string) *OrderUpdate {
	if s != nil {
		ou.SetContactPhone(*s)
	}
	return ou
}

// SetShippingName sets the "shipping_name" field.
func (ou *OrderUpdate) SetShippingName(s string) *OrderUpdate {
	ou.mutation.SetShippingName(s)
	return ou
}

// SetNillableShippingName sets the "shipping_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingName(*s)
	}
	return ou
}

// SetShippingFirstName sets the "shipping_first_name" field.
func (ou *OrderUpdate) SetShippingFirstName(s string) *OrderUpdate {
	ou.mutation.SetShippingFirstName(s)
	return ou
}

// SetNillableShippingFirstName sets the "shipping_first_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingFirstName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingFirstName(*s)
	}
	return ou
}

// SetShippingLastName sets the "shipping_last_name" field.
func (ou *OrderUpdate) SetShippingLastName(s string) *OrderUpdate {
	ou.mutation.SetShippingLastName(s)
	return ou
}

// SetNillableShippingLastName sets the "shipping_last_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingLastName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingLastName(*s)
	}
	return ou
}

// SetShippingCompany sets the "shipping_company" field.
func (ou *OrderUpdate) SetShippingCompany(s string) *OrderUpdate {
	ou.mutation.SetShippingCompany(s)
	return ou
}

// SetNillableShippingCompany sets the "shipping_company" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCompany(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCompany(*s)
	}
	return ou
}

// SetShippingCountry sets the "shipping_country" field.
func (ou *OrderUpdate) SetShippingCountry(s string) *OrderUpdate {
	ou.mutation.SetShippingCountry(s)
	return ou
}

// SetNillableShippingCountry sets the "shipping_country" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCountry(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCountry(*s)
	}
	return ou
}

// SetShippingCountryCode sets the "shipping_country_code" field.
func (ou *OrderUpdate) SetShippingCountryCode(s string) *OrderUpdate {
	ou.mutation.SetShippingCountryCode(s)
	return ou
}

// SetNillableShippingCountryCode sets the "shipping_country_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCountryCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCountryCode(*s)
	}
	return ou
}

// SetShippingProvince sets the "shipping_province" field.
func (ou *OrderUpdate) SetShippingProvince(s string) *OrderUpdate {
	ou.mutation.SetShippingProvince(s)
	return ou
}

// SetNillableShippingProvince sets the "shipping_province" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingProvince(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingProvince(*s)
	}
	return ou
}

// SetShippingProvinceCode sets the "shipping_province_code" field.
func (ou *OrderUpdate) SetShippingProvinceCode(s string) *OrderUpdate {
	ou.mutation.SetShippingProvinceCode(s)
	return ou
}

// SetNillableShippingProvinceCode sets the "shipping_province_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingProvinceCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingProvinceCode(*s)
	}
	return ou
}

// SetShippingCity sets the "shipping_city" field.
func (ou *OrderUpdate) SetShippingCity(s string) *OrderUpdate {
	ou.mutation.SetShippingCity(s)
	return ou
}

// SetNillableShippingCity sets the "shipping_city" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCity(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCity(*s)
	}
	return ou
}

// SetShippingAddress1 sets the "shipping_address1" field.
func (ou *OrderUpdate) SetShippingAddress1(s string) *OrderUpdate {
	ou.mutation.SetShippingAddress1(s)
	return ou
}

// SetNillableShippingAddress1 sets the "shipping_address1" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingAddress1(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingAddress1(*s)
	}
	return ou
}

// SetShippingAddress2 sets the "shipping_address2" field.
func (ou *OrderUpdate) SetShippingAddress2(s string) *OrderUpdate {
	ou.mutation.SetShippingAddress2(s)
	return ou
}

// SetNillableShippingAddress2 sets the "shipping_address2" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingAddress2(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingAddress2(*s)
	}
	return ou
}

// SetShippingZipCode sets the "shipping_zip_code" field.
func (ou *OrderUpdate) SetShippingZipCode(s string) *OrderUpdate {
	ou.mutation.SetShippingZipCode(s)
	return ou
}

// SetNillableShippingZipCode sets the "shipping_zip_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingZipCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingZipCode(*s)
	}
	return ou
}

// SetShippingPhone sets the "shipping_phone" field.
func (ou *OrderUpdate) SetShippingPhone(s string) *OrderUpdate {
	ou.mutation.SetShippingPhone(s)
	return ou
}

// SetNillableShippingPhone sets the "shipping_phone" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingPhone(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingPhone(*s)
	}
	return ou
}

// SetShippingCertificateType sets the "shipping_certificate_type" field.
func (ou *OrderUpdate) SetShippingCertificateType(s string) *OrderUpdate {
	ou.mutation.SetShippingCertificateType(s)
	return ou
}

// SetNillableShippingCertificateType sets the "shipping_certificate_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCertificateType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCertificateType(*s)
	}
	return ou
}

// ClearShippingCertificateType clears the value of the "shipping_certificate_type" field.
func (ou *OrderUpdate) ClearShippingCertificateType() *OrderUpdate {
	ou.mutation.ClearShippingCertificateType()
	return ou
}

// SetShippingCertificateCode sets the "shipping_certificate_code" field.
func (ou *OrderUpdate) SetShippingCertificateCode(s string) *OrderUpdate {
	ou.mutation.SetShippingCertificateCode(s)
	return ou
}

// SetNillableShippingCertificateCode sets the "shipping_certificate_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCertificateCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCertificateCode(*s)
	}
	return ou
}

// ClearShippingCertificateCode clears the value of the "shipping_certificate_code" field.
func (ou *OrderUpdate) ClearShippingCertificateCode() *OrderUpdate {
	ou.mutation.ClearShippingCertificateCode()
	return ou
}

// SetShippingCredentialsPeriod sets the "shipping_credentials_period" field.
func (ou *OrderUpdate) SetShippingCredentialsPeriod(s string) *OrderUpdate {
	ou.mutation.SetShippingCredentialsPeriod(s)
	return ou
}

// SetNillableShippingCredentialsPeriod sets the "shipping_credentials_period" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCredentialsPeriod(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingCredentialsPeriod(*s)
	}
	return ou
}

// ClearShippingCredentialsPeriod clears the value of the "shipping_credentials_period" field.
func (ou *OrderUpdate) ClearShippingCredentialsPeriod() *OrderUpdate {
	ou.mutation.ClearShippingCredentialsPeriod()
	return ou
}

// SetRemark sets the "remark" field.
func (ou *OrderUpdate) SetRemark(s string) *OrderUpdate {
	ou.mutation.SetRemark(s)
	return ou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRemark(s *string) *OrderUpdate {
	if s != nil {
		ou.SetRemark(*s)
	}
	return ou
}

// ClearRemark clears the value of the "remark" field.
func (ou *OrderUpdate) ClearRemark() *OrderUpdate {
	ou.mutation.ClearRemark()
	return ou
}

// SetPreferShippedType sets the "prefer_shipped_type" field.
func (ou *OrderUpdate) SetPreferShippedType(i int8) *OrderUpdate {
	ou.mutation.ResetPreferShippedType()
	ou.mutation.SetPreferShippedType(i)
	return ou
}

// SetNillablePreferShippedType sets the "prefer_shipped_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePreferShippedType(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetPreferShippedType(*i)
	}
	return ou
}

// AddPreferShippedType adds i to the "prefer_shipped_type" field.
func (ou *OrderUpdate) AddPreferShippedType(i int8) *OrderUpdate {
	ou.mutation.AddPreferShippedType(i)
	return ou
}

// ClearPreferShippedType clears the value of the "prefer_shipped_type" field.
func (ou *OrderUpdate) ClearPreferShippedType() *OrderUpdate {
	ou.mutation.ClearPreferShippedType()
	return ou
}

// SetPreferChannelID sets the "prefer_channel_id" field.
func (ou *OrderUpdate) SetPreferChannelID(i int64) *OrderUpdate {
	ou.mutation.ResetPreferChannelID()
	ou.mutation.SetPreferChannelID(i)
	return ou
}

// SetNillablePreferChannelID sets the "prefer_channel_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePreferChannelID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetPreferChannelID(*i)
	}
	return ou
}

// AddPreferChannelID adds i to the "prefer_channel_id" field.
func (ou *OrderUpdate) AddPreferChannelID(i int64) *OrderUpdate {
	ou.mutation.AddPreferChannelID(i)
	return ou
}

// ClearPreferChannelID clears the value of the "prefer_channel_id" field.
func (ou *OrderUpdate) ClearPreferChannelID() *OrderUpdate {
	ou.mutation.ClearPreferChannelID()
	return ou
}

// SetChannelOptions sets the "channel_options" field.
func (ou *OrderUpdate) SetChannelOptions(s string) *OrderUpdate {
	ou.mutation.SetChannelOptions(s)
	return ou
}

// SetNillableChannelOptions sets the "channel_options" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelOptions(s *string) *OrderUpdate {
	if s != nil {
		ou.SetChannelOptions(*s)
	}
	return ou
}

// ClearChannelOptions clears the value of the "channel_options" field.
func (ou *OrderUpdate) ClearChannelOptions() *OrderUpdate {
	ou.mutation.ClearChannelOptions()
	return ou
}

// SetChannelID sets the "channel_id" field.
func (ou *OrderUpdate) SetChannelID(i int64) *OrderUpdate {
	ou.mutation.SetChannelID(i)
	return ou
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetChannelID(*i)
	}
	return ou
}

// ClearChannelID clears the value of the "channel_id" field.
func (ou *OrderUpdate) ClearChannelID() *OrderUpdate {
	ou.mutation.ClearChannelID()
	return ou
}

// SetChannelCostID sets the "channel_cost_id" field.
func (ou *OrderUpdate) SetChannelCostID(i int64) *OrderUpdate {
	ou.mutation.ResetChannelCostID()
	ou.mutation.SetChannelCostID(i)
	return ou
}

// SetNillableChannelCostID sets the "channel_cost_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelCostID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetChannelCostID(*i)
	}
	return ou
}

// AddChannelCostID adds i to the "channel_cost_id" field.
func (ou *OrderUpdate) AddChannelCostID(i int64) *OrderUpdate {
	ou.mutation.AddChannelCostID(i)
	return ou
}

// ClearChannelCostID clears the value of the "channel_cost_id" field.
func (ou *OrderUpdate) ClearChannelCostID() *OrderUpdate {
	ou.mutation.ClearChannelCostID()
	return ou
}

// SetShipType sets the "ship_type" field.
func (ou *OrderUpdate) SetShipType(i int8) *OrderUpdate {
	ou.mutation.ResetShipType()
	ou.mutation.SetShipType(i)
	return ou
}

// SetNillableShipType sets the "ship_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShipType(i *int8) *OrderUpdate {
	if i != nil {
		ou.SetShipType(*i)
	}
	return ou
}

// AddShipType adds i to the "ship_type" field.
func (ou *OrderUpdate) AddShipType(i int8) *OrderUpdate {
	ou.mutation.AddShipType(i)
	return ou
}

// ClearShipType clears the value of the "ship_type" field.
func (ou *OrderUpdate) ClearShipType() *OrderUpdate {
	ou.mutation.ClearShipType()
	return ou
}

// SetTrackingCompany sets the "tracking_company" field.
func (ou *OrderUpdate) SetTrackingCompany(s string) *OrderUpdate {
	ou.mutation.SetTrackingCompany(s)
	return ou
}

// SetNillableTrackingCompany sets the "tracking_company" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTrackingCompany(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTrackingCompany(*s)
	}
	return ou
}

// ClearTrackingCompany clears the value of the "tracking_company" field.
func (ou *OrderUpdate) ClearTrackingCompany() *OrderUpdate {
	ou.mutation.ClearTrackingCompany()
	return ou
}

// SetTrackingNumber sets the "tracking_number" field.
func (ou *OrderUpdate) SetTrackingNumber(s string) *OrderUpdate {
	ou.mutation.SetTrackingNumber(s)
	return ou
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTrackingNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTrackingNumber(*s)
	}
	return ou
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (ou *OrderUpdate) ClearTrackingNumber() *OrderUpdate {
	ou.mutation.ClearTrackingNumber()
	return ou
}

// SetTrackingURL sets the "tracking_url" field.
func (ou *OrderUpdate) SetTrackingURL(s string) *OrderUpdate {
	ou.mutation.SetTrackingURL(s)
	return ou
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTrackingURL(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTrackingURL(*s)
	}
	return ou
}

// ClearTrackingURL clears the value of the "tracking_url" field.
func (ou *OrderUpdate) ClearTrackingURL() *OrderUpdate {
	ou.mutation.ClearTrackingURL()
	return ou
}

// SetWaybillNumber sets the "waybill_number" field.
func (ou *OrderUpdate) SetWaybillNumber(s string) *OrderUpdate {
	ou.mutation.SetWaybillNumber(s)
	return ou
}

// SetNillableWaybillNumber sets the "waybill_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableWaybillNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetWaybillNumber(*s)
	}
	return ou
}

// ClearWaybillNumber clears the value of the "waybill_number" field.
func (ou *OrderUpdate) ClearWaybillNumber() *OrderUpdate {
	ou.mutation.ClearWaybillNumber()
	return ou
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (ou *OrderUpdate) SetCourierOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetCourierOrderNumber(s)
	return ou
}

// SetNillableCourierOrderNumber sets the "courier_order_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCourierOrderNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCourierOrderNumber(*s)
	}
	return ou
}

// ClearCourierOrderNumber clears the value of the "courier_order_number" field.
func (ou *OrderUpdate) ClearCourierOrderNumber() *OrderUpdate {
	ou.mutation.ClearCourierOrderNumber()
	return ou
}

// SetNssCourierOrderNumber sets the "nss_courier_order_number" field.
func (ou *OrderUpdate) SetNssCourierOrderNumber(s string) *OrderUpdate {
	ou.mutation.SetNssCourierOrderNumber(s)
	return ou
}

// SetNillableNssCourierOrderNumber sets the "nss_courier_order_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNssCourierOrderNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNssCourierOrderNumber(*s)
	}
	return ou
}

// ClearNssCourierOrderNumber clears the value of the "nss_courier_order_number" field.
func (ou *OrderUpdate) ClearNssCourierOrderNumber() *OrderUpdate {
	ou.mutation.ClearNssCourierOrderNumber()
	return ou
}

// SetNssTrackingNumber sets the "nss_tracking_number" field.
func (ou *OrderUpdate) SetNssTrackingNumber(s string) *OrderUpdate {
	ou.mutation.SetNssTrackingNumber(s)
	return ou
}

// SetNillableNssTrackingNumber sets the "nss_tracking_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNssTrackingNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNssTrackingNumber(*s)
	}
	return ou
}

// ClearNssTrackingNumber clears the value of the "nss_tracking_number" field.
func (ou *OrderUpdate) ClearNssTrackingNumber() *OrderUpdate {
	ou.mutation.ClearNssTrackingNumber()
	return ou
}

// SetNssTrackingURL sets the "nss_tracking_url" field.
func (ou *OrderUpdate) SetNssTrackingURL(s string) *OrderUpdate {
	ou.mutation.SetNssTrackingURL(s)
	return ou
}

// SetNillableNssTrackingURL sets the "nss_tracking_url" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNssTrackingURL(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNssTrackingURL(*s)
	}
	return ou
}

// ClearNssTrackingURL clears the value of the "nss_tracking_url" field.
func (ou *OrderUpdate) ClearNssTrackingURL() *OrderUpdate {
	ou.mutation.ClearNssTrackingURL()
	return ou
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (ou *OrderUpdate) SetShippingLabelURL(s string) *OrderUpdate {
	ou.mutation.SetShippingLabelURL(s)
	return ou
}

// SetNillableShippingLabelURL sets the "shipping_label_url" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingLabelURL(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingLabelURL(*s)
	}
	return ou
}

// ClearShippingLabelURL clears the value of the "shipping_label_url" field.
func (ou *OrderUpdate) ClearShippingLabelURL() *OrderUpdate {
	ou.mutation.ClearShippingLabelURL()
	return ou
}

// SetShippingLabelPath sets the "shipping_label_path" field.
func (ou *OrderUpdate) SetShippingLabelPath(s string) *OrderUpdate {
	ou.mutation.SetShippingLabelPath(s)
	return ou
}

// SetNillableShippingLabelPath sets the "shipping_label_path" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingLabelPath(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippingLabelPath(*s)
	}
	return ou
}

// ClearShippingLabelPath clears the value of the "shipping_label_path" field.
func (ou *OrderUpdate) ClearShippingLabelPath() *OrderUpdate {
	ou.mutation.ClearShippingLabelPath()
	return ou
}

// SetLabelDataPath sets the "label_data_path" field.
func (ou *OrderUpdate) SetLabelDataPath(s string) *OrderUpdate {
	ou.mutation.SetLabelDataPath(s)
	return ou
}

// SetNillableLabelDataPath sets the "label_data_path" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLabelDataPath(s *string) *OrderUpdate {
	if s != nil {
		ou.SetLabelDataPath(*s)
	}
	return ou
}

// ClearLabelDataPath clears the value of the "label_data_path" field.
func (ou *OrderUpdate) ClearLabelDataPath() *OrderUpdate {
	ou.mutation.ClearLabelDataPath()
	return ou
}

// SetPackageID sets the "package_id" field.
func (ou *OrderUpdate) SetPackageID(s string) *OrderUpdate {
	ou.mutation.SetPackageID(s)
	return ou
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePackageID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPackageID(*s)
	}
	return ou
}

// ClearPackageID clears the value of the "package_id" field.
func (ou *OrderUpdate) ClearPackageID() *OrderUpdate {
	ou.mutation.ClearPackageID()
	return ou
}

// SetShipDate sets the "ship_date" field.
func (ou *OrderUpdate) SetShipDate(t time.Time) *OrderUpdate {
	ou.mutation.SetShipDate(t)
	return ou
}

// SetNillableShipDate sets the "ship_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShipDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetShipDate(*t)
	}
	return ou
}

// ClearShipDate clears the value of the "ship_date" field.
func (ou *OrderUpdate) ClearShipDate() *OrderUpdate {
	ou.mutation.ClearShipDate()
	return ou
}

// SetRequestShippingAt sets the "request_shipping_at" field.
func (ou *OrderUpdate) SetRequestShippingAt(t time.Time) *OrderUpdate {
	ou.mutation.SetRequestShippingAt(t)
	return ou
}

// SetNillableRequestShippingAt sets the "request_shipping_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRequestShippingAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetRequestShippingAt(*t)
	}
	return ou
}

// ClearRequestShippingAt clears the value of the "request_shipping_at" field.
func (ou *OrderUpdate) ClearRequestShippingAt() *OrderUpdate {
	ou.mutation.ClearRequestShippingAt()
	return ou
}

// SetUnshelfRequestedTime sets the "unshelf_requested_time" field.
func (ou *OrderUpdate) SetUnshelfRequestedTime(t time.Time) *OrderUpdate {
	ou.mutation.SetUnshelfRequestedTime(t)
	return ou
}

// SetNillableUnshelfRequestedTime sets the "unshelf_requested_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUnshelfRequestedTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUnshelfRequestedTime(*t)
	}
	return ou
}

// ClearUnshelfRequestedTime clears the value of the "unshelf_requested_time" field.
func (ou *OrderUpdate) ClearUnshelfRequestedTime() *OrderUpdate {
	ou.mutation.ClearUnshelfRequestedTime()
	return ou
}

// SetContainerCode sets the "container_code" field.
func (ou *OrderUpdate) SetContainerCode(s string) *OrderUpdate {
	ou.mutation.SetContainerCode(s)
	return ou
}

// SetNillableContainerCode sets the "container_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableContainerCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetContainerCode(*s)
	}
	return ou
}

// ClearContainerCode clears the value of the "container_code" field.
func (ou *OrderUpdate) ClearContainerCode() *OrderUpdate {
	ou.mutation.ClearContainerCode()
	return ou
}

// SetBasketNumber sets the "basket_number" field.
func (ou *OrderUpdate) SetBasketNumber(s string) *OrderUpdate {
	ou.mutation.SetBasketNumber(s)
	return ou
}

// SetNillableBasketNumber sets the "basket_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBasketNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetBasketNumber(*s)
	}
	return ou
}

// ClearBasketNumber clears the value of the "basket_number" field.
func (ou *OrderUpdate) ClearBasketNumber() *OrderUpdate {
	ou.mutation.ClearBasketNumber()
	return ou
}

// SetPrintTimes sets the "print_times" field.
func (ou *OrderUpdate) SetPrintTimes(i int) *OrderUpdate {
	ou.mutation.ResetPrintTimes()
	ou.mutation.SetPrintTimes(i)
	return ou
}

// SetNillablePrintTimes sets the "print_times" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrintTimes(i *int) *OrderUpdate {
	if i != nil {
		ou.SetPrintTimes(*i)
	}
	return ou
}

// AddPrintTimes adds i to the "print_times" field.
func (ou *OrderUpdate) AddPrintTimes(i int) *OrderUpdate {
	ou.mutation.AddPrintTimes(i)
	return ou
}

// ClearPrintTimes clears the value of the "print_times" field.
func (ou *OrderUpdate) ClearPrintTimes() *OrderUpdate {
	ou.mutation.ClearPrintTimes()
	return ou
}

// SetSortingTrackingNumber sets the "sorting_tracking_number" field.
func (ou *OrderUpdate) SetSortingTrackingNumber(s string) *OrderUpdate {
	ou.mutation.SetSortingTrackingNumber(s)
	return ou
}

// SetNillableSortingTrackingNumber sets the "sorting_tracking_number" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingTrackingNumber(s *string) *OrderUpdate {
	if s != nil {
		ou.SetSortingTrackingNumber(*s)
	}
	return ou
}

// ClearSortingTrackingNumber clears the value of the "sorting_tracking_number" field.
func (ou *OrderUpdate) ClearSortingTrackingNumber() *OrderUpdate {
	ou.mutation.ClearSortingTrackingNumber()
	return ou
}

// SetSortingPort sets the "sorting_port" field.
func (ou *OrderUpdate) SetSortingPort(i int32) *OrderUpdate {
	ou.mutation.ResetSortingPort()
	ou.mutation.SetSortingPort(i)
	return ou
}

// SetNillableSortingPort sets the "sorting_port" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingPort(i *int32) *OrderUpdate {
	if i != nil {
		ou.SetSortingPort(*i)
	}
	return ou
}

// AddSortingPort adds i to the "sorting_port" field.
func (ou *OrderUpdate) AddSortingPort(i int32) *OrderUpdate {
	ou.mutation.AddSortingPort(i)
	return ou
}

// ClearSortingPort clears the value of the "sorting_port" field.
func (ou *OrderUpdate) ClearSortingPort() *OrderUpdate {
	ou.mutation.ClearSortingPort()
	return ou
}

// SetSortingLength sets the "sorting_length" field.
func (ou *OrderUpdate) SetSortingLength(i int) *OrderUpdate {
	ou.mutation.ResetSortingLength()
	ou.mutation.SetSortingLength(i)
	return ou
}

// SetNillableSortingLength sets the "sorting_length" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingLength(i *int) *OrderUpdate {
	if i != nil {
		ou.SetSortingLength(*i)
	}
	return ou
}

// AddSortingLength adds i to the "sorting_length" field.
func (ou *OrderUpdate) AddSortingLength(i int) *OrderUpdate {
	ou.mutation.AddSortingLength(i)
	return ou
}

// ClearSortingLength clears the value of the "sorting_length" field.
func (ou *OrderUpdate) ClearSortingLength() *OrderUpdate {
	ou.mutation.ClearSortingLength()
	return ou
}

// SetSortingWidth sets the "sorting_width" field.
func (ou *OrderUpdate) SetSortingWidth(i int) *OrderUpdate {
	ou.mutation.ResetSortingWidth()
	ou.mutation.SetSortingWidth(i)
	return ou
}

// SetNillableSortingWidth sets the "sorting_width" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingWidth(i *int) *OrderUpdate {
	if i != nil {
		ou.SetSortingWidth(*i)
	}
	return ou
}

// AddSortingWidth adds i to the "sorting_width" field.
func (ou *OrderUpdate) AddSortingWidth(i int) *OrderUpdate {
	ou.mutation.AddSortingWidth(i)
	return ou
}

// ClearSortingWidth clears the value of the "sorting_width" field.
func (ou *OrderUpdate) ClearSortingWidth() *OrderUpdate {
	ou.mutation.ClearSortingWidth()
	return ou
}

// SetSortingHeight sets the "sorting_height" field.
func (ou *OrderUpdate) SetSortingHeight(i int) *OrderUpdate {
	ou.mutation.ResetSortingHeight()
	ou.mutation.SetSortingHeight(i)
	return ou
}

// SetNillableSortingHeight sets the "sorting_height" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingHeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetSortingHeight(*i)
	}
	return ou
}

// AddSortingHeight adds i to the "sorting_height" field.
func (ou *OrderUpdate) AddSortingHeight(i int) *OrderUpdate {
	ou.mutation.AddSortingHeight(i)
	return ou
}

// ClearSortingHeight clears the value of the "sorting_height" field.
func (ou *OrderUpdate) ClearSortingHeight() *OrderUpdate {
	ou.mutation.ClearSortingHeight()
	return ou
}

// SetSortingWeight sets the "sorting_weight" field.
func (ou *OrderUpdate) SetSortingWeight(i int) *OrderUpdate {
	ou.mutation.ResetSortingWeight()
	ou.mutation.SetSortingWeight(i)
	return ou
}

// SetNillableSortingWeight sets the "sorting_weight" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableSortingWeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetSortingWeight(*i)
	}
	return ou
}

// AddSortingWeight adds i to the "sorting_weight" field.
func (ou *OrderUpdate) AddSortingWeight(i int) *OrderUpdate {
	ou.mutation.AddSortingWeight(i)
	return ou
}

// ClearSortingWeight clears the value of the "sorting_weight" field.
func (ou *OrderUpdate) ClearSortingWeight() *OrderUpdate {
	ou.mutation.ClearSortingWeight()
	return ou
}

// SetEstimatedWeight sets the "estimated_weight" field.
func (ou *OrderUpdate) SetEstimatedWeight(i int) *OrderUpdate {
	ou.mutation.ResetEstimatedWeight()
	ou.mutation.SetEstimatedWeight(i)
	return ou
}

// SetNillableEstimatedWeight sets the "estimated_weight" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEstimatedWeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetEstimatedWeight(*i)
	}
	return ou
}

// AddEstimatedWeight adds i to the "estimated_weight" field.
func (ou *OrderUpdate) AddEstimatedWeight(i int) *OrderUpdate {
	ou.mutation.AddEstimatedWeight(i)
	return ou
}

// ClearEstimatedWeight clears the value of the "estimated_weight" field.
func (ou *OrderUpdate) ClearEstimatedWeight() *OrderUpdate {
	ou.mutation.ClearEstimatedWeight()
	return ou
}

// SetCheckoutActualWeight sets the "checkout_actual_weight" field.
func (ou *OrderUpdate) SetCheckoutActualWeight(i int) *OrderUpdate {
	ou.mutation.ResetCheckoutActualWeight()
	ou.mutation.SetCheckoutActualWeight(i)
	return ou
}

// SetNillableCheckoutActualWeight sets the "checkout_actual_weight" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCheckoutActualWeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCheckoutActualWeight(*i)
	}
	return ou
}

// AddCheckoutActualWeight adds i to the "checkout_actual_weight" field.
func (ou *OrderUpdate) AddCheckoutActualWeight(i int) *OrderUpdate {
	ou.mutation.AddCheckoutActualWeight(i)
	return ou
}

// ClearCheckoutActualWeight clears the value of the "checkout_actual_weight" field.
func (ou *OrderUpdate) ClearCheckoutActualWeight() *OrderUpdate {
	ou.mutation.ClearCheckoutActualWeight()
	return ou
}

// SetVolumeWeight sets the "volume_weight" field.
func (ou *OrderUpdate) SetVolumeWeight(i int) *OrderUpdate {
	ou.mutation.ResetVolumeWeight()
	ou.mutation.SetVolumeWeight(i)
	return ou
}

// SetNillableVolumeWeight sets the "volume_weight" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableVolumeWeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetVolumeWeight(*i)
	}
	return ou
}

// AddVolumeWeight adds i to the "volume_weight" field.
func (ou *OrderUpdate) AddVolumeWeight(i int) *OrderUpdate {
	ou.mutation.AddVolumeWeight(i)
	return ou
}

// ClearVolumeWeight clears the value of the "volume_weight" field.
func (ou *OrderUpdate) ClearVolumeWeight() *OrderUpdate {
	ou.mutation.ClearVolumeWeight()
	return ou
}

// SetCourierWeight sets the "courier_weight" field.
func (ou *OrderUpdate) SetCourierWeight(i int) *OrderUpdate {
	ou.mutation.ResetCourierWeight()
	ou.mutation.SetCourierWeight(i)
	return ou
}

// SetNillableCourierWeight sets the "courier_weight" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCourierWeight(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCourierWeight(*i)
	}
	return ou
}

// AddCourierWeight adds i to the "courier_weight" field.
func (ou *OrderUpdate) AddCourierWeight(i int) *OrderUpdate {
	ou.mutation.AddCourierWeight(i)
	return ou
}

// ClearCourierWeight clears the value of the "courier_weight" field.
func (ou *OrderUpdate) ClearCourierWeight() *OrderUpdate {
	ou.mutation.ClearCourierWeight()
	return ou
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (ou *OrderUpdate) SetDeclaredValueInUsd(f float64) *OrderUpdate {
	ou.mutation.ResetDeclaredValueInUsd()
	ou.mutation.SetDeclaredValueInUsd(f)
	return ou
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeclaredValueInUsd(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDeclaredValueInUsd(*f)
	}
	return ou
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (ou *OrderUpdate) AddDeclaredValueInUsd(f float64) *OrderUpdate {
	ou.mutation.AddDeclaredValueInUsd(f)
	return ou
}

// ClearDeclaredValueInUsd clears the value of the "declared_value_in_usd" field.
func (ou *OrderUpdate) ClearDeclaredValueInUsd() *OrderUpdate {
	ou.mutation.ClearDeclaredValueInUsd()
	return ou
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (ou *OrderUpdate) SetDeclaredValueInEur(f float64) *OrderUpdate {
	ou.mutation.ResetDeclaredValueInEur()
	ou.mutation.SetDeclaredValueInEur(f)
	return ou
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeclaredValueInEur(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDeclaredValueInEur(*f)
	}
	return ou
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (ou *OrderUpdate) AddDeclaredValueInEur(f float64) *OrderUpdate {
	ou.mutation.AddDeclaredValueInEur(f)
	return ou
}

// ClearDeclaredValueInEur clears the value of the "declared_value_in_eur" field.
func (ou *OrderUpdate) ClearDeclaredValueInEur() *OrderUpdate {
	ou.mutation.ClearDeclaredValueInEur()
	return ou
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (ou *OrderUpdate) SetTotalItemsPrice(f float64) *OrderUpdate {
	ou.mutation.ResetTotalItemsPrice()
	ou.mutation.SetTotalItemsPrice(f)
	return ou
}

// SetNillableTotalItemsPrice sets the "total_items_price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotalItemsPrice(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotalItemsPrice(*f)
	}
	return ou
}

// AddTotalItemsPrice adds f to the "total_items_price" field.
func (ou *OrderUpdate) AddTotalItemsPrice(f float64) *OrderUpdate {
	ou.mutation.AddTotalItemsPrice(f)
	return ou
}

// ClearTotalItemsPrice clears the value of the "total_items_price" field.
func (ou *OrderUpdate) ClearTotalItemsPrice() *OrderUpdate {
	ou.mutation.ClearTotalItemsPrice()
	return ou
}

// SetCurrency sets the "currency" field.
func (ou *OrderUpdate) SetCurrency(s string) *OrderUpdate {
	ou.mutation.SetCurrency(s)
	return ou
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCurrency(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCurrency(*s)
	}
	return ou
}

// ClearCurrency clears the value of the "currency" field.
func (ou *OrderUpdate) ClearCurrency() *OrderUpdate {
	ou.mutation.ClearCurrency()
	return ou
}

// SetDeliveryCost sets the "delivery_cost" field.
func (ou *OrderUpdate) SetDeliveryCost(f float64) *OrderUpdate {
	ou.mutation.ResetDeliveryCost()
	ou.mutation.SetDeliveryCost(f)
	return ou
}

// SetNillableDeliveryCost sets the "delivery_cost" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryCost(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDeliveryCost(*f)
	}
	return ou
}

// AddDeliveryCost adds f to the "delivery_cost" field.
func (ou *OrderUpdate) AddDeliveryCost(f float64) *OrderUpdate {
	ou.mutation.AddDeliveryCost(f)
	return ou
}

// SetMiscFee sets the "misc_fee" field.
func (ou *OrderUpdate) SetMiscFee(f float64) *OrderUpdate {
	ou.mutation.ResetMiscFee()
	ou.mutation.SetMiscFee(f)
	return ou
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMiscFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetMiscFee(*f)
	}
	return ou
}

// AddMiscFee adds f to the "misc_fee" field.
func (ou *OrderUpdate) AddMiscFee(f float64) *OrderUpdate {
	ou.mutation.AddMiscFee(f)
	return ou
}

// SetFuelFee sets the "fuel_fee" field.
func (ou *OrderUpdate) SetFuelFee(f float64) *OrderUpdate {
	ou.mutation.ResetFuelFee()
	ou.mutation.SetFuelFee(f)
	return ou
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableFuelFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetFuelFee(*f)
	}
	return ou
}

// AddFuelFee adds f to the "fuel_fee" field.
func (ou *OrderUpdate) AddFuelFee(f float64) *OrderUpdate {
	ou.mutation.AddFuelFee(f)
	return ou
}

// SetRegistrationFee sets the "registration_fee" field.
func (ou *OrderUpdate) SetRegistrationFee(f float64) *OrderUpdate {
	ou.mutation.ResetRegistrationFee()
	ou.mutation.SetRegistrationFee(f)
	return ou
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRegistrationFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetRegistrationFee(*f)
	}
	return ou
}

// AddRegistrationFee adds f to the "registration_fee" field.
func (ou *OrderUpdate) AddRegistrationFee(f float64) *OrderUpdate {
	ou.mutation.AddRegistrationFee(f)
	return ou
}

// SetProcessingFee sets the "processing_fee" field.
func (ou *OrderUpdate) SetProcessingFee(f float64) *OrderUpdate {
	ou.mutation.ResetProcessingFee()
	ou.mutation.SetProcessingFee(f)
	return ou
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableProcessingFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetProcessingFee(*f)
	}
	return ou
}

// AddProcessingFee adds f to the "processing_fee" field.
func (ou *OrderUpdate) AddProcessingFee(f float64) *OrderUpdate {
	ou.mutation.AddProcessingFee(f)
	return ou
}

// SetPackageFee sets the "package_fee" field.
func (ou *OrderUpdate) SetPackageFee(f float64) *OrderUpdate {
	ou.mutation.ResetPackageFee()
	ou.mutation.SetPackageFee(f)
	return ou
}

// SetNillablePackageFee sets the "package_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePackageFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetPackageFee(*f)
	}
	return ou
}

// AddPackageFee adds f to the "package_fee" field.
func (ou *OrderUpdate) AddPackageFee(f float64) *OrderUpdate {
	ou.mutation.AddPackageFee(f)
	return ou
}

// SetHandlingFee sets the "handling_fee" field.
func (ou *OrderUpdate) SetHandlingFee(f float64) *OrderUpdate {
	ou.mutation.ResetHandlingFee()
	ou.mutation.SetHandlingFee(f)
	return ou
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableHandlingFee(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetHandlingFee(*f)
	}
	return ou
}

// AddHandlingFee adds f to the "handling_fee" field.
func (ou *OrderUpdate) AddHandlingFee(f float64) *OrderUpdate {
	ou.mutation.AddHandlingFee(f)
	return ou
}

// SetVat sets the "vat" field.
func (ou *OrderUpdate) SetVat(f float64) *OrderUpdate {
	ou.mutation.ResetVat()
	ou.mutation.SetVat(f)
	return ou
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableVat(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetVat(*f)
	}
	return ou
}

// AddVat adds f to the "vat" field.
func (ou *OrderUpdate) AddVat(f float64) *OrderUpdate {
	ou.mutation.AddVat(f)
	return ou
}

// SetEstimatedCost sets the "estimated_cost" field.
func (ou *OrderUpdate) SetEstimatedCost(f float64) *OrderUpdate {
	ou.mutation.ResetEstimatedCost()
	ou.mutation.SetEstimatedCost(f)
	return ou
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEstimatedCost(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetEstimatedCost(*f)
	}
	return ou
}

// AddEstimatedCost adds f to the "estimated_cost" field.
func (ou *OrderUpdate) AddEstimatedCost(f float64) *OrderUpdate {
	ou.mutation.AddEstimatedCost(f)
	return ou
}

// SetEstimatedCurrency sets the "estimated_currency" field.
func (ou *OrderUpdate) SetEstimatedCurrency(s string) *OrderUpdate {
	ou.mutation.SetEstimatedCurrency(s)
	return ou
}

// SetNillableEstimatedCurrency sets the "estimated_currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEstimatedCurrency(s *string) *OrderUpdate {
	if s != nil {
		ou.SetEstimatedCurrency(*s)
	}
	return ou
}

// SetReceivablesAmount sets the "receivables_amount" field.
func (ou *OrderUpdate) SetReceivablesAmount(f float64) *OrderUpdate {
	ou.mutation.ResetReceivablesAmount()
	ou.mutation.SetReceivablesAmount(f)
	return ou
}

// SetNillableReceivablesAmount sets the "receivables_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableReceivablesAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetReceivablesAmount(*f)
	}
	return ou
}

// AddReceivablesAmount adds f to the "receivables_amount" field.
func (ou *OrderUpdate) AddReceivablesAmount(f float64) *OrderUpdate {
	ou.mutation.AddReceivablesAmount(f)
	return ou
}

// SetReceivablesCurrency sets the "receivables_currency" field.
func (ou *OrderUpdate) SetReceivablesCurrency(s string) *OrderUpdate {
	ou.mutation.SetReceivablesCurrency(s)
	return ou
}

// SetNillableReceivablesCurrency sets the "receivables_currency" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableReceivablesCurrency(s *string) *OrderUpdate {
	if s != nil {
		ou.SetReceivablesCurrency(*s)
	}
	return ou
}

// SetNotAcceptPlatformUpdate sets the "not_accept_platform_update" field.
func (ou *OrderUpdate) SetNotAcceptPlatformUpdate(b bool) *OrderUpdate {
	ou.mutation.SetNotAcceptPlatformUpdate(b)
	return ou
}

// SetNillableNotAcceptPlatformUpdate sets the "not_accept_platform_update" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNotAcceptPlatformUpdate(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetNotAcceptPlatformUpdate(*b)
	}
	return ou
}

// SetNotAcceptPlatformUpdateItem sets the "not_accept_platform_update_item" field.
func (ou *OrderUpdate) SetNotAcceptPlatformUpdateItem(b bool) *OrderUpdate {
	ou.mutation.SetNotAcceptPlatformUpdateItem(b)
	return ou
}

// SetNillableNotAcceptPlatformUpdateItem sets the "not_accept_platform_update_item" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNotAcceptPlatformUpdateItem(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetNotAcceptPlatformUpdateItem(*b)
	}
	return ou
}

// SetJdPushedStatus sets the "jd_pushed_status" field.
func (ou *OrderUpdate) SetJdPushedStatus(s string) *OrderUpdate {
	ou.mutation.SetJdPushedStatus(s)
	return ou
}

// SetNillableJdPushedStatus sets the "jd_pushed_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableJdPushedStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetJdPushedStatus(*s)
	}
	return ou
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ou *OrderUpdate) SetTenantID(id int64) *OrderUpdate {
	ou.mutation.SetTenantID(id)
	return ou
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ou *OrderUpdate) SetTenant(t *Tenant) *OrderUpdate {
	return ou.SetTenantID(t.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddOrderItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddOrderItemIDs(ids...)
	return ou
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderItemIDs(ids...)
}

// AddOrderHoldReasonIDs adds the "order_hold_reasons" edge to the OrderHoldReason entity by IDs.
func (ou *OrderUpdate) AddOrderHoldReasonIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddOrderHoldReasonIDs(ids...)
	return ou
}

// AddOrderHoldReasons adds the "order_hold_reasons" edges to the OrderHoldReason entity.
func (ou *OrderUpdate) AddOrderHoldReasons(o ...*OrderHoldReason) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderHoldReasonIDs(ids...)
}

// AddOrderTaxationIDs adds the "order_taxations" edge to the OrderTaxation entity by IDs.
func (ou *OrderUpdate) AddOrderTaxationIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddOrderTaxationIDs(ids...)
	return ou
}

// AddOrderTaxations adds the "order_taxations" edges to the OrderTaxation entity.
func (ou *OrderUpdate) AddOrderTaxations(o ...*OrderTaxation) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderTaxationIDs(ids...)
}

// SetStoresID sets the "stores" edge to the Store entity by ID.
func (ou *OrderUpdate) SetStoresID(id int64) *OrderUpdate {
	ou.mutation.SetStoresID(id)
	return ou
}

// SetNillableStoresID sets the "stores" edge to the Store entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableStoresID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetStoresID(*id)
	}
	return ou
}

// SetStores sets the "stores" edge to the Store entity.
func (ou *OrderUpdate) SetStores(s *Store) *OrderUpdate {
	return ou.SetStoresID(s.ID)
}

// SetWarehousesID sets the "warehouses" edge to the Warehouse entity by ID.
func (ou *OrderUpdate) SetWarehousesID(id int64) *OrderUpdate {
	ou.mutation.SetWarehousesID(id)
	return ou
}

// SetNillableWarehousesID sets the "warehouses" edge to the Warehouse entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableWarehousesID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetWarehousesID(*id)
	}
	return ou
}

// SetWarehouses sets the "warehouses" edge to the Warehouse entity.
func (ou *OrderUpdate) SetWarehouses(w *Warehouse) *OrderUpdate {
	return ou.SetWarehousesID(w.ID)
}

// SetChannelsID sets the "channels" edge to the Channel entity by ID.
func (ou *OrderUpdate) SetChannelsID(id int64) *OrderUpdate {
	ou.mutation.SetChannelsID(id)
	return ou
}

// SetNillableChannelsID sets the "channels" edge to the Channel entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableChannelsID(id *int64) *OrderUpdate {
	if id != nil {
		ou = ou.SetChannelsID(*id)
	}
	return ou
}

// SetChannels sets the "channels" edge to the Channel entity.
func (ou *OrderUpdate) SetChannels(c *Channel) *OrderUpdate {
	return ou.SetChannelsID(c.ID)
}

// AddTrackMappingIDs adds the "track_mappings" edge to the TrackMapping entity by IDs.
func (ou *OrderUpdate) AddTrackMappingIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddTrackMappingIDs(ids...)
	return ou
}

// AddTrackMappings adds the "track_mappings" edges to the TrackMapping entity.
func (ou *OrderUpdate) AddTrackMappings(t ...*TrackMapping) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTrackMappingIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ou *OrderUpdate) ClearTenant() *OrderUpdate {
	ou.mutation.ClearTenant()
	return ou
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearOrderItems() *OrderUpdate {
	ou.mutation.ClearOrderItems()
	return ou
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveOrderItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveOrderItemIDs(ids...)
	return ou
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderItemIDs(ids...)
}

// ClearOrderHoldReasons clears all "order_hold_reasons" edges to the OrderHoldReason entity.
func (ou *OrderUpdate) ClearOrderHoldReasons() *OrderUpdate {
	ou.mutation.ClearOrderHoldReasons()
	return ou
}

// RemoveOrderHoldReasonIDs removes the "order_hold_reasons" edge to OrderHoldReason entities by IDs.
func (ou *OrderUpdate) RemoveOrderHoldReasonIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveOrderHoldReasonIDs(ids...)
	return ou
}

// RemoveOrderHoldReasons removes "order_hold_reasons" edges to OrderHoldReason entities.
func (ou *OrderUpdate) RemoveOrderHoldReasons(o ...*OrderHoldReason) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderHoldReasonIDs(ids...)
}

// ClearOrderTaxations clears all "order_taxations" edges to the OrderTaxation entity.
func (ou *OrderUpdate) ClearOrderTaxations() *OrderUpdate {
	ou.mutation.ClearOrderTaxations()
	return ou
}

// RemoveOrderTaxationIDs removes the "order_taxations" edge to OrderTaxation entities by IDs.
func (ou *OrderUpdate) RemoveOrderTaxationIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveOrderTaxationIDs(ids...)
	return ou
}

// RemoveOrderTaxations removes "order_taxations" edges to OrderTaxation entities.
func (ou *OrderUpdate) RemoveOrderTaxations(o ...*OrderTaxation) *OrderUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderTaxationIDs(ids...)
}

// ClearStores clears the "stores" edge to the Store entity.
func (ou *OrderUpdate) ClearStores() *OrderUpdate {
	ou.mutation.ClearStores()
	return ou
}

// ClearWarehouses clears the "warehouses" edge to the Warehouse entity.
func (ou *OrderUpdate) ClearWarehouses() *OrderUpdate {
	ou.mutation.ClearWarehouses()
	return ou
}

// ClearChannels clears the "channels" edge to the Channel entity.
func (ou *OrderUpdate) ClearChannels() *OrderUpdate {
	ou.mutation.ClearChannels()
	return ou
}

// ClearTrackMappings clears all "track_mappings" edges to the TrackMapping entity.
func (ou *OrderUpdate) ClearTrackMappings() *OrderUpdate {
	ou.mutation.ClearTrackMappings()
	return ou
}

// RemoveTrackMappingIDs removes the "track_mappings" edge to TrackMapping entities by IDs.
func (ou *OrderUpdate) RemoveTrackMappingIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveTrackMappingIDs(ids...)
	return ou
}

// RemoveTrackMappings removes "track_mappings" edges to TrackMapping entities.
func (ou *OrderUpdate) RemoveTrackMappings(t ...*TrackMapping) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTrackMappingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized order.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if _, ok := ou.mutation.TenantID(); ou.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Order.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(order.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(order.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.Mode(); ok {
		_spec.SetField(order.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedMode(); ok {
		_spec.AddField(order.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.Offline(); ok {
		_spec.SetField(order.FieldOffline, field.TypeBool, value)
	}
	if value, ok := ou.mutation.CustomerCode(); ok {
		_spec.SetField(order.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.PrepayTariff(); ok {
		_spec.SetField(order.FieldPrepayTariff, field.TypeBool, value)
	}
	if value, ok := ou.mutation.IossNumber(); ok {
		_spec.SetField(order.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.IossCountryCode(); ok {
		_spec.SetField(order.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.IossNumberType(); ok {
		_spec.SetField(order.FieldIossNumberType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedIossNumberType(); ok {
		_spec.AddField(order.FieldIossNumberType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.UkVatNumber(); ok {
		_spec.SetField(order.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.InboundOrderNumber(); ok {
		_spec.SetField(order.FieldInboundOrderNumber, field.TypeString, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.SqsStatus(); ok {
		_spec.SetField(order.FieldSqsStatus, field.TypeBool, value)
	}
	if ou.mutation.SqsStatusCleared() {
		_spec.ClearField(order.FieldSqsStatus, field.TypeBool)
	}
	if value, ok := ou.mutation.HoldStatus(); ok {
		_spec.SetField(order.FieldHoldStatus, field.TypeBool, value)
	}
	if ou.mutation.HoldStatusCleared() {
		_spec.ClearField(order.FieldHoldStatus, field.TypeBool)
	}
	if value, ok := ou.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedPaymentStatus(); ok {
		_spec.AddField(order.FieldPaymentStatus, field.TypeInt8, value)
	}
	if ou.mutation.PaymentStatusCleared() {
		_spec.ClearField(order.FieldPaymentStatus, field.TypeInt8)
	}
	if value, ok := ou.mutation.CancelRequest(); ok {
		_spec.SetField(order.FieldCancelRequest, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedCancelRequest(); ok {
		_spec.AddField(order.FieldCancelRequest, field.TypeInt8, value)
	}
	if ou.mutation.CancelRequestCleared() {
		_spec.ClearField(order.FieldCancelRequest, field.TypeInt8)
	}
	if value, ok := ou.mutation.Platform(); ok {
		_spec.SetField(order.FieldPlatform, field.TypeString, value)
	}
	if value, ok := ou.mutation.PlatformOrderID(); ok {
		_spec.SetField(order.FieldPlatformOrderID, field.TypeString, value)
	}
	if ou.mutation.PlatformOrderIDCleared() {
		_spec.ClearField(order.FieldPlatformOrderID, field.TypeString)
	}
	if value, ok := ou.mutation.PlatformOrderNo(); ok {
		_spec.SetField(order.FieldPlatformOrderNo, field.TypeString, value)
	}
	if ou.mutation.PlatformOrderNoCleared() {
		_spec.ClearField(order.FieldPlatformOrderNo, field.TypeString)
	}
	if value, ok := ou.mutation.PlatformOrderStatusURL(); ok {
		_spec.SetField(order.FieldPlatformOrderStatusURL, field.TypeString, value)
	}
	if ou.mutation.PlatformOrderStatusURLCleared() {
		_spec.ClearField(order.FieldPlatformOrderStatusURL, field.TypeString)
	}
	if value, ok := ou.mutation.PlatformStatus(); ok {
		_spec.SetField(order.FieldPlatformStatus, field.TypeString, value)
	}
	if ou.mutation.PlatformStatusCleared() {
		_spec.ClearField(order.FieldPlatformStatus, field.TypeString)
	}
	if value, ok := ou.mutation.PaidStatus(); ok {
		_spec.SetField(order.FieldPaidStatus, field.TypeString, value)
	}
	if ou.mutation.PaidStatusCleared() {
		_spec.ClearField(order.FieldPaidStatus, field.TypeString)
	}
	if value, ok := ou.mutation.FulfillmentPushed(); ok {
		_spec.SetField(order.FieldFulfillmentPushed, field.TypeBool, value)
	}
	if ou.mutation.FulfillmentPushedCleared() {
		_spec.ClearField(order.FieldFulfillmentPushed, field.TypeBool)
	}
	if value, ok := ou.mutation.FulfillmentStatus(); ok {
		_spec.SetField(order.FieldFulfillmentStatus, field.TypeString, value)
	}
	if ou.mutation.FulfillmentStatusCleared() {
		_spec.ClearField(order.FieldFulfillmentStatus, field.TypeString)
	}
	if value, ok := ou.mutation.PlatformCreatedAt(); ok {
		_spec.SetField(order.FieldPlatformCreatedAt, field.TypeTime, value)
	}
	if ou.mutation.PlatformCreatedAtCleared() {
		_spec.ClearField(order.FieldPlatformCreatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.LocationID(); ok {
		_spec.SetField(order.FieldLocationID, field.TypeString, value)
	}
	if ou.mutation.LocationIDCleared() {
		_spec.ClearField(order.FieldLocationID, field.TypeString)
	}
	if value, ok := ou.mutation.Tags(); ok {
		_spec.SetField(order.FieldTags, field.TypeString, value)
	}
	if ou.mutation.TagsCleared() {
		_spec.ClearField(order.FieldTags, field.TypeString)
	}
	if value, ok := ou.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if ou.mutation.NoteCleared() {
		_spec.ClearField(order.FieldNote, field.TypeString)
	}
	if value, ok := ou.mutation.CancelReason(); ok {
		_spec.SetField(order.FieldCancelReason, field.TypeString, value)
	}
	if ou.mutation.CancelReasonCleared() {
		_spec.ClearField(order.FieldCancelReason, field.TypeString)
	}
	if value, ok := ou.mutation.CancelledAt(); ok {
		_spec.SetField(order.FieldCancelledAt, field.TypeTime, value)
	}
	if ou.mutation.CancelledAtCleared() {
		_spec.ClearField(order.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := ou.mutation.ClosedAt(); ok {
		_spec.SetField(order.FieldClosedAt, field.TypeTime, value)
	}
	if ou.mutation.ClosedAtCleared() {
		_spec.ClearField(order.FieldClosedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.ContactEmail(); ok {
		_spec.SetField(order.FieldContactEmail, field.TypeString, value)
	}
	if value, ok := ou.mutation.ContactPhone(); ok {
		_spec.SetField(order.FieldContactPhone, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingName(); ok {
		_spec.SetField(order.FieldShippingName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingFirstName(); ok {
		_spec.SetField(order.FieldShippingFirstName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingLastName(); ok {
		_spec.SetField(order.FieldShippingLastName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingCompany(); ok {
		_spec.SetField(order.FieldShippingCompany, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingCountry(); ok {
		_spec.SetField(order.FieldShippingCountry, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingCountryCode(); ok {
		_spec.SetField(order.FieldShippingCountryCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingProvince(); ok {
		_spec.SetField(order.FieldShippingProvince, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingProvinceCode(); ok {
		_spec.SetField(order.FieldShippingProvinceCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingCity(); ok {
		_spec.SetField(order.FieldShippingCity, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingAddress1(); ok {
		_spec.SetField(order.FieldShippingAddress1, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingAddress2(); ok {
		_spec.SetField(order.FieldShippingAddress2, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingZipCode(); ok {
		_spec.SetField(order.FieldShippingZipCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingPhone(); ok {
		_spec.SetField(order.FieldShippingPhone, field.TypeString, value)
	}
	if value, ok := ou.mutation.ShippingCertificateType(); ok {
		_spec.SetField(order.FieldShippingCertificateType, field.TypeString, value)
	}
	if ou.mutation.ShippingCertificateTypeCleared() {
		_spec.ClearField(order.FieldShippingCertificateType, field.TypeString)
	}
	if value, ok := ou.mutation.ShippingCertificateCode(); ok {
		_spec.SetField(order.FieldShippingCertificateCode, field.TypeString, value)
	}
	if ou.mutation.ShippingCertificateCodeCleared() {
		_spec.ClearField(order.FieldShippingCertificateCode, field.TypeString)
	}
	if value, ok := ou.mutation.ShippingCredentialsPeriod(); ok {
		_spec.SetField(order.FieldShippingCredentialsPeriod, field.TypeString, value)
	}
	if ou.mutation.ShippingCredentialsPeriodCleared() {
		_spec.ClearField(order.FieldShippingCredentialsPeriod, field.TypeString)
	}
	if value, ok := ou.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if ou.mutation.RemarkCleared() {
		_spec.ClearField(order.FieldRemark, field.TypeString)
	}
	if value, ok := ou.mutation.PreferShippedType(); ok {
		_spec.SetField(order.FieldPreferShippedType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedPreferShippedType(); ok {
		_spec.AddField(order.FieldPreferShippedType, field.TypeInt8, value)
	}
	if ou.mutation.PreferShippedTypeCleared() {
		_spec.ClearField(order.FieldPreferShippedType, field.TypeInt8)
	}
	if value, ok := ou.mutation.PreferChannelID(); ok {
		_spec.SetField(order.FieldPreferChannelID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedPreferChannelID(); ok {
		_spec.AddField(order.FieldPreferChannelID, field.TypeInt64, value)
	}
	if ou.mutation.PreferChannelIDCleared() {
		_spec.ClearField(order.FieldPreferChannelID, field.TypeInt64)
	}
	if value, ok := ou.mutation.ChannelOptions(); ok {
		_spec.SetField(order.FieldChannelOptions, field.TypeString, value)
	}
	if ou.mutation.ChannelOptionsCleared() {
		_spec.ClearField(order.FieldChannelOptions, field.TypeString)
	}
	if value, ok := ou.mutation.ChannelCostID(); ok {
		_spec.SetField(order.FieldChannelCostID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedChannelCostID(); ok {
		_spec.AddField(order.FieldChannelCostID, field.TypeInt64, value)
	}
	if ou.mutation.ChannelCostIDCleared() {
		_spec.ClearField(order.FieldChannelCostID, field.TypeInt64)
	}
	if value, ok := ou.mutation.ShipType(); ok {
		_spec.SetField(order.FieldShipType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedShipType(); ok {
		_spec.AddField(order.FieldShipType, field.TypeInt8, value)
	}
	if ou.mutation.ShipTypeCleared() {
		_spec.ClearField(order.FieldShipType, field.TypeInt8)
	}
	if value, ok := ou.mutation.TrackingCompany(); ok {
		_spec.SetField(order.FieldTrackingCompany, field.TypeString, value)
	}
	if ou.mutation.TrackingCompanyCleared() {
		_spec.ClearField(order.FieldTrackingCompany, field.TypeString)
	}
	if value, ok := ou.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if ou.mutation.TrackingNumberCleared() {
		_spec.ClearField(order.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := ou.mutation.TrackingURL(); ok {
		_spec.SetField(order.FieldTrackingURL, field.TypeString, value)
	}
	if ou.mutation.TrackingURLCleared() {
		_spec.ClearField(order.FieldTrackingURL, field.TypeString)
	}
	if value, ok := ou.mutation.WaybillNumber(); ok {
		_spec.SetField(order.FieldWaybillNumber, field.TypeString, value)
	}
	if ou.mutation.WaybillNumberCleared() {
		_spec.ClearField(order.FieldWaybillNumber, field.TypeString)
	}
	if value, ok := ou.mutation.CourierOrderNumber(); ok {
		_spec.SetField(order.FieldCourierOrderNumber, field.TypeString, value)
	}
	if ou.mutation.CourierOrderNumberCleared() {
		_spec.ClearField(order.FieldCourierOrderNumber, field.TypeString)
	}
	if value, ok := ou.mutation.NssCourierOrderNumber(); ok {
		_spec.SetField(order.FieldNssCourierOrderNumber, field.TypeString, value)
	}
	if ou.mutation.NssCourierOrderNumberCleared() {
		_spec.ClearField(order.FieldNssCourierOrderNumber, field.TypeString)
	}
	if value, ok := ou.mutation.NssTrackingNumber(); ok {
		_spec.SetField(order.FieldNssTrackingNumber, field.TypeString, value)
	}
	if ou.mutation.NssTrackingNumberCleared() {
		_spec.ClearField(order.FieldNssTrackingNumber, field.TypeString)
	}
	if value, ok := ou.mutation.NssTrackingURL(); ok {
		_spec.SetField(order.FieldNssTrackingURL, field.TypeString, value)
	}
	if ou.mutation.NssTrackingURLCleared() {
		_spec.ClearField(order.FieldNssTrackingURL, field.TypeString)
	}
	if value, ok := ou.mutation.ShippingLabelURL(); ok {
		_spec.SetField(order.FieldShippingLabelURL, field.TypeString, value)
	}
	if ou.mutation.ShippingLabelURLCleared() {
		_spec.ClearField(order.FieldShippingLabelURL, field.TypeString)
	}
	if value, ok := ou.mutation.ShippingLabelPath(); ok {
		_spec.SetField(order.FieldShippingLabelPath, field.TypeString, value)
	}
	if ou.mutation.ShippingLabelPathCleared() {
		_spec.ClearField(order.FieldShippingLabelPath, field.TypeString)
	}
	if value, ok := ou.mutation.LabelDataPath(); ok {
		_spec.SetField(order.FieldLabelDataPath, field.TypeString, value)
	}
	if ou.mutation.LabelDataPathCleared() {
		_spec.ClearField(order.FieldLabelDataPath, field.TypeString)
	}
	if value, ok := ou.mutation.PackageID(); ok {
		_spec.SetField(order.FieldPackageID, field.TypeString, value)
	}
	if ou.mutation.PackageIDCleared() {
		_spec.ClearField(order.FieldPackageID, field.TypeString)
	}
	if value, ok := ou.mutation.ShipDate(); ok {
		_spec.SetField(order.FieldShipDate, field.TypeTime, value)
	}
	if ou.mutation.ShipDateCleared() {
		_spec.ClearField(order.FieldShipDate, field.TypeTime)
	}
	if value, ok := ou.mutation.RequestShippingAt(); ok {
		_spec.SetField(order.FieldRequestShippingAt, field.TypeTime, value)
	}
	if ou.mutation.RequestShippingAtCleared() {
		_spec.ClearField(order.FieldRequestShippingAt, field.TypeTime)
	}
	if value, ok := ou.mutation.UnshelfRequestedTime(); ok {
		_spec.SetField(order.FieldUnshelfRequestedTime, field.TypeTime, value)
	}
	if ou.mutation.UnshelfRequestedTimeCleared() {
		_spec.ClearField(order.FieldUnshelfRequestedTime, field.TypeTime)
	}
	if value, ok := ou.mutation.ContainerCode(); ok {
		_spec.SetField(order.FieldContainerCode, field.TypeString, value)
	}
	if ou.mutation.ContainerCodeCleared() {
		_spec.ClearField(order.FieldContainerCode, field.TypeString)
	}
	if value, ok := ou.mutation.BasketNumber(); ok {
		_spec.SetField(order.FieldBasketNumber, field.TypeString, value)
	}
	if ou.mutation.BasketNumberCleared() {
		_spec.ClearField(order.FieldBasketNumber, field.TypeString)
	}
	if value, ok := ou.mutation.PrintTimes(); ok {
		_spec.SetField(order.FieldPrintTimes, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPrintTimes(); ok {
		_spec.AddField(order.FieldPrintTimes, field.TypeInt, value)
	}
	if ou.mutation.PrintTimesCleared() {
		_spec.ClearField(order.FieldPrintTimes, field.TypeInt)
	}
	if value, ok := ou.mutation.SortingTrackingNumber(); ok {
		_spec.SetField(order.FieldSortingTrackingNumber, field.TypeString, value)
	}
	if ou.mutation.SortingTrackingNumberCleared() {
		_spec.ClearField(order.FieldSortingTrackingNumber, field.TypeString)
	}
	if value, ok := ou.mutation.SortingPort(); ok {
		_spec.SetField(order.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedSortingPort(); ok {
		_spec.AddField(order.FieldSortingPort, field.TypeInt32, value)
	}
	if ou.mutation.SortingPortCleared() {
		_spec.ClearField(order.FieldSortingPort, field.TypeInt32)
	}
	if value, ok := ou.mutation.SortingLength(); ok {
		_spec.SetField(order.FieldSortingLength, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSortingLength(); ok {
		_spec.AddField(order.FieldSortingLength, field.TypeInt, value)
	}
	if ou.mutation.SortingLengthCleared() {
		_spec.ClearField(order.FieldSortingLength, field.TypeInt)
	}
	if value, ok := ou.mutation.SortingWidth(); ok {
		_spec.SetField(order.FieldSortingWidth, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSortingWidth(); ok {
		_spec.AddField(order.FieldSortingWidth, field.TypeInt, value)
	}
	if ou.mutation.SortingWidthCleared() {
		_spec.ClearField(order.FieldSortingWidth, field.TypeInt)
	}
	if value, ok := ou.mutation.SortingHeight(); ok {
		_spec.SetField(order.FieldSortingHeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSortingHeight(); ok {
		_spec.AddField(order.FieldSortingHeight, field.TypeInt, value)
	}
	if ou.mutation.SortingHeightCleared() {
		_spec.ClearField(order.FieldSortingHeight, field.TypeInt)
	}
	if value, ok := ou.mutation.SortingWeight(); ok {
		_spec.SetField(order.FieldSortingWeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedSortingWeight(); ok {
		_spec.AddField(order.FieldSortingWeight, field.TypeInt, value)
	}
	if ou.mutation.SortingWeightCleared() {
		_spec.ClearField(order.FieldSortingWeight, field.TypeInt)
	}
	if value, ok := ou.mutation.EstimatedWeight(); ok {
		_spec.SetField(order.FieldEstimatedWeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedEstimatedWeight(); ok {
		_spec.AddField(order.FieldEstimatedWeight, field.TypeInt, value)
	}
	if ou.mutation.EstimatedWeightCleared() {
		_spec.ClearField(order.FieldEstimatedWeight, field.TypeInt)
	}
	if value, ok := ou.mutation.CheckoutActualWeight(); ok {
		_spec.SetField(order.FieldCheckoutActualWeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCheckoutActualWeight(); ok {
		_spec.AddField(order.FieldCheckoutActualWeight, field.TypeInt, value)
	}
	if ou.mutation.CheckoutActualWeightCleared() {
		_spec.ClearField(order.FieldCheckoutActualWeight, field.TypeInt)
	}
	if value, ok := ou.mutation.VolumeWeight(); ok {
		_spec.SetField(order.FieldVolumeWeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedVolumeWeight(); ok {
		_spec.AddField(order.FieldVolumeWeight, field.TypeInt, value)
	}
	if ou.mutation.VolumeWeightCleared() {
		_spec.ClearField(order.FieldVolumeWeight, field.TypeInt)
	}
	if value, ok := ou.mutation.CourierWeight(); ok {
		_spec.SetField(order.FieldCourierWeight, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCourierWeight(); ok {
		_spec.AddField(order.FieldCourierWeight, field.TypeInt, value)
	}
	if ou.mutation.CourierWeightCleared() {
		_spec.ClearField(order.FieldCourierWeight, field.TypeInt)
	}
	if value, ok := ou.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(order.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(order.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if ou.mutation.DeclaredValueInUsdCleared() {
		_spec.ClearField(order.FieldDeclaredValueInUsd, field.TypeFloat64)
	}
	if value, ok := ou.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(order.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(order.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if ou.mutation.DeclaredValueInEurCleared() {
		_spec.ClearField(order.FieldDeclaredValueInEur, field.TypeFloat64)
	}
	if value, ok := ou.mutation.TotalItemsPrice(); ok {
		_spec.SetField(order.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalItemsPrice(); ok {
		_spec.AddField(order.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if ou.mutation.TotalItemsPriceCleared() {
		_spec.ClearField(order.FieldTotalItemsPrice, field.TypeFloat64)
	}
	if value, ok := ou.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if ou.mutation.CurrencyCleared() {
		_spec.ClearField(order.FieldCurrency, field.TypeString)
	}
	if value, ok := ou.mutation.DeliveryCost(); ok {
		_spec.SetField(order.FieldDeliveryCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDeliveryCost(); ok {
		_spec.AddField(order.FieldDeliveryCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.MiscFee(); ok {
		_spec.SetField(order.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedMiscFee(); ok {
		_spec.AddField(order.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.FuelFee(); ok {
		_spec.SetField(order.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedFuelFee(); ok {
		_spec.AddField(order.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.RegistrationFee(); ok {
		_spec.SetField(order.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedRegistrationFee(); ok {
		_spec.AddField(order.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.ProcessingFee(); ok {
		_spec.SetField(order.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedProcessingFee(); ok {
		_spec.AddField(order.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.PackageFee(); ok {
		_spec.SetField(order.FieldPackageFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedPackageFee(); ok {
		_spec.AddField(order.FieldPackageFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.HandlingFee(); ok {
		_spec.SetField(order.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedHandlingFee(); ok {
		_spec.AddField(order.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Vat(); ok {
		_spec.SetField(order.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedVat(); ok {
		_spec.AddField(order.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.EstimatedCost(); ok {
		_spec.SetField(order.FieldEstimatedCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedEstimatedCost(); ok {
		_spec.AddField(order.FieldEstimatedCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.EstimatedCurrency(); ok {
		_spec.SetField(order.FieldEstimatedCurrency, field.TypeString, value)
	}
	if value, ok := ou.mutation.ReceivablesAmount(); ok {
		_spec.SetField(order.FieldReceivablesAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedReceivablesAmount(); ok {
		_spec.AddField(order.FieldReceivablesAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.ReceivablesCurrency(); ok {
		_spec.SetField(order.FieldReceivablesCurrency, field.TypeString, value)
	}
	if value, ok := ou.mutation.NotAcceptPlatformUpdate(); ok {
		_spec.SetField(order.FieldNotAcceptPlatformUpdate, field.TypeBool, value)
	}
	if value, ok := ou.mutation.NotAcceptPlatformUpdateItem(); ok {
		_spec.SetField(order.FieldNotAcceptPlatformUpdateItem, field.TypeBool, value)
	}
	if value, ok := ou.mutation.JdPushedStatus(); ok {
		_spec.SetField(order.FieldJdPushedStatus, field.TypeString, value)
	}
	if ou.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderHoldReasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderHoldReason
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderHoldReasonsIDs(); len(nodes) > 0 && !ou.mutation.OrderHoldReasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderHoldReasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderTaxationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderTaxation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderTaxationsIDs(); len(nodes) > 0 && !ou.mutation.OrderTaxationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderTaxationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: []string{order.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: []string{order.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.WarehousesTable,
			Columns: []string{order.WarehousesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: warehouse.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WarehousesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.WarehousesTable,
			Columns: []string{order.WarehousesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: warehouse.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ChannelsTable,
			Columns: []string{order.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ChannelsTable,
			Columns: []string{order.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TrackMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.TrackMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTrackMappingsIDs(); len(nodes) > 0 && !ou.mutation.TrackMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.TrackMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TrackMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ou.schemaConfig.TrackMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ou.schemaConfig.Order
	ctx = internal.NewSchemaConfigContext(ctx, ou.schemaConfig)
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrderUpdateOne) SetDeletedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrderUpdateOne) ClearDeletedAt() *OrderUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetOrderNumber sets the "order_number" field.
func (ouo *OrderUpdateOne) SetOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNumber(s)
	return ouo
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderNumber(*s)
	}
	return ouo
}

// SetMode sets the "mode" field.
func (ouo *OrderUpdateOne) SetMode(i int8) *OrderUpdateOne {
	ouo.mutation.ResetMode()
	ouo.mutation.SetMode(i)
	return ouo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMode(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetMode(*i)
	}
	return ouo
}

// AddMode adds i to the "mode" field.
func (ouo *OrderUpdateOne) AddMode(i int8) *OrderUpdateOne {
	ouo.mutation.AddMode(i)
	return ouo
}

// SetType sets the "type" field.
func (ouo *OrderUpdateOne) SetType(i int8) *OrderUpdateOne {
	ouo.mutation.ResetType()
	ouo.mutation.SetType(i)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableType(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetType(*i)
	}
	return ouo
}

// AddType adds i to the "type" field.
func (ouo *OrderUpdateOne) AddType(i int8) *OrderUpdateOne {
	ouo.mutation.AddType(i)
	return ouo
}

// SetOffline sets the "offline" field.
func (ouo *OrderUpdateOne) SetOffline(b bool) *OrderUpdateOne {
	ouo.mutation.SetOffline(b)
	return ouo
}

// SetNillableOffline sets the "offline" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOffline(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetOffline(*b)
	}
	return ouo
}

// SetStoreID sets the "store_id" field.
func (ouo *OrderUpdateOne) SetStoreID(i int64) *OrderUpdateOne {
	ouo.mutation.SetStoreID(i)
	return ouo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStoreID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetStoreID(*i)
	}
	return ouo
}

// ClearStoreID clears the value of the "store_id" field.
func (ouo *OrderUpdateOne) ClearStoreID() *OrderUpdateOne {
	ouo.mutation.ClearStoreID()
	return ouo
}

// SetWarehouseID sets the "warehouse_id" field.
func (ouo *OrderUpdateOne) SetWarehouseID(i int64) *OrderUpdateOne {
	ouo.mutation.SetWarehouseID(i)
	return ouo
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWarehouseID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetWarehouseID(*i)
	}
	return ouo
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (ouo *OrderUpdateOne) ClearWarehouseID() *OrderUpdateOne {
	ouo.mutation.ClearWarehouseID()
	return ouo
}

// SetCustomerCode sets the "customer_code" field.
func (ouo *OrderUpdateOne) SetCustomerCode(s string) *OrderUpdateOne {
	ouo.mutation.SetCustomerCode(s)
	return ouo
}

// SetNillableCustomerCode sets the "customer_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCustomerCode(*s)
	}
	return ouo
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (ouo *OrderUpdateOne) SetPrepayTariff(b bool) *OrderUpdateOne {
	ouo.mutation.SetPrepayTariff(b)
	return ouo
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrepayTariff(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetPrepayTariff(*b)
	}
	return ouo
}

// SetIossNumber sets the "ioss_number" field.
func (ouo *OrderUpdateOne) SetIossNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetIossNumber(s)
	return ouo
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIossNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetIossNumber(*s)
	}
	return ouo
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (ouo *OrderUpdateOne) SetIossCountryCode(s string) *OrderUpdateOne {
	ouo.mutation.SetIossCountryCode(s)
	return ouo
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIossCountryCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetIossCountryCode(*s)
	}
	return ouo
}

// SetIossNumberType sets the "ioss_number_type" field.
func (ouo *OrderUpdateOne) SetIossNumberType(i int8) *OrderUpdateOne {
	ouo.mutation.ResetIossNumberType()
	ouo.mutation.SetIossNumberType(i)
	return ouo
}

// SetNillableIossNumberType sets the "ioss_number_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIossNumberType(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetIossNumberType(*i)
	}
	return ouo
}

// AddIossNumberType adds i to the "ioss_number_type" field.
func (ouo *OrderUpdateOne) AddIossNumberType(i int8) *OrderUpdateOne {
	ouo.mutation.AddIossNumberType(i)
	return ouo
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (ouo *OrderUpdateOne) SetUkVatNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetUkVatNumber(s)
	return ouo
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUkVatNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetUkVatNumber(*s)
	}
	return ouo
}

// SetInboundOrderNumber sets the "inbound_order_number" field.
func (ouo *OrderUpdateOne) SetInboundOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetInboundOrderNumber(s)
	return ouo
}

// SetNillableInboundOrderNumber sets the "inbound_order_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableInboundOrderNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetInboundOrderNumber(*s)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(i int8) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(i)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetStatus(*i)
	}
	return ouo
}

// AddStatus adds i to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(i int8) *OrderUpdateOne {
	ouo.mutation.AddStatus(i)
	return ouo
}

// SetSqsStatus sets the "sqs_status" field.
func (ouo *OrderUpdateOne) SetSqsStatus(b bool) *OrderUpdateOne {
	ouo.mutation.SetSqsStatus(b)
	return ouo
}

// SetNillableSqsStatus sets the "sqs_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSqsStatus(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetSqsStatus(*b)
	}
	return ouo
}

// ClearSqsStatus clears the value of the "sqs_status" field.
func (ouo *OrderUpdateOne) ClearSqsStatus() *OrderUpdateOne {
	ouo.mutation.ClearSqsStatus()
	return ouo
}

// SetHoldStatus sets the "hold_status" field.
func (ouo *OrderUpdateOne) SetHoldStatus(b bool) *OrderUpdateOne {
	ouo.mutation.SetHoldStatus(b)
	return ouo
}

// SetNillableHoldStatus sets the "hold_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableHoldStatus(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetHoldStatus(*b)
	}
	return ouo
}

// ClearHoldStatus clears the value of the "hold_status" field.
func (ouo *OrderUpdateOne) ClearHoldStatus() *OrderUpdateOne {
	ouo.mutation.ClearHoldStatus()
	return ouo
}

// SetPaymentStatus sets the "payment_status" field.
func (ouo *OrderUpdateOne) SetPaymentStatus(i int8) *OrderUpdateOne {
	ouo.mutation.ResetPaymentStatus()
	ouo.mutation.SetPaymentStatus(i)
	return ouo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentStatus(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetPaymentStatus(*i)
	}
	return ouo
}

// AddPaymentStatus adds i to the "payment_status" field.
func (ouo *OrderUpdateOne) AddPaymentStatus(i int8) *OrderUpdateOne {
	ouo.mutation.AddPaymentStatus(i)
	return ouo
}

// ClearPaymentStatus clears the value of the "payment_status" field.
func (ouo *OrderUpdateOne) ClearPaymentStatus() *OrderUpdateOne {
	ouo.mutation.ClearPaymentStatus()
	return ouo
}

// SetCancelRequest sets the "cancel_request" field.
func (ouo *OrderUpdateOne) SetCancelRequest(i int8) *OrderUpdateOne {
	ouo.mutation.ResetCancelRequest()
	ouo.mutation.SetCancelRequest(i)
	return ouo
}

// SetNillableCancelRequest sets the "cancel_request" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCancelRequest(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetCancelRequest(*i)
	}
	return ouo
}

// AddCancelRequest adds i to the "cancel_request" field.
func (ouo *OrderUpdateOne) AddCancelRequest(i int8) *OrderUpdateOne {
	ouo.mutation.AddCancelRequest(i)
	return ouo
}

// ClearCancelRequest clears the value of the "cancel_request" field.
func (ouo *OrderUpdateOne) ClearCancelRequest() *OrderUpdateOne {
	ouo.mutation.ClearCancelRequest()
	return ouo
}

// SetPlatform sets the "platform" field.
func (ouo *OrderUpdateOne) SetPlatform(s string) *OrderUpdateOne {
	ouo.mutation.SetPlatform(s)
	return ouo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatform(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPlatform(*s)
	}
	return ouo
}

// SetPlatformOrderID sets the "platform_order_id" field.
func (ouo *OrderUpdateOne) SetPlatformOrderID(s string) *OrderUpdateOne {
	ouo.mutation.SetPlatformOrderID(s)
	return ouo
}

// SetNillablePlatformOrderID sets the "platform_order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatformOrderID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPlatformOrderID(*s)
	}
	return ouo
}

// ClearPlatformOrderID clears the value of the "platform_order_id" field.
func (ouo *OrderUpdateOne) ClearPlatformOrderID() *OrderUpdateOne {
	ouo.mutation.ClearPlatformOrderID()
	return ouo
}

// SetPlatformOrderNo sets the "platform_order_no" field.
func (ouo *OrderUpdateOne) SetPlatformOrderNo(s string) *OrderUpdateOne {
	ouo.mutation.SetPlatformOrderNo(s)
	return ouo
}

// SetNillablePlatformOrderNo sets the "platform_order_no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatformOrderNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPlatformOrderNo(*s)
	}
	return ouo
}

// ClearPlatformOrderNo clears the value of the "platform_order_no" field.
func (ouo *OrderUpdateOne) ClearPlatformOrderNo() *OrderUpdateOne {
	ouo.mutation.ClearPlatformOrderNo()
	return ouo
}

// SetPlatformOrderStatusURL sets the "platform_order_status_url" field.
func (ouo *OrderUpdateOne) SetPlatformOrderStatusURL(s string) *OrderUpdateOne {
	ouo.mutation.SetPlatformOrderStatusURL(s)
	return ouo
}

// SetNillablePlatformOrderStatusURL sets the "platform_order_status_url" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatformOrderStatusURL(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPlatformOrderStatusURL(*s)
	}
	return ouo
}

// ClearPlatformOrderStatusURL clears the value of the "platform_order_status_url" field.
func (ouo *OrderUpdateOne) ClearPlatformOrderStatusURL() *OrderUpdateOne {
	ouo.mutation.ClearPlatformOrderStatusURL()
	return ouo
}

// SetPlatformStatus sets the "platform_status" field.
func (ouo *OrderUpdateOne) SetPlatformStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetPlatformStatus(s)
	return ouo
}

// SetNillablePlatformStatus sets the "platform_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatformStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPlatformStatus(*s)
	}
	return ouo
}

// ClearPlatformStatus clears the value of the "platform_status" field.
func (ouo *OrderUpdateOne) ClearPlatformStatus() *OrderUpdateOne {
	ouo.mutation.ClearPlatformStatus()
	return ouo
}

// SetPaidStatus sets the "paid_status" field.
func (ouo *OrderUpdateOne) SetPaidStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetPaidStatus(s)
	return ouo
}

// SetNillablePaidStatus sets the "paid_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaidStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaidStatus(*s)
	}
	return ouo
}

// ClearPaidStatus clears the value of the "paid_status" field.
func (ouo *OrderUpdateOne) ClearPaidStatus() *OrderUpdateOne {
	ouo.mutation.ClearPaidStatus()
	return ouo
}

// SetFulfillmentPushed sets the "fulfillment_pushed" field.
func (ouo *OrderUpdateOne) SetFulfillmentPushed(b bool) *OrderUpdateOne {
	ouo.mutation.SetFulfillmentPushed(b)
	return ouo
}

// SetNillableFulfillmentPushed sets the "fulfillment_pushed" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableFulfillmentPushed(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetFulfillmentPushed(*b)
	}
	return ouo
}

// ClearFulfillmentPushed clears the value of the "fulfillment_pushed" field.
func (ouo *OrderUpdateOne) ClearFulfillmentPushed() *OrderUpdateOne {
	ouo.mutation.ClearFulfillmentPushed()
	return ouo
}

// SetFulfillmentStatus sets the "fulfillment_status" field.
func (ouo *OrderUpdateOne) SetFulfillmentStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetFulfillmentStatus(s)
	return ouo
}

// SetNillableFulfillmentStatus sets the "fulfillment_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableFulfillmentStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetFulfillmentStatus(*s)
	}
	return ouo
}

// ClearFulfillmentStatus clears the value of the "fulfillment_status" field.
func (ouo *OrderUpdateOne) ClearFulfillmentStatus() *OrderUpdateOne {
	ouo.mutation.ClearFulfillmentStatus()
	return ouo
}

// SetPlatformCreatedAt sets the "platform_created_at" field.
func (ouo *OrderUpdateOne) SetPlatformCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPlatformCreatedAt(t)
	return ouo
}

// SetNillablePlatformCreatedAt sets the "platform_created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlatformCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPlatformCreatedAt(*t)
	}
	return ouo
}

// ClearPlatformCreatedAt clears the value of the "platform_created_at" field.
func (ouo *OrderUpdateOne) ClearPlatformCreatedAt() *OrderUpdateOne {
	ouo.mutation.ClearPlatformCreatedAt()
	return ouo
}

// SetLocationID sets the "location_id" field.
func (ouo *OrderUpdateOne) SetLocationID(s string) *OrderUpdateOne {
	ouo.mutation.SetLocationID(s)
	return ouo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLocationID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetLocationID(*s)
	}
	return ouo
}

// ClearLocationID clears the value of the "location_id" field.
func (ouo *OrderUpdateOne) ClearLocationID() *OrderUpdateOne {
	ouo.mutation.ClearLocationID()
	return ouo
}

// SetTags sets the "tags" field.
func (ouo *OrderUpdateOne) SetTags(s string) *OrderUpdateOne {
	ouo.mutation.SetTags(s)
	return ouo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTags(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTags(*s)
	}
	return ouo
}

// ClearTags clears the value of the "tags" field.
func (ouo *OrderUpdateOne) ClearTags() *OrderUpdateOne {
	ouo.mutation.ClearTags()
	return ouo
}

// SetNote sets the "note" field.
func (ouo *OrderUpdateOne) SetNote(s string) *OrderUpdateOne {
	ouo.mutation.SetNote(s)
	return ouo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNote(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNote(*s)
	}
	return ouo
}

// ClearNote clears the value of the "note" field.
func (ouo *OrderUpdateOne) ClearNote() *OrderUpdateOne {
	ouo.mutation.ClearNote()
	return ouo
}

// SetCancelReason sets the "cancel_reason" field.
func (ouo *OrderUpdateOne) SetCancelReason(s string) *OrderUpdateOne {
	ouo.mutation.SetCancelReason(s)
	return ouo
}

// SetNillableCancelReason sets the "cancel_reason" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCancelReason(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCancelReason(*s)
	}
	return ouo
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (ouo *OrderUpdateOne) ClearCancelReason() *OrderUpdateOne {
	ouo.mutation.ClearCancelReason()
	return ouo
}

// SetCancelledAt sets the "cancelled_at" field.
func (ouo *OrderUpdateOne) SetCancelledAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCancelledAt(t)
	return ouo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCancelledAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCancelledAt(*t)
	}
	return ouo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (ouo *OrderUpdateOne) ClearCancelledAt() *OrderUpdateOne {
	ouo.mutation.ClearCancelledAt()
	return ouo
}

// SetClosedAt sets the "closed_at" field.
func (ouo *OrderUpdateOne) SetClosedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetClosedAt(t)
	return ouo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableClosedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetClosedAt(*t)
	}
	return ouo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (ouo *OrderUpdateOne) ClearClosedAt() *OrderUpdateOne {
	ouo.mutation.ClearClosedAt()
	return ouo
}

// SetContactEmail sets the "contact_email" field.
func (ouo *OrderUpdateOne) SetContactEmail(s string) *OrderUpdateOne {
	ouo.mutation.SetContactEmail(s)
	return ouo
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableContactEmail(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetContactEmail(*s)
	}
	return ouo
}

// SetContactPhone sets the "contact_phone" field.
func (ouo *OrderUpdateOne) SetContactPhone(s string) *OrderUpdateOne {
	ouo.mutation.SetContactPhone(s)
	return ouo
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableContactPhone(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetContactPhone(*s)
	}
	return ouo
}

// SetShippingName sets the "shipping_name" field.
func (ouo *OrderUpdateOne) SetShippingName(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingName(s)
	return ouo
}

// SetNillableShippingName sets the "shipping_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingName(*s)
	}
	return ouo
}

// SetShippingFirstName sets the "shipping_first_name" field.
func (ouo *OrderUpdateOne) SetShippingFirstName(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingFirstName(s)
	return ouo
}

// SetNillableShippingFirstName sets the "shipping_first_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingFirstName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingFirstName(*s)
	}
	return ouo
}

// SetShippingLastName sets the "shipping_last_name" field.
func (ouo *OrderUpdateOne) SetShippingLastName(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingLastName(s)
	return ouo
}

// SetNillableShippingLastName sets the "shipping_last_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingLastName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingLastName(*s)
	}
	return ouo
}

// SetShippingCompany sets the "shipping_company" field.
func (ouo *OrderUpdateOne) SetShippingCompany(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCompany(s)
	return ouo
}

// SetNillableShippingCompany sets the "shipping_company" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCompany(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCompany(*s)
	}
	return ouo
}

// SetShippingCountry sets the "shipping_country" field.
func (ouo *OrderUpdateOne) SetShippingCountry(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCountry(s)
	return ouo
}

// SetNillableShippingCountry sets the "shipping_country" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCountry(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCountry(*s)
	}
	return ouo
}

// SetShippingCountryCode sets the "shipping_country_code" field.
func (ouo *OrderUpdateOne) SetShippingCountryCode(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCountryCode(s)
	return ouo
}

// SetNillableShippingCountryCode sets the "shipping_country_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCountryCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCountryCode(*s)
	}
	return ouo
}

// SetShippingProvince sets the "shipping_province" field.
func (ouo *OrderUpdateOne) SetShippingProvince(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingProvince(s)
	return ouo
}

// SetNillableShippingProvince sets the "shipping_province" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingProvince(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingProvince(*s)
	}
	return ouo
}

// SetShippingProvinceCode sets the "shipping_province_code" field.
func (ouo *OrderUpdateOne) SetShippingProvinceCode(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingProvinceCode(s)
	return ouo
}

// SetNillableShippingProvinceCode sets the "shipping_province_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingProvinceCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingProvinceCode(*s)
	}
	return ouo
}

// SetShippingCity sets the "shipping_city" field.
func (ouo *OrderUpdateOne) SetShippingCity(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCity(s)
	return ouo
}

// SetNillableShippingCity sets the "shipping_city" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCity(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCity(*s)
	}
	return ouo
}

// SetShippingAddress1 sets the "shipping_address1" field.
func (ouo *OrderUpdateOne) SetShippingAddress1(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingAddress1(s)
	return ouo
}

// SetNillableShippingAddress1 sets the "shipping_address1" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingAddress1(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingAddress1(*s)
	}
	return ouo
}

// SetShippingAddress2 sets the "shipping_address2" field.
func (ouo *OrderUpdateOne) SetShippingAddress2(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingAddress2(s)
	return ouo
}

// SetNillableShippingAddress2 sets the "shipping_address2" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingAddress2(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingAddress2(*s)
	}
	return ouo
}

// SetShippingZipCode sets the "shipping_zip_code" field.
func (ouo *OrderUpdateOne) SetShippingZipCode(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingZipCode(s)
	return ouo
}

// SetNillableShippingZipCode sets the "shipping_zip_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingZipCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingZipCode(*s)
	}
	return ouo
}

// SetShippingPhone sets the "shipping_phone" field.
func (ouo *OrderUpdateOne) SetShippingPhone(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingPhone(s)
	return ouo
}

// SetNillableShippingPhone sets the "shipping_phone" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingPhone(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingPhone(*s)
	}
	return ouo
}

// SetShippingCertificateType sets the "shipping_certificate_type" field.
func (ouo *OrderUpdateOne) SetShippingCertificateType(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCertificateType(s)
	return ouo
}

// SetNillableShippingCertificateType sets the "shipping_certificate_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCertificateType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCertificateType(*s)
	}
	return ouo
}

// ClearShippingCertificateType clears the value of the "shipping_certificate_type" field.
func (ouo *OrderUpdateOne) ClearShippingCertificateType() *OrderUpdateOne {
	ouo.mutation.ClearShippingCertificateType()
	return ouo
}

// SetShippingCertificateCode sets the "shipping_certificate_code" field.
func (ouo *OrderUpdateOne) SetShippingCertificateCode(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCertificateCode(s)
	return ouo
}

// SetNillableShippingCertificateCode sets the "shipping_certificate_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCertificateCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCertificateCode(*s)
	}
	return ouo
}

// ClearShippingCertificateCode clears the value of the "shipping_certificate_code" field.
func (ouo *OrderUpdateOne) ClearShippingCertificateCode() *OrderUpdateOne {
	ouo.mutation.ClearShippingCertificateCode()
	return ouo
}

// SetShippingCredentialsPeriod sets the "shipping_credentials_period" field.
func (ouo *OrderUpdateOne) SetShippingCredentialsPeriod(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingCredentialsPeriod(s)
	return ouo
}

// SetNillableShippingCredentialsPeriod sets the "shipping_credentials_period" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCredentialsPeriod(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingCredentialsPeriod(*s)
	}
	return ouo
}

// ClearShippingCredentialsPeriod clears the value of the "shipping_credentials_period" field.
func (ouo *OrderUpdateOne) ClearShippingCredentialsPeriod() *OrderUpdateOne {
	ouo.mutation.ClearShippingCredentialsPeriod()
	return ouo
}

// SetRemark sets the "remark" field.
func (ouo *OrderUpdateOne) SetRemark(s string) *OrderUpdateOne {
	ouo.mutation.SetRemark(s)
	return ouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRemark(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetRemark(*s)
	}
	return ouo
}

// ClearRemark clears the value of the "remark" field.
func (ouo *OrderUpdateOne) ClearRemark() *OrderUpdateOne {
	ouo.mutation.ClearRemark()
	return ouo
}

// SetPreferShippedType sets the "prefer_shipped_type" field.
func (ouo *OrderUpdateOne) SetPreferShippedType(i int8) *OrderUpdateOne {
	ouo.mutation.ResetPreferShippedType()
	ouo.mutation.SetPreferShippedType(i)
	return ouo
}

// SetNillablePreferShippedType sets the "prefer_shipped_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePreferShippedType(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetPreferShippedType(*i)
	}
	return ouo
}

// AddPreferShippedType adds i to the "prefer_shipped_type" field.
func (ouo *OrderUpdateOne) AddPreferShippedType(i int8) *OrderUpdateOne {
	ouo.mutation.AddPreferShippedType(i)
	return ouo
}

// ClearPreferShippedType clears the value of the "prefer_shipped_type" field.
func (ouo *OrderUpdateOne) ClearPreferShippedType() *OrderUpdateOne {
	ouo.mutation.ClearPreferShippedType()
	return ouo
}

// SetPreferChannelID sets the "prefer_channel_id" field.
func (ouo *OrderUpdateOne) SetPreferChannelID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetPreferChannelID()
	ouo.mutation.SetPreferChannelID(i)
	return ouo
}

// SetNillablePreferChannelID sets the "prefer_channel_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePreferChannelID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetPreferChannelID(*i)
	}
	return ouo
}

// AddPreferChannelID adds i to the "prefer_channel_id" field.
func (ouo *OrderUpdateOne) AddPreferChannelID(i int64) *OrderUpdateOne {
	ouo.mutation.AddPreferChannelID(i)
	return ouo
}

// ClearPreferChannelID clears the value of the "prefer_channel_id" field.
func (ouo *OrderUpdateOne) ClearPreferChannelID() *OrderUpdateOne {
	ouo.mutation.ClearPreferChannelID()
	return ouo
}

// SetChannelOptions sets the "channel_options" field.
func (ouo *OrderUpdateOne) SetChannelOptions(s string) *OrderUpdateOne {
	ouo.mutation.SetChannelOptions(s)
	return ouo
}

// SetNillableChannelOptions sets the "channel_options" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelOptions(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetChannelOptions(*s)
	}
	return ouo
}

// ClearChannelOptions clears the value of the "channel_options" field.
func (ouo *OrderUpdateOne) ClearChannelOptions() *OrderUpdateOne {
	ouo.mutation.ClearChannelOptions()
	return ouo
}

// SetChannelID sets the "channel_id" field.
func (ouo *OrderUpdateOne) SetChannelID(i int64) *OrderUpdateOne {
	ouo.mutation.SetChannelID(i)
	return ouo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetChannelID(*i)
	}
	return ouo
}

// ClearChannelID clears the value of the "channel_id" field.
func (ouo *OrderUpdateOne) ClearChannelID() *OrderUpdateOne {
	ouo.mutation.ClearChannelID()
	return ouo
}

// SetChannelCostID sets the "channel_cost_id" field.
func (ouo *OrderUpdateOne) SetChannelCostID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetChannelCostID()
	ouo.mutation.SetChannelCostID(i)
	return ouo
}

// SetNillableChannelCostID sets the "channel_cost_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelCostID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetChannelCostID(*i)
	}
	return ouo
}

// AddChannelCostID adds i to the "channel_cost_id" field.
func (ouo *OrderUpdateOne) AddChannelCostID(i int64) *OrderUpdateOne {
	ouo.mutation.AddChannelCostID(i)
	return ouo
}

// ClearChannelCostID clears the value of the "channel_cost_id" field.
func (ouo *OrderUpdateOne) ClearChannelCostID() *OrderUpdateOne {
	ouo.mutation.ClearChannelCostID()
	return ouo
}

// SetShipType sets the "ship_type" field.
func (ouo *OrderUpdateOne) SetShipType(i int8) *OrderUpdateOne {
	ouo.mutation.ResetShipType()
	ouo.mutation.SetShipType(i)
	return ouo
}

// SetNillableShipType sets the "ship_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShipType(i *int8) *OrderUpdateOne {
	if i != nil {
		ouo.SetShipType(*i)
	}
	return ouo
}

// AddShipType adds i to the "ship_type" field.
func (ouo *OrderUpdateOne) AddShipType(i int8) *OrderUpdateOne {
	ouo.mutation.AddShipType(i)
	return ouo
}

// ClearShipType clears the value of the "ship_type" field.
func (ouo *OrderUpdateOne) ClearShipType() *OrderUpdateOne {
	ouo.mutation.ClearShipType()
	return ouo
}

// SetTrackingCompany sets the "tracking_company" field.
func (ouo *OrderUpdateOne) SetTrackingCompany(s string) *OrderUpdateOne {
	ouo.mutation.SetTrackingCompany(s)
	return ouo
}

// SetNillableTrackingCompany sets the "tracking_company" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTrackingCompany(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTrackingCompany(*s)
	}
	return ouo
}

// ClearTrackingCompany clears the value of the "tracking_company" field.
func (ouo *OrderUpdateOne) ClearTrackingCompany() *OrderUpdateOne {
	ouo.mutation.ClearTrackingCompany()
	return ouo
}

// SetTrackingNumber sets the "tracking_number" field.
func (ouo *OrderUpdateOne) SetTrackingNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetTrackingNumber(s)
	return ouo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTrackingNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTrackingNumber(*s)
	}
	return ouo
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (ouo *OrderUpdateOne) ClearTrackingNumber() *OrderUpdateOne {
	ouo.mutation.ClearTrackingNumber()
	return ouo
}

// SetTrackingURL sets the "tracking_url" field.
func (ouo *OrderUpdateOne) SetTrackingURL(s string) *OrderUpdateOne {
	ouo.mutation.SetTrackingURL(s)
	return ouo
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTrackingURL(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTrackingURL(*s)
	}
	return ouo
}

// ClearTrackingURL clears the value of the "tracking_url" field.
func (ouo *OrderUpdateOne) ClearTrackingURL() *OrderUpdateOne {
	ouo.mutation.ClearTrackingURL()
	return ouo
}

// SetWaybillNumber sets the "waybill_number" field.
func (ouo *OrderUpdateOne) SetWaybillNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetWaybillNumber(s)
	return ouo
}

// SetNillableWaybillNumber sets the "waybill_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWaybillNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetWaybillNumber(*s)
	}
	return ouo
}

// ClearWaybillNumber clears the value of the "waybill_number" field.
func (ouo *OrderUpdateOne) ClearWaybillNumber() *OrderUpdateOne {
	ouo.mutation.ClearWaybillNumber()
	return ouo
}

// SetCourierOrderNumber sets the "courier_order_number" field.
func (ouo *OrderUpdateOne) SetCourierOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetCourierOrderNumber(s)
	return ouo
}

// SetNillableCourierOrderNumber sets the "courier_order_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCourierOrderNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCourierOrderNumber(*s)
	}
	return ouo
}

// ClearCourierOrderNumber clears the value of the "courier_order_number" field.
func (ouo *OrderUpdateOne) ClearCourierOrderNumber() *OrderUpdateOne {
	ouo.mutation.ClearCourierOrderNumber()
	return ouo
}

// SetNssCourierOrderNumber sets the "nss_courier_order_number" field.
func (ouo *OrderUpdateOne) SetNssCourierOrderNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetNssCourierOrderNumber(s)
	return ouo
}

// SetNillableNssCourierOrderNumber sets the "nss_courier_order_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNssCourierOrderNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNssCourierOrderNumber(*s)
	}
	return ouo
}

// ClearNssCourierOrderNumber clears the value of the "nss_courier_order_number" field.
func (ouo *OrderUpdateOne) ClearNssCourierOrderNumber() *OrderUpdateOne {
	ouo.mutation.ClearNssCourierOrderNumber()
	return ouo
}

// SetNssTrackingNumber sets the "nss_tracking_number" field.
func (ouo *OrderUpdateOne) SetNssTrackingNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetNssTrackingNumber(s)
	return ouo
}

// SetNillableNssTrackingNumber sets the "nss_tracking_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNssTrackingNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNssTrackingNumber(*s)
	}
	return ouo
}

// ClearNssTrackingNumber clears the value of the "nss_tracking_number" field.
func (ouo *OrderUpdateOne) ClearNssTrackingNumber() *OrderUpdateOne {
	ouo.mutation.ClearNssTrackingNumber()
	return ouo
}

// SetNssTrackingURL sets the "nss_tracking_url" field.
func (ouo *OrderUpdateOne) SetNssTrackingURL(s string) *OrderUpdateOne {
	ouo.mutation.SetNssTrackingURL(s)
	return ouo
}

// SetNillableNssTrackingURL sets the "nss_tracking_url" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNssTrackingURL(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNssTrackingURL(*s)
	}
	return ouo
}

// ClearNssTrackingURL clears the value of the "nss_tracking_url" field.
func (ouo *OrderUpdateOne) ClearNssTrackingURL() *OrderUpdateOne {
	ouo.mutation.ClearNssTrackingURL()
	return ouo
}

// SetShippingLabelURL sets the "shipping_label_url" field.
func (ouo *OrderUpdateOne) SetShippingLabelURL(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingLabelURL(s)
	return ouo
}

// SetNillableShippingLabelURL sets the "shipping_label_url" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingLabelURL(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingLabelURL(*s)
	}
	return ouo
}

// ClearShippingLabelURL clears the value of the "shipping_label_url" field.
func (ouo *OrderUpdateOne) ClearShippingLabelURL() *OrderUpdateOne {
	ouo.mutation.ClearShippingLabelURL()
	return ouo
}

// SetShippingLabelPath sets the "shipping_label_path" field.
func (ouo *OrderUpdateOne) SetShippingLabelPath(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingLabelPath(s)
	return ouo
}

// SetNillableShippingLabelPath sets the "shipping_label_path" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingLabelPath(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippingLabelPath(*s)
	}
	return ouo
}

// ClearShippingLabelPath clears the value of the "shipping_label_path" field.
func (ouo *OrderUpdateOne) ClearShippingLabelPath() *OrderUpdateOne {
	ouo.mutation.ClearShippingLabelPath()
	return ouo
}

// SetLabelDataPath sets the "label_data_path" field.
func (ouo *OrderUpdateOne) SetLabelDataPath(s string) *OrderUpdateOne {
	ouo.mutation.SetLabelDataPath(s)
	return ouo
}

// SetNillableLabelDataPath sets the "label_data_path" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLabelDataPath(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetLabelDataPath(*s)
	}
	return ouo
}

// ClearLabelDataPath clears the value of the "label_data_path" field.
func (ouo *OrderUpdateOne) ClearLabelDataPath() *OrderUpdateOne {
	ouo.mutation.ClearLabelDataPath()
	return ouo
}

// SetPackageID sets the "package_id" field.
func (ouo *OrderUpdateOne) SetPackageID(s string) *OrderUpdateOne {
	ouo.mutation.SetPackageID(s)
	return ouo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePackageID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPackageID(*s)
	}
	return ouo
}

// ClearPackageID clears the value of the "package_id" field.
func (ouo *OrderUpdateOne) ClearPackageID() *OrderUpdateOne {
	ouo.mutation.ClearPackageID()
	return ouo
}

// SetShipDate sets the "ship_date" field.
func (ouo *OrderUpdateOne) SetShipDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetShipDate(t)
	return ouo
}

// SetNillableShipDate sets the "ship_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShipDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetShipDate(*t)
	}
	return ouo
}

// ClearShipDate clears the value of the "ship_date" field.
func (ouo *OrderUpdateOne) ClearShipDate() *OrderUpdateOne {
	ouo.mutation.ClearShipDate()
	return ouo
}

// SetRequestShippingAt sets the "request_shipping_at" field.
func (ouo *OrderUpdateOne) SetRequestShippingAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetRequestShippingAt(t)
	return ouo
}

// SetNillableRequestShippingAt sets the "request_shipping_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRequestShippingAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetRequestShippingAt(*t)
	}
	return ouo
}

// ClearRequestShippingAt clears the value of the "request_shipping_at" field.
func (ouo *OrderUpdateOne) ClearRequestShippingAt() *OrderUpdateOne {
	ouo.mutation.ClearRequestShippingAt()
	return ouo
}

// SetUnshelfRequestedTime sets the "unshelf_requested_time" field.
func (ouo *OrderUpdateOne) SetUnshelfRequestedTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUnshelfRequestedTime(t)
	return ouo
}

// SetNillableUnshelfRequestedTime sets the "unshelf_requested_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUnshelfRequestedTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUnshelfRequestedTime(*t)
	}
	return ouo
}

// ClearUnshelfRequestedTime clears the value of the "unshelf_requested_time" field.
func (ouo *OrderUpdateOne) ClearUnshelfRequestedTime() *OrderUpdateOne {
	ouo.mutation.ClearUnshelfRequestedTime()
	return ouo
}

// SetContainerCode sets the "container_code" field.
func (ouo *OrderUpdateOne) SetContainerCode(s string) *OrderUpdateOne {
	ouo.mutation.SetContainerCode(s)
	return ouo
}

// SetNillableContainerCode sets the "container_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableContainerCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetContainerCode(*s)
	}
	return ouo
}

// ClearContainerCode clears the value of the "container_code" field.
func (ouo *OrderUpdateOne) ClearContainerCode() *OrderUpdateOne {
	ouo.mutation.ClearContainerCode()
	return ouo
}

// SetBasketNumber sets the "basket_number" field.
func (ouo *OrderUpdateOne) SetBasketNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetBasketNumber(s)
	return ouo
}

// SetNillableBasketNumber sets the "basket_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBasketNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetBasketNumber(*s)
	}
	return ouo
}

// ClearBasketNumber clears the value of the "basket_number" field.
func (ouo *OrderUpdateOne) ClearBasketNumber() *OrderUpdateOne {
	ouo.mutation.ClearBasketNumber()
	return ouo
}

// SetPrintTimes sets the "print_times" field.
func (ouo *OrderUpdateOne) SetPrintTimes(i int) *OrderUpdateOne {
	ouo.mutation.ResetPrintTimes()
	ouo.mutation.SetPrintTimes(i)
	return ouo
}

// SetNillablePrintTimes sets the "print_times" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrintTimes(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetPrintTimes(*i)
	}
	return ouo
}

// AddPrintTimes adds i to the "print_times" field.
func (ouo *OrderUpdateOne) AddPrintTimes(i int) *OrderUpdateOne {
	ouo.mutation.AddPrintTimes(i)
	return ouo
}

// ClearPrintTimes clears the value of the "print_times" field.
func (ouo *OrderUpdateOne) ClearPrintTimes() *OrderUpdateOne {
	ouo.mutation.ClearPrintTimes()
	return ouo
}

// SetSortingTrackingNumber sets the "sorting_tracking_number" field.
func (ouo *OrderUpdateOne) SetSortingTrackingNumber(s string) *OrderUpdateOne {
	ouo.mutation.SetSortingTrackingNumber(s)
	return ouo
}

// SetNillableSortingTrackingNumber sets the "sorting_tracking_number" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingTrackingNumber(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetSortingTrackingNumber(*s)
	}
	return ouo
}

// ClearSortingTrackingNumber clears the value of the "sorting_tracking_number" field.
func (ouo *OrderUpdateOne) ClearSortingTrackingNumber() *OrderUpdateOne {
	ouo.mutation.ClearSortingTrackingNumber()
	return ouo
}

// SetSortingPort sets the "sorting_port" field.
func (ouo *OrderUpdateOne) SetSortingPort(i int32) *OrderUpdateOne {
	ouo.mutation.ResetSortingPort()
	ouo.mutation.SetSortingPort(i)
	return ouo
}

// SetNillableSortingPort sets the "sorting_port" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingPort(i *int32) *OrderUpdateOne {
	if i != nil {
		ouo.SetSortingPort(*i)
	}
	return ouo
}

// AddSortingPort adds i to the "sorting_port" field.
func (ouo *OrderUpdateOne) AddSortingPort(i int32) *OrderUpdateOne {
	ouo.mutation.AddSortingPort(i)
	return ouo
}

// ClearSortingPort clears the value of the "sorting_port" field.
func (ouo *OrderUpdateOne) ClearSortingPort() *OrderUpdateOne {
	ouo.mutation.ClearSortingPort()
	return ouo
}

// SetSortingLength sets the "sorting_length" field.
func (ouo *OrderUpdateOne) SetSortingLength(i int) *OrderUpdateOne {
	ouo.mutation.ResetSortingLength()
	ouo.mutation.SetSortingLength(i)
	return ouo
}

// SetNillableSortingLength sets the "sorting_length" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingLength(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetSortingLength(*i)
	}
	return ouo
}

// AddSortingLength adds i to the "sorting_length" field.
func (ouo *OrderUpdateOne) AddSortingLength(i int) *OrderUpdateOne {
	ouo.mutation.AddSortingLength(i)
	return ouo
}

// ClearSortingLength clears the value of the "sorting_length" field.
func (ouo *OrderUpdateOne) ClearSortingLength() *OrderUpdateOne {
	ouo.mutation.ClearSortingLength()
	return ouo
}

// SetSortingWidth sets the "sorting_width" field.
func (ouo *OrderUpdateOne) SetSortingWidth(i int) *OrderUpdateOne {
	ouo.mutation.ResetSortingWidth()
	ouo.mutation.SetSortingWidth(i)
	return ouo
}

// SetNillableSortingWidth sets the "sorting_width" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingWidth(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetSortingWidth(*i)
	}
	return ouo
}

// AddSortingWidth adds i to the "sorting_width" field.
func (ouo *OrderUpdateOne) AddSortingWidth(i int) *OrderUpdateOne {
	ouo.mutation.AddSortingWidth(i)
	return ouo
}

// ClearSortingWidth clears the value of the "sorting_width" field.
func (ouo *OrderUpdateOne) ClearSortingWidth() *OrderUpdateOne {
	ouo.mutation.ClearSortingWidth()
	return ouo
}

// SetSortingHeight sets the "sorting_height" field.
func (ouo *OrderUpdateOne) SetSortingHeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetSortingHeight()
	ouo.mutation.SetSortingHeight(i)
	return ouo
}

// SetNillableSortingHeight sets the "sorting_height" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingHeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetSortingHeight(*i)
	}
	return ouo
}

// AddSortingHeight adds i to the "sorting_height" field.
func (ouo *OrderUpdateOne) AddSortingHeight(i int) *OrderUpdateOne {
	ouo.mutation.AddSortingHeight(i)
	return ouo
}

// ClearSortingHeight clears the value of the "sorting_height" field.
func (ouo *OrderUpdateOne) ClearSortingHeight() *OrderUpdateOne {
	ouo.mutation.ClearSortingHeight()
	return ouo
}

// SetSortingWeight sets the "sorting_weight" field.
func (ouo *OrderUpdateOne) SetSortingWeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetSortingWeight()
	ouo.mutation.SetSortingWeight(i)
	return ouo
}

// SetNillableSortingWeight sets the "sorting_weight" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSortingWeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetSortingWeight(*i)
	}
	return ouo
}

// AddSortingWeight adds i to the "sorting_weight" field.
func (ouo *OrderUpdateOne) AddSortingWeight(i int) *OrderUpdateOne {
	ouo.mutation.AddSortingWeight(i)
	return ouo
}

// ClearSortingWeight clears the value of the "sorting_weight" field.
func (ouo *OrderUpdateOne) ClearSortingWeight() *OrderUpdateOne {
	ouo.mutation.ClearSortingWeight()
	return ouo
}

// SetEstimatedWeight sets the "estimated_weight" field.
func (ouo *OrderUpdateOne) SetEstimatedWeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetEstimatedWeight()
	ouo.mutation.SetEstimatedWeight(i)
	return ouo
}

// SetNillableEstimatedWeight sets the "estimated_weight" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEstimatedWeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetEstimatedWeight(*i)
	}
	return ouo
}

// AddEstimatedWeight adds i to the "estimated_weight" field.
func (ouo *OrderUpdateOne) AddEstimatedWeight(i int) *OrderUpdateOne {
	ouo.mutation.AddEstimatedWeight(i)
	return ouo
}

// ClearEstimatedWeight clears the value of the "estimated_weight" field.
func (ouo *OrderUpdateOne) ClearEstimatedWeight() *OrderUpdateOne {
	ouo.mutation.ClearEstimatedWeight()
	return ouo
}

// SetCheckoutActualWeight sets the "checkout_actual_weight" field.
func (ouo *OrderUpdateOne) SetCheckoutActualWeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetCheckoutActualWeight()
	ouo.mutation.SetCheckoutActualWeight(i)
	return ouo
}

// SetNillableCheckoutActualWeight sets the "checkout_actual_weight" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCheckoutActualWeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCheckoutActualWeight(*i)
	}
	return ouo
}

// AddCheckoutActualWeight adds i to the "checkout_actual_weight" field.
func (ouo *OrderUpdateOne) AddCheckoutActualWeight(i int) *OrderUpdateOne {
	ouo.mutation.AddCheckoutActualWeight(i)
	return ouo
}

// ClearCheckoutActualWeight clears the value of the "checkout_actual_weight" field.
func (ouo *OrderUpdateOne) ClearCheckoutActualWeight() *OrderUpdateOne {
	ouo.mutation.ClearCheckoutActualWeight()
	return ouo
}

// SetVolumeWeight sets the "volume_weight" field.
func (ouo *OrderUpdateOne) SetVolumeWeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetVolumeWeight()
	ouo.mutation.SetVolumeWeight(i)
	return ouo
}

// SetNillableVolumeWeight sets the "volume_weight" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableVolumeWeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetVolumeWeight(*i)
	}
	return ouo
}

// AddVolumeWeight adds i to the "volume_weight" field.
func (ouo *OrderUpdateOne) AddVolumeWeight(i int) *OrderUpdateOne {
	ouo.mutation.AddVolumeWeight(i)
	return ouo
}

// ClearVolumeWeight clears the value of the "volume_weight" field.
func (ouo *OrderUpdateOne) ClearVolumeWeight() *OrderUpdateOne {
	ouo.mutation.ClearVolumeWeight()
	return ouo
}

// SetCourierWeight sets the "courier_weight" field.
func (ouo *OrderUpdateOne) SetCourierWeight(i int) *OrderUpdateOne {
	ouo.mutation.ResetCourierWeight()
	ouo.mutation.SetCourierWeight(i)
	return ouo
}

// SetNillableCourierWeight sets the "courier_weight" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCourierWeight(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCourierWeight(*i)
	}
	return ouo
}

// AddCourierWeight adds i to the "courier_weight" field.
func (ouo *OrderUpdateOne) AddCourierWeight(i int) *OrderUpdateOne {
	ouo.mutation.AddCourierWeight(i)
	return ouo
}

// ClearCourierWeight clears the value of the "courier_weight" field.
func (ouo *OrderUpdateOne) ClearCourierWeight() *OrderUpdateOne {
	ouo.mutation.ClearCourierWeight()
	return ouo
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (ouo *OrderUpdateOne) SetDeclaredValueInUsd(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDeclaredValueInUsd()
	ouo.mutation.SetDeclaredValueInUsd(f)
	return ouo
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeclaredValueInUsd(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDeclaredValueInUsd(*f)
	}
	return ouo
}

// AddDeclaredValueInUsd adds f to the "declared_value_in_usd" field.
func (ouo *OrderUpdateOne) AddDeclaredValueInUsd(f float64) *OrderUpdateOne {
	ouo.mutation.AddDeclaredValueInUsd(f)
	return ouo
}

// ClearDeclaredValueInUsd clears the value of the "declared_value_in_usd" field.
func (ouo *OrderUpdateOne) ClearDeclaredValueInUsd() *OrderUpdateOne {
	ouo.mutation.ClearDeclaredValueInUsd()
	return ouo
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (ouo *OrderUpdateOne) SetDeclaredValueInEur(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDeclaredValueInEur()
	ouo.mutation.SetDeclaredValueInEur(f)
	return ouo
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeclaredValueInEur(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDeclaredValueInEur(*f)
	}
	return ouo
}

// AddDeclaredValueInEur adds f to the "declared_value_in_eur" field.
func (ouo *OrderUpdateOne) AddDeclaredValueInEur(f float64) *OrderUpdateOne {
	ouo.mutation.AddDeclaredValueInEur(f)
	return ouo
}

// ClearDeclaredValueInEur clears the value of the "declared_value_in_eur" field.
func (ouo *OrderUpdateOne) ClearDeclaredValueInEur() *OrderUpdateOne {
	ouo.mutation.ClearDeclaredValueInEur()
	return ouo
}

// SetTotalItemsPrice sets the "total_items_price" field.
func (ouo *OrderUpdateOne) SetTotalItemsPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalItemsPrice()
	ouo.mutation.SetTotalItemsPrice(f)
	return ouo
}

// SetNillableTotalItemsPrice sets the "total_items_price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotalItemsPrice(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotalItemsPrice(*f)
	}
	return ouo
}

// AddTotalItemsPrice adds f to the "total_items_price" field.
func (ouo *OrderUpdateOne) AddTotalItemsPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalItemsPrice(f)
	return ouo
}

// ClearTotalItemsPrice clears the value of the "total_items_price" field.
func (ouo *OrderUpdateOne) ClearTotalItemsPrice() *OrderUpdateOne {
	ouo.mutation.ClearTotalItemsPrice()
	return ouo
}

// SetCurrency sets the "currency" field.
func (ouo *OrderUpdateOne) SetCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetCurrency(s)
	return ouo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCurrency(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCurrency(*s)
	}
	return ouo
}

// ClearCurrency clears the value of the "currency" field.
func (ouo *OrderUpdateOne) ClearCurrency() *OrderUpdateOne {
	ouo.mutation.ClearCurrency()
	return ouo
}

// SetDeliveryCost sets the "delivery_cost" field.
func (ouo *OrderUpdateOne) SetDeliveryCost(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDeliveryCost()
	ouo.mutation.SetDeliveryCost(f)
	return ouo
}

// SetNillableDeliveryCost sets the "delivery_cost" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryCost(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDeliveryCost(*f)
	}
	return ouo
}

// AddDeliveryCost adds f to the "delivery_cost" field.
func (ouo *OrderUpdateOne) AddDeliveryCost(f float64) *OrderUpdateOne {
	ouo.mutation.AddDeliveryCost(f)
	return ouo
}

// SetMiscFee sets the "misc_fee" field.
func (ouo *OrderUpdateOne) SetMiscFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetMiscFee()
	ouo.mutation.SetMiscFee(f)
	return ouo
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMiscFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetMiscFee(*f)
	}
	return ouo
}

// AddMiscFee adds f to the "misc_fee" field.
func (ouo *OrderUpdateOne) AddMiscFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddMiscFee(f)
	return ouo
}

// SetFuelFee sets the "fuel_fee" field.
func (ouo *OrderUpdateOne) SetFuelFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetFuelFee()
	ouo.mutation.SetFuelFee(f)
	return ouo
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableFuelFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetFuelFee(*f)
	}
	return ouo
}

// AddFuelFee adds f to the "fuel_fee" field.
func (ouo *OrderUpdateOne) AddFuelFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddFuelFee(f)
	return ouo
}

// SetRegistrationFee sets the "registration_fee" field.
func (ouo *OrderUpdateOne) SetRegistrationFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetRegistrationFee()
	ouo.mutation.SetRegistrationFee(f)
	return ouo
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRegistrationFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetRegistrationFee(*f)
	}
	return ouo
}

// AddRegistrationFee adds f to the "registration_fee" field.
func (ouo *OrderUpdateOne) AddRegistrationFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddRegistrationFee(f)
	return ouo
}

// SetProcessingFee sets the "processing_fee" field.
func (ouo *OrderUpdateOne) SetProcessingFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetProcessingFee()
	ouo.mutation.SetProcessingFee(f)
	return ouo
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableProcessingFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetProcessingFee(*f)
	}
	return ouo
}

// AddProcessingFee adds f to the "processing_fee" field.
func (ouo *OrderUpdateOne) AddProcessingFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddProcessingFee(f)
	return ouo
}

// SetPackageFee sets the "package_fee" field.
func (ouo *OrderUpdateOne) SetPackageFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetPackageFee()
	ouo.mutation.SetPackageFee(f)
	return ouo
}

// SetNillablePackageFee sets the "package_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePackageFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetPackageFee(*f)
	}
	return ouo
}

// AddPackageFee adds f to the "package_fee" field.
func (ouo *OrderUpdateOne) AddPackageFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddPackageFee(f)
	return ouo
}

// SetHandlingFee sets the "handling_fee" field.
func (ouo *OrderUpdateOne) SetHandlingFee(f float64) *OrderUpdateOne {
	ouo.mutation.ResetHandlingFee()
	ouo.mutation.SetHandlingFee(f)
	return ouo
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableHandlingFee(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetHandlingFee(*f)
	}
	return ouo
}

// AddHandlingFee adds f to the "handling_fee" field.
func (ouo *OrderUpdateOne) AddHandlingFee(f float64) *OrderUpdateOne {
	ouo.mutation.AddHandlingFee(f)
	return ouo
}

// SetVat sets the "vat" field.
func (ouo *OrderUpdateOne) SetVat(f float64) *OrderUpdateOne {
	ouo.mutation.ResetVat()
	ouo.mutation.SetVat(f)
	return ouo
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableVat(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetVat(*f)
	}
	return ouo
}

// AddVat adds f to the "vat" field.
func (ouo *OrderUpdateOne) AddVat(f float64) *OrderUpdateOne {
	ouo.mutation.AddVat(f)
	return ouo
}

// SetEstimatedCost sets the "estimated_cost" field.
func (ouo *OrderUpdateOne) SetEstimatedCost(f float64) *OrderUpdateOne {
	ouo.mutation.ResetEstimatedCost()
	ouo.mutation.SetEstimatedCost(f)
	return ouo
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEstimatedCost(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetEstimatedCost(*f)
	}
	return ouo
}

// AddEstimatedCost adds f to the "estimated_cost" field.
func (ouo *OrderUpdateOne) AddEstimatedCost(f float64) *OrderUpdateOne {
	ouo.mutation.AddEstimatedCost(f)
	return ouo
}

// SetEstimatedCurrency sets the "estimated_currency" field.
func (ouo *OrderUpdateOne) SetEstimatedCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetEstimatedCurrency(s)
	return ouo
}

// SetNillableEstimatedCurrency sets the "estimated_currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEstimatedCurrency(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetEstimatedCurrency(*s)
	}
	return ouo
}

// SetReceivablesAmount sets the "receivables_amount" field.
func (ouo *OrderUpdateOne) SetReceivablesAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetReceivablesAmount()
	ouo.mutation.SetReceivablesAmount(f)
	return ouo
}

// SetNillableReceivablesAmount sets the "receivables_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableReceivablesAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetReceivablesAmount(*f)
	}
	return ouo
}

// AddReceivablesAmount adds f to the "receivables_amount" field.
func (ouo *OrderUpdateOne) AddReceivablesAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddReceivablesAmount(f)
	return ouo
}

// SetReceivablesCurrency sets the "receivables_currency" field.
func (ouo *OrderUpdateOne) SetReceivablesCurrency(s string) *OrderUpdateOne {
	ouo.mutation.SetReceivablesCurrency(s)
	return ouo
}

// SetNillableReceivablesCurrency sets the "receivables_currency" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableReceivablesCurrency(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetReceivablesCurrency(*s)
	}
	return ouo
}

// SetNotAcceptPlatformUpdate sets the "not_accept_platform_update" field.
func (ouo *OrderUpdateOne) SetNotAcceptPlatformUpdate(b bool) *OrderUpdateOne {
	ouo.mutation.SetNotAcceptPlatformUpdate(b)
	return ouo
}

// SetNillableNotAcceptPlatformUpdate sets the "not_accept_platform_update" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNotAcceptPlatformUpdate(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetNotAcceptPlatformUpdate(*b)
	}
	return ouo
}

// SetNotAcceptPlatformUpdateItem sets the "not_accept_platform_update_item" field.
func (ouo *OrderUpdateOne) SetNotAcceptPlatformUpdateItem(b bool) *OrderUpdateOne {
	ouo.mutation.SetNotAcceptPlatformUpdateItem(b)
	return ouo
}

// SetNillableNotAcceptPlatformUpdateItem sets the "not_accept_platform_update_item" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNotAcceptPlatformUpdateItem(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetNotAcceptPlatformUpdateItem(*b)
	}
	return ouo
}

// SetJdPushedStatus sets the "jd_pushed_status" field.
func (ouo *OrderUpdateOne) SetJdPushedStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetJdPushedStatus(s)
	return ouo
}

// SetNillableJdPushedStatus sets the "jd_pushed_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableJdPushedStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetJdPushedStatus(*s)
	}
	return ouo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ouo *OrderUpdateOne) SetTenantID(id int64) *OrderUpdateOne {
	ouo.mutation.SetTenantID(id)
	return ouo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ouo *OrderUpdateOne) SetTenant(t *Tenant) *OrderUpdateOne {
	return ouo.SetTenantID(t.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddOrderItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddOrderItemIDs(ids...)
	return ouo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderItemIDs(ids...)
}

// AddOrderHoldReasonIDs adds the "order_hold_reasons" edge to the OrderHoldReason entity by IDs.
func (ouo *OrderUpdateOne) AddOrderHoldReasonIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddOrderHoldReasonIDs(ids...)
	return ouo
}

// AddOrderHoldReasons adds the "order_hold_reasons" edges to the OrderHoldReason entity.
func (ouo *OrderUpdateOne) AddOrderHoldReasons(o ...*OrderHoldReason) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderHoldReasonIDs(ids...)
}

// AddOrderTaxationIDs adds the "order_taxations" edge to the OrderTaxation entity by IDs.
func (ouo *OrderUpdateOne) AddOrderTaxationIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddOrderTaxationIDs(ids...)
	return ouo
}

// AddOrderTaxations adds the "order_taxations" edges to the OrderTaxation entity.
func (ouo *OrderUpdateOne) AddOrderTaxations(o ...*OrderTaxation) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderTaxationIDs(ids...)
}

// SetStoresID sets the "stores" edge to the Store entity by ID.
func (ouo *OrderUpdateOne) SetStoresID(id int64) *OrderUpdateOne {
	ouo.mutation.SetStoresID(id)
	return ouo
}

// SetNillableStoresID sets the "stores" edge to the Store entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStoresID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetStoresID(*id)
	}
	return ouo
}

// SetStores sets the "stores" edge to the Store entity.
func (ouo *OrderUpdateOne) SetStores(s *Store) *OrderUpdateOne {
	return ouo.SetStoresID(s.ID)
}

// SetWarehousesID sets the "warehouses" edge to the Warehouse entity by ID.
func (ouo *OrderUpdateOne) SetWarehousesID(id int64) *OrderUpdateOne {
	ouo.mutation.SetWarehousesID(id)
	return ouo
}

// SetNillableWarehousesID sets the "warehouses" edge to the Warehouse entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWarehousesID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetWarehousesID(*id)
	}
	return ouo
}

// SetWarehouses sets the "warehouses" edge to the Warehouse entity.
func (ouo *OrderUpdateOne) SetWarehouses(w *Warehouse) *OrderUpdateOne {
	return ouo.SetWarehousesID(w.ID)
}

// SetChannelsID sets the "channels" edge to the Channel entity by ID.
func (ouo *OrderUpdateOne) SetChannelsID(id int64) *OrderUpdateOne {
	ouo.mutation.SetChannelsID(id)
	return ouo
}

// SetNillableChannelsID sets the "channels" edge to the Channel entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableChannelsID(id *int64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetChannelsID(*id)
	}
	return ouo
}

// SetChannels sets the "channels" edge to the Channel entity.
func (ouo *OrderUpdateOne) SetChannels(c *Channel) *OrderUpdateOne {
	return ouo.SetChannelsID(c.ID)
}

// AddTrackMappingIDs adds the "track_mappings" edge to the TrackMapping entity by IDs.
func (ouo *OrderUpdateOne) AddTrackMappingIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddTrackMappingIDs(ids...)
	return ouo
}

// AddTrackMappings adds the "track_mappings" edges to the TrackMapping entity.
func (ouo *OrderUpdateOne) AddTrackMappings(t ...*TrackMapping) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTrackMappingIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ouo *OrderUpdateOne) ClearTenant() *OrderUpdateOne {
	ouo.mutation.ClearTenant()
	return ouo
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearOrderItems() *OrderUpdateOne {
	ouo.mutation.ClearOrderItems()
	return ouo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveOrderItemIDs(ids...)
	return ouo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderItemIDs(ids...)
}

// ClearOrderHoldReasons clears all "order_hold_reasons" edges to the OrderHoldReason entity.
func (ouo *OrderUpdateOne) ClearOrderHoldReasons() *OrderUpdateOne {
	ouo.mutation.ClearOrderHoldReasons()
	return ouo
}

// RemoveOrderHoldReasonIDs removes the "order_hold_reasons" edge to OrderHoldReason entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderHoldReasonIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveOrderHoldReasonIDs(ids...)
	return ouo
}

// RemoveOrderHoldReasons removes "order_hold_reasons" edges to OrderHoldReason entities.
func (ouo *OrderUpdateOne) RemoveOrderHoldReasons(o ...*OrderHoldReason) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderHoldReasonIDs(ids...)
}

// ClearOrderTaxations clears all "order_taxations" edges to the OrderTaxation entity.
func (ouo *OrderUpdateOne) ClearOrderTaxations() *OrderUpdateOne {
	ouo.mutation.ClearOrderTaxations()
	return ouo
}

// RemoveOrderTaxationIDs removes the "order_taxations" edge to OrderTaxation entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderTaxationIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveOrderTaxationIDs(ids...)
	return ouo
}

// RemoveOrderTaxations removes "order_taxations" edges to OrderTaxation entities.
func (ouo *OrderUpdateOne) RemoveOrderTaxations(o ...*OrderTaxation) *OrderUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderTaxationIDs(ids...)
}

// ClearStores clears the "stores" edge to the Store entity.
func (ouo *OrderUpdateOne) ClearStores() *OrderUpdateOne {
	ouo.mutation.ClearStores()
	return ouo
}

// ClearWarehouses clears the "warehouses" edge to the Warehouse entity.
func (ouo *OrderUpdateOne) ClearWarehouses() *OrderUpdateOne {
	ouo.mutation.ClearWarehouses()
	return ouo
}

// ClearChannels clears the "channels" edge to the Channel entity.
func (ouo *OrderUpdateOne) ClearChannels() *OrderUpdateOne {
	ouo.mutation.ClearChannels()
	return ouo
}

// ClearTrackMappings clears all "track_mappings" edges to the TrackMapping entity.
func (ouo *OrderUpdateOne) ClearTrackMappings() *OrderUpdateOne {
	ouo.mutation.ClearTrackMappings()
	return ouo
}

// RemoveTrackMappingIDs removes the "track_mappings" edge to TrackMapping entities by IDs.
func (ouo *OrderUpdateOne) RemoveTrackMappingIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveTrackMappingIDs(ids...)
	return ouo
}

// RemoveTrackMappings removes "track_mappings" edges to TrackMapping entities.
func (ouo *OrderUpdateOne) RemoveTrackMappings(t ...*TrackMapping) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTrackMappingIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized order.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if _, ok := ouo.mutation.TenantID(); ouo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Order.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(order.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(order.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.OrderNumber(); ok {
		_spec.SetField(order.FieldOrderNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Mode(); ok {
		_spec.SetField(order.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedMode(); ok {
		_spec.AddField(order.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.Offline(); ok {
		_spec.SetField(order.FieldOffline, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.CustomerCode(); ok {
		_spec.SetField(order.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PrepayTariff(); ok {
		_spec.SetField(order.FieldPrepayTariff, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.IossNumber(); ok {
		_spec.SetField(order.FieldIossNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.IossCountryCode(); ok {
		_spec.SetField(order.FieldIossCountryCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.IossNumberType(); ok {
		_spec.SetField(order.FieldIossNumberType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedIossNumberType(); ok {
		_spec.AddField(order.FieldIossNumberType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.UkVatNumber(); ok {
		_spec.SetField(order.FieldUkVatNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.InboundOrderNumber(); ok {
		_spec.SetField(order.FieldInboundOrderNumber, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.SqsStatus(); ok {
		_spec.SetField(order.FieldSqsStatus, field.TypeBool, value)
	}
	if ouo.mutation.SqsStatusCleared() {
		_spec.ClearField(order.FieldSqsStatus, field.TypeBool)
	}
	if value, ok := ouo.mutation.HoldStatus(); ok {
		_spec.SetField(order.FieldHoldStatus, field.TypeBool, value)
	}
	if ouo.mutation.HoldStatusCleared() {
		_spec.ClearField(order.FieldHoldStatus, field.TypeBool)
	}
	if value, ok := ouo.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedPaymentStatus(); ok {
		_spec.AddField(order.FieldPaymentStatus, field.TypeInt8, value)
	}
	if ouo.mutation.PaymentStatusCleared() {
		_spec.ClearField(order.FieldPaymentStatus, field.TypeInt8)
	}
	if value, ok := ouo.mutation.CancelRequest(); ok {
		_spec.SetField(order.FieldCancelRequest, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedCancelRequest(); ok {
		_spec.AddField(order.FieldCancelRequest, field.TypeInt8, value)
	}
	if ouo.mutation.CancelRequestCleared() {
		_spec.ClearField(order.FieldCancelRequest, field.TypeInt8)
	}
	if value, ok := ouo.mutation.Platform(); ok {
		_spec.SetField(order.FieldPlatform, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PlatformOrderID(); ok {
		_spec.SetField(order.FieldPlatformOrderID, field.TypeString, value)
	}
	if ouo.mutation.PlatformOrderIDCleared() {
		_spec.ClearField(order.FieldPlatformOrderID, field.TypeString)
	}
	if value, ok := ouo.mutation.PlatformOrderNo(); ok {
		_spec.SetField(order.FieldPlatformOrderNo, field.TypeString, value)
	}
	if ouo.mutation.PlatformOrderNoCleared() {
		_spec.ClearField(order.FieldPlatformOrderNo, field.TypeString)
	}
	if value, ok := ouo.mutation.PlatformOrderStatusURL(); ok {
		_spec.SetField(order.FieldPlatformOrderStatusURL, field.TypeString, value)
	}
	if ouo.mutation.PlatformOrderStatusURLCleared() {
		_spec.ClearField(order.FieldPlatformOrderStatusURL, field.TypeString)
	}
	if value, ok := ouo.mutation.PlatformStatus(); ok {
		_spec.SetField(order.FieldPlatformStatus, field.TypeString, value)
	}
	if ouo.mutation.PlatformStatusCleared() {
		_spec.ClearField(order.FieldPlatformStatus, field.TypeString)
	}
	if value, ok := ouo.mutation.PaidStatus(); ok {
		_spec.SetField(order.FieldPaidStatus, field.TypeString, value)
	}
	if ouo.mutation.PaidStatusCleared() {
		_spec.ClearField(order.FieldPaidStatus, field.TypeString)
	}
	if value, ok := ouo.mutation.FulfillmentPushed(); ok {
		_spec.SetField(order.FieldFulfillmentPushed, field.TypeBool, value)
	}
	if ouo.mutation.FulfillmentPushedCleared() {
		_spec.ClearField(order.FieldFulfillmentPushed, field.TypeBool)
	}
	if value, ok := ouo.mutation.FulfillmentStatus(); ok {
		_spec.SetField(order.FieldFulfillmentStatus, field.TypeString, value)
	}
	if ouo.mutation.FulfillmentStatusCleared() {
		_spec.ClearField(order.FieldFulfillmentStatus, field.TypeString)
	}
	if value, ok := ouo.mutation.PlatformCreatedAt(); ok {
		_spec.SetField(order.FieldPlatformCreatedAt, field.TypeTime, value)
	}
	if ouo.mutation.PlatformCreatedAtCleared() {
		_spec.ClearField(order.FieldPlatformCreatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.LocationID(); ok {
		_spec.SetField(order.FieldLocationID, field.TypeString, value)
	}
	if ouo.mutation.LocationIDCleared() {
		_spec.ClearField(order.FieldLocationID, field.TypeString)
	}
	if value, ok := ouo.mutation.Tags(); ok {
		_spec.SetField(order.FieldTags, field.TypeString, value)
	}
	if ouo.mutation.TagsCleared() {
		_spec.ClearField(order.FieldTags, field.TypeString)
	}
	if value, ok := ouo.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if ouo.mutation.NoteCleared() {
		_spec.ClearField(order.FieldNote, field.TypeString)
	}
	if value, ok := ouo.mutation.CancelReason(); ok {
		_spec.SetField(order.FieldCancelReason, field.TypeString, value)
	}
	if ouo.mutation.CancelReasonCleared() {
		_spec.ClearField(order.FieldCancelReason, field.TypeString)
	}
	if value, ok := ouo.mutation.CancelledAt(); ok {
		_spec.SetField(order.FieldCancelledAt, field.TypeTime, value)
	}
	if ouo.mutation.CancelledAtCleared() {
		_spec.ClearField(order.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.ClosedAt(); ok {
		_spec.SetField(order.FieldClosedAt, field.TypeTime, value)
	}
	if ouo.mutation.ClosedAtCleared() {
		_spec.ClearField(order.FieldClosedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.ContactEmail(); ok {
		_spec.SetField(order.FieldContactEmail, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ContactPhone(); ok {
		_spec.SetField(order.FieldContactPhone, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingName(); ok {
		_spec.SetField(order.FieldShippingName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingFirstName(); ok {
		_spec.SetField(order.FieldShippingFirstName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingLastName(); ok {
		_spec.SetField(order.FieldShippingLastName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingCompany(); ok {
		_spec.SetField(order.FieldShippingCompany, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingCountry(); ok {
		_spec.SetField(order.FieldShippingCountry, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingCountryCode(); ok {
		_spec.SetField(order.FieldShippingCountryCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingProvince(); ok {
		_spec.SetField(order.FieldShippingProvince, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingProvinceCode(); ok {
		_spec.SetField(order.FieldShippingProvinceCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingCity(); ok {
		_spec.SetField(order.FieldShippingCity, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingAddress1(); ok {
		_spec.SetField(order.FieldShippingAddress1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingAddress2(); ok {
		_spec.SetField(order.FieldShippingAddress2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingZipCode(); ok {
		_spec.SetField(order.FieldShippingZipCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingPhone(); ok {
		_spec.SetField(order.FieldShippingPhone, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ShippingCertificateType(); ok {
		_spec.SetField(order.FieldShippingCertificateType, field.TypeString, value)
	}
	if ouo.mutation.ShippingCertificateTypeCleared() {
		_spec.ClearField(order.FieldShippingCertificateType, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippingCertificateCode(); ok {
		_spec.SetField(order.FieldShippingCertificateCode, field.TypeString, value)
	}
	if ouo.mutation.ShippingCertificateCodeCleared() {
		_spec.ClearField(order.FieldShippingCertificateCode, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippingCredentialsPeriod(); ok {
		_spec.SetField(order.FieldShippingCredentialsPeriod, field.TypeString, value)
	}
	if ouo.mutation.ShippingCredentialsPeriodCleared() {
		_spec.ClearField(order.FieldShippingCredentialsPeriod, field.TypeString)
	}
	if value, ok := ouo.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if ouo.mutation.RemarkCleared() {
		_spec.ClearField(order.FieldRemark, field.TypeString)
	}
	if value, ok := ouo.mutation.PreferShippedType(); ok {
		_spec.SetField(order.FieldPreferShippedType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedPreferShippedType(); ok {
		_spec.AddField(order.FieldPreferShippedType, field.TypeInt8, value)
	}
	if ouo.mutation.PreferShippedTypeCleared() {
		_spec.ClearField(order.FieldPreferShippedType, field.TypeInt8)
	}
	if value, ok := ouo.mutation.PreferChannelID(); ok {
		_spec.SetField(order.FieldPreferChannelID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedPreferChannelID(); ok {
		_spec.AddField(order.FieldPreferChannelID, field.TypeInt64, value)
	}
	if ouo.mutation.PreferChannelIDCleared() {
		_spec.ClearField(order.FieldPreferChannelID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.ChannelOptions(); ok {
		_spec.SetField(order.FieldChannelOptions, field.TypeString, value)
	}
	if ouo.mutation.ChannelOptionsCleared() {
		_spec.ClearField(order.FieldChannelOptions, field.TypeString)
	}
	if value, ok := ouo.mutation.ChannelCostID(); ok {
		_spec.SetField(order.FieldChannelCostID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedChannelCostID(); ok {
		_spec.AddField(order.FieldChannelCostID, field.TypeInt64, value)
	}
	if ouo.mutation.ChannelCostIDCleared() {
		_spec.ClearField(order.FieldChannelCostID, field.TypeInt64)
	}
	if value, ok := ouo.mutation.ShipType(); ok {
		_spec.SetField(order.FieldShipType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedShipType(); ok {
		_spec.AddField(order.FieldShipType, field.TypeInt8, value)
	}
	if ouo.mutation.ShipTypeCleared() {
		_spec.ClearField(order.FieldShipType, field.TypeInt8)
	}
	if value, ok := ouo.mutation.TrackingCompany(); ok {
		_spec.SetField(order.FieldTrackingCompany, field.TypeString, value)
	}
	if ouo.mutation.TrackingCompanyCleared() {
		_spec.ClearField(order.FieldTrackingCompany, field.TypeString)
	}
	if value, ok := ouo.mutation.TrackingNumber(); ok {
		_spec.SetField(order.FieldTrackingNumber, field.TypeString, value)
	}
	if ouo.mutation.TrackingNumberCleared() {
		_spec.ClearField(order.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.TrackingURL(); ok {
		_spec.SetField(order.FieldTrackingURL, field.TypeString, value)
	}
	if ouo.mutation.TrackingURLCleared() {
		_spec.ClearField(order.FieldTrackingURL, field.TypeString)
	}
	if value, ok := ouo.mutation.WaybillNumber(); ok {
		_spec.SetField(order.FieldWaybillNumber, field.TypeString, value)
	}
	if ouo.mutation.WaybillNumberCleared() {
		_spec.ClearField(order.FieldWaybillNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.CourierOrderNumber(); ok {
		_spec.SetField(order.FieldCourierOrderNumber, field.TypeString, value)
	}
	if ouo.mutation.CourierOrderNumberCleared() {
		_spec.ClearField(order.FieldCourierOrderNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.NssCourierOrderNumber(); ok {
		_spec.SetField(order.FieldNssCourierOrderNumber, field.TypeString, value)
	}
	if ouo.mutation.NssCourierOrderNumberCleared() {
		_spec.ClearField(order.FieldNssCourierOrderNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.NssTrackingNumber(); ok {
		_spec.SetField(order.FieldNssTrackingNumber, field.TypeString, value)
	}
	if ouo.mutation.NssTrackingNumberCleared() {
		_spec.ClearField(order.FieldNssTrackingNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.NssTrackingURL(); ok {
		_spec.SetField(order.FieldNssTrackingURL, field.TypeString, value)
	}
	if ouo.mutation.NssTrackingURLCleared() {
		_spec.ClearField(order.FieldNssTrackingURL, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippingLabelURL(); ok {
		_spec.SetField(order.FieldShippingLabelURL, field.TypeString, value)
	}
	if ouo.mutation.ShippingLabelURLCleared() {
		_spec.ClearField(order.FieldShippingLabelURL, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippingLabelPath(); ok {
		_spec.SetField(order.FieldShippingLabelPath, field.TypeString, value)
	}
	if ouo.mutation.ShippingLabelPathCleared() {
		_spec.ClearField(order.FieldShippingLabelPath, field.TypeString)
	}
	if value, ok := ouo.mutation.LabelDataPath(); ok {
		_spec.SetField(order.FieldLabelDataPath, field.TypeString, value)
	}
	if ouo.mutation.LabelDataPathCleared() {
		_spec.ClearField(order.FieldLabelDataPath, field.TypeString)
	}
	if value, ok := ouo.mutation.PackageID(); ok {
		_spec.SetField(order.FieldPackageID, field.TypeString, value)
	}
	if ouo.mutation.PackageIDCleared() {
		_spec.ClearField(order.FieldPackageID, field.TypeString)
	}
	if value, ok := ouo.mutation.ShipDate(); ok {
		_spec.SetField(order.FieldShipDate, field.TypeTime, value)
	}
	if ouo.mutation.ShipDateCleared() {
		_spec.ClearField(order.FieldShipDate, field.TypeTime)
	}
	if value, ok := ouo.mutation.RequestShippingAt(); ok {
		_spec.SetField(order.FieldRequestShippingAt, field.TypeTime, value)
	}
	if ouo.mutation.RequestShippingAtCleared() {
		_spec.ClearField(order.FieldRequestShippingAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.UnshelfRequestedTime(); ok {
		_spec.SetField(order.FieldUnshelfRequestedTime, field.TypeTime, value)
	}
	if ouo.mutation.UnshelfRequestedTimeCleared() {
		_spec.ClearField(order.FieldUnshelfRequestedTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.ContainerCode(); ok {
		_spec.SetField(order.FieldContainerCode, field.TypeString, value)
	}
	if ouo.mutation.ContainerCodeCleared() {
		_spec.ClearField(order.FieldContainerCode, field.TypeString)
	}
	if value, ok := ouo.mutation.BasketNumber(); ok {
		_spec.SetField(order.FieldBasketNumber, field.TypeString, value)
	}
	if ouo.mutation.BasketNumberCleared() {
		_spec.ClearField(order.FieldBasketNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.PrintTimes(); ok {
		_spec.SetField(order.FieldPrintTimes, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPrintTimes(); ok {
		_spec.AddField(order.FieldPrintTimes, field.TypeInt, value)
	}
	if ouo.mutation.PrintTimesCleared() {
		_spec.ClearField(order.FieldPrintTimes, field.TypeInt)
	}
	if value, ok := ouo.mutation.SortingTrackingNumber(); ok {
		_spec.SetField(order.FieldSortingTrackingNumber, field.TypeString, value)
	}
	if ouo.mutation.SortingTrackingNumberCleared() {
		_spec.ClearField(order.FieldSortingTrackingNumber, field.TypeString)
	}
	if value, ok := ouo.mutation.SortingPort(); ok {
		_spec.SetField(order.FieldSortingPort, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedSortingPort(); ok {
		_spec.AddField(order.FieldSortingPort, field.TypeInt32, value)
	}
	if ouo.mutation.SortingPortCleared() {
		_spec.ClearField(order.FieldSortingPort, field.TypeInt32)
	}
	if value, ok := ouo.mutation.SortingLength(); ok {
		_spec.SetField(order.FieldSortingLength, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSortingLength(); ok {
		_spec.AddField(order.FieldSortingLength, field.TypeInt, value)
	}
	if ouo.mutation.SortingLengthCleared() {
		_spec.ClearField(order.FieldSortingLength, field.TypeInt)
	}
	if value, ok := ouo.mutation.SortingWidth(); ok {
		_spec.SetField(order.FieldSortingWidth, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSortingWidth(); ok {
		_spec.AddField(order.FieldSortingWidth, field.TypeInt, value)
	}
	if ouo.mutation.SortingWidthCleared() {
		_spec.ClearField(order.FieldSortingWidth, field.TypeInt)
	}
	if value, ok := ouo.mutation.SortingHeight(); ok {
		_spec.SetField(order.FieldSortingHeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSortingHeight(); ok {
		_spec.AddField(order.FieldSortingHeight, field.TypeInt, value)
	}
	if ouo.mutation.SortingHeightCleared() {
		_spec.ClearField(order.FieldSortingHeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.SortingWeight(); ok {
		_spec.SetField(order.FieldSortingWeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedSortingWeight(); ok {
		_spec.AddField(order.FieldSortingWeight, field.TypeInt, value)
	}
	if ouo.mutation.SortingWeightCleared() {
		_spec.ClearField(order.FieldSortingWeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.EstimatedWeight(); ok {
		_spec.SetField(order.FieldEstimatedWeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedEstimatedWeight(); ok {
		_spec.AddField(order.FieldEstimatedWeight, field.TypeInt, value)
	}
	if ouo.mutation.EstimatedWeightCleared() {
		_spec.ClearField(order.FieldEstimatedWeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.CheckoutActualWeight(); ok {
		_spec.SetField(order.FieldCheckoutActualWeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCheckoutActualWeight(); ok {
		_spec.AddField(order.FieldCheckoutActualWeight, field.TypeInt, value)
	}
	if ouo.mutation.CheckoutActualWeightCleared() {
		_spec.ClearField(order.FieldCheckoutActualWeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.VolumeWeight(); ok {
		_spec.SetField(order.FieldVolumeWeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedVolumeWeight(); ok {
		_spec.AddField(order.FieldVolumeWeight, field.TypeInt, value)
	}
	if ouo.mutation.VolumeWeightCleared() {
		_spec.ClearField(order.FieldVolumeWeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.CourierWeight(); ok {
		_spec.SetField(order.FieldCourierWeight, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCourierWeight(); ok {
		_spec.AddField(order.FieldCourierWeight, field.TypeInt, value)
	}
	if ouo.mutation.CourierWeightCleared() {
		_spec.ClearField(order.FieldCourierWeight, field.TypeInt)
	}
	if value, ok := ouo.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(order.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDeclaredValueInUsd(); ok {
		_spec.AddField(order.FieldDeclaredValueInUsd, field.TypeFloat64, value)
	}
	if ouo.mutation.DeclaredValueInUsdCleared() {
		_spec.ClearField(order.FieldDeclaredValueInUsd, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(order.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDeclaredValueInEur(); ok {
		_spec.AddField(order.FieldDeclaredValueInEur, field.TypeFloat64, value)
	}
	if ouo.mutation.DeclaredValueInEurCleared() {
		_spec.ClearField(order.FieldDeclaredValueInEur, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.TotalItemsPrice(); ok {
		_spec.SetField(order.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalItemsPrice(); ok {
		_spec.AddField(order.FieldTotalItemsPrice, field.TypeFloat64, value)
	}
	if ouo.mutation.TotalItemsPriceCleared() {
		_spec.ClearField(order.FieldTotalItemsPrice, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.Currency(); ok {
		_spec.SetField(order.FieldCurrency, field.TypeString, value)
	}
	if ouo.mutation.CurrencyCleared() {
		_spec.ClearField(order.FieldCurrency, field.TypeString)
	}
	if value, ok := ouo.mutation.DeliveryCost(); ok {
		_spec.SetField(order.FieldDeliveryCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDeliveryCost(); ok {
		_spec.AddField(order.FieldDeliveryCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.MiscFee(); ok {
		_spec.SetField(order.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedMiscFee(); ok {
		_spec.AddField(order.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.FuelFee(); ok {
		_spec.SetField(order.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedFuelFee(); ok {
		_spec.AddField(order.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.RegistrationFee(); ok {
		_spec.SetField(order.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedRegistrationFee(); ok {
		_spec.AddField(order.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.ProcessingFee(); ok {
		_spec.SetField(order.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedProcessingFee(); ok {
		_spec.AddField(order.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.PackageFee(); ok {
		_spec.SetField(order.FieldPackageFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedPackageFee(); ok {
		_spec.AddField(order.FieldPackageFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.HandlingFee(); ok {
		_spec.SetField(order.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedHandlingFee(); ok {
		_spec.AddField(order.FieldHandlingFee, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Vat(); ok {
		_spec.SetField(order.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedVat(); ok {
		_spec.AddField(order.FieldVat, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.EstimatedCost(); ok {
		_spec.SetField(order.FieldEstimatedCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedEstimatedCost(); ok {
		_spec.AddField(order.FieldEstimatedCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.EstimatedCurrency(); ok {
		_spec.SetField(order.FieldEstimatedCurrency, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ReceivablesAmount(); ok {
		_spec.SetField(order.FieldReceivablesAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedReceivablesAmount(); ok {
		_spec.AddField(order.FieldReceivablesAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.ReceivablesCurrency(); ok {
		_spec.SetField(order.FieldReceivablesCurrency, field.TypeString, value)
	}
	if value, ok := ouo.mutation.NotAcceptPlatformUpdate(); ok {
		_spec.SetField(order.FieldNotAcceptPlatformUpdate, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.NotAcceptPlatformUpdateItem(); ok {
		_spec.SetField(order.FieldNotAcceptPlatformUpdateItem, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.JdPushedStatus(); ok {
		_spec.SetField(order.FieldJdPushedStatus, field.TypeString, value)
	}
	if ouo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderitem.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderHoldReasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderHoldReason
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderHoldReasonsIDs(); len(nodes) > 0 && !ouo.mutation.OrderHoldReasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderHoldReasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: orderholdreason.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderTaxationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderTaxation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderTaxationsIDs(); len(nodes) > 0 && !ouo.mutation.OrderTaxationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderTaxationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ordertaxation.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: []string{order.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: []string{order.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.WarehousesTable,
			Columns: []string{order.WarehousesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: warehouse.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WarehousesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.WarehousesTable,
			Columns: []string{order.WarehousesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: warehouse.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ChannelsTable,
			Columns: []string{order.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ChannelsTable,
			Columns: []string{order.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TrackMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.TrackMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTrackMappingsIDs(); len(nodes) > 0 && !ouo.mutation.TrackMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.TrackMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TrackMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: trackmapping.FieldID,
				},
			},
		}
		edge.Schema = ouo.schemaConfig.TrackMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ouo.schemaConfig.Order
	ctx = internal.NewSchemaConfigContext(ctx, ouo.schemaConfig)
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
