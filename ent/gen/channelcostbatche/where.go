// Code generated by ent, DO NOT EDIT.

package channelcostbatche

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// EffectiveDate applies equality check predicate on the "effective_date" field. It's identical to EffectiveDateEQ.
func EffectiveDate(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectiveDate), v))
	})
}

// ExpiryDate applies equality check predicate on the "expiry_date" field. It's identical to ExpiryDateEQ.
func ExpiryDate(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryDate), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int64) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelID), v...))
	})
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int64) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelID), v...))
	})
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelID), v))
	})
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelID), v))
	})
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelID), v))
	})
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v int64) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelID), v))
	})
}

// EffectiveDateEQ applies the EQ predicate on the "effective_date" field.
func EffectiveDateEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateNEQ applies the NEQ predicate on the "effective_date" field.
func EffectiveDateNEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateIn applies the In predicate on the "effective_date" field.
func EffectiveDateIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEffectiveDate), v...))
	})
}

// EffectiveDateNotIn applies the NotIn predicate on the "effective_date" field.
func EffectiveDateNotIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEffectiveDate), v...))
	})
}

// EffectiveDateGT applies the GT predicate on the "effective_date" field.
func EffectiveDateGT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateGTE applies the GTE predicate on the "effective_date" field.
func EffectiveDateGTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateLT applies the LT predicate on the "effective_date" field.
func EffectiveDateLT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateLTE applies the LTE predicate on the "effective_date" field.
func EffectiveDateLTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateIsNil applies the IsNil predicate on the "effective_date" field.
func EffectiveDateIsNil() predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEffectiveDate)))
	})
}

// EffectiveDateNotNil applies the NotNil predicate on the "effective_date" field.
func EffectiveDateNotNil() predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEffectiveDate)))
	})
}

// ExpiryDateEQ applies the EQ predicate on the "expiry_date" field.
func ExpiryDateEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateNEQ applies the NEQ predicate on the "expiry_date" field.
func ExpiryDateNEQ(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateIn applies the In predicate on the "expiry_date" field.
func ExpiryDateIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExpiryDate), v...))
	})
}

// ExpiryDateNotIn applies the NotIn predicate on the "expiry_date" field.
func ExpiryDateNotIn(vs ...time.Time) predicate.ChannelCostBatche {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExpiryDate), v...))
	})
}

// ExpiryDateGT applies the GT predicate on the "expiry_date" field.
func ExpiryDateGT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateGTE applies the GTE predicate on the "expiry_date" field.
func ExpiryDateGTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateLT applies the LT predicate on the "expiry_date" field.
func ExpiryDateLT(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateLTE applies the LTE predicate on the "expiry_date" field.
func ExpiryDateLTE(v time.Time) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiryDate), v))
	})
}

// ExpiryDateIsNil applies the IsNil predicate on the "expiry_date" field.
func ExpiryDateIsNil() predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExpiryDate)))
	})
}

// ExpiryDateNotNil applies the NotNil predicate on the "expiry_date" field.
func ExpiryDateNotNil() predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExpiryDate)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChannelCostBatche) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChannelCostBatche) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChannelCostBatche) predicate.ChannelCostBatche {
	return predicate.ChannelCostBatche(func(s *sql.Selector) {
		p(s.Not())
	})
}
