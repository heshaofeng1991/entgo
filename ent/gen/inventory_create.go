// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InventoryCreate is the builder for creating a Inventory entity.
type InventoryCreate struct {
	config
	mutation *InventoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InventoryCreate) SetCreatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableCreatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InventoryCreate) SetUpdatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUpdatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InventoryCreate) SetDeletedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableDeletedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetProductID sets the "product_id" field.
func (ic *InventoryCreate) SetProductID(i int64) *InventoryCreate {
	ic.mutation.SetProductID(i)
	return ic
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableProductID(i *int64) *InventoryCreate {
	if i != nil {
		ic.SetProductID(*i)
	}
	return ic
}

// SetWarehouseID sets the "warehouse_id" field.
func (ic *InventoryCreate) SetWarehouseID(i int64) *InventoryCreate {
	ic.mutation.SetWarehouseID(i)
	return ic
}

// SetStorageQty sets the "storage_qty" field.
func (ic *InventoryCreate) SetStorageQty(i int32) *InventoryCreate {
	ic.mutation.SetStorageQty(i)
	return ic
}

// SetNillableStorageQty sets the "storage_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableStorageQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetStorageQty(*i)
	}
	return ic
}

// SetAvailableQty sets the "available_qty" field.
func (ic *InventoryCreate) SetAvailableQty(i int32) *InventoryCreate {
	ic.mutation.SetAvailableQty(i)
	return ic
}

// SetNillableAvailableQty sets the "available_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableAvailableQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetAvailableQty(*i)
	}
	return ic
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (ic *InventoryCreate) SetPrepareShipQty(i int32) *InventoryCreate {
	ic.mutation.SetPrepareShipQty(i)
	return ic
}

// SetNillablePrepareShipQty sets the "prepare_ship_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillablePrepareShipQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetPrepareShipQty(*i)
	}
	return ic
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (ic *InventoryCreate) SetPrepareShelveQty(i int32) *InventoryCreate {
	ic.mutation.SetPrepareShelveQty(i)
	return ic
}

// SetNillablePrepareShelveQty sets the "prepare_shelve_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillablePrepareShelveQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetPrepareShelveQty(*i)
	}
	return ic
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (ic *InventoryCreate) SetQuicktronStorageQty(i int32) *InventoryCreate {
	ic.mutation.SetQuicktronStorageQty(i)
	return ic
}

// SetNillableQuicktronStorageQty sets the "quicktron_storage_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableQuicktronStorageQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetQuicktronStorageQty(*i)
	}
	return ic
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (ic *InventoryCreate) SetQuicktronAvailableQty(i int32) *InventoryCreate {
	ic.mutation.SetQuicktronAvailableQty(i)
	return ic
}

// SetNillableQuicktronAvailableQty sets the "quicktron_available_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableQuicktronAvailableQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetQuicktronAvailableQty(*i)
	}
	return ic
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (ic *InventoryCreate) SetQuicktronPrepareOutboundQty(i int32) *InventoryCreate {
	ic.mutation.SetQuicktronPrepareOutboundQty(i)
	return ic
}

// SetNillableQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableQuicktronPrepareOutboundQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetQuicktronPrepareOutboundQty(*i)
	}
	return ic
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (ic *InventoryCreate) SetQuicktronPrepareShelveQty(i int32) *InventoryCreate {
	ic.mutation.SetQuicktronPrepareShelveQty(i)
	return ic
}

// SetNillableQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableQuicktronPrepareShelveQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetQuicktronPrepareShelveQty(*i)
	}
	return ic
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (ic *InventoryCreate) SetNormalStorageQty(i int32) *InventoryCreate {
	ic.mutation.SetNormalStorageQty(i)
	return ic
}

// SetNillableNormalStorageQty sets the "normal_storage_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableNormalStorageQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetNormalStorageQty(*i)
	}
	return ic
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (ic *InventoryCreate) SetNormalAvailableQty(i int32) *InventoryCreate {
	ic.mutation.SetNormalAvailableQty(i)
	return ic
}

// SetNillableNormalAvailableQty sets the "normal_available_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableNormalAvailableQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetNormalAvailableQty(*i)
	}
	return ic
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (ic *InventoryCreate) SetNormalPrepareOutboundQty(i int32) *InventoryCreate {
	ic.mutation.SetNormalPrepareOutboundQty(i)
	return ic
}

// SetNillableNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableNormalPrepareOutboundQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetNormalPrepareOutboundQty(*i)
	}
	return ic
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (ic *InventoryCreate) SetNormalPrepareShelveQty(i int32) *InventoryCreate {
	ic.mutation.SetNormalPrepareShelveQty(i)
	return ic
}

// SetNillableNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableNormalPrepareShelveQty(i *int32) *InventoryCreate {
	if i != nil {
		ic.SetNormalPrepareShelveQty(*i)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *InventoryCreate) SetStatus(i int8) *InventoryCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableStatus(i *int8) *InventoryCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InventoryCreate) SetID(i int64) *InventoryCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ic *InventoryCreate) SetTenantID(id int64) *InventoryCreate {
	ic.mutation.SetTenantID(id)
	return ic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ic *InventoryCreate) SetTenant(t *Tenant) *InventoryCreate {
	return ic.SetTenantID(t.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (ic *InventoryCreate) SetProductsID(id int64) *InventoryCreate {
	ic.mutation.SetProductsID(id)
	return ic
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (ic *InventoryCreate) SetNillableProductsID(id *int64) *InventoryCreate {
	if id != nil {
		ic = ic.SetProductsID(*id)
	}
	return ic
}

// SetProducts sets the "products" edge to the Product entity.
func (ic *InventoryCreate) SetProducts(p *Product) *InventoryCreate {
	return ic.SetProductsID(p.ID)
}

// Mutation returns the InventoryMutation object of the builder.
func (ic *InventoryCreate) Mutation() *InventoryMutation {
	return ic.mutation
}

// Save creates the Inventory in the database.
func (ic *InventoryCreate) Save(ctx context.Context) (*Inventory, error) {
	var (
		err  error
		node *Inventory
	)
	if err := ic.defaults(); err != nil {
		return nil, err
	}
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Inventory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InventoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InventoryCreate) SaveX(ctx context.Context) *Inventory {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InventoryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InventoryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InventoryCreate) defaults() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		if inventory.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized inventory.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := inventory.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		if inventory.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inventory.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inventory.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.StorageQty(); !ok {
		v := inventory.DefaultStorageQty
		ic.mutation.SetStorageQty(v)
	}
	if _, ok := ic.mutation.AvailableQty(); !ok {
		v := inventory.DefaultAvailableQty
		ic.mutation.SetAvailableQty(v)
	}
	if _, ok := ic.mutation.PrepareShipQty(); !ok {
		v := inventory.DefaultPrepareShipQty
		ic.mutation.SetPrepareShipQty(v)
	}
	if _, ok := ic.mutation.PrepareShelveQty(); !ok {
		v := inventory.DefaultPrepareShelveQty
		ic.mutation.SetPrepareShelveQty(v)
	}
	if _, ok := ic.mutation.QuicktronStorageQty(); !ok {
		v := inventory.DefaultQuicktronStorageQty
		ic.mutation.SetQuicktronStorageQty(v)
	}
	if _, ok := ic.mutation.QuicktronAvailableQty(); !ok {
		v := inventory.DefaultQuicktronAvailableQty
		ic.mutation.SetQuicktronAvailableQty(v)
	}
	if _, ok := ic.mutation.QuicktronPrepareOutboundQty(); !ok {
		v := inventory.DefaultQuicktronPrepareOutboundQty
		ic.mutation.SetQuicktronPrepareOutboundQty(v)
	}
	if _, ok := ic.mutation.QuicktronPrepareShelveQty(); !ok {
		v := inventory.DefaultQuicktronPrepareShelveQty
		ic.mutation.SetQuicktronPrepareShelveQty(v)
	}
	if _, ok := ic.mutation.NormalStorageQty(); !ok {
		v := inventory.DefaultNormalStorageQty
		ic.mutation.SetNormalStorageQty(v)
	}
	if _, ok := ic.mutation.NormalAvailableQty(); !ok {
		v := inventory.DefaultNormalAvailableQty
		ic.mutation.SetNormalAvailableQty(v)
	}
	if _, ok := ic.mutation.NormalPrepareOutboundQty(); !ok {
		v := inventory.DefaultNormalPrepareOutboundQty
		ic.mutation.SetNormalPrepareOutboundQty(v)
	}
	if _, ok := ic.mutation.NormalPrepareShelveQty(); !ok {
		v := inventory.DefaultNormalPrepareShelveQty
		ic.mutation.SetNormalPrepareShelveQty(v)
	}
	if _, ok := ic.mutation.Status(); !ok {
		v := inventory.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ic *InventoryCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Inventory.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Inventory.updated_at"`)}
	}
	if _, ok := ic.mutation.WarehouseID(); !ok {
		return &ValidationError{Name: "warehouse_id", err: errors.New(`gen: missing required field "Inventory.warehouse_id"`)}
	}
	if _, ok := ic.mutation.StorageQty(); !ok {
		return &ValidationError{Name: "storage_qty", err: errors.New(`gen: missing required field "Inventory.storage_qty"`)}
	}
	if _, ok := ic.mutation.AvailableQty(); !ok {
		return &ValidationError{Name: "available_qty", err: errors.New(`gen: missing required field "Inventory.available_qty"`)}
	}
	if _, ok := ic.mutation.PrepareShipQty(); !ok {
		return &ValidationError{Name: "prepare_ship_qty", err: errors.New(`gen: missing required field "Inventory.prepare_ship_qty"`)}
	}
	if _, ok := ic.mutation.PrepareShelveQty(); !ok {
		return &ValidationError{Name: "prepare_shelve_qty", err: errors.New(`gen: missing required field "Inventory.prepare_shelve_qty"`)}
	}
	if _, ok := ic.mutation.QuicktronStorageQty(); !ok {
		return &ValidationError{Name: "quicktron_storage_qty", err: errors.New(`gen: missing required field "Inventory.quicktron_storage_qty"`)}
	}
	if _, ok := ic.mutation.QuicktronAvailableQty(); !ok {
		return &ValidationError{Name: "quicktron_available_qty", err: errors.New(`gen: missing required field "Inventory.quicktron_available_qty"`)}
	}
	if _, ok := ic.mutation.QuicktronPrepareOutboundQty(); !ok {
		return &ValidationError{Name: "quicktron_prepare_outbound_qty", err: errors.New(`gen: missing required field "Inventory.quicktron_prepare_outbound_qty"`)}
	}
	if _, ok := ic.mutation.QuicktronPrepareShelveQty(); !ok {
		return &ValidationError{Name: "quicktron_prepare_shelve_qty", err: errors.New(`gen: missing required field "Inventory.quicktron_prepare_shelve_qty"`)}
	}
	if _, ok := ic.mutation.NormalStorageQty(); !ok {
		return &ValidationError{Name: "normal_storage_qty", err: errors.New(`gen: missing required field "Inventory.normal_storage_qty"`)}
	}
	if _, ok := ic.mutation.NormalAvailableQty(); !ok {
		return &ValidationError{Name: "normal_available_qty", err: errors.New(`gen: missing required field "Inventory.normal_available_qty"`)}
	}
	if _, ok := ic.mutation.NormalPrepareOutboundQty(); !ok {
		return &ValidationError{Name: "normal_prepare_outbound_qty", err: errors.New(`gen: missing required field "Inventory.normal_prepare_outbound_qty"`)}
	}
	if _, ok := ic.mutation.NormalPrepareShelveQty(); !ok {
		return &ValidationError{Name: "normal_prepare_shelve_qty", err: errors.New(`gen: missing required field "Inventory.normal_prepare_shelve_qty"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Inventory.status"`)}
	}
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "Inventory.tenant"`)}
	}
	return nil
}

func (ic *InventoryCreate) sqlSave(ctx context.Context) (*Inventory, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ic *InventoryCreate) createSpec() (*Inventory, *sqlgraph.CreateSpec) {
	var (
		_node = &Inventory{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inventory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inventory.FieldID,
			},
		}
	)
	_spec.Schema = ic.schemaConfig.Inventory
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inventory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ic.mutation.WarehouseID(); ok {
		_spec.SetField(inventory.FieldWarehouseID, field.TypeInt64, value)
		_node.WarehouseID = value
	}
	if value, ok := ic.mutation.StorageQty(); ok {
		_spec.SetField(inventory.FieldStorageQty, field.TypeInt32, value)
		_node.StorageQty = value
	}
	if value, ok := ic.mutation.AvailableQty(); ok {
		_spec.SetField(inventory.FieldAvailableQty, field.TypeInt32, value)
		_node.AvailableQty = value
	}
	if value, ok := ic.mutation.PrepareShipQty(); ok {
		_spec.SetField(inventory.FieldPrepareShipQty, field.TypeInt32, value)
		_node.PrepareShipQty = value
	}
	if value, ok := ic.mutation.PrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldPrepareShelveQty, field.TypeInt32, value)
		_node.PrepareShelveQty = value
	}
	if value, ok := ic.mutation.QuicktronStorageQty(); ok {
		_spec.SetField(inventory.FieldQuicktronStorageQty, field.TypeInt32, value)
		_node.QuicktronStorageQty = value
	}
	if value, ok := ic.mutation.QuicktronAvailableQty(); ok {
		_spec.SetField(inventory.FieldQuicktronAvailableQty, field.TypeInt32, value)
		_node.QuicktronAvailableQty = value
	}
	if value, ok := ic.mutation.QuicktronPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareOutboundQty, field.TypeInt32, value)
		_node.QuicktronPrepareOutboundQty = value
	}
	if value, ok := ic.mutation.QuicktronPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldQuicktronPrepareShelveQty, field.TypeInt32, value)
		_node.QuicktronPrepareShelveQty = value
	}
	if value, ok := ic.mutation.NormalStorageQty(); ok {
		_spec.SetField(inventory.FieldNormalStorageQty, field.TypeInt32, value)
		_node.NormalStorageQty = value
	}
	if value, ok := ic.mutation.NormalAvailableQty(); ok {
		_spec.SetField(inventory.FieldNormalAvailableQty, field.TypeInt32, value)
		_node.NormalAvailableQty = value
	}
	if value, ok := ic.mutation.NormalPrepareOutboundQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareOutboundQty, field.TypeInt32, value)
		_node.NormalPrepareOutboundQty = value
	}
	if value, ok := ic.mutation.NormalPrepareShelveQty(); ok {
		_spec.SetField(inventory.FieldNormalPrepareShelveQty, field.TypeInt32, value)
		_node.NormalPrepareShelveQty = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(inventory.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if nodes := ic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ic.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = ic.schemaConfig.Inventory
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertOne {
	ic.conflict = opts
	return &InventoryUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflictColumns(columns ...string) *InventoryUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertOne{
		create: ic,
	}
}

type (
	// InventoryUpsertOne is the builder for "upsert"-ing
	//  one Inventory node.
	InventoryUpsertOne struct {
		create *InventoryCreate
	}

	// InventoryUpsert is the "OnConflict" setter.
	InventoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsert) SetUpdatedAt(v time.Time) *InventoryUpsert {
	u.Set(inventory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateUpdatedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsert) SetDeletedAt(v time.Time) *InventoryUpsert {
	u.Set(inventory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateDeletedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsert) ClearDeletedAt() *InventoryUpsert {
	u.SetNull(inventory.FieldDeletedAt)
	return u
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsert) SetProductID(v int64) *InventoryUpsert {
	u.Set(inventory.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateProductID() *InventoryUpsert {
	u.SetExcluded(inventory.FieldProductID)
	return u
}

// ClearProductID clears the value of the "product_id" field.
func (u *InventoryUpsert) ClearProductID() *InventoryUpsert {
	u.SetNull(inventory.FieldProductID)
	return u
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InventoryUpsert) SetWarehouseID(v int64) *InventoryUpsert {
	u.Set(inventory.FieldWarehouseID, v)
	return u
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateWarehouseID() *InventoryUpsert {
	u.SetExcluded(inventory.FieldWarehouseID)
	return u
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InventoryUpsert) AddWarehouseID(v int64) *InventoryUpsert {
	u.Add(inventory.FieldWarehouseID, v)
	return u
}

// SetStorageQty sets the "storage_qty" field.
func (u *InventoryUpsert) SetStorageQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldStorageQty, v)
	return u
}

// UpdateStorageQty sets the "storage_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateStorageQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldStorageQty)
	return u
}

// AddStorageQty adds v to the "storage_qty" field.
func (u *InventoryUpsert) AddStorageQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldStorageQty, v)
	return u
}

// SetAvailableQty sets the "available_qty" field.
func (u *InventoryUpsert) SetAvailableQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldAvailableQty, v)
	return u
}

// UpdateAvailableQty sets the "available_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateAvailableQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldAvailableQty)
	return u
}

// AddAvailableQty adds v to the "available_qty" field.
func (u *InventoryUpsert) AddAvailableQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldAvailableQty, v)
	return u
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (u *InventoryUpsert) SetPrepareShipQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldPrepareShipQty, v)
	return u
}

// UpdatePrepareShipQty sets the "prepare_ship_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdatePrepareShipQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldPrepareShipQty)
	return u
}

// AddPrepareShipQty adds v to the "prepare_ship_qty" field.
func (u *InventoryUpsert) AddPrepareShipQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldPrepareShipQty, v)
	return u
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (u *InventoryUpsert) SetPrepareShelveQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldPrepareShelveQty, v)
	return u
}

// UpdatePrepareShelveQty sets the "prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdatePrepareShelveQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldPrepareShelveQty)
	return u
}

// AddPrepareShelveQty adds v to the "prepare_shelve_qty" field.
func (u *InventoryUpsert) AddPrepareShelveQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldPrepareShelveQty, v)
	return u
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (u *InventoryUpsert) SetQuicktronStorageQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldQuicktronStorageQty, v)
	return u
}

// UpdateQuicktronStorageQty sets the "quicktron_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateQuicktronStorageQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldQuicktronStorageQty)
	return u
}

// AddQuicktronStorageQty adds v to the "quicktron_storage_qty" field.
func (u *InventoryUpsert) AddQuicktronStorageQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldQuicktronStorageQty, v)
	return u
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (u *InventoryUpsert) SetQuicktronAvailableQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldQuicktronAvailableQty, v)
	return u
}

// UpdateQuicktronAvailableQty sets the "quicktron_available_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateQuicktronAvailableQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldQuicktronAvailableQty)
	return u
}

// AddQuicktronAvailableQty adds v to the "quicktron_available_qty" field.
func (u *InventoryUpsert) AddQuicktronAvailableQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldQuicktronAvailableQty, v)
	return u
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsert) SetQuicktronPrepareOutboundQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldQuicktronPrepareOutboundQty, v)
	return u
}

// UpdateQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateQuicktronPrepareOutboundQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldQuicktronPrepareOutboundQty)
	return u
}

// AddQuicktronPrepareOutboundQty adds v to the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsert) AddQuicktronPrepareOutboundQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldQuicktronPrepareOutboundQty, v)
	return u
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsert) SetQuicktronPrepareShelveQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldQuicktronPrepareShelveQty, v)
	return u
}

// UpdateQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateQuicktronPrepareShelveQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldQuicktronPrepareShelveQty)
	return u
}

// AddQuicktronPrepareShelveQty adds v to the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsert) AddQuicktronPrepareShelveQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldQuicktronPrepareShelveQty, v)
	return u
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (u *InventoryUpsert) SetNormalStorageQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldNormalStorageQty, v)
	return u
}

// UpdateNormalStorageQty sets the "normal_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateNormalStorageQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldNormalStorageQty)
	return u
}

// AddNormalStorageQty adds v to the "normal_storage_qty" field.
func (u *InventoryUpsert) AddNormalStorageQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldNormalStorageQty, v)
	return u
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (u *InventoryUpsert) SetNormalAvailableQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldNormalAvailableQty, v)
	return u
}

// UpdateNormalAvailableQty sets the "normal_available_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateNormalAvailableQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldNormalAvailableQty)
	return u
}

// AddNormalAvailableQty adds v to the "normal_available_qty" field.
func (u *InventoryUpsert) AddNormalAvailableQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldNormalAvailableQty, v)
	return u
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsert) SetNormalPrepareOutboundQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldNormalPrepareOutboundQty, v)
	return u
}

// UpdateNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateNormalPrepareOutboundQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldNormalPrepareOutboundQty)
	return u
}

// AddNormalPrepareOutboundQty adds v to the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsert) AddNormalPrepareOutboundQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldNormalPrepareOutboundQty, v)
	return u
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsert) SetNormalPrepareShelveQty(v int32) *InventoryUpsert {
	u.Set(inventory.FieldNormalPrepareShelveQty, v)
	return u
}

// UpdateNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateNormalPrepareShelveQty() *InventoryUpsert {
	u.SetExcluded(inventory.FieldNormalPrepareShelveQty)
	return u
}

// AddNormalPrepareShelveQty adds v to the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsert) AddNormalPrepareShelveQty(v int32) *InventoryUpsert {
	u.Add(inventory.FieldNormalPrepareShelveQty, v)
	return u
}

// SetStatus sets the "status" field.
func (u *InventoryUpsert) SetStatus(v int8) *InventoryUpsert {
	u.Set(inventory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateStatus() *InventoryUpsert {
	u.SetExcluded(inventory.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *InventoryUpsert) AddStatus(v int8) *InventoryUpsert {
	u.Add(inventory.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inventory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InventoryUpsertOne) UpdateNewValues() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inventory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inventory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InventoryUpsertOne) Ignore() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertOne) DoNothing() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreate.OnConflict
// documentation for more info.
func (u *InventoryUpsertOne) Update(set func(*InventoryUpsert)) *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertOne) SetUpdatedAt(v time.Time) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateUpdatedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertOne) SetDeletedAt(v time.Time) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertOne) ClearDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsertOne) SetProductID(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateProductID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *InventoryUpsertOne) ClearProductID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearProductID()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InventoryUpsertOne) SetWarehouseID(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InventoryUpsertOne) AddWarehouseID(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateWarehouseID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetStorageQty sets the "storage_qty" field.
func (u *InventoryUpsertOne) SetStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetStorageQty(v)
	})
}

// AddStorageQty adds v to the "storage_qty" field.
func (u *InventoryUpsertOne) AddStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddStorageQty(v)
	})
}

// UpdateStorageQty sets the "storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateStorageQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateStorageQty()
	})
}

// SetAvailableQty sets the "available_qty" field.
func (u *InventoryUpsertOne) SetAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetAvailableQty(v)
	})
}

// AddAvailableQty adds v to the "available_qty" field.
func (u *InventoryUpsertOne) AddAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddAvailableQty(v)
	})
}

// UpdateAvailableQty sets the "available_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateAvailableQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateAvailableQty()
	})
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (u *InventoryUpsertOne) SetPrepareShipQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPrepareShipQty(v)
	})
}

// AddPrepareShipQty adds v to the "prepare_ship_qty" field.
func (u *InventoryUpsertOne) AddPrepareShipQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddPrepareShipQty(v)
	})
}

// UpdatePrepareShipQty sets the "prepare_ship_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdatePrepareShipQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePrepareShipQty()
	})
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (u *InventoryUpsertOne) SetPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPrepareShelveQty(v)
	})
}

// AddPrepareShelveQty adds v to the "prepare_shelve_qty" field.
func (u *InventoryUpsertOne) AddPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddPrepareShelveQty(v)
	})
}

// UpdatePrepareShelveQty sets the "prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdatePrepareShelveQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePrepareShelveQty()
	})
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (u *InventoryUpsertOne) SetQuicktronStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronStorageQty(v)
	})
}

// AddQuicktronStorageQty adds v to the "quicktron_storage_qty" field.
func (u *InventoryUpsertOne) AddQuicktronStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronStorageQty(v)
	})
}

// UpdateQuicktronStorageQty sets the "quicktron_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateQuicktronStorageQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronStorageQty()
	})
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (u *InventoryUpsertOne) SetQuicktronAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronAvailableQty(v)
	})
}

// AddQuicktronAvailableQty adds v to the "quicktron_available_qty" field.
func (u *InventoryUpsertOne) AddQuicktronAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronAvailableQty(v)
	})
}

// UpdateQuicktronAvailableQty sets the "quicktron_available_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateQuicktronAvailableQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronAvailableQty()
	})
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsertOne) SetQuicktronPrepareOutboundQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronPrepareOutboundQty(v)
	})
}

// AddQuicktronPrepareOutboundQty adds v to the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsertOne) AddQuicktronPrepareOutboundQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronPrepareOutboundQty(v)
	})
}

// UpdateQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateQuicktronPrepareOutboundQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronPrepareOutboundQty()
	})
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsertOne) SetQuicktronPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronPrepareShelveQty(v)
	})
}

// AddQuicktronPrepareShelveQty adds v to the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsertOne) AddQuicktronPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronPrepareShelveQty(v)
	})
}

// UpdateQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateQuicktronPrepareShelveQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronPrepareShelveQty()
	})
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (u *InventoryUpsertOne) SetNormalStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalStorageQty(v)
	})
}

// AddNormalStorageQty adds v to the "normal_storage_qty" field.
func (u *InventoryUpsertOne) AddNormalStorageQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalStorageQty(v)
	})
}

// UpdateNormalStorageQty sets the "normal_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateNormalStorageQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalStorageQty()
	})
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (u *InventoryUpsertOne) SetNormalAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalAvailableQty(v)
	})
}

// AddNormalAvailableQty adds v to the "normal_available_qty" field.
func (u *InventoryUpsertOne) AddNormalAvailableQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalAvailableQty(v)
	})
}

// UpdateNormalAvailableQty sets the "normal_available_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateNormalAvailableQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalAvailableQty()
	})
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsertOne) SetNormalPrepareOutboundQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalPrepareOutboundQty(v)
	})
}

// AddNormalPrepareOutboundQty adds v to the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsertOne) AddNormalPrepareOutboundQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalPrepareOutboundQty(v)
	})
}

// UpdateNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateNormalPrepareOutboundQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalPrepareOutboundQty()
	})
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsertOne) SetNormalPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalPrepareShelveQty(v)
	})
}

// AddNormalPrepareShelveQty adds v to the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsertOne) AddNormalPrepareShelveQty(v int32) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalPrepareShelveQty(v)
	})
}

// UpdateNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateNormalPrepareShelveQty() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalPrepareShelveQty()
	})
}

// SetStatus sets the "status" field.
func (u *InventoryUpsertOne) SetStatus(v int8) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InventoryUpsertOne) AddStatus(v int8) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateStatus() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *InventoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InventoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InventoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InventoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InventoryCreateBulk is the builder for creating many Inventory entities in bulk.
type InventoryCreateBulk struct {
	config
	builders []*InventoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Inventory entities in the database.
func (icb *InventoryCreateBulk) Save(ctx context.Context) ([]*Inventory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inventory, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InventoryCreateBulk) SaveX(ctx context.Context) []*Inventory {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InventoryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertBulk {
	icb.conflict = opts
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflictColumns(columns ...string) *InventoryUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// InventoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Inventory nodes.
type InventoryUpsertBulk struct {
	create *InventoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inventory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InventoryUpsertBulk) UpdateNewValues() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inventory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inventory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InventoryUpsertBulk) Ignore() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertBulk) DoNothing() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreateBulk.OnConflict
// documentation for more info.
func (u *InventoryUpsertBulk) Update(set func(*InventoryUpsert)) *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertBulk) SetUpdatedAt(v time.Time) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateUpdatedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertBulk) SetDeletedAt(v time.Time) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertBulk) ClearDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsertBulk) SetProductID(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateProductID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *InventoryUpsertBulk) ClearProductID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearProductID()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *InventoryUpsertBulk) SetWarehouseID(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *InventoryUpsertBulk) AddWarehouseID(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateWarehouseID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateWarehouseID()
	})
}

// SetStorageQty sets the "storage_qty" field.
func (u *InventoryUpsertBulk) SetStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetStorageQty(v)
	})
}

// AddStorageQty adds v to the "storage_qty" field.
func (u *InventoryUpsertBulk) AddStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddStorageQty(v)
	})
}

// UpdateStorageQty sets the "storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateStorageQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateStorageQty()
	})
}

// SetAvailableQty sets the "available_qty" field.
func (u *InventoryUpsertBulk) SetAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetAvailableQty(v)
	})
}

// AddAvailableQty adds v to the "available_qty" field.
func (u *InventoryUpsertBulk) AddAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddAvailableQty(v)
	})
}

// UpdateAvailableQty sets the "available_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateAvailableQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateAvailableQty()
	})
}

// SetPrepareShipQty sets the "prepare_ship_qty" field.
func (u *InventoryUpsertBulk) SetPrepareShipQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPrepareShipQty(v)
	})
}

// AddPrepareShipQty adds v to the "prepare_ship_qty" field.
func (u *InventoryUpsertBulk) AddPrepareShipQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddPrepareShipQty(v)
	})
}

// UpdatePrepareShipQty sets the "prepare_ship_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdatePrepareShipQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePrepareShipQty()
	})
}

// SetPrepareShelveQty sets the "prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) SetPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPrepareShelveQty(v)
	})
}

// AddPrepareShelveQty adds v to the "prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) AddPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddPrepareShelveQty(v)
	})
}

// UpdatePrepareShelveQty sets the "prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdatePrepareShelveQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePrepareShelveQty()
	})
}

// SetQuicktronStorageQty sets the "quicktron_storage_qty" field.
func (u *InventoryUpsertBulk) SetQuicktronStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronStorageQty(v)
	})
}

// AddQuicktronStorageQty adds v to the "quicktron_storage_qty" field.
func (u *InventoryUpsertBulk) AddQuicktronStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronStorageQty(v)
	})
}

// UpdateQuicktronStorageQty sets the "quicktron_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateQuicktronStorageQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronStorageQty()
	})
}

// SetQuicktronAvailableQty sets the "quicktron_available_qty" field.
func (u *InventoryUpsertBulk) SetQuicktronAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronAvailableQty(v)
	})
}

// AddQuicktronAvailableQty adds v to the "quicktron_available_qty" field.
func (u *InventoryUpsertBulk) AddQuicktronAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronAvailableQty(v)
	})
}

// UpdateQuicktronAvailableQty sets the "quicktron_available_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateQuicktronAvailableQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronAvailableQty()
	})
}

// SetQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsertBulk) SetQuicktronPrepareOutboundQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronPrepareOutboundQty(v)
	})
}

// AddQuicktronPrepareOutboundQty adds v to the "quicktron_prepare_outbound_qty" field.
func (u *InventoryUpsertBulk) AddQuicktronPrepareOutboundQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronPrepareOutboundQty(v)
	})
}

// UpdateQuicktronPrepareOutboundQty sets the "quicktron_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateQuicktronPrepareOutboundQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronPrepareOutboundQty()
	})
}

// SetQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) SetQuicktronPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuicktronPrepareShelveQty(v)
	})
}

// AddQuicktronPrepareShelveQty adds v to the "quicktron_prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) AddQuicktronPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuicktronPrepareShelveQty(v)
	})
}

// UpdateQuicktronPrepareShelveQty sets the "quicktron_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateQuicktronPrepareShelveQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuicktronPrepareShelveQty()
	})
}

// SetNormalStorageQty sets the "normal_storage_qty" field.
func (u *InventoryUpsertBulk) SetNormalStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalStorageQty(v)
	})
}

// AddNormalStorageQty adds v to the "normal_storage_qty" field.
func (u *InventoryUpsertBulk) AddNormalStorageQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalStorageQty(v)
	})
}

// UpdateNormalStorageQty sets the "normal_storage_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateNormalStorageQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalStorageQty()
	})
}

// SetNormalAvailableQty sets the "normal_available_qty" field.
func (u *InventoryUpsertBulk) SetNormalAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalAvailableQty(v)
	})
}

// AddNormalAvailableQty adds v to the "normal_available_qty" field.
func (u *InventoryUpsertBulk) AddNormalAvailableQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalAvailableQty(v)
	})
}

// UpdateNormalAvailableQty sets the "normal_available_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateNormalAvailableQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalAvailableQty()
	})
}

// SetNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsertBulk) SetNormalPrepareOutboundQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalPrepareOutboundQty(v)
	})
}

// AddNormalPrepareOutboundQty adds v to the "normal_prepare_outbound_qty" field.
func (u *InventoryUpsertBulk) AddNormalPrepareOutboundQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalPrepareOutboundQty(v)
	})
}

// UpdateNormalPrepareOutboundQty sets the "normal_prepare_outbound_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateNormalPrepareOutboundQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalPrepareOutboundQty()
	})
}

// SetNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) SetNormalPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetNormalPrepareShelveQty(v)
	})
}

// AddNormalPrepareShelveQty adds v to the "normal_prepare_shelve_qty" field.
func (u *InventoryUpsertBulk) AddNormalPrepareShelveQty(v int32) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddNormalPrepareShelveQty(v)
	})
}

// UpdateNormalPrepareShelveQty sets the "normal_prepare_shelve_qty" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateNormalPrepareShelveQty() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateNormalPrepareShelveQty()
	})
}

// SetStatus sets the "status" field.
func (u *InventoryUpsertBulk) SetStatus(v int8) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InventoryUpsertBulk) AddStatus(v int8) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateStatus() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *InventoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the InventoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InventoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
