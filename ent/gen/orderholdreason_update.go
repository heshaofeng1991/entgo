// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderholdreason"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// OrderHoldReasonUpdate is the builder for updating OrderHoldReason entities.
type OrderHoldReasonUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderHoldReasonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderHoldReasonUpdate builder.
func (ohru *OrderHoldReasonUpdate) Where(ps ...predicate.OrderHoldReason) *OrderHoldReasonUpdate {
	ohru.mutation.Where(ps...)
	return ohru
}

// SetOrderID sets the "order_id" field.
func (ohru *OrderHoldReasonUpdate) SetOrderID(i int64) *OrderHoldReasonUpdate {
	ohru.mutation.SetOrderID(i)
	return ohru
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ohru *OrderHoldReasonUpdate) SetNillableOrderID(i *int64) *OrderHoldReasonUpdate {
	if i != nil {
		ohru.SetOrderID(*i)
	}
	return ohru
}

// ClearOrderID clears the value of the "order_id" field.
func (ohru *OrderHoldReasonUpdate) ClearOrderID() *OrderHoldReasonUpdate {
	ohru.mutation.ClearOrderID()
	return ohru
}

// SetProductID sets the "product_id" field.
func (ohru *OrderHoldReasonUpdate) SetProductID(i int64) *OrderHoldReasonUpdate {
	ohru.mutation.ResetProductID()
	ohru.mutation.SetProductID(i)
	return ohru
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ohru *OrderHoldReasonUpdate) SetNillableProductID(i *int64) *OrderHoldReasonUpdate {
	if i != nil {
		ohru.SetProductID(*i)
	}
	return ohru
}

// AddProductID adds i to the "product_id" field.
func (ohru *OrderHoldReasonUpdate) AddProductID(i int64) *OrderHoldReasonUpdate {
	ohru.mutation.AddProductID(i)
	return ohru
}

// ClearProductID clears the value of the "product_id" field.
func (ohru *OrderHoldReasonUpdate) ClearProductID() *OrderHoldReasonUpdate {
	ohru.mutation.ClearProductID()
	return ohru
}

// SetType sets the "type" field.
func (ohru *OrderHoldReasonUpdate) SetType(s string) *OrderHoldReasonUpdate {
	ohru.mutation.SetType(s)
	return ohru
}

// SetCode sets the "code" field.
func (ohru *OrderHoldReasonUpdate) SetCode(i int32) *OrderHoldReasonUpdate {
	ohru.mutation.ResetCode()
	ohru.mutation.SetCode(i)
	return ohru
}

// AddCode adds i to the "code" field.
func (ohru *OrderHoldReasonUpdate) AddCode(i int32) *OrderHoldReasonUpdate {
	ohru.mutation.AddCode(i)
	return ohru
}

// SetReason sets the "reason" field.
func (ohru *OrderHoldReasonUpdate) SetReason(s string) *OrderHoldReasonUpdate {
	ohru.mutation.SetReason(s)
	return ohru
}

// SetEnReason sets the "en_reason" field.
func (ohru *OrderHoldReasonUpdate) SetEnReason(s string) *OrderHoldReasonUpdate {
	ohru.mutation.SetEnReason(s)
	return ohru
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (ohru *OrderHoldReasonUpdate) SetOrdersID(id int64) *OrderHoldReasonUpdate {
	ohru.mutation.SetOrdersID(id)
	return ohru
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (ohru *OrderHoldReasonUpdate) SetNillableOrdersID(id *int64) *OrderHoldReasonUpdate {
	if id != nil {
		ohru = ohru.SetOrdersID(*id)
	}
	return ohru
}

// SetOrders sets the "orders" edge to the Order entity.
func (ohru *OrderHoldReasonUpdate) SetOrders(o *Order) *OrderHoldReasonUpdate {
	return ohru.SetOrdersID(o.ID)
}

// Mutation returns the OrderHoldReasonMutation object of the builder.
func (ohru *OrderHoldReasonUpdate) Mutation() *OrderHoldReasonMutation {
	return ohru.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (ohru *OrderHoldReasonUpdate) ClearOrders() *OrderHoldReasonUpdate {
	ohru.mutation.ClearOrders()
	return ohru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohru *OrderHoldReasonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ohru.hooks) == 0 {
		affected, err = ohru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderHoldReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ohru.mutation = mutation
			affected, err = ohru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ohru.hooks) - 1; i >= 0; i-- {
			if ohru.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ohru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ohru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ohru *OrderHoldReasonUpdate) SaveX(ctx context.Context) int {
	affected, err := ohru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohru *OrderHoldReasonUpdate) Exec(ctx context.Context) error {
	_, err := ohru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohru *OrderHoldReasonUpdate) ExecX(ctx context.Context) {
	if err := ohru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ohru *OrderHoldReasonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderHoldReasonUpdate {
	ohru.modifiers = append(ohru.modifiers, modifiers...)
	return ohru
}

func (ohru *OrderHoldReasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderholdreason.Table,
			Columns: orderholdreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderholdreason.FieldID,
			},
		},
	}
	if ps := ohru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohru.mutation.ProductID(); ok {
		_spec.SetField(orderholdreason.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := ohru.mutation.AddedProductID(); ok {
		_spec.AddField(orderholdreason.FieldProductID, field.TypeInt64, value)
	}
	if ohru.mutation.ProductIDCleared() {
		_spec.ClearField(orderholdreason.FieldProductID, field.TypeInt64)
	}
	if value, ok := ohru.mutation.GetType(); ok {
		_spec.SetField(orderholdreason.FieldType, field.TypeString, value)
	}
	if value, ok := ohru.mutation.Code(); ok {
		_spec.SetField(orderholdreason.FieldCode, field.TypeInt32, value)
	}
	if value, ok := ohru.mutation.AddedCode(); ok {
		_spec.AddField(orderholdreason.FieldCode, field.TypeInt32, value)
	}
	if value, ok := ohru.mutation.Reason(); ok {
		_spec.SetField(orderholdreason.FieldReason, field.TypeString, value)
	}
	if value, ok := ohru.mutation.EnReason(); ok {
		_spec.SetField(orderholdreason.FieldEnReason, field.TypeString, value)
	}
	if ohru.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderholdreason.OrdersTable,
			Columns: []string{orderholdreason.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = ohru.schemaConfig.OrderHoldReason
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohru.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderholdreason.OrdersTable,
			Columns: []string{orderholdreason.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = ohru.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ohru.schemaConfig.OrderHoldReason
	ctx = internal.NewSchemaConfigContext(ctx, ohru.schemaConfig)
	_spec.AddModifiers(ohru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ohru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderholdreason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderHoldReasonUpdateOne is the builder for updating a single OrderHoldReason entity.
type OrderHoldReasonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderHoldReasonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrderID sets the "order_id" field.
func (ohruo *OrderHoldReasonUpdateOne) SetOrderID(i int64) *OrderHoldReasonUpdateOne {
	ohruo.mutation.SetOrderID(i)
	return ohruo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ohruo *OrderHoldReasonUpdateOne) SetNillableOrderID(i *int64) *OrderHoldReasonUpdateOne {
	if i != nil {
		ohruo.SetOrderID(*i)
	}
	return ohruo
}

// ClearOrderID clears the value of the "order_id" field.
func (ohruo *OrderHoldReasonUpdateOne) ClearOrderID() *OrderHoldReasonUpdateOne {
	ohruo.mutation.ClearOrderID()
	return ohruo
}

// SetProductID sets the "product_id" field.
func (ohruo *OrderHoldReasonUpdateOne) SetProductID(i int64) *OrderHoldReasonUpdateOne {
	ohruo.mutation.ResetProductID()
	ohruo.mutation.SetProductID(i)
	return ohruo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ohruo *OrderHoldReasonUpdateOne) SetNillableProductID(i *int64) *OrderHoldReasonUpdateOne {
	if i != nil {
		ohruo.SetProductID(*i)
	}
	return ohruo
}

// AddProductID adds i to the "product_id" field.
func (ohruo *OrderHoldReasonUpdateOne) AddProductID(i int64) *OrderHoldReasonUpdateOne {
	ohruo.mutation.AddProductID(i)
	return ohruo
}

// ClearProductID clears the value of the "product_id" field.
func (ohruo *OrderHoldReasonUpdateOne) ClearProductID() *OrderHoldReasonUpdateOne {
	ohruo.mutation.ClearProductID()
	return ohruo
}

// SetType sets the "type" field.
func (ohruo *OrderHoldReasonUpdateOne) SetType(s string) *OrderHoldReasonUpdateOne {
	ohruo.mutation.SetType(s)
	return ohruo
}

// SetCode sets the "code" field.
func (ohruo *OrderHoldReasonUpdateOne) SetCode(i int32) *OrderHoldReasonUpdateOne {
	ohruo.mutation.ResetCode()
	ohruo.mutation.SetCode(i)
	return ohruo
}

// AddCode adds i to the "code" field.
func (ohruo *OrderHoldReasonUpdateOne) AddCode(i int32) *OrderHoldReasonUpdateOne {
	ohruo.mutation.AddCode(i)
	return ohruo
}

// SetReason sets the "reason" field.
func (ohruo *OrderHoldReasonUpdateOne) SetReason(s string) *OrderHoldReasonUpdateOne {
	ohruo.mutation.SetReason(s)
	return ohruo
}

// SetEnReason sets the "en_reason" field.
func (ohruo *OrderHoldReasonUpdateOne) SetEnReason(s string) *OrderHoldReasonUpdateOne {
	ohruo.mutation.SetEnReason(s)
	return ohruo
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (ohruo *OrderHoldReasonUpdateOne) SetOrdersID(id int64) *OrderHoldReasonUpdateOne {
	ohruo.mutation.SetOrdersID(id)
	return ohruo
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (ohruo *OrderHoldReasonUpdateOne) SetNillableOrdersID(id *int64) *OrderHoldReasonUpdateOne {
	if id != nil {
		ohruo = ohruo.SetOrdersID(*id)
	}
	return ohruo
}

// SetOrders sets the "orders" edge to the Order entity.
func (ohruo *OrderHoldReasonUpdateOne) SetOrders(o *Order) *OrderHoldReasonUpdateOne {
	return ohruo.SetOrdersID(o.ID)
}

// Mutation returns the OrderHoldReasonMutation object of the builder.
func (ohruo *OrderHoldReasonUpdateOne) Mutation() *OrderHoldReasonMutation {
	return ohruo.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (ohruo *OrderHoldReasonUpdateOne) ClearOrders() *OrderHoldReasonUpdateOne {
	ohruo.mutation.ClearOrders()
	return ohruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohruo *OrderHoldReasonUpdateOne) Select(field string, fields ...string) *OrderHoldReasonUpdateOne {
	ohruo.fields = append([]string{field}, fields...)
	return ohruo
}

// Save executes the query and returns the updated OrderHoldReason entity.
func (ohruo *OrderHoldReasonUpdateOne) Save(ctx context.Context) (*OrderHoldReason, error) {
	var (
		err  error
		node *OrderHoldReason
	)
	if len(ohruo.hooks) == 0 {
		node, err = ohruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderHoldReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ohruo.mutation = mutation
			node, err = ohruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ohruo.hooks) - 1; i >= 0; i-- {
			if ohruo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ohruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ohruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderHoldReason)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderHoldReasonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ohruo *OrderHoldReasonUpdateOne) SaveX(ctx context.Context) *OrderHoldReason {
	node, err := ohruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohruo *OrderHoldReasonUpdateOne) Exec(ctx context.Context) error {
	_, err := ohruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohruo *OrderHoldReasonUpdateOne) ExecX(ctx context.Context) {
	if err := ohruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ohruo *OrderHoldReasonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderHoldReasonUpdateOne {
	ohruo.modifiers = append(ohruo.modifiers, modifiers...)
	return ohruo
}

func (ohruo *OrderHoldReasonUpdateOne) sqlSave(ctx context.Context) (_node *OrderHoldReason, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderholdreason.Table,
			Columns: orderholdreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderholdreason.FieldID,
			},
		},
	}
	id, ok := ohruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "OrderHoldReason.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ohruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderholdreason.FieldID)
		for _, f := range fields {
			if !orderholdreason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != orderholdreason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohruo.mutation.ProductID(); ok {
		_spec.SetField(orderholdreason.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := ohruo.mutation.AddedProductID(); ok {
		_spec.AddField(orderholdreason.FieldProductID, field.TypeInt64, value)
	}
	if ohruo.mutation.ProductIDCleared() {
		_spec.ClearField(orderholdreason.FieldProductID, field.TypeInt64)
	}
	if value, ok := ohruo.mutation.GetType(); ok {
		_spec.SetField(orderholdreason.FieldType, field.TypeString, value)
	}
	if value, ok := ohruo.mutation.Code(); ok {
		_spec.SetField(orderholdreason.FieldCode, field.TypeInt32, value)
	}
	if value, ok := ohruo.mutation.AddedCode(); ok {
		_spec.AddField(orderholdreason.FieldCode, field.TypeInt32, value)
	}
	if value, ok := ohruo.mutation.Reason(); ok {
		_spec.SetField(orderholdreason.FieldReason, field.TypeString, value)
	}
	if value, ok := ohruo.mutation.EnReason(); ok {
		_spec.SetField(orderholdreason.FieldEnReason, field.TypeString, value)
	}
	if ohruo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderholdreason.OrdersTable,
			Columns: []string{orderholdreason.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = ohruo.schemaConfig.OrderHoldReason
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohruo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderholdreason.OrdersTable,
			Columns: []string{orderholdreason.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = ohruo.schemaConfig.OrderHoldReason
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ohruo.schemaConfig.OrderHoldReason
	ctx = internal.NewSchemaConfigContext(ctx, ohruo.schemaConfig)
	_spec.AddModifiers(ohruo.modifiers...)
	_node = &OrderHoldReason{config: ohruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderholdreason.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
