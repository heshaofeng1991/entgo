// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/valueaddedtax"
)

// ValueAddedTaxUpdate is the builder for updating ValueAddedTax entities.
type ValueAddedTaxUpdate struct {
	config
	hooks     []Hook
	mutation  *ValueAddedTaxMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ValueAddedTaxUpdate builder.
func (vatu *ValueAddedTaxUpdate) Where(ps ...predicate.ValueAddedTax) *ValueAddedTaxUpdate {
	vatu.mutation.Where(ps...)
	return vatu
}

// SetUpdatedAt sets the "updated_at" field.
func (vatu *ValueAddedTaxUpdate) SetUpdatedAt(t time.Time) *ValueAddedTaxUpdate {
	vatu.mutation.SetUpdatedAt(t)
	return vatu
}

// SetDeletedAt sets the "deleted_at" field.
func (vatu *ValueAddedTaxUpdate) SetDeletedAt(t time.Time) *ValueAddedTaxUpdate {
	vatu.mutation.SetDeletedAt(t)
	return vatu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vatu *ValueAddedTaxUpdate) SetNillableDeletedAt(t *time.Time) *ValueAddedTaxUpdate {
	if t != nil {
		vatu.SetDeletedAt(*t)
	}
	return vatu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vatu *ValueAddedTaxUpdate) ClearDeletedAt() *ValueAddedTaxUpdate {
	vatu.mutation.ClearDeletedAt()
	return vatu
}

// SetCountryCode sets the "country_code" field.
func (vatu *ValueAddedTaxUpdate) SetCountryCode(s string) *ValueAddedTaxUpdate {
	vatu.mutation.SetCountryCode(s)
	return vatu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vatu *ValueAddedTaxUpdate) SetNillableCountryCode(s *string) *ValueAddedTaxUpdate {
	if s != nil {
		vatu.SetCountryCode(*s)
	}
	return vatu
}

// SetStandardRate sets the "standard_rate" field.
func (vatu *ValueAddedTaxUpdate) SetStandardRate(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.ResetStandardRate()
	vatu.mutation.SetStandardRate(f)
	return vatu
}

// SetNillableStandardRate sets the "standard_rate" field if the given value is not nil.
func (vatu *ValueAddedTaxUpdate) SetNillableStandardRate(f *float64) *ValueAddedTaxUpdate {
	if f != nil {
		vatu.SetStandardRate(*f)
	}
	return vatu
}

// AddStandardRate adds f to the "standard_rate" field.
func (vatu *ValueAddedTaxUpdate) AddStandardRate(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.AddStandardRate(f)
	return vatu
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (vatu *ValueAddedTaxUpdate) SetWithoutIossRate(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.ResetWithoutIossRate()
	vatu.mutation.SetWithoutIossRate(f)
	return vatu
}

// SetNillableWithoutIossRate sets the "without_ioss_rate" field if the given value is not nil.
func (vatu *ValueAddedTaxUpdate) SetNillableWithoutIossRate(f *float64) *ValueAddedTaxUpdate {
	if f != nil {
		vatu.SetWithoutIossRate(*f)
	}
	return vatu
}

// AddWithoutIossRate adds f to the "without_ioss_rate" field.
func (vatu *ValueAddedTaxUpdate) AddWithoutIossRate(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.AddWithoutIossRate(f)
	return vatu
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (vatu *ValueAddedTaxUpdate) SetExemptionInUsd(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.ResetExemptionInUsd()
	vatu.mutation.SetExemptionInUsd(f)
	return vatu
}

// SetNillableExemptionInUsd sets the "exemption_in_usd" field if the given value is not nil.
func (vatu *ValueAddedTaxUpdate) SetNillableExemptionInUsd(f *float64) *ValueAddedTaxUpdate {
	if f != nil {
		vatu.SetExemptionInUsd(*f)
	}
	return vatu
}

// AddExemptionInUsd adds f to the "exemption_in_usd" field.
func (vatu *ValueAddedTaxUpdate) AddExemptionInUsd(f float64) *ValueAddedTaxUpdate {
	vatu.mutation.AddExemptionInUsd(f)
	return vatu
}

// Mutation returns the ValueAddedTaxMutation object of the builder.
func (vatu *ValueAddedTaxUpdate) Mutation() *ValueAddedTaxMutation {
	return vatu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vatu *ValueAddedTaxUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vatu.defaults()
	if len(vatu.hooks) == 0 {
		affected, err = vatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValueAddedTaxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vatu.mutation = mutation
			affected, err = vatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vatu.hooks) - 1; i >= 0; i-- {
			if vatu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vatu *ValueAddedTaxUpdate) SaveX(ctx context.Context) int {
	affected, err := vatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vatu *ValueAddedTaxUpdate) Exec(ctx context.Context) error {
	_, err := vatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vatu *ValueAddedTaxUpdate) ExecX(ctx context.Context) {
	if err := vatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vatu *ValueAddedTaxUpdate) defaults() {
	if _, ok := vatu.mutation.UpdatedAt(); !ok {
		v := valueaddedtax.UpdateDefaultUpdatedAt()
		vatu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vatu *ValueAddedTaxUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ValueAddedTaxUpdate {
	vatu.modifiers = append(vatu.modifiers, modifiers...)
	return vatu
}

func (vatu *ValueAddedTaxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   valueaddedtax.Table,
			Columns: valueaddedtax.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: valueaddedtax.FieldID,
			},
		},
	}
	if ps := vatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vatu.mutation.UpdatedAt(); ok {
		_spec.SetField(valueaddedtax.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vatu.mutation.DeletedAt(); ok {
		_spec.SetField(valueaddedtax.FieldDeletedAt, field.TypeTime, value)
	}
	if vatu.mutation.DeletedAtCleared() {
		_spec.ClearField(valueaddedtax.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vatu.mutation.CountryCode(); ok {
		_spec.SetField(valueaddedtax.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := vatu.mutation.StandardRate(); ok {
		_spec.SetField(valueaddedtax.FieldStandardRate, field.TypeFloat64, value)
	}
	if value, ok := vatu.mutation.AddedStandardRate(); ok {
		_spec.AddField(valueaddedtax.FieldStandardRate, field.TypeFloat64, value)
	}
	if value, ok := vatu.mutation.WithoutIossRate(); ok {
		_spec.SetField(valueaddedtax.FieldWithoutIossRate, field.TypeFloat64, value)
	}
	if value, ok := vatu.mutation.AddedWithoutIossRate(); ok {
		_spec.AddField(valueaddedtax.FieldWithoutIossRate, field.TypeFloat64, value)
	}
	if value, ok := vatu.mutation.ExemptionInUsd(); ok {
		_spec.SetField(valueaddedtax.FieldExemptionInUsd, field.TypeFloat64, value)
	}
	if value, ok := vatu.mutation.AddedExemptionInUsd(); ok {
		_spec.AddField(valueaddedtax.FieldExemptionInUsd, field.TypeFloat64, value)
	}
	_spec.Node.Schema = vatu.schemaConfig.ValueAddedTax
	ctx = internal.NewSchemaConfigContext(ctx, vatu.schemaConfig)
	_spec.AddModifiers(vatu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{valueaddedtax.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ValueAddedTaxUpdateOne is the builder for updating a single ValueAddedTax entity.
type ValueAddedTaxUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ValueAddedTaxMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vatuo *ValueAddedTaxUpdateOne) SetUpdatedAt(t time.Time) *ValueAddedTaxUpdateOne {
	vatuo.mutation.SetUpdatedAt(t)
	return vatuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vatuo *ValueAddedTaxUpdateOne) SetDeletedAt(t time.Time) *ValueAddedTaxUpdateOne {
	vatuo.mutation.SetDeletedAt(t)
	return vatuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vatuo *ValueAddedTaxUpdateOne) SetNillableDeletedAt(t *time.Time) *ValueAddedTaxUpdateOne {
	if t != nil {
		vatuo.SetDeletedAt(*t)
	}
	return vatuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vatuo *ValueAddedTaxUpdateOne) ClearDeletedAt() *ValueAddedTaxUpdateOne {
	vatuo.mutation.ClearDeletedAt()
	return vatuo
}

// SetCountryCode sets the "country_code" field.
func (vatuo *ValueAddedTaxUpdateOne) SetCountryCode(s string) *ValueAddedTaxUpdateOne {
	vatuo.mutation.SetCountryCode(s)
	return vatuo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vatuo *ValueAddedTaxUpdateOne) SetNillableCountryCode(s *string) *ValueAddedTaxUpdateOne {
	if s != nil {
		vatuo.SetCountryCode(*s)
	}
	return vatuo
}

// SetStandardRate sets the "standard_rate" field.
func (vatuo *ValueAddedTaxUpdateOne) SetStandardRate(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.ResetStandardRate()
	vatuo.mutation.SetStandardRate(f)
	return vatuo
}

// SetNillableStandardRate sets the "standard_rate" field if the given value is not nil.
func (vatuo *ValueAddedTaxUpdateOne) SetNillableStandardRate(f *float64) *ValueAddedTaxUpdateOne {
	if f != nil {
		vatuo.SetStandardRate(*f)
	}
	return vatuo
}

// AddStandardRate adds f to the "standard_rate" field.
func (vatuo *ValueAddedTaxUpdateOne) AddStandardRate(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.AddStandardRate(f)
	return vatuo
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (vatuo *ValueAddedTaxUpdateOne) SetWithoutIossRate(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.ResetWithoutIossRate()
	vatuo.mutation.SetWithoutIossRate(f)
	return vatuo
}

// SetNillableWithoutIossRate sets the "without_ioss_rate" field if the given value is not nil.
func (vatuo *ValueAddedTaxUpdateOne) SetNillableWithoutIossRate(f *float64) *ValueAddedTaxUpdateOne {
	if f != nil {
		vatuo.SetWithoutIossRate(*f)
	}
	return vatuo
}

// AddWithoutIossRate adds f to the "without_ioss_rate" field.
func (vatuo *ValueAddedTaxUpdateOne) AddWithoutIossRate(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.AddWithoutIossRate(f)
	return vatuo
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (vatuo *ValueAddedTaxUpdateOne) SetExemptionInUsd(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.ResetExemptionInUsd()
	vatuo.mutation.SetExemptionInUsd(f)
	return vatuo
}

// SetNillableExemptionInUsd sets the "exemption_in_usd" field if the given value is not nil.
func (vatuo *ValueAddedTaxUpdateOne) SetNillableExemptionInUsd(f *float64) *ValueAddedTaxUpdateOne {
	if f != nil {
		vatuo.SetExemptionInUsd(*f)
	}
	return vatuo
}

// AddExemptionInUsd adds f to the "exemption_in_usd" field.
func (vatuo *ValueAddedTaxUpdateOne) AddExemptionInUsd(f float64) *ValueAddedTaxUpdateOne {
	vatuo.mutation.AddExemptionInUsd(f)
	return vatuo
}

// Mutation returns the ValueAddedTaxMutation object of the builder.
func (vatuo *ValueAddedTaxUpdateOne) Mutation() *ValueAddedTaxMutation {
	return vatuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vatuo *ValueAddedTaxUpdateOne) Select(field string, fields ...string) *ValueAddedTaxUpdateOne {
	vatuo.fields = append([]string{field}, fields...)
	return vatuo
}

// Save executes the query and returns the updated ValueAddedTax entity.
func (vatuo *ValueAddedTaxUpdateOne) Save(ctx context.Context) (*ValueAddedTax, error) {
	var (
		err  error
		node *ValueAddedTax
	)
	vatuo.defaults()
	if len(vatuo.hooks) == 0 {
		node, err = vatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValueAddedTaxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vatuo.mutation = mutation
			node, err = vatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vatuo.hooks) - 1; i >= 0; i-- {
			if vatuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vatuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vatuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ValueAddedTax)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ValueAddedTaxMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vatuo *ValueAddedTaxUpdateOne) SaveX(ctx context.Context) *ValueAddedTax {
	node, err := vatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vatuo *ValueAddedTaxUpdateOne) Exec(ctx context.Context) error {
	_, err := vatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vatuo *ValueAddedTaxUpdateOne) ExecX(ctx context.Context) {
	if err := vatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vatuo *ValueAddedTaxUpdateOne) defaults() {
	if _, ok := vatuo.mutation.UpdatedAt(); !ok {
		v := valueaddedtax.UpdateDefaultUpdatedAt()
		vatuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vatuo *ValueAddedTaxUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ValueAddedTaxUpdateOne {
	vatuo.modifiers = append(vatuo.modifiers, modifiers...)
	return vatuo
}

func (vatuo *ValueAddedTaxUpdateOne) sqlSave(ctx context.Context) (_node *ValueAddedTax, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   valueaddedtax.Table,
			Columns: valueaddedtax.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: valueaddedtax.FieldID,
			},
		},
	}
	id, ok := vatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ValueAddedTax.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, valueaddedtax.FieldID)
		for _, f := range fields {
			if !valueaddedtax.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != valueaddedtax.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vatuo.mutation.UpdatedAt(); ok {
		_spec.SetField(valueaddedtax.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vatuo.mutation.DeletedAt(); ok {
		_spec.SetField(valueaddedtax.FieldDeletedAt, field.TypeTime, value)
	}
	if vatuo.mutation.DeletedAtCleared() {
		_spec.ClearField(valueaddedtax.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vatuo.mutation.CountryCode(); ok {
		_spec.SetField(valueaddedtax.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := vatuo.mutation.StandardRate(); ok {
		_spec.SetField(valueaddedtax.FieldStandardRate, field.TypeFloat64, value)
	}
	if value, ok := vatuo.mutation.AddedStandardRate(); ok {
		_spec.AddField(valueaddedtax.FieldStandardRate, field.TypeFloat64, value)
	}
	if value, ok := vatuo.mutation.WithoutIossRate(); ok {
		_spec.SetField(valueaddedtax.FieldWithoutIossRate, field.TypeFloat64, value)
	}
	if value, ok := vatuo.mutation.AddedWithoutIossRate(); ok {
		_spec.AddField(valueaddedtax.FieldWithoutIossRate, field.TypeFloat64, value)
	}
	if value, ok := vatuo.mutation.ExemptionInUsd(); ok {
		_spec.SetField(valueaddedtax.FieldExemptionInUsd, field.TypeFloat64, value)
	}
	if value, ok := vatuo.mutation.AddedExemptionInUsd(); ok {
		_spec.AddField(valueaddedtax.FieldExemptionInUsd, field.TypeFloat64, value)
	}
	_spec.Node.Schema = vatuo.schemaConfig.ValueAddedTax
	ctx = internal.NewSchemaConfigContext(ctx, vatuo.schemaConfig)
	_spec.AddModifiers(vatuo.modifiers...)
	_node = &ValueAddedTax{config: vatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{valueaddedtax.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
