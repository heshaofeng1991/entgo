// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/heshaofeng1991/entgo/ent/gen"
)

// The AnnouncementsFunc type is an adapter to allow the use of ordinary
// function as Announcements mutator.
type AnnouncementsFunc func(context.Context, *gen.AnnouncementsMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f AnnouncementsFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.AnnouncementsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.AnnouncementsMutation", m)
	}
	return f(ctx, mv)
}

// The AttributeFunc type is an adapter to allow the use of ordinary
// function as Attribute mutator.
type AttributeFunc func(context.Context, *gen.AttributeMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f AttributeFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.AttributeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.AttributeMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelFunc type is an adapter to allow the use of ordinary
// function as Channel mutator.
type ChannelFunc func(context.Context, *gen.ChannelMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelCostFunc type is an adapter to allow the use of ordinary
// function as ChannelCost mutator.
type ChannelCostFunc func(context.Context, *gen.ChannelCostMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelCostFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelCostMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelCostMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelCostBatcheFunc type is an adapter to allow the use of ordinary
// function as ChannelCostBatche mutator.
type ChannelCostBatcheFunc func(context.Context, *gen.ChannelCostBatcheMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelCostBatcheFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelCostBatcheMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelCostBatcheMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelOptionFunc type is an adapter to allow the use of ordinary
// function as ChannelOption mutator.
type ChannelOptionFunc func(context.Context, *gen.ChannelOptionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelOptionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelOptionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelOptionMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelRecommendFunc type is an adapter to allow the use of ordinary
// function as ChannelRecommend mutator.
type ChannelRecommendFunc func(context.Context, *gen.ChannelRecommendMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelRecommendFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelRecommendMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelRecommendMutation", m)
	}
	return f(ctx, mv)
}

// The ChannelVolumeFactorFunc type is an adapter to allow the use of ordinary
// function as ChannelVolumeFactor mutator.
type ChannelVolumeFactorFunc func(context.Context, *gen.ChannelVolumeFactorMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ChannelVolumeFactorFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ChannelVolumeFactorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ChannelVolumeFactorMutation", m)
	}
	return f(ctx, mv)
}

// The CountryFunc type is an adapter to allow the use of ordinary
// function as Country mutator.
type CountryFunc func(context.Context, *gen.CountryMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CountryFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.CountryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CountryMutation", m)
	}
	return f(ctx, mv)
}

// The CountryZoneFunc type is an adapter to allow the use of ordinary
// function as CountryZone mutator.
type CountryZoneFunc func(context.Context, *gen.CountryZoneMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CountryZoneFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.CountryZoneMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CountryZoneMutation", m)
	}
	return f(ctx, mv)
}

// The CourierOrderFunc type is an adapter to allow the use of ordinary
// function as CourierOrder mutator.
type CourierOrderFunc func(context.Context, *gen.CourierOrderMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CourierOrderFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.CourierOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CourierOrderMutation", m)
	}
	return f(ctx, mv)
}

// The CustomerConfigFunc type is an adapter to allow the use of ordinary
// function as CustomerConfig mutator.
type CustomerConfigFunc func(context.Context, *gen.CustomerConfigMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerConfigFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.CustomerConfigMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.CustomerConfigMutation", m)
	}
	return f(ctx, mv)
}

// The InboundFunc type is an adapter to allow the use of ordinary
// function as Inbound mutator.
type InboundFunc func(context.Context, *gen.InboundMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f InboundFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.InboundMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.InboundMutation", m)
	}
	return f(ctx, mv)
}

// The InboundItemFunc type is an adapter to allow the use of ordinary
// function as InboundItem mutator.
type InboundItemFunc func(context.Context, *gen.InboundItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f InboundItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.InboundItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.InboundItemMutation", m)
	}
	return f(ctx, mv)
}

// The InventoryFunc type is an adapter to allow the use of ordinary
// function as Inventory mutator.
type InventoryFunc func(context.Context, *gen.InventoryMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.InventoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.InventoryMutation", m)
	}
	return f(ctx, mv)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *gen.OrderMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.OrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderMutation", m)
	}
	return f(ctx, mv)
}

// The OrderHoldReasonFunc type is an adapter to allow the use of ordinary
// function as OrderHoldReason mutator.
type OrderHoldReasonFunc func(context.Context, *gen.OrderHoldReasonMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderHoldReasonFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.OrderHoldReasonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderHoldReasonMutation", m)
	}
	return f(ctx, mv)
}

// The OrderItemFunc type is an adapter to allow the use of ordinary
// function as OrderItem mutator.
type OrderItemFunc func(context.Context, *gen.OrderItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.OrderItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderItemMutation", m)
	}
	return f(ctx, mv)
}

// The OrderTaxationFunc type is an adapter to allow the use of ordinary
// function as OrderTaxation mutator.
type OrderTaxationFunc func(context.Context, *gen.OrderTaxationMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f OrderTaxationFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.OrderTaxationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.OrderTaxationMutation", m)
	}
	return f(ctx, mv)
}

// The PickupOrderFunc type is an adapter to allow the use of ordinary
// function as PickupOrder mutator.
type PickupOrderFunc func(context.Context, *gen.PickupOrderMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f PickupOrderFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.PickupOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.PickupOrderMutation", m)
	}
	return f(ctx, mv)
}

// The PickupOrderItemFunc type is an adapter to allow the use of ordinary
// function as PickupOrderItem mutator.
type PickupOrderItemFunc func(context.Context, *gen.PickupOrderItemMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f PickupOrderItemFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.PickupOrderItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.PickupOrderItemMutation", m)
	}
	return f(ctx, mv)
}

// The PlatformProductFunc type is an adapter to allow the use of ordinary
// function as PlatformProduct mutator.
type PlatformProductFunc func(context.Context, *gen.PlatformProductMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f PlatformProductFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.PlatformProductMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.PlatformProductMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *gen.ProductMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ProductMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ProductMutation", m)
	}
	return f(ctx, mv)
}

// The ProductMappingFunc type is an adapter to allow the use of ordinary
// function as ProductMapping mutator.
type ProductMappingFunc func(context.Context, *gen.ProductMappingMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ProductMappingFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ProductMappingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ProductMappingMutation", m)
	}
	return f(ctx, mv)
}

// The SequenceFunc type is an adapter to allow the use of ordinary
// function as Sequence mutator.
type SequenceFunc func(context.Context, *gen.SequenceMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f SequenceFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.SequenceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.SequenceMutation", m)
	}
	return f(ctx, mv)
}

// The StoreFunc type is an adapter to allow the use of ordinary
// function as Store mutator.
type StoreFunc func(context.Context, *gen.StoreMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f StoreFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.StoreMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.StoreMutation", m)
	}
	return f(ctx, mv)
}

// The TaskScheduleFunc type is an adapter to allow the use of ordinary
// function as TaskSchedule mutator.
type TaskScheduleFunc func(context.Context, *gen.TaskScheduleMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TaskScheduleFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TaskScheduleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TaskScheduleMutation", m)
	}
	return f(ctx, mv)
}

// The TenantFunc type is an adapter to allow the use of ordinary
// function as Tenant mutator.
type TenantFunc func(context.Context, *gen.TenantMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TenantFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TenantMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TenantMutation", m)
	}
	return f(ctx, mv)
}

// The TokenFunc type is an adapter to allow the use of ordinary
// function as Token mutator.
type TokenFunc func(context.Context, *gen.TokenMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TokenFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TokenMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TokenMutation", m)
	}
	return f(ctx, mv)
}

// The TrackMappingFunc type is an adapter to allow the use of ordinary
// function as TrackMapping mutator.
type TrackMappingFunc func(context.Context, *gen.TrackMappingMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TrackMappingFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TrackMappingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TrackMappingMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionFunc type is an adapter to allow the use of ordinary
// function as Transaction mutator.
type TransactionFunc func(context.Context, *gen.TransactionMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TransactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TransactionMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionDetailFunc type is an adapter to allow the use of ordinary
// function as TransactionDetail mutator.
type TransactionDetailFunc func(context.Context, *gen.TransactionDetailMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionDetailFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.TransactionDetailMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.TransactionDetailMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *gen.UserMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserMutation", m)
	}
	return f(ctx, mv)
}

// The UserReferralFunc type is an adapter to allow the use of ordinary
// function as UserReferral mutator.
type UserReferralFunc func(context.Context, *gen.UserReferralMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f UserReferralFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.UserReferralMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.UserReferralMutation", m)
	}
	return f(ctx, mv)
}

// The ValueAddedTaxFunc type is an adapter to allow the use of ordinary
// function as ValueAddedTax mutator.
type ValueAddedTaxFunc func(context.Context, *gen.ValueAddedTaxMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f ValueAddedTaxFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.ValueAddedTaxMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.ValueAddedTaxMutation", m)
	}
	return f(ctx, mv)
}

// The WarehouseFunc type is an adapter to allow the use of ordinary
// function as Warehouse mutator.
type WarehouseFunc func(context.Context, *gen.WarehouseMutation) (gen.Value, error)

// Mutate calls f(ctx, m).
func (f WarehouseFunc) Mutate(ctx context.Context, m gen.Mutation) (gen.Value, error) {
	mv, ok := m.(*gen.WarehouseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *gen.WarehouseMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, gen.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m gen.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op gen.Op) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m gen.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk gen.Hook, cond Condition) gen.Hook {
	return func(next gen.Mutator) gen.Mutator {
		return gen.MutateFunc(func(ctx context.Context, m gen.Mutation) (gen.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, gen.Delete|gen.Create)
func On(hk gen.Hook, op gen.Op) gen.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, gen.Update|gen.UpdateOne)
func Unless(hk gen.Hook, op gen.Op) gen.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) gen.Hook {
	return func(gen.Mutator) gen.Mutator {
		return gen.MutateFunc(func(context.Context, gen.Mutation) (gen.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []gen.Hook {
//		return []gen.Hook{
//			Reject(gen.Delete|gen.Update),
//		}
//	}
func Reject(op gen.Op) gen.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []gen.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...gen.Hook) Chain {
	return Chain{append([]gen.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() gen.Hook {
	return func(mutator gen.Mutator) gen.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...gen.Hook) Chain {
	newHooks := make([]gen.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
