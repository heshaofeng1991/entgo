// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporder"
)

// PickupOrderCreate is the builder for creating a PickupOrder entity.
type PickupOrderCreate struct {
	config
	mutation *PickupOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (poc *PickupOrderCreate) SetCreatedAt(t time.Time) *PickupOrderCreate {
	poc.mutation.SetCreatedAt(t)
	return poc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableCreatedAt(t *time.Time) *PickupOrderCreate {
	if t != nil {
		poc.SetCreatedAt(*t)
	}
	return poc
}

// SetUpdatedAt sets the "updated_at" field.
func (poc *PickupOrderCreate) SetUpdatedAt(t time.Time) *PickupOrderCreate {
	poc.mutation.SetUpdatedAt(t)
	return poc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableUpdatedAt(t *time.Time) *PickupOrderCreate {
	if t != nil {
		poc.SetUpdatedAt(*t)
	}
	return poc
}

// SetDeletedAt sets the "deleted_at" field.
func (poc *PickupOrderCreate) SetDeletedAt(t time.Time) *PickupOrderCreate {
	poc.mutation.SetDeletedAt(t)
	return poc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableDeletedAt(t *time.Time) *PickupOrderCreate {
	if t != nil {
		poc.SetDeletedAt(*t)
	}
	return poc
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (poc *PickupOrderCreate) SetRequestedPickupAt(t time.Time) *PickupOrderCreate {
	poc.mutation.SetRequestedPickupAt(t)
	return poc
}

// SetNillableRequestedPickupAt sets the "requested_pickup_at" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableRequestedPickupAt(t *time.Time) *PickupOrderCreate {
	if t != nil {
		poc.SetRequestedPickupAt(*t)
	}
	return poc
}

// SetStatus sets the "status" field.
func (poc *PickupOrderCreate) SetStatus(i int8) *PickupOrderCreate {
	poc.mutation.SetStatus(i)
	return poc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableStatus(i *int8) *PickupOrderCreate {
	if i != nil {
		poc.SetStatus(*i)
	}
	return poc
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (poc *PickupOrderCreate) SetSenderAddressInfo(s string) *PickupOrderCreate {
	poc.mutation.SetSenderAddressInfo(s)
	return poc
}

// SetNillableSenderAddressInfo sets the "sender_address_info" field if the given value is not nil.
func (poc *PickupOrderCreate) SetNillableSenderAddressInfo(s *string) *PickupOrderCreate {
	if s != nil {
		poc.SetSenderAddressInfo(*s)
	}
	return poc
}

// SetID sets the "id" field.
func (poc *PickupOrderCreate) SetID(i int64) *PickupOrderCreate {
	poc.mutation.SetID(i)
	return poc
}

// Mutation returns the PickupOrderMutation object of the builder.
func (poc *PickupOrderCreate) Mutation() *PickupOrderMutation {
	return poc.mutation
}

// Save creates the PickupOrder in the database.
func (poc *PickupOrderCreate) Save(ctx context.Context) (*PickupOrder, error) {
	var (
		err  error
		node *PickupOrder
	)
	poc.defaults()
	if len(poc.hooks) == 0 {
		if err = poc.check(); err != nil {
			return nil, err
		}
		node, err = poc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = poc.check(); err != nil {
				return nil, err
			}
			poc.mutation = mutation
			if node, err = poc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(poc.hooks) - 1; i >= 0; i-- {
			if poc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = poc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, poc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PickupOrder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PickupOrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PickupOrderCreate) SaveX(ctx context.Context) *PickupOrder {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PickupOrderCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PickupOrderCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PickupOrderCreate) defaults() {
	if _, ok := poc.mutation.CreatedAt(); !ok {
		v := pickuporder.DefaultCreatedAt()
		poc.mutation.SetCreatedAt(v)
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		v := pickuporder.DefaultUpdatedAt()
		poc.mutation.SetUpdatedAt(v)
	}
	if _, ok := poc.mutation.Status(); !ok {
		v := pickuporder.DefaultStatus
		poc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PickupOrderCreate) check() error {
	if _, ok := poc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "PickupOrder.created_at"`)}
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "PickupOrder.updated_at"`)}
	}
	if _, ok := poc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "PickupOrder.status"`)}
	}
	return nil
}

func (poc *PickupOrderCreate) sqlSave(ctx context.Context) (*PickupOrder, error) {
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (poc *PickupOrderCreate) createSpec() (*PickupOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PickupOrder{config: poc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pickuporder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporder.FieldID,
			},
		}
	)
	_spec.Schema = poc.schemaConfig.PickupOrder
	_spec.OnConflict = poc.conflict
	if id, ok := poc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.SetField(pickuporder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := poc.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := poc.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := poc.mutation.RequestedPickupAt(); ok {
		_spec.SetField(pickuporder.FieldRequestedPickupAt, field.TypeTime, value)
		_node.RequestedPickupAt = value
	}
	if value, ok := poc.mutation.Status(); ok {
		_spec.SetField(pickuporder.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := poc.mutation.SenderAddressInfo(); ok {
		_spec.SetField(pickuporder.FieldSenderAddressInfo, field.TypeString, value)
		_node.SenderAddressInfo = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PickupOrder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PickupOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (poc *PickupOrderCreate) OnConflict(opts ...sql.ConflictOption) *PickupOrderUpsertOne {
	poc.conflict = opts
	return &PickupOrderUpsertOne{
		create: poc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poc *PickupOrderCreate) OnConflictColumns(columns ...string) *PickupOrderUpsertOne {
	poc.conflict = append(poc.conflict, sql.ConflictColumns(columns...))
	return &PickupOrderUpsertOne{
		create: poc,
	}
}

type (
	// PickupOrderUpsertOne is the builder for "upsert"-ing
	//  one PickupOrder node.
	PickupOrderUpsertOne struct {
		create *PickupOrderCreate
	}

	// PickupOrderUpsert is the "OnConflict" setter.
	PickupOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderUpsert) SetUpdatedAt(v time.Time) *PickupOrderUpsert {
	u.Set(pickuporder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderUpsert) UpdateUpdatedAt() *PickupOrderUpsert {
	u.SetExcluded(pickuporder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderUpsert) SetDeletedAt(v time.Time) *PickupOrderUpsert {
	u.Set(pickuporder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderUpsert) UpdateDeletedAt() *PickupOrderUpsert {
	u.SetExcluded(pickuporder.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderUpsert) ClearDeletedAt() *PickupOrderUpsert {
	u.SetNull(pickuporder.FieldDeletedAt)
	return u
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (u *PickupOrderUpsert) SetRequestedPickupAt(v time.Time) *PickupOrderUpsert {
	u.Set(pickuporder.FieldRequestedPickupAt, v)
	return u
}

// UpdateRequestedPickupAt sets the "requested_pickup_at" field to the value that was provided on create.
func (u *PickupOrderUpsert) UpdateRequestedPickupAt() *PickupOrderUpsert {
	u.SetExcluded(pickuporder.FieldRequestedPickupAt)
	return u
}

// ClearRequestedPickupAt clears the value of the "requested_pickup_at" field.
func (u *PickupOrderUpsert) ClearRequestedPickupAt() *PickupOrderUpsert {
	u.SetNull(pickuporder.FieldRequestedPickupAt)
	return u
}

// SetStatus sets the "status" field.
func (u *PickupOrderUpsert) SetStatus(v int8) *PickupOrderUpsert {
	u.Set(pickuporder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PickupOrderUpsert) UpdateStatus() *PickupOrderUpsert {
	u.SetExcluded(pickuporder.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PickupOrderUpsert) AddStatus(v int8) *PickupOrderUpsert {
	u.Add(pickuporder.FieldStatus, v)
	return u
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (u *PickupOrderUpsert) SetSenderAddressInfo(v string) *PickupOrderUpsert {
	u.Set(pickuporder.FieldSenderAddressInfo, v)
	return u
}

// UpdateSenderAddressInfo sets the "sender_address_info" field to the value that was provided on create.
func (u *PickupOrderUpsert) UpdateSenderAddressInfo() *PickupOrderUpsert {
	u.SetExcluded(pickuporder.FieldSenderAddressInfo)
	return u
}

// ClearSenderAddressInfo clears the value of the "sender_address_info" field.
func (u *PickupOrderUpsert) ClearSenderAddressInfo() *PickupOrderUpsert {
	u.SetNull(pickuporder.FieldSenderAddressInfo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pickuporder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PickupOrderUpsertOne) UpdateNewValues() *PickupOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pickuporder.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pickuporder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PickupOrderUpsertOne) Ignore() *PickupOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PickupOrderUpsertOne) DoNothing() *PickupOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PickupOrderCreate.OnConflict
// documentation for more info.
func (u *PickupOrderUpsertOne) Update(set func(*PickupOrderUpsert)) *PickupOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PickupOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderUpsertOne) SetUpdatedAt(v time.Time) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderUpsertOne) UpdateUpdatedAt() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderUpsertOne) SetDeletedAt(v time.Time) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderUpsertOne) UpdateDeletedAt() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderUpsertOne) ClearDeletedAt() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (u *PickupOrderUpsertOne) SetRequestedPickupAt(v time.Time) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetRequestedPickupAt(v)
	})
}

// UpdateRequestedPickupAt sets the "requested_pickup_at" field to the value that was provided on create.
func (u *PickupOrderUpsertOne) UpdateRequestedPickupAt() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateRequestedPickupAt()
	})
}

// ClearRequestedPickupAt clears the value of the "requested_pickup_at" field.
func (u *PickupOrderUpsertOne) ClearRequestedPickupAt() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearRequestedPickupAt()
	})
}

// SetStatus sets the "status" field.
func (u *PickupOrderUpsertOne) SetStatus(v int8) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PickupOrderUpsertOne) AddStatus(v int8) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PickupOrderUpsertOne) UpdateStatus() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (u *PickupOrderUpsertOne) SetSenderAddressInfo(v string) *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetSenderAddressInfo(v)
	})
}

// UpdateSenderAddressInfo sets the "sender_address_info" field to the value that was provided on create.
func (u *PickupOrderUpsertOne) UpdateSenderAddressInfo() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateSenderAddressInfo()
	})
}

// ClearSenderAddressInfo clears the value of the "sender_address_info" field.
func (u *PickupOrderUpsertOne) ClearSenderAddressInfo() *PickupOrderUpsertOne {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearSenderAddressInfo()
	})
}

// Exec executes the query.
func (u *PickupOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PickupOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PickupOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PickupOrderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PickupOrderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PickupOrderCreateBulk is the builder for creating many PickupOrder entities in bulk.
type PickupOrderCreateBulk struct {
	config
	builders []*PickupOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the PickupOrder entities in the database.
func (pocb *PickupOrderCreateBulk) Save(ctx context.Context) ([]*PickupOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PickupOrder, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PickupOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PickupOrderCreateBulk) SaveX(ctx context.Context) []*PickupOrder {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PickupOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PickupOrderCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PickupOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PickupOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pocb *PickupOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *PickupOrderUpsertBulk {
	pocb.conflict = opts
	return &PickupOrderUpsertBulk{
		create: pocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pocb *PickupOrderCreateBulk) OnConflictColumns(columns ...string) *PickupOrderUpsertBulk {
	pocb.conflict = append(pocb.conflict, sql.ConflictColumns(columns...))
	return &PickupOrderUpsertBulk{
		create: pocb,
	}
}

// PickupOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of PickupOrder nodes.
type PickupOrderUpsertBulk struct {
	create *PickupOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pickuporder.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PickupOrderUpsertBulk) UpdateNewValues() *PickupOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pickuporder.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pickuporder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PickupOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PickupOrderUpsertBulk) Ignore() *PickupOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PickupOrderUpsertBulk) DoNothing() *PickupOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PickupOrderCreateBulk.OnConflict
// documentation for more info.
func (u *PickupOrderUpsertBulk) Update(set func(*PickupOrderUpsert)) *PickupOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PickupOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderUpsertBulk) SetUpdatedAt(v time.Time) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderUpsertBulk) UpdateUpdatedAt() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderUpsertBulk) SetDeletedAt(v time.Time) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderUpsertBulk) UpdateDeletedAt() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderUpsertBulk) ClearDeletedAt() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRequestedPickupAt sets the "requested_pickup_at" field.
func (u *PickupOrderUpsertBulk) SetRequestedPickupAt(v time.Time) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetRequestedPickupAt(v)
	})
}

// UpdateRequestedPickupAt sets the "requested_pickup_at" field to the value that was provided on create.
func (u *PickupOrderUpsertBulk) UpdateRequestedPickupAt() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateRequestedPickupAt()
	})
}

// ClearRequestedPickupAt clears the value of the "requested_pickup_at" field.
func (u *PickupOrderUpsertBulk) ClearRequestedPickupAt() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearRequestedPickupAt()
	})
}

// SetStatus sets the "status" field.
func (u *PickupOrderUpsertBulk) SetStatus(v int8) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PickupOrderUpsertBulk) AddStatus(v int8) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PickupOrderUpsertBulk) UpdateStatus() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetSenderAddressInfo sets the "sender_address_info" field.
func (u *PickupOrderUpsertBulk) SetSenderAddressInfo(v string) *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.SetSenderAddressInfo(v)
	})
}

// UpdateSenderAddressInfo sets the "sender_address_info" field to the value that was provided on create.
func (u *PickupOrderUpsertBulk) UpdateSenderAddressInfo() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.UpdateSenderAddressInfo()
	})
}

// ClearSenderAddressInfo clears the value of the "sender_address_info" field.
func (u *PickupOrderUpsertBulk) ClearSenderAddressInfo() *PickupOrderUpsertBulk {
	return u.Update(func(s *PickupOrderUpsert) {
		s.ClearSenderAddressInfo()
	})
}

// Exec executes the query.
func (u *PickupOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the PickupOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PickupOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PickupOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
