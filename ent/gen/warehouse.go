// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"
)

// Warehouse is the model entity for the Warehouse schema.
type Warehouse struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// QuicktronCode holds the value of the "quicktron_code" field.
	QuicktronCode string `json:"quicktron_code,omitempty"`
	// EnableQuicktron holds the value of the "enable_quicktron" field.
	EnableQuicktron int `json:"enable_quicktron,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Address1 holds the value of the "address1" field.
	Address1 string `json:"address1,omitempty"`
	// Address2 holds the value of the "address2" field.
	Address2 string `json:"address2,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode string `json:"country_code,omitempty"`
	// CountryName holds the value of the "country_name" field.
	CountryName string `json:"country_name,omitempty"`
	// Province holds the value of the "province" field.
	Province string `json:"province,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// ZipCode holds the value of the "zip_code" field.
	ZipCode string `json:"zip_code,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarehouseQuery when eager-loading is set.
	Edges WarehouseEdges `json:"edges"`
}

// WarehouseEdges holds the relations/edges for other nodes in the graph.
type WarehouseEdges struct {
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e WarehouseEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warehouse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID, warehouse.FieldEnableQuicktron, warehouse.FieldStatus:
			values[i] = new(sql.NullInt64)
		case warehouse.FieldCode, warehouse.FieldQuicktronCode, warehouse.FieldName, warehouse.FieldCompany, warehouse.FieldFirstName, warehouse.FieldLastName, warehouse.FieldAddress1, warehouse.FieldAddress2, warehouse.FieldCountryCode, warehouse.FieldCountryName, warehouse.FieldProvince, warehouse.FieldCity, warehouse.FieldZipCode, warehouse.FieldPhone:
			values[i] = new(sql.NullString)
		case warehouse.FieldCreatedAt, warehouse.FieldUpdatedAt, warehouse.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Warehouse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warehouse fields.
func (w *Warehouse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int64(value.Int64)
		case warehouse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case warehouse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case warehouse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = value.Time
			}
		case warehouse.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				w.Code = value.String
			}
		case warehouse.FieldQuicktronCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quicktron_code", values[i])
			} else if value.Valid {
				w.QuicktronCode = value.String
			}
		case warehouse.FieldEnableQuicktron:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable_quicktron", values[i])
			} else if value.Valid {
				w.EnableQuicktron = int(value.Int64)
			}
		case warehouse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warehouse.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				w.Company = value.String
			}
		case warehouse.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				w.FirstName = value.String
			}
		case warehouse.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				w.LastName = value.String
			}
		case warehouse.FieldAddress1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address1", values[i])
			} else if value.Valid {
				w.Address1 = value.String
			}
		case warehouse.FieldAddress2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address2", values[i])
			} else if value.Valid {
				w.Address2 = value.String
			}
		case warehouse.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				w.CountryCode = value.String
			}
		case warehouse.FieldCountryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_name", values[i])
			} else if value.Valid {
				w.CountryName = value.String
			}
		case warehouse.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				w.Province = value.String
			}
		case warehouse.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				w.City = value.String
			}
		case warehouse.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				w.ZipCode = value.String
			}
		case warehouse.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				w.Phone = value.String
			}
		case warehouse.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the Warehouse entity.
func (w *Warehouse) QueryOrders() *OrderQuery {
	return (&WarehouseClient{config: w.config}).QueryOrders(w)
}

// Update returns a builder for updating this Warehouse.
// Note that you need to call Warehouse.Unwrap() before calling this method if this Warehouse
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warehouse) Update() *WarehouseUpdateOne {
	return (&WarehouseClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Warehouse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warehouse) Unwrap() *Warehouse {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("gen: Warehouse is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warehouse) String() string {
	var builder strings.Builder
	builder.WriteString("Warehouse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(w.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(w.Code)
	builder.WriteString(", ")
	builder.WriteString("quicktron_code=")
	builder.WriteString(w.QuicktronCode)
	builder.WriteString(", ")
	builder.WriteString("enable_quicktron=")
	builder.WriteString(fmt.Sprintf("%v", w.EnableQuicktron))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(w.Company)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(w.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(w.LastName)
	builder.WriteString(", ")
	builder.WriteString("address1=")
	builder.WriteString(w.Address1)
	builder.WriteString(", ")
	builder.WriteString("address2=")
	builder.WriteString(w.Address2)
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(w.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("country_name=")
	builder.WriteString(w.CountryName)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(w.Province)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(w.City)
	builder.WriteString(", ")
	builder.WriteString("zip_code=")
	builder.WriteString(w.ZipCode)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(w.Phone)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Warehouses is a parsable slice of Warehouse.
type Warehouses []*Warehouse

func (w Warehouses) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
