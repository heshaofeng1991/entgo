// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// HandlingFee applies equality check predicate on the "handling_fee" field. It's identical to HandlingFeeEQ.
func HandlingFee(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// ShippingOption applies equality check predicate on the "shipping_option" field. It's identical to ShippingOptionEQ.
func ShippingOption(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingOption), v))
	})
}

// PrepayTariff applies equality check predicate on the "prepay_tariff" field. It's identical to PrepayTariffEQ.
func PrepayTariff(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// IossNumber applies equality check predicate on the "ioss_number" field. It's identical to IossNumberEQ.
func IossNumber(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossCountryCode applies equality check predicate on the "ioss_country_code" field. It's identical to IossCountryCodeEQ.
func IossCountryCode(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// UkVatNumber applies equality check predicate on the "uk_vat_number" field. It's identical to UkVatNumberEQ.
func UkVatNumber(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// DefaultWarehouse applies equality check predicate on the "default_warehouse" field. It's identical to DefaultWarehouseEQ.
func DefaultWarehouse(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultWarehouse), v))
	})
}

// PresetChannelIds applies equality check predicate on the "preset_channel_ids" field. It's identical to PresetChannelIdsEQ.
func PresetChannelIds(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPresetChannelIds), v))
	})
}

// TestChannelIds applies equality check predicate on the "test_channel_ids" field. It's identical to TestChannelIdsEQ.
func TestChannelIds(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestChannelIds), v))
	})
}

// FirstInboundAt applies equality check predicate on the "first_inbound_at" field. It's identical to FirstInboundAtEQ.
func FirstInboundAt(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstInboundAt), v))
	})
}

// StorageUnitPrice applies equality check predicate on the "storage_unit_price" field. It's identical to StorageUnitPriceEQ.
func StorageUnitPrice(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageUnitPrice), v))
	})
}

// CsUserID applies equality check predicate on the "cs_user_id" field. It's identical to CsUserIDEQ.
func CsUserID(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsUserID), v))
	})
}

// SalesUserID applies equality check predicate on the "sales_user_id" field. It's identical to SalesUserIDEQ.
func SalesUserID(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesUserID), v))
	})
}

// InviterUserID applies equality check predicate on the "inviter_user_id" field. It's identical to InviterUserIDEQ.
func InviterUserID(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviterUserID), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// HandlingFeeEQ applies the EQ predicate on the "handling_fee" field.
func HandlingFeeEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeNEQ applies the NEQ predicate on the "handling_fee" field.
func HandlingFeeNEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeIn applies the In predicate on the "handling_fee" field.
func HandlingFeeIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeNotIn applies the NotIn predicate on the "handling_fee" field.
func HandlingFeeNotIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeGT applies the GT predicate on the "handling_fee" field.
func HandlingFeeGT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeGTE applies the GTE predicate on the "handling_fee" field.
func HandlingFeeGTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLT applies the LT predicate on the "handling_fee" field.
func HandlingFeeLT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLTE applies the LTE predicate on the "handling_fee" field.
func HandlingFeeLTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlingFee), v))
	})
}

// ShippingOptionEQ applies the EQ predicate on the "shipping_option" field.
func ShippingOptionEQ(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionNEQ applies the NEQ predicate on the "shipping_option" field.
func ShippingOptionNEQ(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionIn applies the In predicate on the "shipping_option" field.
func ShippingOptionIn(vs ...int8) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingOption), v...))
	})
}

// ShippingOptionNotIn applies the NotIn predicate on the "shipping_option" field.
func ShippingOptionNotIn(vs ...int8) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingOption), v...))
	})
}

// ShippingOptionGT applies the GT predicate on the "shipping_option" field.
func ShippingOptionGT(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionGTE applies the GTE predicate on the "shipping_option" field.
func ShippingOptionGTE(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionLT applies the LT predicate on the "shipping_option" field.
func ShippingOptionLT(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingOption), v))
	})
}

// ShippingOptionLTE applies the LTE predicate on the "shipping_option" field.
func ShippingOptionLTE(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingOption), v))
	})
}

// PrepayTariffEQ applies the EQ predicate on the "prepay_tariff" field.
func PrepayTariffEQ(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffNEQ applies the NEQ predicate on the "prepay_tariff" field.
func PrepayTariffNEQ(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffIn applies the In predicate on the "prepay_tariff" field.
func PrepayTariffIn(vs ...int8) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrepayTariff), v...))
	})
}

// PrepayTariffNotIn applies the NotIn predicate on the "prepay_tariff" field.
func PrepayTariffNotIn(vs ...int8) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrepayTariff), v...))
	})
}

// PrepayTariffGT applies the GT predicate on the "prepay_tariff" field.
func PrepayTariffGT(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffGTE applies the GTE predicate on the "prepay_tariff" field.
func PrepayTariffGTE(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffLT applies the LT predicate on the "prepay_tariff" field.
func PrepayTariffLT(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffLTE applies the LTE predicate on the "prepay_tariff" field.
func PrepayTariffLTE(v int8) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrepayTariff), v))
	})
}

// IossNumberEQ applies the EQ predicate on the "ioss_number" field.
func IossNumberEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberNEQ applies the NEQ predicate on the "ioss_number" field.
func IossNumberNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberIn applies the In predicate on the "ioss_number" field.
func IossNumberIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossNumber), v...))
	})
}

// IossNumberNotIn applies the NotIn predicate on the "ioss_number" field.
func IossNumberNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossNumber), v...))
	})
}

// IossNumberGT applies the GT predicate on the "ioss_number" field.
func IossNumberGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossNumber), v))
	})
}

// IossNumberGTE applies the GTE predicate on the "ioss_number" field.
func IossNumberGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberLT applies the LT predicate on the "ioss_number" field.
func IossNumberLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossNumber), v))
	})
}

// IossNumberLTE applies the LTE predicate on the "ioss_number" field.
func IossNumberLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberContains applies the Contains predicate on the "ioss_number" field.
func IossNumberContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasPrefix applies the HasPrefix predicate on the "ioss_number" field.
func IossNumberHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasSuffix applies the HasSuffix predicate on the "ioss_number" field.
func IossNumberHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossNumber), v))
	})
}

// IossNumberEqualFold applies the EqualFold predicate on the "ioss_number" field.
func IossNumberEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossNumber), v))
	})
}

// IossNumberContainsFold applies the ContainsFold predicate on the "ioss_number" field.
func IossNumberContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossNumber), v))
	})
}

// IossCountryCodeEQ applies the EQ predicate on the "ioss_country_code" field.
func IossCountryCodeEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeNEQ applies the NEQ predicate on the "ioss_country_code" field.
func IossCountryCodeNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeIn applies the In predicate on the "ioss_country_code" field.
func IossCountryCodeIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeNotIn applies the NotIn predicate on the "ioss_country_code" field.
func IossCountryCodeNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeGT applies the GT predicate on the "ioss_country_code" field.
func IossCountryCodeGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeGTE applies the GTE predicate on the "ioss_country_code" field.
func IossCountryCodeGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLT applies the LT predicate on the "ioss_country_code" field.
func IossCountryCodeLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLTE applies the LTE predicate on the "ioss_country_code" field.
func IossCountryCodeLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContains applies the Contains predicate on the "ioss_country_code" field.
func IossCountryCodeContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasPrefix applies the HasPrefix predicate on the "ioss_country_code" field.
func IossCountryCodeHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasSuffix applies the HasSuffix predicate on the "ioss_country_code" field.
func IossCountryCodeHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeEqualFold applies the EqualFold predicate on the "ioss_country_code" field.
func IossCountryCodeEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContainsFold applies the ContainsFold predicate on the "ioss_country_code" field.
func IossCountryCodeContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossCountryCode), v))
	})
}

// UkVatNumberEQ applies the EQ predicate on the "uk_vat_number" field.
func UkVatNumberEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberNEQ applies the NEQ predicate on the "uk_vat_number" field.
func UkVatNumberNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberIn applies the In predicate on the "uk_vat_number" field.
func UkVatNumberIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberNotIn applies the NotIn predicate on the "uk_vat_number" field.
func UkVatNumberNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberGT applies the GT predicate on the "uk_vat_number" field.
func UkVatNumberGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberGTE applies the GTE predicate on the "uk_vat_number" field.
func UkVatNumberGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLT applies the LT predicate on the "uk_vat_number" field.
func UkVatNumberLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLTE applies the LTE predicate on the "uk_vat_number" field.
func UkVatNumberLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContains applies the Contains predicate on the "uk_vat_number" field.
func UkVatNumberContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasPrefix applies the HasPrefix predicate on the "uk_vat_number" field.
func UkVatNumberHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasSuffix applies the HasSuffix predicate on the "uk_vat_number" field.
func UkVatNumberHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberEqualFold applies the EqualFold predicate on the "uk_vat_number" field.
func UkVatNumberEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContainsFold applies the ContainsFold predicate on the "uk_vat_number" field.
func UkVatNumberContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUkVatNumber), v))
	})
}

// DefaultWarehouseEQ applies the EQ predicate on the "default_warehouse" field.
func DefaultWarehouseEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseNEQ applies the NEQ predicate on the "default_warehouse" field.
func DefaultWarehouseNEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseIn applies the In predicate on the "default_warehouse" field.
func DefaultWarehouseIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDefaultWarehouse), v...))
	})
}

// DefaultWarehouseNotIn applies the NotIn predicate on the "default_warehouse" field.
func DefaultWarehouseNotIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDefaultWarehouse), v...))
	})
}

// DefaultWarehouseGT applies the GT predicate on the "default_warehouse" field.
func DefaultWarehouseGT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseGTE applies the GTE predicate on the "default_warehouse" field.
func DefaultWarehouseGTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseLT applies the LT predicate on the "default_warehouse" field.
func DefaultWarehouseLT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultWarehouse), v))
	})
}

// DefaultWarehouseLTE applies the LTE predicate on the "default_warehouse" field.
func DefaultWarehouseLTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultWarehouse), v))
	})
}

// PresetChannelIdsEQ applies the EQ predicate on the "preset_channel_ids" field.
func PresetChannelIdsEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsNEQ applies the NEQ predicate on the "preset_channel_ids" field.
func PresetChannelIdsNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsIn applies the In predicate on the "preset_channel_ids" field.
func PresetChannelIdsIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPresetChannelIds), v...))
	})
}

// PresetChannelIdsNotIn applies the NotIn predicate on the "preset_channel_ids" field.
func PresetChannelIdsNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPresetChannelIds), v...))
	})
}

// PresetChannelIdsGT applies the GT predicate on the "preset_channel_ids" field.
func PresetChannelIdsGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsGTE applies the GTE predicate on the "preset_channel_ids" field.
func PresetChannelIdsGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsLT applies the LT predicate on the "preset_channel_ids" field.
func PresetChannelIdsLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsLTE applies the LTE predicate on the "preset_channel_ids" field.
func PresetChannelIdsLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsContains applies the Contains predicate on the "preset_channel_ids" field.
func PresetChannelIdsContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsHasPrefix applies the HasPrefix predicate on the "preset_channel_ids" field.
func PresetChannelIdsHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsHasSuffix applies the HasSuffix predicate on the "preset_channel_ids" field.
func PresetChannelIdsHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsIsNil applies the IsNil predicate on the "preset_channel_ids" field.
func PresetChannelIdsIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPresetChannelIds)))
	})
}

// PresetChannelIdsNotNil applies the NotNil predicate on the "preset_channel_ids" field.
func PresetChannelIdsNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPresetChannelIds)))
	})
}

// PresetChannelIdsEqualFold applies the EqualFold predicate on the "preset_channel_ids" field.
func PresetChannelIdsEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPresetChannelIds), v))
	})
}

// PresetChannelIdsContainsFold applies the ContainsFold predicate on the "preset_channel_ids" field.
func PresetChannelIdsContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPresetChannelIds), v))
	})
}

// TestChannelIdsEQ applies the EQ predicate on the "test_channel_ids" field.
func TestChannelIdsEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsNEQ applies the NEQ predicate on the "test_channel_ids" field.
func TestChannelIdsNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsIn applies the In predicate on the "test_channel_ids" field.
func TestChannelIdsIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTestChannelIds), v...))
	})
}

// TestChannelIdsNotIn applies the NotIn predicate on the "test_channel_ids" field.
func TestChannelIdsNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTestChannelIds), v...))
	})
}

// TestChannelIdsGT applies the GT predicate on the "test_channel_ids" field.
func TestChannelIdsGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsGTE applies the GTE predicate on the "test_channel_ids" field.
func TestChannelIdsGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsLT applies the LT predicate on the "test_channel_ids" field.
func TestChannelIdsLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsLTE applies the LTE predicate on the "test_channel_ids" field.
func TestChannelIdsLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsContains applies the Contains predicate on the "test_channel_ids" field.
func TestChannelIdsContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsHasPrefix applies the HasPrefix predicate on the "test_channel_ids" field.
func TestChannelIdsHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsHasSuffix applies the HasSuffix predicate on the "test_channel_ids" field.
func TestChannelIdsHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsIsNil applies the IsNil predicate on the "test_channel_ids" field.
func TestChannelIdsIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestChannelIds)))
	})
}

// TestChannelIdsNotNil applies the NotNil predicate on the "test_channel_ids" field.
func TestChannelIdsNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestChannelIds)))
	})
}

// TestChannelIdsEqualFold applies the EqualFold predicate on the "test_channel_ids" field.
func TestChannelIdsEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTestChannelIds), v))
	})
}

// TestChannelIdsContainsFold applies the ContainsFold predicate on the "test_channel_ids" field.
func TestChannelIdsContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTestChannelIds), v))
	})
}

// FirstInboundAtEQ applies the EQ predicate on the "first_inbound_at" field.
func FirstInboundAtEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtNEQ applies the NEQ predicate on the "first_inbound_at" field.
func FirstInboundAtNEQ(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtIn applies the In predicate on the "first_inbound_at" field.
func FirstInboundAtIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstInboundAt), v...))
	})
}

// FirstInboundAtNotIn applies the NotIn predicate on the "first_inbound_at" field.
func FirstInboundAtNotIn(vs ...time.Time) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstInboundAt), v...))
	})
}

// FirstInboundAtGT applies the GT predicate on the "first_inbound_at" field.
func FirstInboundAtGT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtGTE applies the GTE predicate on the "first_inbound_at" field.
func FirstInboundAtGTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtLT applies the LT predicate on the "first_inbound_at" field.
func FirstInboundAtLT(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtLTE applies the LTE predicate on the "first_inbound_at" field.
func FirstInboundAtLTE(v time.Time) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstInboundAt), v))
	})
}

// FirstInboundAtIsNil applies the IsNil predicate on the "first_inbound_at" field.
func FirstInboundAtIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstInboundAt)))
	})
}

// FirstInboundAtNotNil applies the NotNil predicate on the "first_inbound_at" field.
func FirstInboundAtNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstInboundAt)))
	})
}

// StorageUnitPriceEQ applies the EQ predicate on the "storage_unit_price" field.
func StorageUnitPriceEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceNEQ applies the NEQ predicate on the "storage_unit_price" field.
func StorageUnitPriceNEQ(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceIn applies the In predicate on the "storage_unit_price" field.
func StorageUnitPriceIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStorageUnitPrice), v...))
	})
}

// StorageUnitPriceNotIn applies the NotIn predicate on the "storage_unit_price" field.
func StorageUnitPriceNotIn(vs ...float64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStorageUnitPrice), v...))
	})
}

// StorageUnitPriceGT applies the GT predicate on the "storage_unit_price" field.
func StorageUnitPriceGT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceGTE applies the GTE predicate on the "storage_unit_price" field.
func StorageUnitPriceGTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceLT applies the LT predicate on the "storage_unit_price" field.
func StorageUnitPriceLT(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorageUnitPrice), v))
	})
}

// StorageUnitPriceLTE applies the LTE predicate on the "storage_unit_price" field.
func StorageUnitPriceLTE(v float64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorageUnitPrice), v))
	})
}

// CsUserIDEQ applies the EQ predicate on the "cs_user_id" field.
func CsUserIDEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCsUserID), v))
	})
}

// CsUserIDNEQ applies the NEQ predicate on the "cs_user_id" field.
func CsUserIDNEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCsUserID), v))
	})
}

// CsUserIDIn applies the In predicate on the "cs_user_id" field.
func CsUserIDIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCsUserID), v...))
	})
}

// CsUserIDNotIn applies the NotIn predicate on the "cs_user_id" field.
func CsUserIDNotIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCsUserID), v...))
	})
}

// CsUserIDGT applies the GT predicate on the "cs_user_id" field.
func CsUserIDGT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCsUserID), v))
	})
}

// CsUserIDGTE applies the GTE predicate on the "cs_user_id" field.
func CsUserIDGTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCsUserID), v))
	})
}

// CsUserIDLT applies the LT predicate on the "cs_user_id" field.
func CsUserIDLT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCsUserID), v))
	})
}

// CsUserIDLTE applies the LTE predicate on the "cs_user_id" field.
func CsUserIDLTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCsUserID), v))
	})
}

// CsUserIDIsNil applies the IsNil predicate on the "cs_user_id" field.
func CsUserIDIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCsUserID)))
	})
}

// CsUserIDNotNil applies the NotNil predicate on the "cs_user_id" field.
func CsUserIDNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCsUserID)))
	})
}

// SalesUserIDEQ applies the EQ predicate on the "sales_user_id" field.
func SalesUserIDEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDNEQ applies the NEQ predicate on the "sales_user_id" field.
func SalesUserIDNEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDIn applies the In predicate on the "sales_user_id" field.
func SalesUserIDIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalesUserID), v...))
	})
}

// SalesUserIDNotIn applies the NotIn predicate on the "sales_user_id" field.
func SalesUserIDNotIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalesUserID), v...))
	})
}

// SalesUserIDGT applies the GT predicate on the "sales_user_id" field.
func SalesUserIDGT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDGTE applies the GTE predicate on the "sales_user_id" field.
func SalesUserIDGTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDLT applies the LT predicate on the "sales_user_id" field.
func SalesUserIDLT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDLTE applies the LTE predicate on the "sales_user_id" field.
func SalesUserIDLTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalesUserID), v))
	})
}

// SalesUserIDIsNil applies the IsNil predicate on the "sales_user_id" field.
func SalesUserIDIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSalesUserID)))
	})
}

// SalesUserIDNotNil applies the NotNil predicate on the "sales_user_id" field.
func SalesUserIDNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSalesUserID)))
	})
}

// InviterUserIDEQ applies the EQ predicate on the "inviter_user_id" field.
func InviterUserIDEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDNEQ applies the NEQ predicate on the "inviter_user_id" field.
func InviterUserIDNEQ(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDIn applies the In predicate on the "inviter_user_id" field.
func InviterUserIDIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInviterUserID), v...))
	})
}

// InviterUserIDNotIn applies the NotIn predicate on the "inviter_user_id" field.
func InviterUserIDNotIn(vs ...int64) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInviterUserID), v...))
	})
}

// InviterUserIDGT applies the GT predicate on the "inviter_user_id" field.
func InviterUserIDGT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDGTE applies the GTE predicate on the "inviter_user_id" field.
func InviterUserIDGTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDLT applies the LT predicate on the "inviter_user_id" field.
func InviterUserIDLT(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDLTE applies the LTE predicate on the "inviter_user_id" field.
func InviterUserIDLTE(v int64) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInviterUserID), v))
	})
}

// InviterUserIDIsNil applies the IsNil predicate on the "inviter_user_id" field.
func InviterUserIDIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInviterUserID)))
	})
}

// InviterUserIDNotNil applies the NotNil predicate on the "inviter_user_id" field.
func InviterUserIDNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInviterUserID)))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Tenant {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		p(s.Not())
	})
}
