// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderholdreason"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// OrderHoldReasonQuery is the builder for querying OrderHoldReason entities.
type OrderHoldReasonQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderHoldReason
	withOrders *OrderQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderHoldReasonQuery builder.
func (ohrq *OrderHoldReasonQuery) Where(ps ...predicate.OrderHoldReason) *OrderHoldReasonQuery {
	ohrq.predicates = append(ohrq.predicates, ps...)
	return ohrq
}

// Limit adds a limit step to the query.
func (ohrq *OrderHoldReasonQuery) Limit(limit int) *OrderHoldReasonQuery {
	ohrq.limit = &limit
	return ohrq
}

// Offset adds an offset step to the query.
func (ohrq *OrderHoldReasonQuery) Offset(offset int) *OrderHoldReasonQuery {
	ohrq.offset = &offset
	return ohrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ohrq *OrderHoldReasonQuery) Unique(unique bool) *OrderHoldReasonQuery {
	ohrq.unique = &unique
	return ohrq
}

// Order adds an order step to the query.
func (ohrq *OrderHoldReasonQuery) Order(o ...OrderFunc) *OrderHoldReasonQuery {
	ohrq.order = append(ohrq.order, o...)
	return ohrq
}

// QueryOrders chains the current query on the "orders" edge.
func (ohrq *OrderHoldReasonQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: ohrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderholdreason.Table, orderholdreason.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderholdreason.OrdersTable, orderholdreason.OrdersColumn),
		)
		schemaConfig := ohrq.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderHoldReason
		fromU = sqlgraph.SetNeighbors(ohrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderHoldReason entity from the query.
// Returns a *NotFoundError when no OrderHoldReason was found.
func (ohrq *OrderHoldReasonQuery) First(ctx context.Context) (*OrderHoldReason, error) {
	nodes, err := ohrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderholdreason.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) FirstX(ctx context.Context) *OrderHoldReason {
	node, err := ohrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderHoldReason ID from the query.
// Returns a *NotFoundError when no OrderHoldReason ID was found.
func (ohrq *OrderHoldReasonQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ohrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderholdreason.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ohrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderHoldReason entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderHoldReason entity is found.
// Returns a *NotFoundError when no OrderHoldReason entities are found.
func (ohrq *OrderHoldReasonQuery) Only(ctx context.Context) (*OrderHoldReason, error) {
	nodes, err := ohrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderholdreason.Label}
	default:
		return nil, &NotSingularError{orderholdreason.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) OnlyX(ctx context.Context) *OrderHoldReason {
	node, err := ohrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderHoldReason ID in the query.
// Returns a *NotSingularError when more than one OrderHoldReason ID is found.
// Returns a *NotFoundError when no entities are found.
func (ohrq *OrderHoldReasonQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ohrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderholdreason.Label}
	default:
		err = &NotSingularError{orderholdreason.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ohrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderHoldReasons.
func (ohrq *OrderHoldReasonQuery) All(ctx context.Context) ([]*OrderHoldReason, error) {
	if err := ohrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ohrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) AllX(ctx context.Context) []*OrderHoldReason {
	nodes, err := ohrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderHoldReason IDs.
func (ohrq *OrderHoldReasonQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := ohrq.Select(orderholdreason.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ohrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ohrq *OrderHoldReasonQuery) Count(ctx context.Context) (int, error) {
	if err := ohrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ohrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) CountX(ctx context.Context) int {
	count, err := ohrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ohrq *OrderHoldReasonQuery) Exist(ctx context.Context) (bool, error) {
	if err := ohrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ohrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ohrq *OrderHoldReasonQuery) ExistX(ctx context.Context) bool {
	exist, err := ohrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderHoldReasonQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ohrq *OrderHoldReasonQuery) Clone() *OrderHoldReasonQuery {
	if ohrq == nil {
		return nil
	}
	return &OrderHoldReasonQuery{
		config:     ohrq.config,
		limit:      ohrq.limit,
		offset:     ohrq.offset,
		order:      append([]OrderFunc{}, ohrq.order...),
		predicates: append([]predicate.OrderHoldReason{}, ohrq.predicates...),
		withOrders: ohrq.withOrders.Clone(),
		// clone intermediate query.
		sql:    ohrq.sql.Clone(),
		path:   ohrq.path,
		unique: ohrq.unique,
	}
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (ohrq *OrderHoldReasonQuery) WithOrders(opts ...func(*OrderQuery)) *OrderHoldReasonQuery {
	query := &OrderQuery{config: ohrq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohrq.withOrders = query
	return ohrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrderID int64 `json:"order_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderHoldReason.Query().
//		GroupBy(orderholdreason.FieldOrderID).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (ohrq *OrderHoldReasonQuery) GroupBy(field string, fields ...string) *OrderHoldReasonGroupBy {
	grbuild := &OrderHoldReasonGroupBy{config: ohrq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ohrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ohrq.sqlQuery(ctx), nil
	}
	grbuild.label = orderholdreason.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrderID int64 `json:"order_id,omitempty"`
//	}
//
//	client.OrderHoldReason.Query().
//		Select(orderholdreason.FieldOrderID).
//		Scan(ctx, &v)
func (ohrq *OrderHoldReasonQuery) Select(fields ...string) *OrderHoldReasonSelect {
	ohrq.fields = append(ohrq.fields, fields...)
	selbuild := &OrderHoldReasonSelect{OrderHoldReasonQuery: ohrq}
	selbuild.label = orderholdreason.Label
	selbuild.flds, selbuild.scan = &ohrq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a OrderHoldReasonSelect configured with the given aggregations.
func (ohrq *OrderHoldReasonQuery) Aggregate(fns ...AggregateFunc) *OrderHoldReasonSelect {
	return ohrq.Select().Aggregate(fns...)
}

func (ohrq *OrderHoldReasonQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ohrq.fields {
		if !orderholdreason.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if ohrq.path != nil {
		prev, err := ohrq.path(ctx)
		if err != nil {
			return err
		}
		ohrq.sql = prev
	}
	return nil
}

func (ohrq *OrderHoldReasonQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderHoldReason, error) {
	var (
		nodes       = []*OrderHoldReason{}
		_spec       = ohrq.querySpec()
		loadedTypes = [1]bool{
			ohrq.withOrders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderHoldReason).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderHoldReason{config: ohrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ohrq.schemaConfig.OrderHoldReason
	ctx = internal.NewSchemaConfigContext(ctx, ohrq.schemaConfig)
	if len(ohrq.modifiers) > 0 {
		_spec.Modifiers = ohrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ohrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ohrq.withOrders; query != nil {
		if err := ohrq.loadOrders(ctx, query, nodes, nil,
			func(n *OrderHoldReason, e *Order) { n.Edges.Orders = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ohrq *OrderHoldReasonQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*OrderHoldReason, init func(*OrderHoldReason), assign func(*OrderHoldReason, *Order)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*OrderHoldReason)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ohrq *OrderHoldReasonQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ohrq.querySpec()
	_spec.Node.Schema = ohrq.schemaConfig.OrderHoldReason
	ctx = internal.NewSchemaConfigContext(ctx, ohrq.schemaConfig)
	if len(ohrq.modifiers) > 0 {
		_spec.Modifiers = ohrq.modifiers
	}
	_spec.Node.Columns = ohrq.fields
	if len(ohrq.fields) > 0 {
		_spec.Unique = ohrq.unique != nil && *ohrq.unique
	}
	return sqlgraph.CountNodes(ctx, ohrq.driver, _spec)
}

func (ohrq *OrderHoldReasonQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ohrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ohrq *OrderHoldReasonQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderholdreason.Table,
			Columns: orderholdreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderholdreason.FieldID,
			},
		},
		From:   ohrq.sql,
		Unique: true,
	}
	if unique := ohrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ohrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderholdreason.FieldID)
		for i := range fields {
			if fields[i] != orderholdreason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ohrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ohrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ohrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ohrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ohrq *OrderHoldReasonQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ohrq.driver.Dialect())
	t1 := builder.Table(orderholdreason.Table)
	columns := ohrq.fields
	if len(columns) == 0 {
		columns = orderholdreason.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ohrq.sql != nil {
		selector = ohrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ohrq.unique != nil && *ohrq.unique {
		selector.Distinct()
	}
	t1.Schema(ohrq.schemaConfig.OrderHoldReason)
	ctx = internal.NewSchemaConfigContext(ctx, ohrq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ohrq.modifiers {
		m(selector)
	}
	for _, p := range ohrq.predicates {
		p(selector)
	}
	for _, p := range ohrq.order {
		p(selector)
	}
	if offset := ohrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ohrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ohrq *OrderHoldReasonQuery) Modify(modifiers ...func(s *sql.Selector)) *OrderHoldReasonSelect {
	ohrq.modifiers = append(ohrq.modifiers, modifiers...)
	return ohrq.Select()
}

// OrderHoldReasonGroupBy is the group-by builder for OrderHoldReason entities.
type OrderHoldReasonGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ohrgb *OrderHoldReasonGroupBy) Aggregate(fns ...AggregateFunc) *OrderHoldReasonGroupBy {
	ohrgb.fns = append(ohrgb.fns, fns...)
	return ohrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ohrgb *OrderHoldReasonGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ohrgb.path(ctx)
	if err != nil {
		return err
	}
	ohrgb.sql = query
	return ohrgb.sqlScan(ctx, v)
}

func (ohrgb *OrderHoldReasonGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ohrgb.fields {
		if !orderholdreason.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ohrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ohrgb *OrderHoldReasonGroupBy) sqlQuery() *sql.Selector {
	selector := ohrgb.sql.Select()
	aggregation := make([]string, 0, len(ohrgb.fns))
	for _, fn := range ohrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ohrgb.fields)+len(ohrgb.fns))
		for _, f := range ohrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ohrgb.fields...)...)
}

// OrderHoldReasonSelect is the builder for selecting fields of OrderHoldReason entities.
type OrderHoldReasonSelect struct {
	*OrderHoldReasonQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ohrs *OrderHoldReasonSelect) Aggregate(fns ...AggregateFunc) *OrderHoldReasonSelect {
	ohrs.fns = append(ohrs.fns, fns...)
	return ohrs
}

// Scan applies the selector query and scans the result into the given value.
func (ohrs *OrderHoldReasonSelect) Scan(ctx context.Context, v any) error {
	if err := ohrs.prepareQuery(ctx); err != nil {
		return err
	}
	ohrs.sql = ohrs.OrderHoldReasonQuery.sqlQuery(ctx)
	return ohrs.sqlScan(ctx, v)
}

func (ohrs *OrderHoldReasonSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ohrs.fns))
	for _, fn := range ohrs.fns {
		aggregation = append(aggregation, fn(ohrs.sql))
	}
	switch n := len(*ohrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ohrs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ohrs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ohrs.sql.Query()
	if err := ohrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ohrs *OrderHoldReasonSelect) Modify(modifiers ...func(s *sql.Selector)) *OrderHoldReasonSelect {
	ohrs.modifiers = append(ohrs.modifiers, modifiers...)
	return ohrs
}
