// Code generated by ent, DO NOT EDIT.

package internal

import "context"

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig struct {
	Announcements       string // Announcements table.
	Attribute           string // Attribute table.
	Channel             string // Channel table.
	ChannelCost         string // ChannelCost table.
	ChannelCostBatche   string // ChannelCostBatche table.
	ChannelOption       string // ChannelOption table.
	ChannelRecommend    string // ChannelRecommend table.
	ChannelVolumeFactor string // ChannelVolumeFactor table.
	Country             string // Country table.
	CountryZone         string // CountryZone table.
	CourierOrder        string // CourierOrder table.
	CustomerConfig      string // CustomerConfig table.
	Inbound             string // Inbound table.
	InboundItem         string // InboundItem table.
	Inventory           string // Inventory table.
	Order               string // Order table.
	OrderHoldReason     string // OrderHoldReason table.
	OrderItem           string // OrderItem table.
	OrderTaxation       string // OrderTaxation table.
	PickupOrder         string // PickupOrder table.
	PickupOrderItem     string // PickupOrderItem table.
	PlatformProduct     string // PlatformProduct table.
	Product             string // Product table.
	ProductMapping      string // ProductMapping table.
	Sequence            string // Sequence table.
	Store               string // Store table.
	TaskSchedule        string // TaskSchedule table.
	Tenant              string // Tenant table.
	Token               string // Token table.
	TrackMapping        string // TrackMapping table.
	Transaction         string // Transaction table.
	TransactionDetail   string // TransactionDetail table.
	User                string // User table.
	UserReferral        string // UserReferral table.
	ValueAddedTax       string // ValueAddedTax table.
	Warehouse           string // Warehouse table.
}

type schemaCtxKey struct{}

// SchemaConfigFromContext returns a SchemaConfig stored inside a context, or empty if there isn't one.
func SchemaConfigFromContext(ctx context.Context) SchemaConfig {
	config, _ := ctx.Value(schemaCtxKey{}).(SchemaConfig)
	return config
}

// NewSchemaConfigContext returns a new context with the given SchemaConfig attached.
func NewSchemaConfigContext(parent context.Context, config SchemaConfig) context.Context {
	return context.WithValue(parent, schemaCtxKey{}, config)
}
