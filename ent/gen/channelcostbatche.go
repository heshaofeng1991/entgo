// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcostbatche"
)

// ChannelCostBatche is the model entity for the ChannelCostBatche schema.
type ChannelCostBatche struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// EffectiveDate holds the value of the "effective_date" field.
	EffectiveDate time.Time `json:"effective_date,omitempty"`
	// ExpiryDate holds the value of the "expiry_date" field.
	ExpiryDate time.Time `json:"expiry_date,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChannelCostBatche) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channelcostbatche.FieldStatus:
			values[i] = new(sql.NullBool)
		case channelcostbatche.FieldID, channelcostbatche.FieldChannelID:
			values[i] = new(sql.NullInt64)
		case channelcostbatche.FieldCreatedAt, channelcostbatche.FieldUpdatedAt, channelcostbatche.FieldEffectiveDate, channelcostbatche.FieldExpiryDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChannelCostBatche", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChannelCostBatche fields.
func (ccb *ChannelCostBatche) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channelcostbatche.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccb.ID = int64(value.Int64)
		case channelcostbatche.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ccb.CreatedAt = value.Time
			}
		case channelcostbatche.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ccb.UpdatedAt = value.Time
			}
		case channelcostbatche.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				ccb.ChannelID = value.Int64
			}
		case channelcostbatche.FieldEffectiveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_date", values[i])
			} else if value.Valid {
				ccb.EffectiveDate = value.Time
			}
		case channelcostbatche.FieldExpiryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_date", values[i])
			} else if value.Valid {
				ccb.ExpiryDate = value.Time
			}
		case channelcostbatche.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ccb.Status = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChannelCostBatche.
// Note that you need to call ChannelCostBatche.Unwrap() before calling this method if this ChannelCostBatche
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccb *ChannelCostBatche) Update() *ChannelCostBatcheUpdateOne {
	return (&ChannelCostBatcheClient{config: ccb.config}).UpdateOne(ccb)
}

// Unwrap unwraps the ChannelCostBatche entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccb *ChannelCostBatche) Unwrap() *ChannelCostBatche {
	_tx, ok := ccb.config.driver.(*txDriver)
	if !ok {
		panic("gen: ChannelCostBatche is not a transactional entity")
	}
	ccb.config.driver = _tx.drv
	return ccb
}

// String implements the fmt.Stringer.
func (ccb *ChannelCostBatche) String() string {
	var builder strings.Builder
	builder.WriteString("ChannelCostBatche(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ccb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ccb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", ccb.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("effective_date=")
	builder.WriteString(ccb.EffectiveDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expiry_date=")
	builder.WriteString(ccb.ExpiryDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ccb.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ChannelCostBatches is a parsable slice of ChannelCostBatche.
type ChannelCostBatches []*ChannelCostBatche

func (ccb ChannelCostBatches) config(cfg config) {
	for _i := range ccb {
		ccb[_i].config = cfg
	}
}
