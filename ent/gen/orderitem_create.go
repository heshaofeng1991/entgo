// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// OrderItemCreate is the builder for creating a OrderItem entity.
type OrderItemCreate struct {
	config
	mutation *OrderItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oic *OrderItemCreate) SetCreatedAt(t time.Time) *OrderItemCreate {
	oic.mutation.SetCreatedAt(t)
	return oic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCreatedAt(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetCreatedAt(*t)
	}
	return oic
}

// SetUpdatedAt sets the "updated_at" field.
func (oic *OrderItemCreate) SetUpdatedAt(t time.Time) *OrderItemCreate {
	oic.mutation.SetUpdatedAt(t)
	return oic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUpdatedAt(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetUpdatedAt(*t)
	}
	return oic
}

// SetDeletedAt sets the "deleted_at" field.
func (oic *OrderItemCreate) SetDeletedAt(t time.Time) *OrderItemCreate {
	oic.mutation.SetDeletedAt(t)
	return oic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeletedAt(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetDeletedAt(*t)
	}
	return oic
}

// SetOrderID sets the "order_id" field.
func (oic *OrderItemCreate) SetOrderID(i int64) *OrderItemCreate {
	oic.mutation.SetOrderID(i)
	return oic
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableOrderID(i *int64) *OrderItemCreate {
	if i != nil {
		oic.SetOrderID(*i)
	}
	return oic
}

// SetProductID sets the "product_id" field.
func (oic *OrderItemCreate) SetProductID(i int64) *OrderItemCreate {
	oic.mutation.SetProductID(i)
	return oic
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProductID(i *int64) *OrderItemCreate {
	if i != nil {
		oic.SetProductID(*i)
	}
	return oic
}

// SetPlatformProductID sets the "platform_product_id" field.
func (oic *OrderItemCreate) SetPlatformProductID(i int64) *OrderItemCreate {
	oic.mutation.SetPlatformProductID(i)
	return oic
}

// SetNillablePlatformProductID sets the "platform_product_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillablePlatformProductID(i *int64) *OrderItemCreate {
	if i != nil {
		oic.SetPlatformProductID(*i)
	}
	return oic
}

// SetBarcode sets the "barcode" field.
func (oic *OrderItemCreate) SetBarcode(s string) *OrderItemCreate {
	oic.mutation.SetBarcode(s)
	return oic
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableBarcode(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetBarcode(*s)
	}
	return oic
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (oic *OrderItemCreate) SetFulfillmentService(s string) *OrderItemCreate {
	oic.mutation.SetFulfillmentService(s)
	return oic
}

// SetNillableFulfillmentService sets the "fulfillment_service" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableFulfillmentService(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetFulfillmentService(*s)
	}
	return oic
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (oic *OrderItemCreate) SetExtOrderItemID(s string) *OrderItemCreate {
	oic.mutation.SetExtOrderItemID(s)
	return oic
}

// SetNillableExtOrderItemID sets the "ext_order_item_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableExtOrderItemID(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetExtOrderItemID(*s)
	}
	return oic
}

// SetExtProductID sets the "ext_product_id" field.
func (oic *OrderItemCreate) SetExtProductID(s string) *OrderItemCreate {
	oic.mutation.SetExtProductID(s)
	return oic
}

// SetNillableExtProductID sets the "ext_product_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableExtProductID(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetExtProductID(*s)
	}
	return oic
}

// SetIsCustomItem sets the "is_custom_item" field.
func (oic *OrderItemCreate) SetIsCustomItem(b bool) *OrderItemCreate {
	oic.mutation.SetIsCustomItem(b)
	return oic
}

// SetNillableIsCustomItem sets the "is_custom_item" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableIsCustomItem(b *bool) *OrderItemCreate {
	if b != nil {
		oic.SetIsCustomItem(*b)
	}
	return oic
}

// SetName sets the "name" field.
func (oic *OrderItemCreate) SetName(s string) *OrderItemCreate {
	oic.mutation.SetName(s)
	return oic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableName(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetName(*s)
	}
	return oic
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (oic *OrderItemCreate) SetDeclaredCnName(s string) *OrderItemCreate {
	oic.mutation.SetDeclaredCnName(s)
	return oic
}

// SetNillableDeclaredCnName sets the "declared_cn_name" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeclaredCnName(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetDeclaredCnName(*s)
	}
	return oic
}

// SetHsCode sets the "hs_code" field.
func (oic *OrderItemCreate) SetHsCode(s string) *OrderItemCreate {
	oic.mutation.SetHsCode(s)
	return oic
}

// SetNillableHsCode sets the "hs_code" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableHsCode(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetHsCode(*s)
	}
	return oic
}

// SetMaterial sets the "material" field.
func (oic *OrderItemCreate) SetMaterial(s string) *OrderItemCreate {
	oic.mutation.SetMaterial(s)
	return oic
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableMaterial(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetMaterial(*s)
	}
	return oic
}

// SetPurpose sets the "purpose" field.
func (oic *OrderItemCreate) SetPurpose(s string) *OrderItemCreate {
	oic.mutation.SetPurpose(s)
	return oic
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillablePurpose(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetPurpose(*s)
	}
	return oic
}

// SetImages sets the "images" field.
func (oic *OrderItemCreate) SetImages(s string) *OrderItemCreate {
	oic.mutation.SetImages(s)
	return oic
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableImages(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetImages(*s)
	}
	return oic
}

// SetAttributes sets the "attributes" field.
func (oic *OrderItemCreate) SetAttributes(s string) *OrderItemCreate {
	oic.mutation.SetAttributes(s)
	return oic
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableAttributes(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetAttributes(*s)
	}
	return oic
}

// SetGrams sets the "grams" field.
func (oic *OrderItemCreate) SetGrams(i int) *OrderItemCreate {
	oic.mutation.SetGrams(i)
	return oic
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableGrams(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetGrams(*i)
	}
	return oic
}

// SetLength sets the "length" field.
func (oic *OrderItemCreate) SetLength(i int) *OrderItemCreate {
	oic.mutation.SetLength(i)
	return oic
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableLength(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetLength(*i)
	}
	return oic
}

// SetWidth sets the "width" field.
func (oic *OrderItemCreate) SetWidth(i int) *OrderItemCreate {
	oic.mutation.SetWidth(i)
	return oic
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableWidth(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetWidth(*i)
	}
	return oic
}

// SetHeight sets the "height" field.
func (oic *OrderItemCreate) SetHeight(i int) *OrderItemCreate {
	oic.mutation.SetHeight(i)
	return oic
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableHeight(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetHeight(*i)
	}
	return oic
}

// SetQty sets the "qty" field.
func (oic *OrderItemCreate) SetQty(i int) *OrderItemCreate {
	oic.mutation.SetQty(i)
	return oic
}

// SetUnitPrice sets the "unit_price" field.
func (oic *OrderItemCreate) SetUnitPrice(f float64) *OrderItemCreate {
	oic.mutation.SetUnitPrice(f)
	return oic
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUnitPrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetUnitPrice(*f)
	}
	return oic
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (oic *OrderItemCreate) SetDeclaredValueInUsd(f float64) *OrderItemCreate {
	oic.mutation.SetDeclaredValueInUsd(f)
	return oic
}

// SetNillableDeclaredValueInUsd sets the "declared_value_in_usd" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeclaredValueInUsd(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetDeclaredValueInUsd(*f)
	}
	return oic
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (oic *OrderItemCreate) SetDeclaredValueInEur(f float64) *OrderItemCreate {
	oic.mutation.SetDeclaredValueInEur(f)
	return oic
}

// SetNillableDeclaredValueInEur sets the "declared_value_in_eur" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeclaredValueInEur(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetDeclaredValueInEur(*f)
	}
	return oic
}

// SetCurrency sets the "currency" field.
func (oic *OrderItemCreate) SetCurrency(s string) *OrderItemCreate {
	oic.mutation.SetCurrency(s)
	return oic
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCurrency(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetCurrency(*s)
	}
	return oic
}

// SetFulfillQty sets the "fulfill_qty" field.
func (oic *OrderItemCreate) SetFulfillQty(i int) *OrderItemCreate {
	oic.mutation.SetFulfillQty(i)
	return oic
}

// SetNillableFulfillQty sets the "fulfill_qty" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableFulfillQty(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetFulfillQty(*i)
	}
	return oic
}

// SetRequiresShipping sets the "requires_shipping" field.
func (oic *OrderItemCreate) SetRequiresShipping(b bool) *OrderItemCreate {
	oic.mutation.SetRequiresShipping(b)
	return oic
}

// SetNillableRequiresShipping sets the "requires_shipping" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableRequiresShipping(b *bool) *OrderItemCreate {
	if b != nil {
		oic.SetRequiresShipping(*b)
	}
	return oic
}

// SetGiftCard sets the "gift_card" field.
func (oic *OrderItemCreate) SetGiftCard(b bool) *OrderItemCreate {
	oic.mutation.SetGiftCard(b)
	return oic
}

// SetNillableGiftCard sets the "gift_card" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableGiftCard(b *bool) *OrderItemCreate {
	if b != nil {
		oic.SetGiftCard(*b)
	}
	return oic
}

// SetTaxable sets the "taxable" field.
func (oic *OrderItemCreate) SetTaxable(b bool) *OrderItemCreate {
	oic.mutation.SetTaxable(b)
	return oic
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableTaxable(b *bool) *OrderItemCreate {
	if b != nil {
		oic.SetTaxable(*b)
	}
	return oic
}

// SetStatus sets the "status" field.
func (oic *OrderItemCreate) SetStatus(i int8) *OrderItemCreate {
	oic.mutation.SetStatus(i)
	return oic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableStatus(i *int8) *OrderItemCreate {
	if i != nil {
		oic.SetStatus(*i)
	}
	return oic
}

// SetSku sets the "sku" field.
func (oic *OrderItemCreate) SetSku(s string) *OrderItemCreate {
	oic.mutation.SetSku(s)
	return oic
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSku(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetSku(*s)
	}
	return oic
}

// SetListingSku sets the "listing_sku" field.
func (oic *OrderItemCreate) SetListingSku(s string) *OrderItemCreate {
	oic.mutation.SetListingSku(s)
	return oic
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableListingSku(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetListingSku(*s)
	}
	return oic
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (oic *OrderItemCreate) SetDeclaredEnName(s string) *OrderItemCreate {
	oic.mutation.SetDeclaredEnName(s)
	return oic
}

// SetNillableDeclaredEnName sets the "declared_en_name" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeclaredEnName(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetDeclaredEnName(*s)
	}
	return oic
}

// SetProductName sets the "product_name" field.
func (oic *OrderItemCreate) SetProductName(s string) *OrderItemCreate {
	oic.mutation.SetProductName(s)
	return oic
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProductName(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetProductName(*s)
	}
	return oic
}

// SetCustomerCode sets the "customer_code" field.
func (oic *OrderItemCreate) SetCustomerCode(s string) *OrderItemCreate {
	oic.mutation.SetCustomerCode(s)
	return oic
}

// SetID sets the "id" field.
func (oic *OrderItemCreate) SetID(i int64) *OrderItemCreate {
	oic.mutation.SetID(i)
	return oic
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (oic *OrderItemCreate) SetTenantID(id int64) *OrderItemCreate {
	oic.mutation.SetTenantID(id)
	return oic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oic *OrderItemCreate) SetTenant(t *Tenant) *OrderItemCreate {
	return oic.SetTenantID(t.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oic *OrderItemCreate) SetOrder(o *Order) *OrderItemCreate {
	return oic.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oic *OrderItemCreate) Mutation() *OrderItemMutation {
	return oic.mutation
}

// Save creates the OrderItem in the database.
func (oic *OrderItemCreate) Save(ctx context.Context) (*OrderItem, error) {
	var (
		err  error
		node *OrderItem
	)
	if err := oic.defaults(); err != nil {
		return nil, err
	}
	if len(oic.hooks) == 0 {
		if err = oic.check(); err != nil {
			return nil, err
		}
		node, err = oic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oic.check(); err != nil {
				return nil, err
			}
			oic.mutation = mutation
			if node, err = oic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oic.hooks) - 1; i >= 0; i-- {
			if oic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = oic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderItemCreate) SaveX(ctx context.Context) *OrderItem {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oic *OrderItemCreate) Exec(ctx context.Context) error {
	_, err := oic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oic *OrderItemCreate) ExecX(ctx context.Context) {
	if err := oic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oic *OrderItemCreate) defaults() error {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		if orderitem.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized orderitem.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := orderitem.DefaultCreatedAt()
		oic.mutation.SetCreatedAt(v)
	}
	if _, ok := oic.mutation.UpdatedAt(); !ok {
		if orderitem.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized orderitem.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := orderitem.DefaultUpdatedAt()
		oic.mutation.SetUpdatedAt(v)
	}
	if _, ok := oic.mutation.ProductID(); !ok {
		v := orderitem.DefaultProductID
		oic.mutation.SetProductID(v)
	}
	if _, ok := oic.mutation.PlatformProductID(); !ok {
		v := orderitem.DefaultPlatformProductID
		oic.mutation.SetPlatformProductID(v)
	}
	if _, ok := oic.mutation.Barcode(); !ok {
		v := orderitem.DefaultBarcode
		oic.mutation.SetBarcode(v)
	}
	if _, ok := oic.mutation.FulfillmentService(); !ok {
		v := orderitem.DefaultFulfillmentService
		oic.mutation.SetFulfillmentService(v)
	}
	if _, ok := oic.mutation.ExtOrderItemID(); !ok {
		v := orderitem.DefaultExtOrderItemID
		oic.mutation.SetExtOrderItemID(v)
	}
	if _, ok := oic.mutation.ExtProductID(); !ok {
		v := orderitem.DefaultExtProductID
		oic.mutation.SetExtProductID(v)
	}
	if _, ok := oic.mutation.IsCustomItem(); !ok {
		v := orderitem.DefaultIsCustomItem
		oic.mutation.SetIsCustomItem(v)
	}
	if _, ok := oic.mutation.Name(); !ok {
		v := orderitem.DefaultName
		oic.mutation.SetName(v)
	}
	if _, ok := oic.mutation.DeclaredCnName(); !ok {
		v := orderitem.DefaultDeclaredCnName
		oic.mutation.SetDeclaredCnName(v)
	}
	if _, ok := oic.mutation.HsCode(); !ok {
		v := orderitem.DefaultHsCode
		oic.mutation.SetHsCode(v)
	}
	if _, ok := oic.mutation.Material(); !ok {
		v := orderitem.DefaultMaterial
		oic.mutation.SetMaterial(v)
	}
	if _, ok := oic.mutation.Purpose(); !ok {
		v := orderitem.DefaultPurpose
		oic.mutation.SetPurpose(v)
	}
	if _, ok := oic.mutation.Grams(); !ok {
		v := orderitem.DefaultGrams
		oic.mutation.SetGrams(v)
	}
	if _, ok := oic.mutation.Length(); !ok {
		v := orderitem.DefaultLength
		oic.mutation.SetLength(v)
	}
	if _, ok := oic.mutation.Width(); !ok {
		v := orderitem.DefaultWidth
		oic.mutation.SetWidth(v)
	}
	if _, ok := oic.mutation.Height(); !ok {
		v := orderitem.DefaultHeight
		oic.mutation.SetHeight(v)
	}
	if _, ok := oic.mutation.UnitPrice(); !ok {
		v := orderitem.DefaultUnitPrice
		oic.mutation.SetUnitPrice(v)
	}
	if _, ok := oic.mutation.DeclaredValueInUsd(); !ok {
		v := orderitem.DefaultDeclaredValueInUsd
		oic.mutation.SetDeclaredValueInUsd(v)
	}
	if _, ok := oic.mutation.DeclaredValueInEur(); !ok {
		v := orderitem.DefaultDeclaredValueInEur
		oic.mutation.SetDeclaredValueInEur(v)
	}
	if _, ok := oic.mutation.Currency(); !ok {
		v := orderitem.DefaultCurrency
		oic.mutation.SetCurrency(v)
	}
	if _, ok := oic.mutation.FulfillQty(); !ok {
		v := orderitem.DefaultFulfillQty
		oic.mutation.SetFulfillQty(v)
	}
	if _, ok := oic.mutation.RequiresShipping(); !ok {
		v := orderitem.DefaultRequiresShipping
		oic.mutation.SetRequiresShipping(v)
	}
	if _, ok := oic.mutation.GiftCard(); !ok {
		v := orderitem.DefaultGiftCard
		oic.mutation.SetGiftCard(v)
	}
	if _, ok := oic.mutation.Taxable(); !ok {
		v := orderitem.DefaultTaxable
		oic.mutation.SetTaxable(v)
	}
	if _, ok := oic.mutation.Status(); !ok {
		v := orderitem.DefaultStatus
		oic.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrderItemCreate) check() error {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "OrderItem.created_at"`)}
	}
	if _, ok := oic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "OrderItem.updated_at"`)}
	}
	if _, ok := oic.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`gen: missing required field "OrderItem.barcode"`)}
	}
	if _, ok := oic.mutation.FulfillmentService(); !ok {
		return &ValidationError{Name: "fulfillment_service", err: errors.New(`gen: missing required field "OrderItem.fulfillment_service"`)}
	}
	if _, ok := oic.mutation.ExtOrderItemID(); !ok {
		return &ValidationError{Name: "ext_order_item_id", err: errors.New(`gen: missing required field "OrderItem.ext_order_item_id"`)}
	}
	if _, ok := oic.mutation.ExtProductID(); !ok {
		return &ValidationError{Name: "ext_product_id", err: errors.New(`gen: missing required field "OrderItem.ext_product_id"`)}
	}
	if _, ok := oic.mutation.IsCustomItem(); !ok {
		return &ValidationError{Name: "is_custom_item", err: errors.New(`gen: missing required field "OrderItem.is_custom_item"`)}
	}
	if _, ok := oic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "OrderItem.name"`)}
	}
	if _, ok := oic.mutation.HsCode(); !ok {
		return &ValidationError{Name: "hs_code", err: errors.New(`gen: missing required field "OrderItem.hs_code"`)}
	}
	if _, ok := oic.mutation.Material(); !ok {
		return &ValidationError{Name: "material", err: errors.New(`gen: missing required field "OrderItem.material"`)}
	}
	if _, ok := oic.mutation.Purpose(); !ok {
		return &ValidationError{Name: "purpose", err: errors.New(`gen: missing required field "OrderItem.purpose"`)}
	}
	if _, ok := oic.mutation.Grams(); !ok {
		return &ValidationError{Name: "grams", err: errors.New(`gen: missing required field "OrderItem.grams"`)}
	}
	if _, ok := oic.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`gen: missing required field "OrderItem.length"`)}
	}
	if _, ok := oic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`gen: missing required field "OrderItem.width"`)}
	}
	if _, ok := oic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`gen: missing required field "OrderItem.height"`)}
	}
	if _, ok := oic.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`gen: missing required field "OrderItem.qty"`)}
	}
	if _, ok := oic.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`gen: missing required field "OrderItem.unit_price"`)}
	}
	if _, ok := oic.mutation.DeclaredValueInUsd(); !ok {
		return &ValidationError{Name: "declared_value_in_usd", err: errors.New(`gen: missing required field "OrderItem.declared_value_in_usd"`)}
	}
	if _, ok := oic.mutation.DeclaredValueInEur(); !ok {
		return &ValidationError{Name: "declared_value_in_eur", err: errors.New(`gen: missing required field "OrderItem.declared_value_in_eur"`)}
	}
	if _, ok := oic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`gen: missing required field "OrderItem.currency"`)}
	}
	if _, ok := oic.mutation.FulfillQty(); !ok {
		return &ValidationError{Name: "fulfill_qty", err: errors.New(`gen: missing required field "OrderItem.fulfill_qty"`)}
	}
	if _, ok := oic.mutation.RequiresShipping(); !ok {
		return &ValidationError{Name: "requires_shipping", err: errors.New(`gen: missing required field "OrderItem.requires_shipping"`)}
	}
	if _, ok := oic.mutation.GiftCard(); !ok {
		return &ValidationError{Name: "gift_card", err: errors.New(`gen: missing required field "OrderItem.gift_card"`)}
	}
	if _, ok := oic.mutation.Taxable(); !ok {
		return &ValidationError{Name: "taxable", err: errors.New(`gen: missing required field "OrderItem.taxable"`)}
	}
	if _, ok := oic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "OrderItem.status"`)}
	}
	if _, ok := oic.mutation.CustomerCode(); !ok {
		return &ValidationError{Name: "customer_code", err: errors.New(`gen: missing required field "OrderItem.customer_code"`)}
	}
	if _, ok := oic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "OrderItem.tenant"`)}
	}
	return nil
}

func (oic *OrderItemCreate) sqlSave(ctx context.Context) (*OrderItem, error) {
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (oic *OrderItemCreate) createSpec() (*OrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItem{config: oic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderitem.FieldID,
			},
		}
	)
	_spec.Schema = oic.schemaConfig.OrderItem
	_spec.OnConflict = oic.conflict
	if id, ok := oic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oic.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oic.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oic.mutation.DeletedAt(); ok {
		_spec.SetField(orderitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oic.mutation.ProductID(); ok {
		_spec.SetField(orderitem.FieldProductID, field.TypeInt64, value)
		_node.ProductID = value
	}
	if value, ok := oic.mutation.PlatformProductID(); ok {
		_spec.SetField(orderitem.FieldPlatformProductID, field.TypeInt64, value)
		_node.PlatformProductID = value
	}
	if value, ok := oic.mutation.Barcode(); ok {
		_spec.SetField(orderitem.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := oic.mutation.FulfillmentService(); ok {
		_spec.SetField(orderitem.FieldFulfillmentService, field.TypeString, value)
		_node.FulfillmentService = value
	}
	if value, ok := oic.mutation.ExtOrderItemID(); ok {
		_spec.SetField(orderitem.FieldExtOrderItemID, field.TypeString, value)
		_node.ExtOrderItemID = value
	}
	if value, ok := oic.mutation.ExtProductID(); ok {
		_spec.SetField(orderitem.FieldExtProductID, field.TypeString, value)
		_node.ExtProductID = value
	}
	if value, ok := oic.mutation.IsCustomItem(); ok {
		_spec.SetField(orderitem.FieldIsCustomItem, field.TypeBool, value)
		_node.IsCustomItem = value
	}
	if value, ok := oic.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oic.mutation.DeclaredCnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredCnName, field.TypeString, value)
		_node.DeclaredCnName = value
	}
	if value, ok := oic.mutation.HsCode(); ok {
		_spec.SetField(orderitem.FieldHsCode, field.TypeString, value)
		_node.HsCode = value
	}
	if value, ok := oic.mutation.Material(); ok {
		_spec.SetField(orderitem.FieldMaterial, field.TypeString, value)
		_node.Material = value
	}
	if value, ok := oic.mutation.Purpose(); ok {
		_spec.SetField(orderitem.FieldPurpose, field.TypeString, value)
		_node.Purpose = value
	}
	if value, ok := oic.mutation.Images(); ok {
		_spec.SetField(orderitem.FieldImages, field.TypeString, value)
		_node.Images = value
	}
	if value, ok := oic.mutation.Attributes(); ok {
		_spec.SetField(orderitem.FieldAttributes, field.TypeString, value)
		_node.Attributes = value
	}
	if value, ok := oic.mutation.Grams(); ok {
		_spec.SetField(orderitem.FieldGrams, field.TypeInt, value)
		_node.Grams = value
	}
	if value, ok := oic.mutation.Length(); ok {
		_spec.SetField(orderitem.FieldLength, field.TypeInt, value)
		_node.Length = value
	}
	if value, ok := oic.mutation.Width(); ok {
		_spec.SetField(orderitem.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := oic.mutation.Height(); ok {
		_spec.SetField(orderitem.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := oic.mutation.Qty(); ok {
		_spec.SetField(orderitem.FieldQty, field.TypeInt, value)
		_node.Qty = value
	}
	if value, ok := oic.mutation.UnitPrice(); ok {
		_spec.SetField(orderitem.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := oic.mutation.DeclaredValueInUsd(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInUsd, field.TypeFloat64, value)
		_node.DeclaredValueInUsd = value
	}
	if value, ok := oic.mutation.DeclaredValueInEur(); ok {
		_spec.SetField(orderitem.FieldDeclaredValueInEur, field.TypeFloat64, value)
		_node.DeclaredValueInEur = value
	}
	if value, ok := oic.mutation.Currency(); ok {
		_spec.SetField(orderitem.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := oic.mutation.FulfillQty(); ok {
		_spec.SetField(orderitem.FieldFulfillQty, field.TypeInt, value)
		_node.FulfillQty = value
	}
	if value, ok := oic.mutation.RequiresShipping(); ok {
		_spec.SetField(orderitem.FieldRequiresShipping, field.TypeBool, value)
		_node.RequiresShipping = value
	}
	if value, ok := oic.mutation.GiftCard(); ok {
		_spec.SetField(orderitem.FieldGiftCard, field.TypeBool, value)
		_node.GiftCard = value
	}
	if value, ok := oic.mutation.Taxable(); ok {
		_spec.SetField(orderitem.FieldTaxable, field.TypeBool, value)
		_node.Taxable = value
	}
	if value, ok := oic.mutation.Status(); ok {
		_spec.SetField(orderitem.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := oic.mutation.Sku(); ok {
		_spec.SetField(orderitem.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := oic.mutation.ListingSku(); ok {
		_spec.SetField(orderitem.FieldListingSku, field.TypeString, value)
		_node.ListingSku = value
	}
	if value, ok := oic.mutation.DeclaredEnName(); ok {
		_spec.SetField(orderitem.FieldDeclaredEnName, field.TypeString, value)
		_node.DeclaredEnName = value
	}
	if value, ok := oic.mutation.ProductName(); ok {
		_spec.SetField(orderitem.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := oic.mutation.CustomerCode(); ok {
		_spec.SetField(orderitem.FieldCustomerCode, field.TypeString, value)
		_node.CustomerCode = value
	}
	if nodes := oic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = oic.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_item_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = oic.schemaConfig.OrderItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderItem.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oic *OrderItemCreate) OnConflict(opts ...sql.ConflictOption) *OrderItemUpsertOne {
	oic.conflict = opts
	return &OrderItemUpsertOne{
		create: oic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oic *OrderItemCreate) OnConflictColumns(columns ...string) *OrderItemUpsertOne {
	oic.conflict = append(oic.conflict, sql.ConflictColumns(columns...))
	return &OrderItemUpsertOne{
		create: oic,
	}
}

type (
	// OrderItemUpsertOne is the builder for "upsert"-ing
	//  one OrderItem node.
	OrderItemUpsertOne struct {
		create *OrderItemCreate
	}

	// OrderItemUpsert is the "OnConflict" setter.
	OrderItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderItemUpsert) SetUpdatedAt(v time.Time) *OrderItemUpsert {
	u.Set(orderitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateUpdatedAt() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderItemUpsert) SetDeletedAt(v time.Time) *OrderItemUpsert {
	u.Set(orderitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateDeletedAt() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderItemUpsert) ClearDeletedAt() *OrderItemUpsert {
	u.SetNull(orderitem.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsert) SetOrderID(v int64) *OrderItemUpsert {
	u.Set(orderitem.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateOrderID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderItemUpsert) ClearOrderID() *OrderItemUpsert {
	u.SetNull(orderitem.FieldOrderID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsert) SetProductID(v int64) *OrderItemUpsert {
	u.Set(orderitem.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateProductID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *OrderItemUpsert) AddProductID(v int64) *OrderItemUpsert {
	u.Add(orderitem.FieldProductID, v)
	return u
}

// ClearProductID clears the value of the "product_id" field.
func (u *OrderItemUpsert) ClearProductID() *OrderItemUpsert {
	u.SetNull(orderitem.FieldProductID)
	return u
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *OrderItemUpsert) SetPlatformProductID(v int64) *OrderItemUpsert {
	u.Set(orderitem.FieldPlatformProductID, v)
	return u
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdatePlatformProductID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldPlatformProductID)
	return u
}

// AddPlatformProductID adds v to the "platform_product_id" field.
func (u *OrderItemUpsert) AddPlatformProductID(v int64) *OrderItemUpsert {
	u.Add(orderitem.FieldPlatformProductID, v)
	return u
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *OrderItemUpsert) ClearPlatformProductID() *OrderItemUpsert {
	u.SetNull(orderitem.FieldPlatformProductID)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *OrderItemUpsert) SetBarcode(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateBarcode() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldBarcode)
	return u
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (u *OrderItemUpsert) SetFulfillmentService(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldFulfillmentService, v)
	return u
}

// UpdateFulfillmentService sets the "fulfillment_service" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateFulfillmentService() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldFulfillmentService)
	return u
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (u *OrderItemUpsert) SetExtOrderItemID(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldExtOrderItemID, v)
	return u
}

// UpdateExtOrderItemID sets the "ext_order_item_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateExtOrderItemID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldExtOrderItemID)
	return u
}

// SetExtProductID sets the "ext_product_id" field.
func (u *OrderItemUpsert) SetExtProductID(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldExtProductID, v)
	return u
}

// UpdateExtProductID sets the "ext_product_id" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateExtProductID() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldExtProductID)
	return u
}

// SetIsCustomItem sets the "is_custom_item" field.
func (u *OrderItemUpsert) SetIsCustomItem(v bool) *OrderItemUpsert {
	u.Set(orderitem.FieldIsCustomItem, v)
	return u
}

// UpdateIsCustomItem sets the "is_custom_item" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateIsCustomItem() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldIsCustomItem)
	return u
}

// SetName sets the "name" field.
func (u *OrderItemUpsert) SetName(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateName() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldName)
	return u
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *OrderItemUpsert) SetDeclaredCnName(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldDeclaredCnName, v)
	return u
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateDeclaredCnName() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldDeclaredCnName)
	return u
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *OrderItemUpsert) ClearDeclaredCnName() *OrderItemUpsert {
	u.SetNull(orderitem.FieldDeclaredCnName)
	return u
}

// SetHsCode sets the "hs_code" field.
func (u *OrderItemUpsert) SetHsCode(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldHsCode, v)
	return u
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateHsCode() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldHsCode)
	return u
}

// SetMaterial sets the "material" field.
func (u *OrderItemUpsert) SetMaterial(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldMaterial, v)
	return u
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateMaterial() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldMaterial)
	return u
}

// SetPurpose sets the "purpose" field.
func (u *OrderItemUpsert) SetPurpose(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldPurpose, v)
	return u
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdatePurpose() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldPurpose)
	return u
}

// SetImages sets the "images" field.
func (u *OrderItemUpsert) SetImages(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateImages() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *OrderItemUpsert) ClearImages() *OrderItemUpsert {
	u.SetNull(orderitem.FieldImages)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *OrderItemUpsert) SetAttributes(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateAttributes() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *OrderItemUpsert) ClearAttributes() *OrderItemUpsert {
	u.SetNull(orderitem.FieldAttributes)
	return u
}

// SetGrams sets the "grams" field.
func (u *OrderItemUpsert) SetGrams(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldGrams, v)
	return u
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateGrams() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldGrams)
	return u
}

// AddGrams adds v to the "grams" field.
func (u *OrderItemUpsert) AddGrams(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldGrams, v)
	return u
}

// SetLength sets the "length" field.
func (u *OrderItemUpsert) SetLength(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateLength() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *OrderItemUpsert) AddLength(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldLength, v)
	return u
}

// SetWidth sets the "width" field.
func (u *OrderItemUpsert) SetWidth(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateWidth() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *OrderItemUpsert) AddWidth(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldWidth, v)
	return u
}

// SetHeight sets the "height" field.
func (u *OrderItemUpsert) SetHeight(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateHeight() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *OrderItemUpsert) AddHeight(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldHeight, v)
	return u
}

// SetQty sets the "qty" field.
func (u *OrderItemUpsert) SetQty(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldQty, v)
	return u
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateQty() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldQty)
	return u
}

// AddQty adds v to the "qty" field.
func (u *OrderItemUpsert) AddQty(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldQty, v)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderItemUpsert) SetUnitPrice(v float64) *OrderItemUpsert {
	u.Set(orderitem.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateUnitPrice() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldUnitPrice)
	return u
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderItemUpsert) AddUnitPrice(v float64) *OrderItemUpsert {
	u.Add(orderitem.FieldUnitPrice, v)
	return u
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *OrderItemUpsert) SetDeclaredValueInUsd(v float64) *OrderItemUpsert {
	u.Set(orderitem.FieldDeclaredValueInUsd, v)
	return u
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateDeclaredValueInUsd() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldDeclaredValueInUsd)
	return u
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *OrderItemUpsert) AddDeclaredValueInUsd(v float64) *OrderItemUpsert {
	u.Add(orderitem.FieldDeclaredValueInUsd, v)
	return u
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *OrderItemUpsert) SetDeclaredValueInEur(v float64) *OrderItemUpsert {
	u.Set(orderitem.FieldDeclaredValueInEur, v)
	return u
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateDeclaredValueInEur() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldDeclaredValueInEur)
	return u
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *OrderItemUpsert) AddDeclaredValueInEur(v float64) *OrderItemUpsert {
	u.Add(orderitem.FieldDeclaredValueInEur, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *OrderItemUpsert) SetCurrency(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateCurrency() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldCurrency)
	return u
}

// SetFulfillQty sets the "fulfill_qty" field.
func (u *OrderItemUpsert) SetFulfillQty(v int) *OrderItemUpsert {
	u.Set(orderitem.FieldFulfillQty, v)
	return u
}

// UpdateFulfillQty sets the "fulfill_qty" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateFulfillQty() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldFulfillQty)
	return u
}

// AddFulfillQty adds v to the "fulfill_qty" field.
func (u *OrderItemUpsert) AddFulfillQty(v int) *OrderItemUpsert {
	u.Add(orderitem.FieldFulfillQty, v)
	return u
}

// SetRequiresShipping sets the "requires_shipping" field.
func (u *OrderItemUpsert) SetRequiresShipping(v bool) *OrderItemUpsert {
	u.Set(orderitem.FieldRequiresShipping, v)
	return u
}

// UpdateRequiresShipping sets the "requires_shipping" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateRequiresShipping() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldRequiresShipping)
	return u
}

// SetGiftCard sets the "gift_card" field.
func (u *OrderItemUpsert) SetGiftCard(v bool) *OrderItemUpsert {
	u.Set(orderitem.FieldGiftCard, v)
	return u
}

// UpdateGiftCard sets the "gift_card" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateGiftCard() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldGiftCard)
	return u
}

// SetTaxable sets the "taxable" field.
func (u *OrderItemUpsert) SetTaxable(v bool) *OrderItemUpsert {
	u.Set(orderitem.FieldTaxable, v)
	return u
}

// UpdateTaxable sets the "taxable" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateTaxable() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldTaxable)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderItemUpsert) SetStatus(v int8) *OrderItemUpsert {
	u.Set(orderitem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateStatus() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OrderItemUpsert) AddStatus(v int8) *OrderItemUpsert {
	u.Add(orderitem.FieldStatus, v)
	return u
}

// SetSku sets the "sku" field.
func (u *OrderItemUpsert) SetSku(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldSku, v)
	return u
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateSku() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldSku)
	return u
}

// ClearSku clears the value of the "sku" field.
func (u *OrderItemUpsert) ClearSku() *OrderItemUpsert {
	u.SetNull(orderitem.FieldSku)
	return u
}

// SetListingSku sets the "listing_sku" field.
func (u *OrderItemUpsert) SetListingSku(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldListingSku, v)
	return u
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateListingSku() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldListingSku)
	return u
}

// ClearListingSku clears the value of the "listing_sku" field.
func (u *OrderItemUpsert) ClearListingSku() *OrderItemUpsert {
	u.SetNull(orderitem.FieldListingSku)
	return u
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (u *OrderItemUpsert) SetDeclaredEnName(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldDeclaredEnName, v)
	return u
}

// UpdateDeclaredEnName sets the "declared_en_name" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateDeclaredEnName() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldDeclaredEnName)
	return u
}

// ClearDeclaredEnName clears the value of the "declared_en_name" field.
func (u *OrderItemUpsert) ClearDeclaredEnName() *OrderItemUpsert {
	u.SetNull(orderitem.FieldDeclaredEnName)
	return u
}

// SetProductName sets the "product_name" field.
func (u *OrderItemUpsert) SetProductName(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateProductName() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldProductName)
	return u
}

// ClearProductName clears the value of the "product_name" field.
func (u *OrderItemUpsert) ClearProductName() *OrderItemUpsert {
	u.SetNull(orderitem.FieldProductName)
	return u
}

// SetCustomerCode sets the "customer_code" field.
func (u *OrderItemUpsert) SetCustomerCode(v string) *OrderItemUpsert {
	u.Set(orderitem.FieldCustomerCode, v)
	return u
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *OrderItemUpsert) UpdateCustomerCode() *OrderItemUpsert {
	u.SetExcluded(orderitem.FieldCustomerCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderItemUpsertOne) UpdateNewValues() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderitem.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderItemUpsertOne) Ignore() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderItemUpsertOne) DoNothing() *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderItemCreate.OnConflict
// documentation for more info.
func (u *OrderItemUpsertOne) Update(set func(*OrderItemUpsert)) *OrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderItemUpsertOne) SetUpdatedAt(v time.Time) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateUpdatedAt() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderItemUpsertOne) SetDeletedAt(v time.Time) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateDeletedAt() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderItemUpsertOne) ClearDeletedAt() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsertOne) SetOrderID(v int64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateOrderID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderItemUpsertOne) ClearOrderID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsertOne) SetProductID(v int64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *OrderItemUpsertOne) AddProductID(v int64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *OrderItemUpsertOne) ClearProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearProductID()
	})
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *OrderItemUpsertOne) SetPlatformProductID(v int64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPlatformProductID(v)
	})
}

// AddPlatformProductID adds v to the "platform_product_id" field.
func (u *OrderItemUpsertOne) AddPlatformProductID(v int64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddPlatformProductID(v)
	})
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdatePlatformProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePlatformProductID()
	})
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *OrderItemUpsertOne) ClearPlatformProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearPlatformProductID()
	})
}

// SetBarcode sets the "barcode" field.
func (u *OrderItemUpsertOne) SetBarcode(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateBarcode() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (u *OrderItemUpsertOne) SetFulfillmentService(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetFulfillmentService(v)
	})
}

// UpdateFulfillmentService sets the "fulfillment_service" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateFulfillmentService() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateFulfillmentService()
	})
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (u *OrderItemUpsertOne) SetExtOrderItemID(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetExtOrderItemID(v)
	})
}

// UpdateExtOrderItemID sets the "ext_order_item_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateExtOrderItemID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateExtOrderItemID()
	})
}

// SetExtProductID sets the "ext_product_id" field.
func (u *OrderItemUpsertOne) SetExtProductID(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetExtProductID(v)
	})
}

// UpdateExtProductID sets the "ext_product_id" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateExtProductID() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateExtProductID()
	})
}

// SetIsCustomItem sets the "is_custom_item" field.
func (u *OrderItemUpsertOne) SetIsCustomItem(v bool) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetIsCustomItem(v)
	})
}

// UpdateIsCustomItem sets the "is_custom_item" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateIsCustomItem() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateIsCustomItem()
	})
}

// SetName sets the "name" field.
func (u *OrderItemUpsertOne) SetName(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateName()
	})
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *OrderItemUpsertOne) SetDeclaredCnName(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredCnName(v)
	})
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateDeclaredCnName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredCnName()
	})
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *OrderItemUpsertOne) ClearDeclaredCnName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeclaredCnName()
	})
}

// SetHsCode sets the "hs_code" field.
func (u *OrderItemUpsertOne) SetHsCode(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetHsCode(v)
	})
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateHsCode() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateHsCode()
	})
}

// SetMaterial sets the "material" field.
func (u *OrderItemUpsertOne) SetMaterial(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateMaterial() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateMaterial()
	})
}

// SetPurpose sets the "purpose" field.
func (u *OrderItemUpsertOne) SetPurpose(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurpose(v)
	})
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdatePurpose() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurpose()
	})
}

// SetImages sets the "images" field.
func (u *OrderItemUpsertOne) SetImages(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateImages() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *OrderItemUpsertOne) ClearImages() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearImages()
	})
}

// SetAttributes sets the "attributes" field.
func (u *OrderItemUpsertOne) SetAttributes(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateAttributes() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *OrderItemUpsertOne) ClearAttributes() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearAttributes()
	})
}

// SetGrams sets the "grams" field.
func (u *OrderItemUpsertOne) SetGrams(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *OrderItemUpsertOne) AddGrams(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateGrams() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateGrams()
	})
}

// SetLength sets the "length" field.
func (u *OrderItemUpsertOne) SetLength(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *OrderItemUpsertOne) AddLength(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateLength() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *OrderItemUpsertOne) SetWidth(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *OrderItemUpsertOne) AddWidth(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateWidth() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *OrderItemUpsertOne) SetHeight(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *OrderItemUpsertOne) AddHeight(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateHeight() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateHeight()
	})
}

// SetQty sets the "qty" field.
func (u *OrderItemUpsertOne) SetQty(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *OrderItemUpsertOne) AddQty(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateQty() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateQty()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderItemUpsertOne) SetUnitPrice(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderItemUpsertOne) AddUnitPrice(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateUnitPrice() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *OrderItemUpsertOne) SetDeclaredValueInUsd(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredValueInUsd(v)
	})
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *OrderItemUpsertOne) AddDeclaredValueInUsd(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddDeclaredValueInUsd(v)
	})
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateDeclaredValueInUsd() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredValueInUsd()
	})
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *OrderItemUpsertOne) SetDeclaredValueInEur(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredValueInEur(v)
	})
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *OrderItemUpsertOne) AddDeclaredValueInEur(v float64) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddDeclaredValueInEur(v)
	})
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateDeclaredValueInEur() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredValueInEur()
	})
}

// SetCurrency sets the "currency" field.
func (u *OrderItemUpsertOne) SetCurrency(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateCurrency() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateCurrency()
	})
}

// SetFulfillQty sets the "fulfill_qty" field.
func (u *OrderItemUpsertOne) SetFulfillQty(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetFulfillQty(v)
	})
}

// AddFulfillQty adds v to the "fulfill_qty" field.
func (u *OrderItemUpsertOne) AddFulfillQty(v int) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddFulfillQty(v)
	})
}

// UpdateFulfillQty sets the "fulfill_qty" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateFulfillQty() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateFulfillQty()
	})
}

// SetRequiresShipping sets the "requires_shipping" field.
func (u *OrderItemUpsertOne) SetRequiresShipping(v bool) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetRequiresShipping(v)
	})
}

// UpdateRequiresShipping sets the "requires_shipping" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateRequiresShipping() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateRequiresShipping()
	})
}

// SetGiftCard sets the "gift_card" field.
func (u *OrderItemUpsertOne) SetGiftCard(v bool) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetGiftCard(v)
	})
}

// UpdateGiftCard sets the "gift_card" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateGiftCard() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateGiftCard()
	})
}

// SetTaxable sets the "taxable" field.
func (u *OrderItemUpsertOne) SetTaxable(v bool) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetTaxable(v)
	})
}

// UpdateTaxable sets the "taxable" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateTaxable() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateTaxable()
	})
}

// SetStatus sets the "status" field.
func (u *OrderItemUpsertOne) SetStatus(v int8) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderItemUpsertOne) AddStatus(v int8) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateStatus() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateStatus()
	})
}

// SetSku sets the "sku" field.
func (u *OrderItemUpsertOne) SetSku(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateSku() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateSku()
	})
}

// ClearSku clears the value of the "sku" field.
func (u *OrderItemUpsertOne) ClearSku() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearSku()
	})
}

// SetListingSku sets the "listing_sku" field.
func (u *OrderItemUpsertOne) SetListingSku(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetListingSku(v)
	})
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateListingSku() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateListingSku()
	})
}

// ClearListingSku clears the value of the "listing_sku" field.
func (u *OrderItemUpsertOne) ClearListingSku() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearListingSku()
	})
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (u *OrderItemUpsertOne) SetDeclaredEnName(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredEnName(v)
	})
}

// UpdateDeclaredEnName sets the "declared_en_name" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateDeclaredEnName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredEnName()
	})
}

// ClearDeclaredEnName clears the value of the "declared_en_name" field.
func (u *OrderItemUpsertOne) ClearDeclaredEnName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeclaredEnName()
	})
}

// SetProductName sets the "product_name" field.
func (u *OrderItemUpsertOne) SetProductName(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateProductName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductName()
	})
}

// ClearProductName clears the value of the "product_name" field.
func (u *OrderItemUpsertOne) ClearProductName() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearProductName()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *OrderItemUpsertOne) SetCustomerCode(v string) *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *OrderItemUpsertOne) UpdateCustomerCode() *OrderItemUpsertOne {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *OrderItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for OrderItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderItemUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderItemUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderItemCreateBulk is the builder for creating many OrderItem entities in bulk.
type OrderItemCreateBulk struct {
	config
	builders []*OrderItemCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderItem entities in the database.
func (oicb *OrderItemCreateBulk) Save(ctx context.Context) ([]*OrderItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrderItem, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) SaveX(ctx context.Context) []*OrderItem {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicb *OrderItemCreateBulk) Exec(ctx context.Context) error {
	_, err := oicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) ExecX(ctx context.Context) {
	if err := oicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oicb *OrderItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderItemUpsertBulk {
	oicb.conflict = opts
	return &OrderItemUpsertBulk{
		create: oicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oicb *OrderItemCreateBulk) OnConflictColumns(columns ...string) *OrderItemUpsertBulk {
	oicb.conflict = append(oicb.conflict, sql.ConflictColumns(columns...))
	return &OrderItemUpsertBulk{
		create: oicb,
	}
}

// OrderItemUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderItem nodes.
type OrderItemUpsertBulk struct {
	create *OrderItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderItemUpsertBulk) UpdateNewValues() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderitem.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderItemUpsertBulk) Ignore() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderItemUpsertBulk) DoNothing() *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderItemCreateBulk.OnConflict
// documentation for more info.
func (u *OrderItemUpsertBulk) Update(set func(*OrderItemUpsert)) *OrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderItemUpsertBulk) SetUpdatedAt(v time.Time) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateUpdatedAt() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderItemUpsertBulk) SetDeletedAt(v time.Time) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateDeletedAt() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderItemUpsertBulk) ClearDeletedAt() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderItemUpsertBulk) SetOrderID(v int64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateOrderID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderItemUpsertBulk) ClearOrderID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderItemUpsertBulk) SetProductID(v int64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *OrderItemUpsertBulk) AddProductID(v int64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *OrderItemUpsertBulk) ClearProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearProductID()
	})
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *OrderItemUpsertBulk) SetPlatformProductID(v int64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPlatformProductID(v)
	})
}

// AddPlatformProductID adds v to the "platform_product_id" field.
func (u *OrderItemUpsertBulk) AddPlatformProductID(v int64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddPlatformProductID(v)
	})
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdatePlatformProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePlatformProductID()
	})
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *OrderItemUpsertBulk) ClearPlatformProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearPlatformProductID()
	})
}

// SetBarcode sets the "barcode" field.
func (u *OrderItemUpsertBulk) SetBarcode(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateBarcode() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetFulfillmentService sets the "fulfillment_service" field.
func (u *OrderItemUpsertBulk) SetFulfillmentService(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetFulfillmentService(v)
	})
}

// UpdateFulfillmentService sets the "fulfillment_service" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateFulfillmentService() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateFulfillmentService()
	})
}

// SetExtOrderItemID sets the "ext_order_item_id" field.
func (u *OrderItemUpsertBulk) SetExtOrderItemID(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetExtOrderItemID(v)
	})
}

// UpdateExtOrderItemID sets the "ext_order_item_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateExtOrderItemID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateExtOrderItemID()
	})
}

// SetExtProductID sets the "ext_product_id" field.
func (u *OrderItemUpsertBulk) SetExtProductID(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetExtProductID(v)
	})
}

// UpdateExtProductID sets the "ext_product_id" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateExtProductID() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateExtProductID()
	})
}

// SetIsCustomItem sets the "is_custom_item" field.
func (u *OrderItemUpsertBulk) SetIsCustomItem(v bool) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetIsCustomItem(v)
	})
}

// UpdateIsCustomItem sets the "is_custom_item" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateIsCustomItem() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateIsCustomItem()
	})
}

// SetName sets the "name" field.
func (u *OrderItemUpsertBulk) SetName(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateName()
	})
}

// SetDeclaredCnName sets the "declared_cn_name" field.
func (u *OrderItemUpsertBulk) SetDeclaredCnName(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredCnName(v)
	})
}

// UpdateDeclaredCnName sets the "declared_cn_name" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateDeclaredCnName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredCnName()
	})
}

// ClearDeclaredCnName clears the value of the "declared_cn_name" field.
func (u *OrderItemUpsertBulk) ClearDeclaredCnName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeclaredCnName()
	})
}

// SetHsCode sets the "hs_code" field.
func (u *OrderItemUpsertBulk) SetHsCode(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetHsCode(v)
	})
}

// UpdateHsCode sets the "hs_code" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateHsCode() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateHsCode()
	})
}

// SetMaterial sets the "material" field.
func (u *OrderItemUpsertBulk) SetMaterial(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateMaterial() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateMaterial()
	})
}

// SetPurpose sets the "purpose" field.
func (u *OrderItemUpsertBulk) SetPurpose(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetPurpose(v)
	})
}

// UpdatePurpose sets the "purpose" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdatePurpose() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdatePurpose()
	})
}

// SetImages sets the "images" field.
func (u *OrderItemUpsertBulk) SetImages(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateImages() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *OrderItemUpsertBulk) ClearImages() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearImages()
	})
}

// SetAttributes sets the "attributes" field.
func (u *OrderItemUpsertBulk) SetAttributes(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateAttributes() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *OrderItemUpsertBulk) ClearAttributes() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearAttributes()
	})
}

// SetGrams sets the "grams" field.
func (u *OrderItemUpsertBulk) SetGrams(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetGrams(v)
	})
}

// AddGrams adds v to the "grams" field.
func (u *OrderItemUpsertBulk) AddGrams(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddGrams(v)
	})
}

// UpdateGrams sets the "grams" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateGrams() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateGrams()
	})
}

// SetLength sets the "length" field.
func (u *OrderItemUpsertBulk) SetLength(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *OrderItemUpsertBulk) AddLength(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateLength() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateLength()
	})
}

// SetWidth sets the "width" field.
func (u *OrderItemUpsertBulk) SetWidth(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *OrderItemUpsertBulk) AddWidth(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateWidth() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *OrderItemUpsertBulk) SetHeight(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *OrderItemUpsertBulk) AddHeight(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateHeight() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateHeight()
	})
}

// SetQty sets the "qty" field.
func (u *OrderItemUpsertBulk) SetQty(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *OrderItemUpsertBulk) AddQty(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateQty() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateQty()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderItemUpsertBulk) SetUnitPrice(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderItemUpsertBulk) AddUnitPrice(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateUnitPrice() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetDeclaredValueInUsd sets the "declared_value_in_usd" field.
func (u *OrderItemUpsertBulk) SetDeclaredValueInUsd(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredValueInUsd(v)
	})
}

// AddDeclaredValueInUsd adds v to the "declared_value_in_usd" field.
func (u *OrderItemUpsertBulk) AddDeclaredValueInUsd(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddDeclaredValueInUsd(v)
	})
}

// UpdateDeclaredValueInUsd sets the "declared_value_in_usd" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateDeclaredValueInUsd() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredValueInUsd()
	})
}

// SetDeclaredValueInEur sets the "declared_value_in_eur" field.
func (u *OrderItemUpsertBulk) SetDeclaredValueInEur(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredValueInEur(v)
	})
}

// AddDeclaredValueInEur adds v to the "declared_value_in_eur" field.
func (u *OrderItemUpsertBulk) AddDeclaredValueInEur(v float64) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddDeclaredValueInEur(v)
	})
}

// UpdateDeclaredValueInEur sets the "declared_value_in_eur" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateDeclaredValueInEur() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredValueInEur()
	})
}

// SetCurrency sets the "currency" field.
func (u *OrderItemUpsertBulk) SetCurrency(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateCurrency() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateCurrency()
	})
}

// SetFulfillQty sets the "fulfill_qty" field.
func (u *OrderItemUpsertBulk) SetFulfillQty(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetFulfillQty(v)
	})
}

// AddFulfillQty adds v to the "fulfill_qty" field.
func (u *OrderItemUpsertBulk) AddFulfillQty(v int) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddFulfillQty(v)
	})
}

// UpdateFulfillQty sets the "fulfill_qty" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateFulfillQty() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateFulfillQty()
	})
}

// SetRequiresShipping sets the "requires_shipping" field.
func (u *OrderItemUpsertBulk) SetRequiresShipping(v bool) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetRequiresShipping(v)
	})
}

// UpdateRequiresShipping sets the "requires_shipping" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateRequiresShipping() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateRequiresShipping()
	})
}

// SetGiftCard sets the "gift_card" field.
func (u *OrderItemUpsertBulk) SetGiftCard(v bool) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetGiftCard(v)
	})
}

// UpdateGiftCard sets the "gift_card" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateGiftCard() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateGiftCard()
	})
}

// SetTaxable sets the "taxable" field.
func (u *OrderItemUpsertBulk) SetTaxable(v bool) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetTaxable(v)
	})
}

// UpdateTaxable sets the "taxable" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateTaxable() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateTaxable()
	})
}

// SetStatus sets the "status" field.
func (u *OrderItemUpsertBulk) SetStatus(v int8) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderItemUpsertBulk) AddStatus(v int8) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateStatus() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateStatus()
	})
}

// SetSku sets the "sku" field.
func (u *OrderItemUpsertBulk) SetSku(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateSku() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateSku()
	})
}

// ClearSku clears the value of the "sku" field.
func (u *OrderItemUpsertBulk) ClearSku() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearSku()
	})
}

// SetListingSku sets the "listing_sku" field.
func (u *OrderItemUpsertBulk) SetListingSku(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetListingSku(v)
	})
}

// UpdateListingSku sets the "listing_sku" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateListingSku() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateListingSku()
	})
}

// ClearListingSku clears the value of the "listing_sku" field.
func (u *OrderItemUpsertBulk) ClearListingSku() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearListingSku()
	})
}

// SetDeclaredEnName sets the "declared_en_name" field.
func (u *OrderItemUpsertBulk) SetDeclaredEnName(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetDeclaredEnName(v)
	})
}

// UpdateDeclaredEnName sets the "declared_en_name" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateDeclaredEnName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateDeclaredEnName()
	})
}

// ClearDeclaredEnName clears the value of the "declared_en_name" field.
func (u *OrderItemUpsertBulk) ClearDeclaredEnName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearDeclaredEnName()
	})
}

// SetProductName sets the "product_name" field.
func (u *OrderItemUpsertBulk) SetProductName(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateProductName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateProductName()
	})
}

// ClearProductName clears the value of the "product_name" field.
func (u *OrderItemUpsertBulk) ClearProductName() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.ClearProductName()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *OrderItemUpsertBulk) SetCustomerCode(v string) *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *OrderItemUpsertBulk) UpdateCustomerCode() *OrderItemUpsertBulk {
	return u.Update(func(s *OrderItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *OrderItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the OrderItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for OrderItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
