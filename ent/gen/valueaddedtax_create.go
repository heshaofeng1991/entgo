// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/valueaddedtax"
)

// ValueAddedTaxCreate is the builder for creating a ValueAddedTax entity.
type ValueAddedTaxCreate struct {
	config
	mutation *ValueAddedTaxMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vatc *ValueAddedTaxCreate) SetCreatedAt(t time.Time) *ValueAddedTaxCreate {
	vatc.mutation.SetCreatedAt(t)
	return vatc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableCreatedAt(t *time.Time) *ValueAddedTaxCreate {
	if t != nil {
		vatc.SetCreatedAt(*t)
	}
	return vatc
}

// SetUpdatedAt sets the "updated_at" field.
func (vatc *ValueAddedTaxCreate) SetUpdatedAt(t time.Time) *ValueAddedTaxCreate {
	vatc.mutation.SetUpdatedAt(t)
	return vatc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableUpdatedAt(t *time.Time) *ValueAddedTaxCreate {
	if t != nil {
		vatc.SetUpdatedAt(*t)
	}
	return vatc
}

// SetDeletedAt sets the "deleted_at" field.
func (vatc *ValueAddedTaxCreate) SetDeletedAt(t time.Time) *ValueAddedTaxCreate {
	vatc.mutation.SetDeletedAt(t)
	return vatc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableDeletedAt(t *time.Time) *ValueAddedTaxCreate {
	if t != nil {
		vatc.SetDeletedAt(*t)
	}
	return vatc
}

// SetCountryCode sets the "country_code" field.
func (vatc *ValueAddedTaxCreate) SetCountryCode(s string) *ValueAddedTaxCreate {
	vatc.mutation.SetCountryCode(s)
	return vatc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableCountryCode(s *string) *ValueAddedTaxCreate {
	if s != nil {
		vatc.SetCountryCode(*s)
	}
	return vatc
}

// SetStandardRate sets the "standard_rate" field.
func (vatc *ValueAddedTaxCreate) SetStandardRate(f float64) *ValueAddedTaxCreate {
	vatc.mutation.SetStandardRate(f)
	return vatc
}

// SetNillableStandardRate sets the "standard_rate" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableStandardRate(f *float64) *ValueAddedTaxCreate {
	if f != nil {
		vatc.SetStandardRate(*f)
	}
	return vatc
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (vatc *ValueAddedTaxCreate) SetWithoutIossRate(f float64) *ValueAddedTaxCreate {
	vatc.mutation.SetWithoutIossRate(f)
	return vatc
}

// SetNillableWithoutIossRate sets the "without_ioss_rate" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableWithoutIossRate(f *float64) *ValueAddedTaxCreate {
	if f != nil {
		vatc.SetWithoutIossRate(*f)
	}
	return vatc
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (vatc *ValueAddedTaxCreate) SetExemptionInUsd(f float64) *ValueAddedTaxCreate {
	vatc.mutation.SetExemptionInUsd(f)
	return vatc
}

// SetNillableExemptionInUsd sets the "exemption_in_usd" field if the given value is not nil.
func (vatc *ValueAddedTaxCreate) SetNillableExemptionInUsd(f *float64) *ValueAddedTaxCreate {
	if f != nil {
		vatc.SetExemptionInUsd(*f)
	}
	return vatc
}

// SetID sets the "id" field.
func (vatc *ValueAddedTaxCreate) SetID(i int64) *ValueAddedTaxCreate {
	vatc.mutation.SetID(i)
	return vatc
}

// Mutation returns the ValueAddedTaxMutation object of the builder.
func (vatc *ValueAddedTaxCreate) Mutation() *ValueAddedTaxMutation {
	return vatc.mutation
}

// Save creates the ValueAddedTax in the database.
func (vatc *ValueAddedTaxCreate) Save(ctx context.Context) (*ValueAddedTax, error) {
	var (
		err  error
		node *ValueAddedTax
	)
	vatc.defaults()
	if len(vatc.hooks) == 0 {
		if err = vatc.check(); err != nil {
			return nil, err
		}
		node, err = vatc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValueAddedTaxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vatc.check(); err != nil {
				return nil, err
			}
			vatc.mutation = mutation
			if node, err = vatc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vatc.hooks) - 1; i >= 0; i-- {
			if vatc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vatc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vatc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ValueAddedTax)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ValueAddedTaxMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vatc *ValueAddedTaxCreate) SaveX(ctx context.Context) *ValueAddedTax {
	v, err := vatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vatc *ValueAddedTaxCreate) Exec(ctx context.Context) error {
	_, err := vatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vatc *ValueAddedTaxCreate) ExecX(ctx context.Context) {
	if err := vatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vatc *ValueAddedTaxCreate) defaults() {
	if _, ok := vatc.mutation.CreatedAt(); !ok {
		v := valueaddedtax.DefaultCreatedAt()
		vatc.mutation.SetCreatedAt(v)
	}
	if _, ok := vatc.mutation.UpdatedAt(); !ok {
		v := valueaddedtax.DefaultUpdatedAt()
		vatc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vatc.mutation.CountryCode(); !ok {
		v := valueaddedtax.DefaultCountryCode
		vatc.mutation.SetCountryCode(v)
	}
	if _, ok := vatc.mutation.StandardRate(); !ok {
		v := valueaddedtax.DefaultStandardRate
		vatc.mutation.SetStandardRate(v)
	}
	if _, ok := vatc.mutation.WithoutIossRate(); !ok {
		v := valueaddedtax.DefaultWithoutIossRate
		vatc.mutation.SetWithoutIossRate(v)
	}
	if _, ok := vatc.mutation.ExemptionInUsd(); !ok {
		v := valueaddedtax.DefaultExemptionInUsd
		vatc.mutation.SetExemptionInUsd(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vatc *ValueAddedTaxCreate) check() error {
	if _, ok := vatc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ValueAddedTax.created_at"`)}
	}
	if _, ok := vatc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ValueAddedTax.updated_at"`)}
	}
	if _, ok := vatc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`gen: missing required field "ValueAddedTax.country_code"`)}
	}
	if _, ok := vatc.mutation.StandardRate(); !ok {
		return &ValidationError{Name: "standard_rate", err: errors.New(`gen: missing required field "ValueAddedTax.standard_rate"`)}
	}
	if _, ok := vatc.mutation.WithoutIossRate(); !ok {
		return &ValidationError{Name: "without_ioss_rate", err: errors.New(`gen: missing required field "ValueAddedTax.without_ioss_rate"`)}
	}
	if _, ok := vatc.mutation.ExemptionInUsd(); !ok {
		return &ValidationError{Name: "exemption_in_usd", err: errors.New(`gen: missing required field "ValueAddedTax.exemption_in_usd"`)}
	}
	return nil
}

func (vatc *ValueAddedTaxCreate) sqlSave(ctx context.Context) (*ValueAddedTax, error) {
	_node, _spec := vatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (vatc *ValueAddedTaxCreate) createSpec() (*ValueAddedTax, *sqlgraph.CreateSpec) {
	var (
		_node = &ValueAddedTax{config: vatc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: valueaddedtax.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: valueaddedtax.FieldID,
			},
		}
	)
	_spec.Schema = vatc.schemaConfig.ValueAddedTax
	_spec.OnConflict = vatc.conflict
	if id, ok := vatc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vatc.mutation.CreatedAt(); ok {
		_spec.SetField(valueaddedtax.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vatc.mutation.UpdatedAt(); ok {
		_spec.SetField(valueaddedtax.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vatc.mutation.DeletedAt(); ok {
		_spec.SetField(valueaddedtax.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vatc.mutation.CountryCode(); ok {
		_spec.SetField(valueaddedtax.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := vatc.mutation.StandardRate(); ok {
		_spec.SetField(valueaddedtax.FieldStandardRate, field.TypeFloat64, value)
		_node.StandardRate = value
	}
	if value, ok := vatc.mutation.WithoutIossRate(); ok {
		_spec.SetField(valueaddedtax.FieldWithoutIossRate, field.TypeFloat64, value)
		_node.WithoutIossRate = value
	}
	if value, ok := vatc.mutation.ExemptionInUsd(); ok {
		_spec.SetField(valueaddedtax.FieldExemptionInUsd, field.TypeFloat64, value)
		_node.ExemptionInUsd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ValueAddedTax.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ValueAddedTaxUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vatc *ValueAddedTaxCreate) OnConflict(opts ...sql.ConflictOption) *ValueAddedTaxUpsertOne {
	vatc.conflict = opts
	return &ValueAddedTaxUpsertOne{
		create: vatc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vatc *ValueAddedTaxCreate) OnConflictColumns(columns ...string) *ValueAddedTaxUpsertOne {
	vatc.conflict = append(vatc.conflict, sql.ConflictColumns(columns...))
	return &ValueAddedTaxUpsertOne{
		create: vatc,
	}
}

type (
	// ValueAddedTaxUpsertOne is the builder for "upsert"-ing
	//  one ValueAddedTax node.
	ValueAddedTaxUpsertOne struct {
		create *ValueAddedTaxCreate
	}

	// ValueAddedTaxUpsert is the "OnConflict" setter.
	ValueAddedTaxUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ValueAddedTaxUpsert) SetUpdatedAt(v time.Time) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateUpdatedAt() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ValueAddedTaxUpsert) SetDeletedAt(v time.Time) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateDeletedAt() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ValueAddedTaxUpsert) ClearDeletedAt() *ValueAddedTaxUpsert {
	u.SetNull(valueaddedtax.FieldDeletedAt)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *ValueAddedTaxUpsert) SetCountryCode(v string) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateCountryCode() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldCountryCode)
	return u
}

// SetStandardRate sets the "standard_rate" field.
func (u *ValueAddedTaxUpsert) SetStandardRate(v float64) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldStandardRate, v)
	return u
}

// UpdateStandardRate sets the "standard_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateStandardRate() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldStandardRate)
	return u
}

// AddStandardRate adds v to the "standard_rate" field.
func (u *ValueAddedTaxUpsert) AddStandardRate(v float64) *ValueAddedTaxUpsert {
	u.Add(valueaddedtax.FieldStandardRate, v)
	return u
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsert) SetWithoutIossRate(v float64) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldWithoutIossRate, v)
	return u
}

// UpdateWithoutIossRate sets the "without_ioss_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateWithoutIossRate() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldWithoutIossRate)
	return u
}

// AddWithoutIossRate adds v to the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsert) AddWithoutIossRate(v float64) *ValueAddedTaxUpsert {
	u.Add(valueaddedtax.FieldWithoutIossRate, v)
	return u
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsert) SetExemptionInUsd(v float64) *ValueAddedTaxUpsert {
	u.Set(valueaddedtax.FieldExemptionInUsd, v)
	return u
}

// UpdateExemptionInUsd sets the "exemption_in_usd" field to the value that was provided on create.
func (u *ValueAddedTaxUpsert) UpdateExemptionInUsd() *ValueAddedTaxUpsert {
	u.SetExcluded(valueaddedtax.FieldExemptionInUsd)
	return u
}

// AddExemptionInUsd adds v to the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsert) AddExemptionInUsd(v float64) *ValueAddedTaxUpsert {
	u.Add(valueaddedtax.FieldExemptionInUsd, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(valueaddedtax.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ValueAddedTaxUpsertOne) UpdateNewValues() *ValueAddedTaxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(valueaddedtax.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(valueaddedtax.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ValueAddedTaxUpsertOne) Ignore() *ValueAddedTaxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ValueAddedTaxUpsertOne) DoNothing() *ValueAddedTaxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ValueAddedTaxCreate.OnConflict
// documentation for more info.
func (u *ValueAddedTaxUpsertOne) Update(set func(*ValueAddedTaxUpsert)) *ValueAddedTaxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ValueAddedTaxUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ValueAddedTaxUpsertOne) SetUpdatedAt(v time.Time) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateUpdatedAt() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ValueAddedTaxUpsertOne) SetDeletedAt(v time.Time) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateDeletedAt() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ValueAddedTaxUpsertOne) ClearDeletedAt() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ValueAddedTaxUpsertOne) SetCountryCode(v string) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateCountryCode() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateCountryCode()
	})
}

// SetStandardRate sets the "standard_rate" field.
func (u *ValueAddedTaxUpsertOne) SetStandardRate(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetStandardRate(v)
	})
}

// AddStandardRate adds v to the "standard_rate" field.
func (u *ValueAddedTaxUpsertOne) AddStandardRate(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddStandardRate(v)
	})
}

// UpdateStandardRate sets the "standard_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateStandardRate() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateStandardRate()
	})
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsertOne) SetWithoutIossRate(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetWithoutIossRate(v)
	})
}

// AddWithoutIossRate adds v to the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsertOne) AddWithoutIossRate(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddWithoutIossRate(v)
	})
}

// UpdateWithoutIossRate sets the "without_ioss_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateWithoutIossRate() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateWithoutIossRate()
	})
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsertOne) SetExemptionInUsd(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetExemptionInUsd(v)
	})
}

// AddExemptionInUsd adds v to the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsertOne) AddExemptionInUsd(v float64) *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddExemptionInUsd(v)
	})
}

// UpdateExemptionInUsd sets the "exemption_in_usd" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertOne) UpdateExemptionInUsd() *ValueAddedTaxUpsertOne {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateExemptionInUsd()
	})
}

// Exec executes the query.
func (u *ValueAddedTaxUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ValueAddedTaxCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ValueAddedTaxUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ValueAddedTaxUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ValueAddedTaxUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ValueAddedTaxCreateBulk is the builder for creating many ValueAddedTax entities in bulk.
type ValueAddedTaxCreateBulk struct {
	config
	builders []*ValueAddedTaxCreate
	conflict []sql.ConflictOption
}

// Save creates the ValueAddedTax entities in the database.
func (vatcb *ValueAddedTaxCreateBulk) Save(ctx context.Context) ([]*ValueAddedTax, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vatcb.builders))
	nodes := make([]*ValueAddedTax, len(vatcb.builders))
	mutators := make([]Mutator, len(vatcb.builders))
	for i := range vatcb.builders {
		func(i int, root context.Context) {
			builder := vatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ValueAddedTaxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vatcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vatcb *ValueAddedTaxCreateBulk) SaveX(ctx context.Context) []*ValueAddedTax {
	v, err := vatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vatcb *ValueAddedTaxCreateBulk) Exec(ctx context.Context) error {
	_, err := vatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vatcb *ValueAddedTaxCreateBulk) ExecX(ctx context.Context) {
	if err := vatcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ValueAddedTax.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ValueAddedTaxUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vatcb *ValueAddedTaxCreateBulk) OnConflict(opts ...sql.ConflictOption) *ValueAddedTaxUpsertBulk {
	vatcb.conflict = opts
	return &ValueAddedTaxUpsertBulk{
		create: vatcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vatcb *ValueAddedTaxCreateBulk) OnConflictColumns(columns ...string) *ValueAddedTaxUpsertBulk {
	vatcb.conflict = append(vatcb.conflict, sql.ConflictColumns(columns...))
	return &ValueAddedTaxUpsertBulk{
		create: vatcb,
	}
}

// ValueAddedTaxUpsertBulk is the builder for "upsert"-ing
// a bulk of ValueAddedTax nodes.
type ValueAddedTaxUpsertBulk struct {
	create *ValueAddedTaxCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(valueaddedtax.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ValueAddedTaxUpsertBulk) UpdateNewValues() *ValueAddedTaxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(valueaddedtax.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(valueaddedtax.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ValueAddedTax.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ValueAddedTaxUpsertBulk) Ignore() *ValueAddedTaxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ValueAddedTaxUpsertBulk) DoNothing() *ValueAddedTaxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ValueAddedTaxCreateBulk.OnConflict
// documentation for more info.
func (u *ValueAddedTaxUpsertBulk) Update(set func(*ValueAddedTaxUpsert)) *ValueAddedTaxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ValueAddedTaxUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ValueAddedTaxUpsertBulk) SetUpdatedAt(v time.Time) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateUpdatedAt() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ValueAddedTaxUpsertBulk) SetDeletedAt(v time.Time) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateDeletedAt() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ValueAddedTaxUpsertBulk) ClearDeletedAt() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ValueAddedTaxUpsertBulk) SetCountryCode(v string) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateCountryCode() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateCountryCode()
	})
}

// SetStandardRate sets the "standard_rate" field.
func (u *ValueAddedTaxUpsertBulk) SetStandardRate(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetStandardRate(v)
	})
}

// AddStandardRate adds v to the "standard_rate" field.
func (u *ValueAddedTaxUpsertBulk) AddStandardRate(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddStandardRate(v)
	})
}

// UpdateStandardRate sets the "standard_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateStandardRate() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateStandardRate()
	})
}

// SetWithoutIossRate sets the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsertBulk) SetWithoutIossRate(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetWithoutIossRate(v)
	})
}

// AddWithoutIossRate adds v to the "without_ioss_rate" field.
func (u *ValueAddedTaxUpsertBulk) AddWithoutIossRate(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddWithoutIossRate(v)
	})
}

// UpdateWithoutIossRate sets the "without_ioss_rate" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateWithoutIossRate() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateWithoutIossRate()
	})
}

// SetExemptionInUsd sets the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsertBulk) SetExemptionInUsd(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.SetExemptionInUsd(v)
	})
}

// AddExemptionInUsd adds v to the "exemption_in_usd" field.
func (u *ValueAddedTaxUpsertBulk) AddExemptionInUsd(v float64) *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.AddExemptionInUsd(v)
	})
}

// UpdateExemptionInUsd sets the "exemption_in_usd" field to the value that was provided on create.
func (u *ValueAddedTaxUpsertBulk) UpdateExemptionInUsd() *ValueAddedTaxUpsertBulk {
	return u.Update(func(s *ValueAddedTaxUpsert) {
		s.UpdateExemptionInUsd()
	})
}

// Exec executes the query.
func (u *ValueAddedTaxUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ValueAddedTaxCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ValueAddedTaxCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ValueAddedTaxUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
