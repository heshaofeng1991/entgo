// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/courierorder"
)

// CourierOrder is the model entity for the CourierOrder schema.
type CourierOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int64 `json:"order_id,omitempty"`
	// OrderNumber holds the value of the "order_number" field.
	OrderNumber string `json:"order_number,omitempty"`
	// CourierPlatform holds the value of the "courier_platform" field.
	CourierPlatform string `json:"courier_platform,omitempty"`
	// ShippingMethodCode holds the value of the "shipping_method_code" field.
	ShippingMethodCode string `json:"shipping_method_code,omitempty"`
	// ShippingMethodName holds the value of the "shipping_method_name" field.
	ShippingMethodName string `json:"shipping_method_name,omitempty"`
	// TrackingURL holds the value of the "tracking_url" field.
	TrackingURL string `json:"tracking_url,omitempty"`
	// TrackingNumber holds the value of the "tracking_number" field.
	TrackingNumber string `json:"tracking_number,omitempty"`
	// WaybillNumber holds the value of the "waybill_number" field.
	WaybillNumber string `json:"waybill_number,omitempty"`
	// CourierOrderNumber holds the value of the "courier_order_number" field.
	CourierOrderNumber string `json:"courier_order_number,omitempty"`
	// ShippingLabelURL holds the value of the "shipping_label_url" field.
	ShippingLabelURL string `json:"shipping_label_url,omitempty"`
	// TotalItemsPrice holds the value of the "total_items_price" field.
	TotalItemsPrice float64 `json:"total_items_price,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// PackageCount holds the value of the "package_count" field.
	PackageCount int `json:"package_count,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// ReceiverAddress holds the value of the "receiver_address" field.
	ReceiverAddress *string `json:"receiver_address,omitempty"`
	// SenderAddress holds the value of the "sender_address" field.
	SenderAddress *string `json:"sender_address,omitempty"`
	// Items holds the value of the "items" field.
	Items *string `json:"items,omitempty"`
	// RequestData holds the value of the "request_data" field.
	RequestData *string `json:"request_data,omitempty"`
	// ResponseData holds the value of the "response_data" field.
	ResponseData *string `json:"response_data,omitempty"`
	// ResultCode holds the value of the "result_code" field.
	ResultCode string `json:"result_code,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// EnMessage holds the value of the "en_message" field.
	EnMessage string `json:"en_message,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourierOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case courierorder.FieldTotalItemsPrice:
			values[i] = new(sql.NullFloat64)
		case courierorder.FieldID, courierorder.FieldOrderID, courierorder.FieldPackageCount, courierorder.FieldWeight:
			values[i] = new(sql.NullInt64)
		case courierorder.FieldOrderNumber, courierorder.FieldCourierPlatform, courierorder.FieldShippingMethodCode, courierorder.FieldShippingMethodName, courierorder.FieldTrackingURL, courierorder.FieldTrackingNumber, courierorder.FieldWaybillNumber, courierorder.FieldCourierOrderNumber, courierorder.FieldShippingLabelURL, courierorder.FieldCurrency, courierorder.FieldReceiverAddress, courierorder.FieldSenderAddress, courierorder.FieldItems, courierorder.FieldRequestData, courierorder.FieldResponseData, courierorder.FieldResultCode, courierorder.FieldMessage, courierorder.FieldEnMessage, courierorder.FieldStatus:
			values[i] = new(sql.NullString)
		case courierorder.FieldCreatedAt, courierorder.FieldUpdatedAt, courierorder.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CourierOrder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourierOrder fields.
func (co *CourierOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case courierorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			co.ID = int64(value.Int64)
		case courierorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				co.CreatedAt = value.Time
			}
		case courierorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				co.UpdatedAt = value.Time
			}
		case courierorder.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				co.DeletedAt = value.Time
			}
		case courierorder.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				co.OrderID = value.Int64
			}
		case courierorder.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				co.OrderNumber = value.String
			}
		case courierorder.FieldCourierPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courier_platform", values[i])
			} else if value.Valid {
				co.CourierPlatform = value.String
			}
		case courierorder.FieldShippingMethodCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method_code", values[i])
			} else if value.Valid {
				co.ShippingMethodCode = value.String
			}
		case courierorder.FieldShippingMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method_name", values[i])
			} else if value.Valid {
				co.ShippingMethodName = value.String
			}
		case courierorder.FieldTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_url", values[i])
			} else if value.Valid {
				co.TrackingURL = value.String
			}
		case courierorder.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				co.TrackingNumber = value.String
			}
		case courierorder.FieldWaybillNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field waybill_number", values[i])
			} else if value.Valid {
				co.WaybillNumber = value.String
			}
		case courierorder.FieldCourierOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courier_order_number", values[i])
			} else if value.Valid {
				co.CourierOrderNumber = value.String
			}
		case courierorder.FieldShippingLabelURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_label_url", values[i])
			} else if value.Valid {
				co.ShippingLabelURL = value.String
			}
		case courierorder.FieldTotalItemsPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_items_price", values[i])
			} else if value.Valid {
				co.TotalItemsPrice = value.Float64
			}
		case courierorder.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				co.Currency = value.String
			}
		case courierorder.FieldPackageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_count", values[i])
			} else if value.Valid {
				co.PackageCount = int(value.Int64)
			}
		case courierorder.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				co.Weight = int(value.Int64)
			}
		case courierorder.FieldReceiverAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_address", values[i])
			} else if value.Valid {
				co.ReceiverAddress = new(string)
				*co.ReceiverAddress = value.String
			}
		case courierorder.FieldSenderAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_address", values[i])
			} else if value.Valid {
				co.SenderAddress = new(string)
				*co.SenderAddress = value.String
			}
		case courierorder.FieldItems:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field items", values[i])
			} else if value.Valid {
				co.Items = new(string)
				*co.Items = value.String
			}
		case courierorder.FieldRequestData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_data", values[i])
			} else if value.Valid {
				co.RequestData = new(string)
				*co.RequestData = value.String
			}
		case courierorder.FieldResponseData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data", values[i])
			} else if value.Valid {
				co.ResponseData = new(string)
				*co.ResponseData = value.String
			}
		case courierorder.FieldResultCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_code", values[i])
			} else if value.Valid {
				co.ResultCode = value.String
			}
		case courierorder.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				co.Message = value.String
			}
		case courierorder.FieldEnMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field en_message", values[i])
			} else if value.Valid {
				co.EnMessage = value.String
			}
		case courierorder.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				co.Status = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CourierOrder.
// Note that you need to call CourierOrder.Unwrap() before calling this method if this CourierOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CourierOrder) Update() *CourierOrderUpdateOne {
	return (&CourierOrderClient{config: co.config}).UpdateOne(co)
}

// Unwrap unwraps the CourierOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CourierOrder) Unwrap() *CourierOrder {
	_tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("gen: CourierOrder is not a transactional entity")
	}
	co.config.driver = _tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CourierOrder) String() string {
	var builder strings.Builder
	builder.WriteString("CourierOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", co.ID))
	builder.WriteString("created_at=")
	builder.WriteString(co.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(co.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(co.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", co.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_number=")
	builder.WriteString(co.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("courier_platform=")
	builder.WriteString(co.CourierPlatform)
	builder.WriteString(", ")
	builder.WriteString("shipping_method_code=")
	builder.WriteString(co.ShippingMethodCode)
	builder.WriteString(", ")
	builder.WriteString("shipping_method_name=")
	builder.WriteString(co.ShippingMethodName)
	builder.WriteString(", ")
	builder.WriteString("tracking_url=")
	builder.WriteString(co.TrackingURL)
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(co.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("waybill_number=")
	builder.WriteString(co.WaybillNumber)
	builder.WriteString(", ")
	builder.WriteString("courier_order_number=")
	builder.WriteString(co.CourierOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("shipping_label_url=")
	builder.WriteString(co.ShippingLabelURL)
	builder.WriteString(", ")
	builder.WriteString("total_items_price=")
	builder.WriteString(fmt.Sprintf("%v", co.TotalItemsPrice))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(co.Currency)
	builder.WriteString(", ")
	builder.WriteString("package_count=")
	builder.WriteString(fmt.Sprintf("%v", co.PackageCount))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", co.Weight))
	builder.WriteString(", ")
	if v := co.ReceiverAddress; v != nil {
		builder.WriteString("receiver_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := co.SenderAddress; v != nil {
		builder.WriteString("sender_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := co.Items; v != nil {
		builder.WriteString("items=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := co.RequestData; v != nil {
		builder.WriteString("request_data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := co.ResponseData; v != nil {
		builder.WriteString("response_data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("result_code=")
	builder.WriteString(co.ResultCode)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(co.Message)
	builder.WriteString(", ")
	builder.WriteString("en_message=")
	builder.WriteString(co.EnMessage)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(co.Status)
	builder.WriteByte(')')
	return builder.String()
}

// CourierOrders is a parsable slice of CourierOrder.
type CourierOrders []*CourierOrder

func (co CourierOrders) config(cfg config) {
	for _i := range co {
		co[_i].config = cfg
	}
}
