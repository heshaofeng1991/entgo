// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OrderNumber applies equality check predicate on the "order_number" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Offline applies equality check predicate on the "offline" field. It's identical to OfflineEQ.
func Offline(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOffline), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// CustomerCode applies equality check predicate on the "customer_code" field. It's identical to CustomerCodeEQ.
func CustomerCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// PrepayTariff applies equality check predicate on the "prepay_tariff" field. It's identical to PrepayTariffEQ.
func PrepayTariff(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// IossNumber applies equality check predicate on the "ioss_number" field. It's identical to IossNumberEQ.
func IossNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossCountryCode applies equality check predicate on the "ioss_country_code" field. It's identical to IossCountryCodeEQ.
func IossCountryCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// IossNumberType applies equality check predicate on the "ioss_number_type" field. It's identical to IossNumberTypeEQ.
func IossNumberType(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumberType), v))
	})
}

// UkVatNumber applies equality check predicate on the "uk_vat_number" field. It's identical to UkVatNumberEQ.
func UkVatNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// InboundOrderNumber applies equality check predicate on the "inbound_order_number" field. It's identical to InboundOrderNumberEQ.
func InboundOrderNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboundOrderNumber), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// SqsStatus applies equality check predicate on the "sqs_status" field. It's identical to SqsStatusEQ.
func SqsStatus(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSqsStatus), v))
	})
}

// HoldStatus applies equality check predicate on the "hold_status" field. It's identical to HoldStatusEQ.
func HoldStatus(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHoldStatus), v))
	})
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentStatus), v))
	})
}

// CancelRequest applies equality check predicate on the "cancel_request" field. It's identical to CancelRequestEQ.
func CancelRequest(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelRequest), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformOrderID applies equality check predicate on the "platform_order_id" field. It's identical to PlatformOrderIDEQ.
func PlatformOrderID(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderNo applies equality check predicate on the "platform_order_no" field. It's identical to PlatformOrderNoEQ.
func PlatformOrderNo(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderStatusURL applies equality check predicate on the "platform_order_status_url" field. It's identical to PlatformOrderStatusURLEQ.
func PlatformOrderStatusURL(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformStatus applies equality check predicate on the "platform_status" field. It's identical to PlatformStatusEQ.
func PlatformStatus(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformStatus), v))
	})
}

// PaidStatus applies equality check predicate on the "paid_status" field. It's identical to PaidStatusEQ.
func PaidStatus(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidStatus), v))
	})
}

// FulfillmentPushed applies equality check predicate on the "fulfillment_pushed" field. It's identical to FulfillmentPushedEQ.
func FulfillmentPushed(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentPushed), v))
	})
}

// FulfillmentStatus applies equality check predicate on the "fulfillment_status" field. It's identical to FulfillmentStatusEQ.
func FulfillmentStatus(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentStatus), v))
	})
}

// PlatformCreatedAt applies equality check predicate on the "platform_created_at" field. It's identical to PlatformCreatedAtEQ.
func PlatformCreatedAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformCreatedAt), v))
	})
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationID), v))
	})
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// CancelReason applies equality check predicate on the "cancel_reason" field. It's identical to CancelReasonEQ.
func CancelReason(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReason), v))
	})
}

// CancelledAt applies equality check predicate on the "cancelled_at" field. It's identical to CancelledAtEQ.
func CancelledAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelledAt), v))
	})
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosedAt), v))
	})
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactEmail), v))
	})
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// ShippingName applies equality check predicate on the "shipping_name" field. It's identical to ShippingNameEQ.
func ShippingName(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingName), v))
	})
}

// ShippingFirstName applies equality check predicate on the "shipping_first_name" field. It's identical to ShippingFirstNameEQ.
func ShippingFirstName(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFirstName), v))
	})
}

// ShippingLastName applies equality check predicate on the "shipping_last_name" field. It's identical to ShippingLastNameEQ.
func ShippingLastName(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLastName), v))
	})
}

// ShippingCompany applies equality check predicate on the "shipping_company" field. It's identical to ShippingCompanyEQ.
func ShippingCompany(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCompany), v))
	})
}

// ShippingCountry applies equality check predicate on the "shipping_country" field. It's identical to ShippingCountryEQ.
func ShippingCountry(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryCode applies equality check predicate on the "shipping_country_code" field. It's identical to ShippingCountryCodeEQ.
func ShippingCountryCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingProvince applies equality check predicate on the "shipping_province" field. It's identical to ShippingProvinceEQ.
func ShippingProvince(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceCode applies equality check predicate on the "shipping_province_code" field. It's identical to ShippingProvinceCodeEQ.
func ShippingProvinceCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingCity applies equality check predicate on the "shipping_city" field. It's identical to ShippingCityEQ.
func ShippingCity(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCity), v))
	})
}

// ShippingAddress1 applies equality check predicate on the "shipping_address1" field. It's identical to ShippingAddress1EQ.
func ShippingAddress1(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress2 applies equality check predicate on the "shipping_address2" field. It's identical to ShippingAddress2EQ.
func ShippingAddress2(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingAddress2), v))
	})
}

// ShippingZipCode applies equality check predicate on the "shipping_zip_code" field. It's identical to ShippingZipCodeEQ.
func ShippingZipCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingZipCode), v))
	})
}

// ShippingPhone applies equality check predicate on the "shipping_phone" field. It's identical to ShippingPhoneEQ.
func ShippingPhone(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingPhone), v))
	})
}

// ShippingCertificateType applies equality check predicate on the "shipping_certificate_type" field. It's identical to ShippingCertificateTypeEQ.
func ShippingCertificateType(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateCode applies equality check predicate on the "shipping_certificate_code" field. It's identical to ShippingCertificateCodeEQ.
func ShippingCertificateCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCredentialsPeriod applies equality check predicate on the "shipping_credentials_period" field. It's identical to ShippingCredentialsPeriodEQ.
func ShippingCredentialsPeriod(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// PreferShippedType applies equality check predicate on the "prefer_shipped_type" field. It's identical to PreferShippedTypeEQ.
func PreferShippedType(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferShippedType), v))
	})
}

// PreferChannelID applies equality check predicate on the "prefer_channel_id" field. It's identical to PreferChannelIDEQ.
func PreferChannelID(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferChannelID), v))
	})
}

// ChannelOptions applies equality check predicate on the "channel_options" field. It's identical to ChannelOptionsEQ.
func ChannelOptions(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelOptions), v))
	})
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelCostID applies equality check predicate on the "channel_cost_id" field. It's identical to ChannelCostIDEQ.
func ChannelCostID(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelCostID), v))
	})
}

// ShipType applies equality check predicate on the "ship_type" field. It's identical to ShipTypeEQ.
func ShipType(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipType), v))
	})
}

// TrackingCompany applies equality check predicate on the "tracking_company" field. It's identical to TrackingCompanyEQ.
func TrackingCompany(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingCompany), v))
	})
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingURL applies equality check predicate on the "tracking_url" field. It's identical to TrackingURLEQ.
func TrackingURL(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// WaybillNumber applies equality check predicate on the "waybill_number" field. It's identical to WaybillNumberEQ.
func WaybillNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaybillNumber), v))
	})
}

// CourierOrderNumber applies equality check predicate on the "courier_order_number" field. It's identical to CourierOrderNumberEQ.
func CourierOrderNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierOrderNumber), v))
	})
}

// NssCourierOrderNumber applies equality check predicate on the "nss_courier_order_number" field. It's identical to NssCourierOrderNumberEQ.
func NssCourierOrderNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssTrackingNumber applies equality check predicate on the "nss_tracking_number" field. It's identical to NssTrackingNumberEQ.
func NssTrackingNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingURL applies equality check predicate on the "nss_tracking_url" field. It's identical to NssTrackingURLEQ.
func NssTrackingURL(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssTrackingURL), v))
	})
}

// ShippingLabelURL applies equality check predicate on the "shipping_label_url" field. It's identical to ShippingLabelURLEQ.
func ShippingLabelURL(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelPath applies equality check predicate on the "shipping_label_path" field. It's identical to ShippingLabelPathEQ.
func ShippingLabelPath(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelPath), v))
	})
}

// LabelDataPath applies equality check predicate on the "label_data_path" field. It's identical to LabelDataPathEQ.
func LabelDataPath(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelDataPath), v))
	})
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageID), v))
	})
}

// ShipDate applies equality check predicate on the "ship_date" field. It's identical to ShipDateEQ.
func ShipDate(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipDate), v))
	})
}

// RequestShippingAt applies equality check predicate on the "request_shipping_at" field. It's identical to RequestShippingAtEQ.
func RequestShippingAt(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestShippingAt), v))
	})
}

// UnshelfRequestedTime applies equality check predicate on the "unshelf_requested_time" field. It's identical to UnshelfRequestedTimeEQ.
func UnshelfRequestedTime(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnshelfRequestedTime), v))
	})
}

// ContainerCode applies equality check predicate on the "container_code" field. It's identical to ContainerCodeEQ.
func ContainerCode(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerCode), v))
	})
}

// BasketNumber applies equality check predicate on the "basket_number" field. It's identical to BasketNumberEQ.
func BasketNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasketNumber), v))
	})
}

// PrintTimes applies equality check predicate on the "print_times" field. It's identical to PrintTimesEQ.
func PrintTimes(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintTimes), v))
	})
}

// SortingTrackingNumber applies equality check predicate on the "sorting_tracking_number" field. It's identical to SortingTrackingNumberEQ.
func SortingTrackingNumber(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingPort applies equality check predicate on the "sorting_port" field. It's identical to SortingPortEQ.
func SortingPort(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingPort), v))
	})
}

// SortingLength applies equality check predicate on the "sorting_length" field. It's identical to SortingLengthEQ.
func SortingLength(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingLength), v))
	})
}

// SortingWidth applies equality check predicate on the "sorting_width" field. It's identical to SortingWidthEQ.
func SortingWidth(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingWidth), v))
	})
}

// SortingHeight applies equality check predicate on the "sorting_height" field. It's identical to SortingHeightEQ.
func SortingHeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingHeight), v))
	})
}

// SortingWeight applies equality check predicate on the "sorting_weight" field. It's identical to SortingWeightEQ.
func SortingWeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingWeight), v))
	})
}

// EstimatedWeight applies equality check predicate on the "estimated_weight" field. It's identical to EstimatedWeightEQ.
func EstimatedWeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedWeight), v))
	})
}

// CheckoutActualWeight applies equality check predicate on the "checkout_actual_weight" field. It's identical to CheckoutActualWeightEQ.
func CheckoutActualWeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckoutActualWeight), v))
	})
}

// VolumeWeight applies equality check predicate on the "volume_weight" field. It's identical to VolumeWeightEQ.
func VolumeWeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumeWeight), v))
	})
}

// CourierWeight applies equality check predicate on the "courier_weight" field. It's identical to CourierWeightEQ.
func CourierWeight(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierWeight), v))
	})
}

// DeclaredValueInUsd applies equality check predicate on the "declared_value_in_usd" field. It's identical to DeclaredValueInUsdEQ.
func DeclaredValueInUsd(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInEur applies equality check predicate on the "declared_value_in_eur" field. It's identical to DeclaredValueInEurEQ.
func DeclaredValueInEur(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// TotalItemsPrice applies equality check predicate on the "total_items_price" field. It's identical to TotalItemsPriceEQ.
func TotalItemsPrice(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalItemsPrice), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// DeliveryCost applies equality check predicate on the "delivery_cost" field. It's identical to DeliveryCostEQ.
func DeliveryCost(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCost), v))
	})
}

// MiscFee applies equality check predicate on the "misc_fee" field. It's identical to MiscFeeEQ.
func MiscFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// FuelFee applies equality check predicate on the "fuel_fee" field. It's identical to FuelFeeEQ.
func FuelFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// RegistrationFee applies equality check predicate on the "registration_fee" field. It's identical to RegistrationFeeEQ.
func RegistrationFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// ProcessingFee applies equality check predicate on the "processing_fee" field. It's identical to ProcessingFeeEQ.
func ProcessingFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// PackageFee applies equality check predicate on the "package_fee" field. It's identical to PackageFeeEQ.
func PackageFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageFee), v))
	})
}

// HandlingFee applies equality check predicate on the "handling_fee" field. It's identical to HandlingFeeEQ.
func HandlingFee(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// Vat applies equality check predicate on the "vat" field. It's identical to VatEQ.
func Vat(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVat), v))
	})
}

// EstimatedCost applies equality check predicate on the "estimated_cost" field. It's identical to EstimatedCostEQ.
func EstimatedCost(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCurrency applies equality check predicate on the "estimated_currency" field. It's identical to EstimatedCurrencyEQ.
func EstimatedCurrency(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCurrency), v))
	})
}

// ReceivablesAmount applies equality check predicate on the "receivables_amount" field. It's identical to ReceivablesAmountEQ.
func ReceivablesAmount(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesCurrency applies equality check predicate on the "receivables_currency" field. It's identical to ReceivablesCurrencyEQ.
func ReceivablesCurrency(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivablesCurrency), v))
	})
}

// NotAcceptPlatformUpdate applies equality check predicate on the "not_accept_platform_update" field. It's identical to NotAcceptPlatformUpdateEQ.
func NotAcceptPlatformUpdate(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAcceptPlatformUpdate), v))
	})
}

// NotAcceptPlatformUpdateItem applies equality check predicate on the "not_accept_platform_update_item" field. It's identical to NotAcceptPlatformUpdateItemEQ.
func NotAcceptPlatformUpdateItem(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAcceptPlatformUpdateItem), v))
	})
}

// JdPushedStatus applies equality check predicate on the "jd_pushed_status" field. It's identical to JdPushedStatusEQ.
func JdPushedStatus(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJdPushedStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OrderNumberEQ applies the EQ predicate on the "order_number" field.
func OrderNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberNEQ applies the NEQ predicate on the "order_number" field.
func OrderNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberIn applies the In predicate on the "order_number" field.
func OrderNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberNotIn applies the NotIn predicate on the "order_number" field.
func OrderNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberGT applies the GT predicate on the "order_number" field.
func OrderNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberGTE applies the GTE predicate on the "order_number" field.
func OrderNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLT applies the LT predicate on the "order_number" field.
func OrderNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLTE applies the LTE predicate on the "order_number" field.
func OrderNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContains applies the Contains predicate on the "order_number" field.
func OrderNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "order_number" field.
func OrderNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "order_number" field.
func OrderNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberEqualFold applies the EqualFold predicate on the "order_number" field.
func OrderNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "order_number" field.
func OrderNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNumber), v))
	})
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMode), v))
	})
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMode), v...))
	})
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMode), v...))
	})
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMode), v))
	})
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMode), v))
	})
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMode), v))
	})
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMode), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// OfflineEQ applies the EQ predicate on the "offline" field.
func OfflineEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOffline), v))
	})
}

// OfflineNEQ applies the NEQ predicate on the "offline" field.
func OfflineNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOffline), v))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDIsNil applies the IsNil predicate on the "warehouse_id" field.
func WarehouseIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWarehouseID)))
	})
}

// WarehouseIDNotNil applies the NotNil predicate on the "warehouse_id" field.
func WarehouseIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWarehouseID)))
	})
}

// CustomerCodeEQ applies the EQ predicate on the "customer_code" field.
func CustomerCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeNEQ applies the NEQ predicate on the "customer_code" field.
func CustomerCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeIn applies the In predicate on the "customer_code" field.
func CustomerCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeNotIn applies the NotIn predicate on the "customer_code" field.
func CustomerCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerCode), v...))
	})
}

// CustomerCodeGT applies the GT predicate on the "customer_code" field.
func CustomerCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeGTE applies the GTE predicate on the "customer_code" field.
func CustomerCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLT applies the LT predicate on the "customer_code" field.
func CustomerCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeLTE applies the LTE predicate on the "customer_code" field.
func CustomerCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContains applies the Contains predicate on the "customer_code" field.
func CustomerCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasPrefix applies the HasPrefix predicate on the "customer_code" field.
func CustomerCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeHasSuffix applies the HasSuffix predicate on the "customer_code" field.
func CustomerCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeEqualFold applies the EqualFold predicate on the "customer_code" field.
func CustomerCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerCode), v))
	})
}

// CustomerCodeContainsFold applies the ContainsFold predicate on the "customer_code" field.
func CustomerCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerCode), v))
	})
}

// PrepayTariffEQ applies the EQ predicate on the "prepay_tariff" field.
func PrepayTariffEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffNEQ applies the NEQ predicate on the "prepay_tariff" field.
func PrepayTariffNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepayTariff), v))
	})
}

// IossNumberEQ applies the EQ predicate on the "ioss_number" field.
func IossNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberNEQ applies the NEQ predicate on the "ioss_number" field.
func IossNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberIn applies the In predicate on the "ioss_number" field.
func IossNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossNumber), v...))
	})
}

// IossNumberNotIn applies the NotIn predicate on the "ioss_number" field.
func IossNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossNumber), v...))
	})
}

// IossNumberGT applies the GT predicate on the "ioss_number" field.
func IossNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossNumber), v))
	})
}

// IossNumberGTE applies the GTE predicate on the "ioss_number" field.
func IossNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberLT applies the LT predicate on the "ioss_number" field.
func IossNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossNumber), v))
	})
}

// IossNumberLTE applies the LTE predicate on the "ioss_number" field.
func IossNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberContains applies the Contains predicate on the "ioss_number" field.
func IossNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasPrefix applies the HasPrefix predicate on the "ioss_number" field.
func IossNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasSuffix applies the HasSuffix predicate on the "ioss_number" field.
func IossNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossNumber), v))
	})
}

// IossNumberEqualFold applies the EqualFold predicate on the "ioss_number" field.
func IossNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossNumber), v))
	})
}

// IossNumberContainsFold applies the ContainsFold predicate on the "ioss_number" field.
func IossNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossNumber), v))
	})
}

// IossCountryCodeEQ applies the EQ predicate on the "ioss_country_code" field.
func IossCountryCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeNEQ applies the NEQ predicate on the "ioss_country_code" field.
func IossCountryCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeIn applies the In predicate on the "ioss_country_code" field.
func IossCountryCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeNotIn applies the NotIn predicate on the "ioss_country_code" field.
func IossCountryCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossCountryCode), v...))
	})
}

// IossCountryCodeGT applies the GT predicate on the "ioss_country_code" field.
func IossCountryCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeGTE applies the GTE predicate on the "ioss_country_code" field.
func IossCountryCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLT applies the LT predicate on the "ioss_country_code" field.
func IossCountryCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeLTE applies the LTE predicate on the "ioss_country_code" field.
func IossCountryCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContains applies the Contains predicate on the "ioss_country_code" field.
func IossCountryCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasPrefix applies the HasPrefix predicate on the "ioss_country_code" field.
func IossCountryCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeHasSuffix applies the HasSuffix predicate on the "ioss_country_code" field.
func IossCountryCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeEqualFold applies the EqualFold predicate on the "ioss_country_code" field.
func IossCountryCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossCountryCode), v))
	})
}

// IossCountryCodeContainsFold applies the ContainsFold predicate on the "ioss_country_code" field.
func IossCountryCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossCountryCode), v))
	})
}

// IossNumberTypeEQ applies the EQ predicate on the "ioss_number_type" field.
func IossNumberTypeEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumberType), v))
	})
}

// IossNumberTypeNEQ applies the NEQ predicate on the "ioss_number_type" field.
func IossNumberTypeNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossNumberType), v))
	})
}

// IossNumberTypeIn applies the In predicate on the "ioss_number_type" field.
func IossNumberTypeIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossNumberType), v...))
	})
}

// IossNumberTypeNotIn applies the NotIn predicate on the "ioss_number_type" field.
func IossNumberTypeNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossNumberType), v...))
	})
}

// IossNumberTypeGT applies the GT predicate on the "ioss_number_type" field.
func IossNumberTypeGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossNumberType), v))
	})
}

// IossNumberTypeGTE applies the GTE predicate on the "ioss_number_type" field.
func IossNumberTypeGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossNumberType), v))
	})
}

// IossNumberTypeLT applies the LT predicate on the "ioss_number_type" field.
func IossNumberTypeLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossNumberType), v))
	})
}

// IossNumberTypeLTE applies the LTE predicate on the "ioss_number_type" field.
func IossNumberTypeLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossNumberType), v))
	})
}

// UkVatNumberEQ applies the EQ predicate on the "uk_vat_number" field.
func UkVatNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberNEQ applies the NEQ predicate on the "uk_vat_number" field.
func UkVatNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberIn applies the In predicate on the "uk_vat_number" field.
func UkVatNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberNotIn applies the NotIn predicate on the "uk_vat_number" field.
func UkVatNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUkVatNumber), v...))
	})
}

// UkVatNumberGT applies the GT predicate on the "uk_vat_number" field.
func UkVatNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberGTE applies the GTE predicate on the "uk_vat_number" field.
func UkVatNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLT applies the LT predicate on the "uk_vat_number" field.
func UkVatNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberLTE applies the LTE predicate on the "uk_vat_number" field.
func UkVatNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContains applies the Contains predicate on the "uk_vat_number" field.
func UkVatNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasPrefix applies the HasPrefix predicate on the "uk_vat_number" field.
func UkVatNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberHasSuffix applies the HasSuffix predicate on the "uk_vat_number" field.
func UkVatNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberEqualFold applies the EqualFold predicate on the "uk_vat_number" field.
func UkVatNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUkVatNumber), v))
	})
}

// UkVatNumberContainsFold applies the ContainsFold predicate on the "uk_vat_number" field.
func UkVatNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUkVatNumber), v))
	})
}

// InboundOrderNumberEQ applies the EQ predicate on the "inbound_order_number" field.
func InboundOrderNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberNEQ applies the NEQ predicate on the "inbound_order_number" field.
func InboundOrderNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberIn applies the In predicate on the "inbound_order_number" field.
func InboundOrderNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInboundOrderNumber), v...))
	})
}

// InboundOrderNumberNotIn applies the NotIn predicate on the "inbound_order_number" field.
func InboundOrderNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInboundOrderNumber), v...))
	})
}

// InboundOrderNumberGT applies the GT predicate on the "inbound_order_number" field.
func InboundOrderNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberGTE applies the GTE predicate on the "inbound_order_number" field.
func InboundOrderNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberLT applies the LT predicate on the "inbound_order_number" field.
func InboundOrderNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberLTE applies the LTE predicate on the "inbound_order_number" field.
func InboundOrderNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberContains applies the Contains predicate on the "inbound_order_number" field.
func InboundOrderNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberHasPrefix applies the HasPrefix predicate on the "inbound_order_number" field.
func InboundOrderNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberHasSuffix applies the HasSuffix predicate on the "inbound_order_number" field.
func InboundOrderNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberEqualFold applies the EqualFold predicate on the "inbound_order_number" field.
func InboundOrderNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInboundOrderNumber), v))
	})
}

// InboundOrderNumberContainsFold applies the ContainsFold predicate on the "inbound_order_number" field.
func InboundOrderNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInboundOrderNumber), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// SqsStatusEQ applies the EQ predicate on the "sqs_status" field.
func SqsStatusEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSqsStatus), v))
	})
}

// SqsStatusNEQ applies the NEQ predicate on the "sqs_status" field.
func SqsStatusNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSqsStatus), v))
	})
}

// SqsStatusIsNil applies the IsNil predicate on the "sqs_status" field.
func SqsStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSqsStatus)))
	})
}

// SqsStatusNotNil applies the NotNil predicate on the "sqs_status" field.
func SqsStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSqsStatus)))
	})
}

// HoldStatusEQ applies the EQ predicate on the "hold_status" field.
func HoldStatusEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHoldStatus), v))
	})
}

// HoldStatusNEQ applies the NEQ predicate on the "hold_status" field.
func HoldStatusNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHoldStatus), v))
	})
}

// HoldStatusIsNil applies the IsNil predicate on the "hold_status" field.
func HoldStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHoldStatus)))
	})
}

// HoldStatusNotNil applies the NotNil predicate on the "hold_status" field.
func HoldStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHoldStatus)))
	})
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentStatus), v...))
	})
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentStatus), v...))
	})
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentStatus), v))
	})
}

// PaymentStatusIsNil applies the IsNil predicate on the "payment_status" field.
func PaymentStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentStatus)))
	})
}

// PaymentStatusNotNil applies the NotNil predicate on the "payment_status" field.
func PaymentStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentStatus)))
	})
}

// CancelRequestEQ applies the EQ predicate on the "cancel_request" field.
func CancelRequestEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestNEQ applies the NEQ predicate on the "cancel_request" field.
func CancelRequestNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestIn applies the In predicate on the "cancel_request" field.
func CancelRequestIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelRequest), v...))
	})
}

// CancelRequestNotIn applies the NotIn predicate on the "cancel_request" field.
func CancelRequestNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelRequest), v...))
	})
}

// CancelRequestGT applies the GT predicate on the "cancel_request" field.
func CancelRequestGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestGTE applies the GTE predicate on the "cancel_request" field.
func CancelRequestGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestLT applies the LT predicate on the "cancel_request" field.
func CancelRequestLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestLTE applies the LTE predicate on the "cancel_request" field.
func CancelRequestLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelRequest), v))
	})
}

// CancelRequestIsNil applies the IsNil predicate on the "cancel_request" field.
func CancelRequestIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelRequest)))
	})
}

// CancelRequestNotNil applies the NotNil predicate on the "cancel_request" field.
func CancelRequestNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelRequest)))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// PlatformOrderIDEQ applies the EQ predicate on the "platform_order_id" field.
func PlatformOrderIDEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDNEQ applies the NEQ predicate on the "platform_order_id" field.
func PlatformOrderIDNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDIn applies the In predicate on the "platform_order_id" field.
func PlatformOrderIDIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformOrderID), v...))
	})
}

// PlatformOrderIDNotIn applies the NotIn predicate on the "platform_order_id" field.
func PlatformOrderIDNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformOrderID), v...))
	})
}

// PlatformOrderIDGT applies the GT predicate on the "platform_order_id" field.
func PlatformOrderIDGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDGTE applies the GTE predicate on the "platform_order_id" field.
func PlatformOrderIDGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDLT applies the LT predicate on the "platform_order_id" field.
func PlatformOrderIDLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDLTE applies the LTE predicate on the "platform_order_id" field.
func PlatformOrderIDLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDContains applies the Contains predicate on the "platform_order_id" field.
func PlatformOrderIDContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDHasPrefix applies the HasPrefix predicate on the "platform_order_id" field.
func PlatformOrderIDHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDHasSuffix applies the HasSuffix predicate on the "platform_order_id" field.
func PlatformOrderIDHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDIsNil applies the IsNil predicate on the "platform_order_id" field.
func PlatformOrderIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformOrderID)))
	})
}

// PlatformOrderIDNotNil applies the NotNil predicate on the "platform_order_id" field.
func PlatformOrderIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformOrderID)))
	})
}

// PlatformOrderIDEqualFold applies the EqualFold predicate on the "platform_order_id" field.
func PlatformOrderIDEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderIDContainsFold applies the ContainsFold predicate on the "platform_order_id" field.
func PlatformOrderIDContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformOrderID), v))
	})
}

// PlatformOrderNoEQ applies the EQ predicate on the "platform_order_no" field.
func PlatformOrderNoEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoNEQ applies the NEQ predicate on the "platform_order_no" field.
func PlatformOrderNoNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoIn applies the In predicate on the "platform_order_no" field.
func PlatformOrderNoIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformOrderNo), v...))
	})
}

// PlatformOrderNoNotIn applies the NotIn predicate on the "platform_order_no" field.
func PlatformOrderNoNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformOrderNo), v...))
	})
}

// PlatformOrderNoGT applies the GT predicate on the "platform_order_no" field.
func PlatformOrderNoGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoGTE applies the GTE predicate on the "platform_order_no" field.
func PlatformOrderNoGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoLT applies the LT predicate on the "platform_order_no" field.
func PlatformOrderNoLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoLTE applies the LTE predicate on the "platform_order_no" field.
func PlatformOrderNoLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoContains applies the Contains predicate on the "platform_order_no" field.
func PlatformOrderNoContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoHasPrefix applies the HasPrefix predicate on the "platform_order_no" field.
func PlatformOrderNoHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoHasSuffix applies the HasSuffix predicate on the "platform_order_no" field.
func PlatformOrderNoHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoIsNil applies the IsNil predicate on the "platform_order_no" field.
func PlatformOrderNoIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformOrderNo)))
	})
}

// PlatformOrderNoNotNil applies the NotNil predicate on the "platform_order_no" field.
func PlatformOrderNoNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformOrderNo)))
	})
}

// PlatformOrderNoEqualFold applies the EqualFold predicate on the "platform_order_no" field.
func PlatformOrderNoEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderNoContainsFold applies the ContainsFold predicate on the "platform_order_no" field.
func PlatformOrderNoContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformOrderNo), v))
	})
}

// PlatformOrderStatusURLEQ applies the EQ predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLNEQ applies the NEQ predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLIn applies the In predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformOrderStatusURL), v...))
	})
}

// PlatformOrderStatusURLNotIn applies the NotIn predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformOrderStatusURL), v...))
	})
}

// PlatformOrderStatusURLGT applies the GT predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLGTE applies the GTE predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLLT applies the LT predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLLTE applies the LTE predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLContains applies the Contains predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLHasPrefix applies the HasPrefix predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLHasSuffix applies the HasSuffix predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLIsNil applies the IsNil predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformOrderStatusURL)))
	})
}

// PlatformOrderStatusURLNotNil applies the NotNil predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformOrderStatusURL)))
	})
}

// PlatformOrderStatusURLEqualFold applies the EqualFold predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformOrderStatusURLContainsFold applies the ContainsFold predicate on the "platform_order_status_url" field.
func PlatformOrderStatusURLContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformOrderStatusURL), v))
	})
}

// PlatformStatusEQ applies the EQ predicate on the "platform_status" field.
func PlatformStatusEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusNEQ applies the NEQ predicate on the "platform_status" field.
func PlatformStatusNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusIn applies the In predicate on the "platform_status" field.
func PlatformStatusIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformStatus), v...))
	})
}

// PlatformStatusNotIn applies the NotIn predicate on the "platform_status" field.
func PlatformStatusNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformStatus), v...))
	})
}

// PlatformStatusGT applies the GT predicate on the "platform_status" field.
func PlatformStatusGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusGTE applies the GTE predicate on the "platform_status" field.
func PlatformStatusGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusLT applies the LT predicate on the "platform_status" field.
func PlatformStatusLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusLTE applies the LTE predicate on the "platform_status" field.
func PlatformStatusLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusContains applies the Contains predicate on the "platform_status" field.
func PlatformStatusContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusHasPrefix applies the HasPrefix predicate on the "platform_status" field.
func PlatformStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusHasSuffix applies the HasSuffix predicate on the "platform_status" field.
func PlatformStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusIsNil applies the IsNil predicate on the "platform_status" field.
func PlatformStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformStatus)))
	})
}

// PlatformStatusNotNil applies the NotNil predicate on the "platform_status" field.
func PlatformStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformStatus)))
	})
}

// PlatformStatusEqualFold applies the EqualFold predicate on the "platform_status" field.
func PlatformStatusEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusContainsFold applies the ContainsFold predicate on the "platform_status" field.
func PlatformStatusContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformStatus), v))
	})
}

// PaidStatusEQ applies the EQ predicate on the "paid_status" field.
func PaidStatusEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusNEQ applies the NEQ predicate on the "paid_status" field.
func PaidStatusNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusIn applies the In predicate on the "paid_status" field.
func PaidStatusIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaidStatus), v...))
	})
}

// PaidStatusNotIn applies the NotIn predicate on the "paid_status" field.
func PaidStatusNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaidStatus), v...))
	})
}

// PaidStatusGT applies the GT predicate on the "paid_status" field.
func PaidStatusGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusGTE applies the GTE predicate on the "paid_status" field.
func PaidStatusGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusLT applies the LT predicate on the "paid_status" field.
func PaidStatusLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusLTE applies the LTE predicate on the "paid_status" field.
func PaidStatusLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusContains applies the Contains predicate on the "paid_status" field.
func PaidStatusContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusHasPrefix applies the HasPrefix predicate on the "paid_status" field.
func PaidStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusHasSuffix applies the HasSuffix predicate on the "paid_status" field.
func PaidStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusIsNil applies the IsNil predicate on the "paid_status" field.
func PaidStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaidStatus)))
	})
}

// PaidStatusNotNil applies the NotNil predicate on the "paid_status" field.
func PaidStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaidStatus)))
	})
}

// PaidStatusEqualFold applies the EqualFold predicate on the "paid_status" field.
func PaidStatusEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaidStatus), v))
	})
}

// PaidStatusContainsFold applies the ContainsFold predicate on the "paid_status" field.
func PaidStatusContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaidStatus), v))
	})
}

// FulfillmentPushedEQ applies the EQ predicate on the "fulfillment_pushed" field.
func FulfillmentPushedEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentPushed), v))
	})
}

// FulfillmentPushedNEQ applies the NEQ predicate on the "fulfillment_pushed" field.
func FulfillmentPushedNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillmentPushed), v))
	})
}

// FulfillmentPushedIsNil applies the IsNil predicate on the "fulfillment_pushed" field.
func FulfillmentPushedIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFulfillmentPushed)))
	})
}

// FulfillmentPushedNotNil applies the NotNil predicate on the "fulfillment_pushed" field.
func FulfillmentPushedNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFulfillmentPushed)))
	})
}

// FulfillmentStatusEQ applies the EQ predicate on the "fulfillment_status" field.
func FulfillmentStatusEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusNEQ applies the NEQ predicate on the "fulfillment_status" field.
func FulfillmentStatusNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusIn applies the In predicate on the "fulfillment_status" field.
func FulfillmentStatusIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFulfillmentStatus), v...))
	})
}

// FulfillmentStatusNotIn applies the NotIn predicate on the "fulfillment_status" field.
func FulfillmentStatusNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFulfillmentStatus), v...))
	})
}

// FulfillmentStatusGT applies the GT predicate on the "fulfillment_status" field.
func FulfillmentStatusGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusGTE applies the GTE predicate on the "fulfillment_status" field.
func FulfillmentStatusGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusLT applies the LT predicate on the "fulfillment_status" field.
func FulfillmentStatusLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusLTE applies the LTE predicate on the "fulfillment_status" field.
func FulfillmentStatusLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusContains applies the Contains predicate on the "fulfillment_status" field.
func FulfillmentStatusContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusHasPrefix applies the HasPrefix predicate on the "fulfillment_status" field.
func FulfillmentStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusHasSuffix applies the HasSuffix predicate on the "fulfillment_status" field.
func FulfillmentStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusIsNil applies the IsNil predicate on the "fulfillment_status" field.
func FulfillmentStatusIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFulfillmentStatus)))
	})
}

// FulfillmentStatusNotNil applies the NotNil predicate on the "fulfillment_status" field.
func FulfillmentStatusNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFulfillmentStatus)))
	})
}

// FulfillmentStatusEqualFold applies the EqualFold predicate on the "fulfillment_status" field.
func FulfillmentStatusEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFulfillmentStatus), v))
	})
}

// FulfillmentStatusContainsFold applies the ContainsFold predicate on the "fulfillment_status" field.
func FulfillmentStatusContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFulfillmentStatus), v))
	})
}

// PlatformCreatedAtEQ applies the EQ predicate on the "platform_created_at" field.
func PlatformCreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtNEQ applies the NEQ predicate on the "platform_created_at" field.
func PlatformCreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtIn applies the In predicate on the "platform_created_at" field.
func PlatformCreatedAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformCreatedAt), v...))
	})
}

// PlatformCreatedAtNotIn applies the NotIn predicate on the "platform_created_at" field.
func PlatformCreatedAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformCreatedAt), v...))
	})
}

// PlatformCreatedAtGT applies the GT predicate on the "platform_created_at" field.
func PlatformCreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtGTE applies the GTE predicate on the "platform_created_at" field.
func PlatformCreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtLT applies the LT predicate on the "platform_created_at" field.
func PlatformCreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtLTE applies the LTE predicate on the "platform_created_at" field.
func PlatformCreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformCreatedAt), v))
	})
}

// PlatformCreatedAtIsNil applies the IsNil predicate on the "platform_created_at" field.
func PlatformCreatedAtIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformCreatedAt)))
	})
}

// PlatformCreatedAtNotNil applies the NotNil predicate on the "platform_created_at" field.
func PlatformCreatedAtNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformCreatedAt)))
	})
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationID), v))
	})
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationID), v))
	})
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocationID), v...))
	})
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocationID), v...))
	})
}

// LocationIDGT applies the GT predicate on the "location_id" field.
func LocationIDGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationID), v))
	})
}

// LocationIDGTE applies the GTE predicate on the "location_id" field.
func LocationIDGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationID), v))
	})
}

// LocationIDLT applies the LT predicate on the "location_id" field.
func LocationIDLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationID), v))
	})
}

// LocationIDLTE applies the LTE predicate on the "location_id" field.
func LocationIDLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationID), v))
	})
}

// LocationIDContains applies the Contains predicate on the "location_id" field.
func LocationIDContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocationID), v))
	})
}

// LocationIDHasPrefix applies the HasPrefix predicate on the "location_id" field.
func LocationIDHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocationID), v))
	})
}

// LocationIDHasSuffix applies the HasSuffix predicate on the "location_id" field.
func LocationIDHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocationID), v))
	})
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocationID)))
	})
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocationID)))
	})
}

// LocationIDEqualFold applies the EqualFold predicate on the "location_id" field.
func LocationIDEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocationID), v))
	})
}

// LocationIDContainsFold applies the ContainsFold predicate on the "location_id" field.
func LocationIDContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocationID), v))
	})
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTags), v))
	})
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTags), v...))
	})
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTags), v...))
	})
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTags), v))
	})
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTags), v))
	})
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTags), v))
	})
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTags), v))
	})
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTags), v))
	})
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTags), v))
	})
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTags), v))
	})
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTags)))
	})
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTags)))
	})
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTags), v))
	})
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTags), v))
	})
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNote)))
	})
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNote)))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// CancelReasonEQ applies the EQ predicate on the "cancel_reason" field.
func CancelReasonEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReason), v))
	})
}

// CancelReasonNEQ applies the NEQ predicate on the "cancel_reason" field.
func CancelReasonNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelReason), v))
	})
}

// CancelReasonIn applies the In predicate on the "cancel_reason" field.
func CancelReasonIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelReason), v...))
	})
}

// CancelReasonNotIn applies the NotIn predicate on the "cancel_reason" field.
func CancelReasonNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelReason), v...))
	})
}

// CancelReasonGT applies the GT predicate on the "cancel_reason" field.
func CancelReasonGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelReason), v))
	})
}

// CancelReasonGTE applies the GTE predicate on the "cancel_reason" field.
func CancelReasonGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelReason), v))
	})
}

// CancelReasonLT applies the LT predicate on the "cancel_reason" field.
func CancelReasonLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelReason), v))
	})
}

// CancelReasonLTE applies the LTE predicate on the "cancel_reason" field.
func CancelReasonLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelReason), v))
	})
}

// CancelReasonContains applies the Contains predicate on the "cancel_reason" field.
func CancelReasonContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelReason), v))
	})
}

// CancelReasonHasPrefix applies the HasPrefix predicate on the "cancel_reason" field.
func CancelReasonHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelReason), v))
	})
}

// CancelReasonHasSuffix applies the HasSuffix predicate on the "cancel_reason" field.
func CancelReasonHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelReason), v))
	})
}

// CancelReasonIsNil applies the IsNil predicate on the "cancel_reason" field.
func CancelReasonIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelReason)))
	})
}

// CancelReasonNotNil applies the NotNil predicate on the "cancel_reason" field.
func CancelReasonNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelReason)))
	})
}

// CancelReasonEqualFold applies the EqualFold predicate on the "cancel_reason" field.
func CancelReasonEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelReason), v))
	})
}

// CancelReasonContainsFold applies the ContainsFold predicate on the "cancel_reason" field.
func CancelReasonContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelReason), v))
	})
}

// CancelledAtEQ applies the EQ predicate on the "cancelled_at" field.
func CancelledAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtNEQ applies the NEQ predicate on the "cancelled_at" field.
func CancelledAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtIn applies the In predicate on the "cancelled_at" field.
func CancelledAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCancelledAt), v...))
	})
}

// CancelledAtNotIn applies the NotIn predicate on the "cancelled_at" field.
func CancelledAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCancelledAt), v...))
	})
}

// CancelledAtGT applies the GT predicate on the "cancelled_at" field.
func CancelledAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtGTE applies the GTE predicate on the "cancelled_at" field.
func CancelledAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtLT applies the LT predicate on the "cancelled_at" field.
func CancelledAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtLTE applies the LTE predicate on the "cancelled_at" field.
func CancelledAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelledAt), v))
	})
}

// CancelledAtIsNil applies the IsNil predicate on the "cancelled_at" field.
func CancelledAtIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelledAt)))
	})
}

// CancelledAtNotNil applies the NotNil predicate on the "cancelled_at" field.
func CancelledAtNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelledAt)))
	})
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosedAt), v))
	})
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClosedAt), v))
	})
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClosedAt), v...))
	})
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClosedAt), v...))
	})
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClosedAt), v))
	})
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClosedAt), v))
	})
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClosedAt), v))
	})
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClosedAt), v))
	})
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClosedAt)))
	})
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClosedAt)))
	})
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactEmail), v))
	})
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactEmail), v))
	})
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactEmail), v...))
	})
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactEmail), v...))
	})
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactEmail), v))
	})
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactEmail), v))
	})
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactEmail), v))
	})
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactEmail), v))
	})
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactEmail), v))
	})
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactEmail), v))
	})
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactEmail), v))
	})
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactEmail), v))
	})
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactEmail), v))
	})
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactPhone), v))
	})
}

// ShippingNameEQ applies the EQ predicate on the "shipping_name" field.
func ShippingNameEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingName), v))
	})
}

// ShippingNameNEQ applies the NEQ predicate on the "shipping_name" field.
func ShippingNameNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingName), v))
	})
}

// ShippingNameIn applies the In predicate on the "shipping_name" field.
func ShippingNameIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingName), v...))
	})
}

// ShippingNameNotIn applies the NotIn predicate on the "shipping_name" field.
func ShippingNameNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingName), v...))
	})
}

// ShippingNameGT applies the GT predicate on the "shipping_name" field.
func ShippingNameGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingName), v))
	})
}

// ShippingNameGTE applies the GTE predicate on the "shipping_name" field.
func ShippingNameGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingName), v))
	})
}

// ShippingNameLT applies the LT predicate on the "shipping_name" field.
func ShippingNameLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingName), v))
	})
}

// ShippingNameLTE applies the LTE predicate on the "shipping_name" field.
func ShippingNameLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingName), v))
	})
}

// ShippingNameContains applies the Contains predicate on the "shipping_name" field.
func ShippingNameContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingName), v))
	})
}

// ShippingNameHasPrefix applies the HasPrefix predicate on the "shipping_name" field.
func ShippingNameHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingName), v))
	})
}

// ShippingNameHasSuffix applies the HasSuffix predicate on the "shipping_name" field.
func ShippingNameHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingName), v))
	})
}

// ShippingNameEqualFold applies the EqualFold predicate on the "shipping_name" field.
func ShippingNameEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingName), v))
	})
}

// ShippingNameContainsFold applies the ContainsFold predicate on the "shipping_name" field.
func ShippingNameContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingName), v))
	})
}

// ShippingFirstNameEQ applies the EQ predicate on the "shipping_first_name" field.
func ShippingFirstNameEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameNEQ applies the NEQ predicate on the "shipping_first_name" field.
func ShippingFirstNameNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameIn applies the In predicate on the "shipping_first_name" field.
func ShippingFirstNameIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingFirstName), v...))
	})
}

// ShippingFirstNameNotIn applies the NotIn predicate on the "shipping_first_name" field.
func ShippingFirstNameNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingFirstName), v...))
	})
}

// ShippingFirstNameGT applies the GT predicate on the "shipping_first_name" field.
func ShippingFirstNameGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameGTE applies the GTE predicate on the "shipping_first_name" field.
func ShippingFirstNameGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameLT applies the LT predicate on the "shipping_first_name" field.
func ShippingFirstNameLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameLTE applies the LTE predicate on the "shipping_first_name" field.
func ShippingFirstNameLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameContains applies the Contains predicate on the "shipping_first_name" field.
func ShippingFirstNameContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameHasPrefix applies the HasPrefix predicate on the "shipping_first_name" field.
func ShippingFirstNameHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameHasSuffix applies the HasSuffix predicate on the "shipping_first_name" field.
func ShippingFirstNameHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameEqualFold applies the EqualFold predicate on the "shipping_first_name" field.
func ShippingFirstNameEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingFirstName), v))
	})
}

// ShippingFirstNameContainsFold applies the ContainsFold predicate on the "shipping_first_name" field.
func ShippingFirstNameContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingFirstName), v))
	})
}

// ShippingLastNameEQ applies the EQ predicate on the "shipping_last_name" field.
func ShippingLastNameEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameNEQ applies the NEQ predicate on the "shipping_last_name" field.
func ShippingLastNameNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameIn applies the In predicate on the "shipping_last_name" field.
func ShippingLastNameIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingLastName), v...))
	})
}

// ShippingLastNameNotIn applies the NotIn predicate on the "shipping_last_name" field.
func ShippingLastNameNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingLastName), v...))
	})
}

// ShippingLastNameGT applies the GT predicate on the "shipping_last_name" field.
func ShippingLastNameGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameGTE applies the GTE predicate on the "shipping_last_name" field.
func ShippingLastNameGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameLT applies the LT predicate on the "shipping_last_name" field.
func ShippingLastNameLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameLTE applies the LTE predicate on the "shipping_last_name" field.
func ShippingLastNameLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameContains applies the Contains predicate on the "shipping_last_name" field.
func ShippingLastNameContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameHasPrefix applies the HasPrefix predicate on the "shipping_last_name" field.
func ShippingLastNameHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameHasSuffix applies the HasSuffix predicate on the "shipping_last_name" field.
func ShippingLastNameHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameEqualFold applies the EqualFold predicate on the "shipping_last_name" field.
func ShippingLastNameEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingLastName), v))
	})
}

// ShippingLastNameContainsFold applies the ContainsFold predicate on the "shipping_last_name" field.
func ShippingLastNameContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingLastName), v))
	})
}

// ShippingCompanyEQ applies the EQ predicate on the "shipping_company" field.
func ShippingCompanyEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyNEQ applies the NEQ predicate on the "shipping_company" field.
func ShippingCompanyNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyIn applies the In predicate on the "shipping_company" field.
func ShippingCompanyIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCompany), v...))
	})
}

// ShippingCompanyNotIn applies the NotIn predicate on the "shipping_company" field.
func ShippingCompanyNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCompany), v...))
	})
}

// ShippingCompanyGT applies the GT predicate on the "shipping_company" field.
func ShippingCompanyGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyGTE applies the GTE predicate on the "shipping_company" field.
func ShippingCompanyGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyLT applies the LT predicate on the "shipping_company" field.
func ShippingCompanyLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyLTE applies the LTE predicate on the "shipping_company" field.
func ShippingCompanyLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyContains applies the Contains predicate on the "shipping_company" field.
func ShippingCompanyContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyHasPrefix applies the HasPrefix predicate on the "shipping_company" field.
func ShippingCompanyHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyHasSuffix applies the HasSuffix predicate on the "shipping_company" field.
func ShippingCompanyHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyEqualFold applies the EqualFold predicate on the "shipping_company" field.
func ShippingCompanyEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCompany), v))
	})
}

// ShippingCompanyContainsFold applies the ContainsFold predicate on the "shipping_company" field.
func ShippingCompanyContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCompany), v))
	})
}

// ShippingCountryEQ applies the EQ predicate on the "shipping_country" field.
func ShippingCountryEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryNEQ applies the NEQ predicate on the "shipping_country" field.
func ShippingCountryNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryIn applies the In predicate on the "shipping_country" field.
func ShippingCountryIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCountry), v...))
	})
}

// ShippingCountryNotIn applies the NotIn predicate on the "shipping_country" field.
func ShippingCountryNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCountry), v...))
	})
}

// ShippingCountryGT applies the GT predicate on the "shipping_country" field.
func ShippingCountryGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryGTE applies the GTE predicate on the "shipping_country" field.
func ShippingCountryGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryLT applies the LT predicate on the "shipping_country" field.
func ShippingCountryLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryLTE applies the LTE predicate on the "shipping_country" field.
func ShippingCountryLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryContains applies the Contains predicate on the "shipping_country" field.
func ShippingCountryContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryHasPrefix applies the HasPrefix predicate on the "shipping_country" field.
func ShippingCountryHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryHasSuffix applies the HasSuffix predicate on the "shipping_country" field.
func ShippingCountryHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryEqualFold applies the EqualFold predicate on the "shipping_country" field.
func ShippingCountryEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryContainsFold applies the ContainsFold predicate on the "shipping_country" field.
func ShippingCountryContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCountry), v))
	})
}

// ShippingCountryCodeEQ applies the EQ predicate on the "shipping_country_code" field.
func ShippingCountryCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeNEQ applies the NEQ predicate on the "shipping_country_code" field.
func ShippingCountryCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeIn applies the In predicate on the "shipping_country_code" field.
func ShippingCountryCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCountryCode), v...))
	})
}

// ShippingCountryCodeNotIn applies the NotIn predicate on the "shipping_country_code" field.
func ShippingCountryCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCountryCode), v...))
	})
}

// ShippingCountryCodeGT applies the GT predicate on the "shipping_country_code" field.
func ShippingCountryCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeGTE applies the GTE predicate on the "shipping_country_code" field.
func ShippingCountryCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeLT applies the LT predicate on the "shipping_country_code" field.
func ShippingCountryCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeLTE applies the LTE predicate on the "shipping_country_code" field.
func ShippingCountryCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeContains applies the Contains predicate on the "shipping_country_code" field.
func ShippingCountryCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeHasPrefix applies the HasPrefix predicate on the "shipping_country_code" field.
func ShippingCountryCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeHasSuffix applies the HasSuffix predicate on the "shipping_country_code" field.
func ShippingCountryCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeEqualFold applies the EqualFold predicate on the "shipping_country_code" field.
func ShippingCountryCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingCountryCodeContainsFold applies the ContainsFold predicate on the "shipping_country_code" field.
func ShippingCountryCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCountryCode), v))
	})
}

// ShippingProvinceEQ applies the EQ predicate on the "shipping_province" field.
func ShippingProvinceEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceNEQ applies the NEQ predicate on the "shipping_province" field.
func ShippingProvinceNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceIn applies the In predicate on the "shipping_province" field.
func ShippingProvinceIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingProvince), v...))
	})
}

// ShippingProvinceNotIn applies the NotIn predicate on the "shipping_province" field.
func ShippingProvinceNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingProvince), v...))
	})
}

// ShippingProvinceGT applies the GT predicate on the "shipping_province" field.
func ShippingProvinceGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceGTE applies the GTE predicate on the "shipping_province" field.
func ShippingProvinceGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceLT applies the LT predicate on the "shipping_province" field.
func ShippingProvinceLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceLTE applies the LTE predicate on the "shipping_province" field.
func ShippingProvinceLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceContains applies the Contains predicate on the "shipping_province" field.
func ShippingProvinceContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceHasPrefix applies the HasPrefix predicate on the "shipping_province" field.
func ShippingProvinceHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceHasSuffix applies the HasSuffix predicate on the "shipping_province" field.
func ShippingProvinceHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceEqualFold applies the EqualFold predicate on the "shipping_province" field.
func ShippingProvinceEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceContainsFold applies the ContainsFold predicate on the "shipping_province" field.
func ShippingProvinceContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingProvince), v))
	})
}

// ShippingProvinceCodeEQ applies the EQ predicate on the "shipping_province_code" field.
func ShippingProvinceCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeNEQ applies the NEQ predicate on the "shipping_province_code" field.
func ShippingProvinceCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeIn applies the In predicate on the "shipping_province_code" field.
func ShippingProvinceCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingProvinceCode), v...))
	})
}

// ShippingProvinceCodeNotIn applies the NotIn predicate on the "shipping_province_code" field.
func ShippingProvinceCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingProvinceCode), v...))
	})
}

// ShippingProvinceCodeGT applies the GT predicate on the "shipping_province_code" field.
func ShippingProvinceCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeGTE applies the GTE predicate on the "shipping_province_code" field.
func ShippingProvinceCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeLT applies the LT predicate on the "shipping_province_code" field.
func ShippingProvinceCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeLTE applies the LTE predicate on the "shipping_province_code" field.
func ShippingProvinceCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeContains applies the Contains predicate on the "shipping_province_code" field.
func ShippingProvinceCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeHasPrefix applies the HasPrefix predicate on the "shipping_province_code" field.
func ShippingProvinceCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeHasSuffix applies the HasSuffix predicate on the "shipping_province_code" field.
func ShippingProvinceCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeEqualFold applies the EqualFold predicate on the "shipping_province_code" field.
func ShippingProvinceCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingProvinceCodeContainsFold applies the ContainsFold predicate on the "shipping_province_code" field.
func ShippingProvinceCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingProvinceCode), v))
	})
}

// ShippingCityEQ applies the EQ predicate on the "shipping_city" field.
func ShippingCityEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCity), v))
	})
}

// ShippingCityNEQ applies the NEQ predicate on the "shipping_city" field.
func ShippingCityNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCity), v))
	})
}

// ShippingCityIn applies the In predicate on the "shipping_city" field.
func ShippingCityIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCity), v...))
	})
}

// ShippingCityNotIn applies the NotIn predicate on the "shipping_city" field.
func ShippingCityNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCity), v...))
	})
}

// ShippingCityGT applies the GT predicate on the "shipping_city" field.
func ShippingCityGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCity), v))
	})
}

// ShippingCityGTE applies the GTE predicate on the "shipping_city" field.
func ShippingCityGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCity), v))
	})
}

// ShippingCityLT applies the LT predicate on the "shipping_city" field.
func ShippingCityLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCity), v))
	})
}

// ShippingCityLTE applies the LTE predicate on the "shipping_city" field.
func ShippingCityLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCity), v))
	})
}

// ShippingCityContains applies the Contains predicate on the "shipping_city" field.
func ShippingCityContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCity), v))
	})
}

// ShippingCityHasPrefix applies the HasPrefix predicate on the "shipping_city" field.
func ShippingCityHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCity), v))
	})
}

// ShippingCityHasSuffix applies the HasSuffix predicate on the "shipping_city" field.
func ShippingCityHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCity), v))
	})
}

// ShippingCityEqualFold applies the EqualFold predicate on the "shipping_city" field.
func ShippingCityEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCity), v))
	})
}

// ShippingCityContainsFold applies the ContainsFold predicate on the "shipping_city" field.
func ShippingCityContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCity), v))
	})
}

// ShippingAddress1EQ applies the EQ predicate on the "shipping_address1" field.
func ShippingAddress1EQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1NEQ applies the NEQ predicate on the "shipping_address1" field.
func ShippingAddress1NEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1In applies the In predicate on the "shipping_address1" field.
func ShippingAddress1In(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingAddress1), v...))
	})
}

// ShippingAddress1NotIn applies the NotIn predicate on the "shipping_address1" field.
func ShippingAddress1NotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingAddress1), v...))
	})
}

// ShippingAddress1GT applies the GT predicate on the "shipping_address1" field.
func ShippingAddress1GT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1GTE applies the GTE predicate on the "shipping_address1" field.
func ShippingAddress1GTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1LT applies the LT predicate on the "shipping_address1" field.
func ShippingAddress1LT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1LTE applies the LTE predicate on the "shipping_address1" field.
func ShippingAddress1LTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1Contains applies the Contains predicate on the "shipping_address1" field.
func ShippingAddress1Contains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1HasPrefix applies the HasPrefix predicate on the "shipping_address1" field.
func ShippingAddress1HasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1HasSuffix applies the HasSuffix predicate on the "shipping_address1" field.
func ShippingAddress1HasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1EqualFold applies the EqualFold predicate on the "shipping_address1" field.
func ShippingAddress1EqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress1ContainsFold applies the ContainsFold predicate on the "shipping_address1" field.
func ShippingAddress1ContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingAddress1), v))
	})
}

// ShippingAddress2EQ applies the EQ predicate on the "shipping_address2" field.
func ShippingAddress2EQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2NEQ applies the NEQ predicate on the "shipping_address2" field.
func ShippingAddress2NEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2In applies the In predicate on the "shipping_address2" field.
func ShippingAddress2In(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingAddress2), v...))
	})
}

// ShippingAddress2NotIn applies the NotIn predicate on the "shipping_address2" field.
func ShippingAddress2NotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingAddress2), v...))
	})
}

// ShippingAddress2GT applies the GT predicate on the "shipping_address2" field.
func ShippingAddress2GT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2GTE applies the GTE predicate on the "shipping_address2" field.
func ShippingAddress2GTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2LT applies the LT predicate on the "shipping_address2" field.
func ShippingAddress2LT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2LTE applies the LTE predicate on the "shipping_address2" field.
func ShippingAddress2LTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2Contains applies the Contains predicate on the "shipping_address2" field.
func ShippingAddress2Contains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2HasPrefix applies the HasPrefix predicate on the "shipping_address2" field.
func ShippingAddress2HasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2HasSuffix applies the HasSuffix predicate on the "shipping_address2" field.
func ShippingAddress2HasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2EqualFold applies the EqualFold predicate on the "shipping_address2" field.
func ShippingAddress2EqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingAddress2), v))
	})
}

// ShippingAddress2ContainsFold applies the ContainsFold predicate on the "shipping_address2" field.
func ShippingAddress2ContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingAddress2), v))
	})
}

// ShippingZipCodeEQ applies the EQ predicate on the "shipping_zip_code" field.
func ShippingZipCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeNEQ applies the NEQ predicate on the "shipping_zip_code" field.
func ShippingZipCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeIn applies the In predicate on the "shipping_zip_code" field.
func ShippingZipCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingZipCode), v...))
	})
}

// ShippingZipCodeNotIn applies the NotIn predicate on the "shipping_zip_code" field.
func ShippingZipCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingZipCode), v...))
	})
}

// ShippingZipCodeGT applies the GT predicate on the "shipping_zip_code" field.
func ShippingZipCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeGTE applies the GTE predicate on the "shipping_zip_code" field.
func ShippingZipCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeLT applies the LT predicate on the "shipping_zip_code" field.
func ShippingZipCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeLTE applies the LTE predicate on the "shipping_zip_code" field.
func ShippingZipCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeContains applies the Contains predicate on the "shipping_zip_code" field.
func ShippingZipCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeHasPrefix applies the HasPrefix predicate on the "shipping_zip_code" field.
func ShippingZipCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeHasSuffix applies the HasSuffix predicate on the "shipping_zip_code" field.
func ShippingZipCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeEqualFold applies the EqualFold predicate on the "shipping_zip_code" field.
func ShippingZipCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingZipCode), v))
	})
}

// ShippingZipCodeContainsFold applies the ContainsFold predicate on the "shipping_zip_code" field.
func ShippingZipCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingZipCode), v))
	})
}

// ShippingPhoneEQ applies the EQ predicate on the "shipping_phone" field.
func ShippingPhoneEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneNEQ applies the NEQ predicate on the "shipping_phone" field.
func ShippingPhoneNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneIn applies the In predicate on the "shipping_phone" field.
func ShippingPhoneIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingPhone), v...))
	})
}

// ShippingPhoneNotIn applies the NotIn predicate on the "shipping_phone" field.
func ShippingPhoneNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingPhone), v...))
	})
}

// ShippingPhoneGT applies the GT predicate on the "shipping_phone" field.
func ShippingPhoneGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneGTE applies the GTE predicate on the "shipping_phone" field.
func ShippingPhoneGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneLT applies the LT predicate on the "shipping_phone" field.
func ShippingPhoneLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneLTE applies the LTE predicate on the "shipping_phone" field.
func ShippingPhoneLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneContains applies the Contains predicate on the "shipping_phone" field.
func ShippingPhoneContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneHasPrefix applies the HasPrefix predicate on the "shipping_phone" field.
func ShippingPhoneHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneHasSuffix applies the HasSuffix predicate on the "shipping_phone" field.
func ShippingPhoneHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneEqualFold applies the EqualFold predicate on the "shipping_phone" field.
func ShippingPhoneEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingPhone), v))
	})
}

// ShippingPhoneContainsFold applies the ContainsFold predicate on the "shipping_phone" field.
func ShippingPhoneContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingPhone), v))
	})
}

// ShippingCertificateTypeEQ applies the EQ predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeNEQ applies the NEQ predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeIn applies the In predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCertificateType), v...))
	})
}

// ShippingCertificateTypeNotIn applies the NotIn predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCertificateType), v...))
	})
}

// ShippingCertificateTypeGT applies the GT predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeGTE applies the GTE predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeLT applies the LT predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeLTE applies the LTE predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeContains applies the Contains predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeHasPrefix applies the HasPrefix predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeHasSuffix applies the HasSuffix predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeIsNil applies the IsNil predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingCertificateType)))
	})
}

// ShippingCertificateTypeNotNil applies the NotNil predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingCertificateType)))
	})
}

// ShippingCertificateTypeEqualFold applies the EqualFold predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateTypeContainsFold applies the ContainsFold predicate on the "shipping_certificate_type" field.
func ShippingCertificateTypeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCertificateType), v))
	})
}

// ShippingCertificateCodeEQ applies the EQ predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeNEQ applies the NEQ predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeIn applies the In predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCertificateCode), v...))
	})
}

// ShippingCertificateCodeNotIn applies the NotIn predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCertificateCode), v...))
	})
}

// ShippingCertificateCodeGT applies the GT predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeGTE applies the GTE predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeLT applies the LT predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeLTE applies the LTE predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeContains applies the Contains predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeHasPrefix applies the HasPrefix predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeHasSuffix applies the HasSuffix predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeIsNil applies the IsNil predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingCertificateCode)))
	})
}

// ShippingCertificateCodeNotNil applies the NotNil predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingCertificateCode)))
	})
}

// ShippingCertificateCodeEqualFold applies the EqualFold predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCertificateCodeContainsFold applies the ContainsFold predicate on the "shipping_certificate_code" field.
func ShippingCertificateCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCertificateCode), v))
	})
}

// ShippingCredentialsPeriodEQ applies the EQ predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodNEQ applies the NEQ predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodIn applies the In predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCredentialsPeriod), v...))
	})
}

// ShippingCredentialsPeriodNotIn applies the NotIn predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCredentialsPeriod), v...))
	})
}

// ShippingCredentialsPeriodGT applies the GT predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodGTE applies the GTE predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodLT applies the LT predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodLTE applies the LTE predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodContains applies the Contains predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodHasPrefix applies the HasPrefix predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodHasSuffix applies the HasSuffix predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodIsNil applies the IsNil predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingCredentialsPeriod)))
	})
}

// ShippingCredentialsPeriodNotNil applies the NotNil predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingCredentialsPeriod)))
	})
}

// ShippingCredentialsPeriodEqualFold applies the EqualFold predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// ShippingCredentialsPeriodContainsFold applies the ContainsFold predicate on the "shipping_credentials_period" field.
func ShippingCredentialsPeriodContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingCredentialsPeriod), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// PreferShippedTypeEQ applies the EQ predicate on the "prefer_shipped_type" field.
func PreferShippedTypeEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeNEQ applies the NEQ predicate on the "prefer_shipped_type" field.
func PreferShippedTypeNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeIn applies the In predicate on the "prefer_shipped_type" field.
func PreferShippedTypeIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPreferShippedType), v...))
	})
}

// PreferShippedTypeNotIn applies the NotIn predicate on the "prefer_shipped_type" field.
func PreferShippedTypeNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPreferShippedType), v...))
	})
}

// PreferShippedTypeGT applies the GT predicate on the "prefer_shipped_type" field.
func PreferShippedTypeGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeGTE applies the GTE predicate on the "prefer_shipped_type" field.
func PreferShippedTypeGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeLT applies the LT predicate on the "prefer_shipped_type" field.
func PreferShippedTypeLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeLTE applies the LTE predicate on the "prefer_shipped_type" field.
func PreferShippedTypeLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreferShippedType), v))
	})
}

// PreferShippedTypeIsNil applies the IsNil predicate on the "prefer_shipped_type" field.
func PreferShippedTypeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPreferShippedType)))
	})
}

// PreferShippedTypeNotNil applies the NotNil predicate on the "prefer_shipped_type" field.
func PreferShippedTypeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPreferShippedType)))
	})
}

// PreferChannelIDEQ applies the EQ predicate on the "prefer_channel_id" field.
func PreferChannelIDEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDNEQ applies the NEQ predicate on the "prefer_channel_id" field.
func PreferChannelIDNEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDIn applies the In predicate on the "prefer_channel_id" field.
func PreferChannelIDIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPreferChannelID), v...))
	})
}

// PreferChannelIDNotIn applies the NotIn predicate on the "prefer_channel_id" field.
func PreferChannelIDNotIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPreferChannelID), v...))
	})
}

// PreferChannelIDGT applies the GT predicate on the "prefer_channel_id" field.
func PreferChannelIDGT(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDGTE applies the GTE predicate on the "prefer_channel_id" field.
func PreferChannelIDGTE(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDLT applies the LT predicate on the "prefer_channel_id" field.
func PreferChannelIDLT(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDLTE applies the LTE predicate on the "prefer_channel_id" field.
func PreferChannelIDLTE(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreferChannelID), v))
	})
}

// PreferChannelIDIsNil applies the IsNil predicate on the "prefer_channel_id" field.
func PreferChannelIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPreferChannelID)))
	})
}

// PreferChannelIDNotNil applies the NotNil predicate on the "prefer_channel_id" field.
func PreferChannelIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPreferChannelID)))
	})
}

// ChannelOptionsEQ applies the EQ predicate on the "channel_options" field.
func ChannelOptionsEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsNEQ applies the NEQ predicate on the "channel_options" field.
func ChannelOptionsNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsIn applies the In predicate on the "channel_options" field.
func ChannelOptionsIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelOptions), v...))
	})
}

// ChannelOptionsNotIn applies the NotIn predicate on the "channel_options" field.
func ChannelOptionsNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelOptions), v...))
	})
}

// ChannelOptionsGT applies the GT predicate on the "channel_options" field.
func ChannelOptionsGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsGTE applies the GTE predicate on the "channel_options" field.
func ChannelOptionsGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsLT applies the LT predicate on the "channel_options" field.
func ChannelOptionsLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsLTE applies the LTE predicate on the "channel_options" field.
func ChannelOptionsLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsContains applies the Contains predicate on the "channel_options" field.
func ChannelOptionsContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsHasPrefix applies the HasPrefix predicate on the "channel_options" field.
func ChannelOptionsHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsHasSuffix applies the HasSuffix predicate on the "channel_options" field.
func ChannelOptionsHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsIsNil applies the IsNil predicate on the "channel_options" field.
func ChannelOptionsIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannelOptions)))
	})
}

// ChannelOptionsNotNil applies the NotNil predicate on the "channel_options" field.
func ChannelOptionsNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannelOptions)))
	})
}

// ChannelOptionsEqualFold applies the EqualFold predicate on the "channel_options" field.
func ChannelOptionsEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChannelOptions), v))
	})
}

// ChannelOptionsContainsFold applies the ContainsFold predicate on the "channel_options" field.
func ChannelOptionsContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChannelOptions), v))
	})
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelID), v...))
	})
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelID), v...))
	})
}

// ChannelIDIsNil applies the IsNil predicate on the "channel_id" field.
func ChannelIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannelID)))
	})
}

// ChannelIDNotNil applies the NotNil predicate on the "channel_id" field.
func ChannelIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannelID)))
	})
}

// ChannelCostIDEQ applies the EQ predicate on the "channel_cost_id" field.
func ChannelCostIDEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDNEQ applies the NEQ predicate on the "channel_cost_id" field.
func ChannelCostIDNEQ(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDIn applies the In predicate on the "channel_cost_id" field.
func ChannelCostIDIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelCostID), v...))
	})
}

// ChannelCostIDNotIn applies the NotIn predicate on the "channel_cost_id" field.
func ChannelCostIDNotIn(vs ...int64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelCostID), v...))
	})
}

// ChannelCostIDGT applies the GT predicate on the "channel_cost_id" field.
func ChannelCostIDGT(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDGTE applies the GTE predicate on the "channel_cost_id" field.
func ChannelCostIDGTE(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDLT applies the LT predicate on the "channel_cost_id" field.
func ChannelCostIDLT(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDLTE applies the LTE predicate on the "channel_cost_id" field.
func ChannelCostIDLTE(v int64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelCostID), v))
	})
}

// ChannelCostIDIsNil applies the IsNil predicate on the "channel_cost_id" field.
func ChannelCostIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannelCostID)))
	})
}

// ChannelCostIDNotNil applies the NotNil predicate on the "channel_cost_id" field.
func ChannelCostIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannelCostID)))
	})
}

// ShipTypeEQ applies the EQ predicate on the "ship_type" field.
func ShipTypeEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipType), v))
	})
}

// ShipTypeNEQ applies the NEQ predicate on the "ship_type" field.
func ShipTypeNEQ(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipType), v))
	})
}

// ShipTypeIn applies the In predicate on the "ship_type" field.
func ShipTypeIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipType), v...))
	})
}

// ShipTypeNotIn applies the NotIn predicate on the "ship_type" field.
func ShipTypeNotIn(vs ...int8) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipType), v...))
	})
}

// ShipTypeGT applies the GT predicate on the "ship_type" field.
func ShipTypeGT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipType), v))
	})
}

// ShipTypeGTE applies the GTE predicate on the "ship_type" field.
func ShipTypeGTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipType), v))
	})
}

// ShipTypeLT applies the LT predicate on the "ship_type" field.
func ShipTypeLT(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipType), v))
	})
}

// ShipTypeLTE applies the LTE predicate on the "ship_type" field.
func ShipTypeLTE(v int8) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipType), v))
	})
}

// ShipTypeIsNil applies the IsNil predicate on the "ship_type" field.
func ShipTypeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipType)))
	})
}

// ShipTypeNotNil applies the NotNil predicate on the "ship_type" field.
func ShipTypeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipType)))
	})
}

// TrackingCompanyEQ applies the EQ predicate on the "tracking_company" field.
func TrackingCompanyEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyNEQ applies the NEQ predicate on the "tracking_company" field.
func TrackingCompanyNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyIn applies the In predicate on the "tracking_company" field.
func TrackingCompanyIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingCompany), v...))
	})
}

// TrackingCompanyNotIn applies the NotIn predicate on the "tracking_company" field.
func TrackingCompanyNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingCompany), v...))
	})
}

// TrackingCompanyGT applies the GT predicate on the "tracking_company" field.
func TrackingCompanyGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyGTE applies the GTE predicate on the "tracking_company" field.
func TrackingCompanyGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyLT applies the LT predicate on the "tracking_company" field.
func TrackingCompanyLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyLTE applies the LTE predicate on the "tracking_company" field.
func TrackingCompanyLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyContains applies the Contains predicate on the "tracking_company" field.
func TrackingCompanyContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyHasPrefix applies the HasPrefix predicate on the "tracking_company" field.
func TrackingCompanyHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyHasSuffix applies the HasSuffix predicate on the "tracking_company" field.
func TrackingCompanyHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyIsNil applies the IsNil predicate on the "tracking_company" field.
func TrackingCompanyIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingCompany)))
	})
}

// TrackingCompanyNotNil applies the NotNil predicate on the "tracking_company" field.
func TrackingCompanyNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingCompany)))
	})
}

// TrackingCompanyEqualFold applies the EqualFold predicate on the "tracking_company" field.
func TrackingCompanyEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingCompany), v))
	})
}

// TrackingCompanyContainsFold applies the ContainsFold predicate on the "tracking_company" field.
func TrackingCompanyContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingCompany), v))
	})
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIsNil applies the IsNil predicate on the "tracking_number" field.
func TrackingNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingNumber)))
	})
}

// TrackingNumberNotNil applies the NotNil predicate on the "tracking_number" field.
func TrackingNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingNumber)))
	})
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingURLEQ applies the EQ predicate on the "tracking_url" field.
func TrackingURLEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLNEQ applies the NEQ predicate on the "tracking_url" field.
func TrackingURLNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLIn applies the In predicate on the "tracking_url" field.
func TrackingURLIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLNotIn applies the NotIn predicate on the "tracking_url" field.
func TrackingURLNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackingURL), v...))
	})
}

// TrackingURLGT applies the GT predicate on the "tracking_url" field.
func TrackingURLGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLGTE applies the GTE predicate on the "tracking_url" field.
func TrackingURLGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLT applies the LT predicate on the "tracking_url" field.
func TrackingURLLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLLTE applies the LTE predicate on the "tracking_url" field.
func TrackingURLLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContains applies the Contains predicate on the "tracking_url" field.
func TrackingURLContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasPrefix applies the HasPrefix predicate on the "tracking_url" field.
func TrackingURLHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLHasSuffix applies the HasSuffix predicate on the "tracking_url" field.
func TrackingURLHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLIsNil applies the IsNil predicate on the "tracking_url" field.
func TrackingURLIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingURL)))
	})
}

// TrackingURLNotNil applies the NotNil predicate on the "tracking_url" field.
func TrackingURLNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingURL)))
	})
}

// TrackingURLEqualFold applies the EqualFold predicate on the "tracking_url" field.
func TrackingURLEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingURL), v))
	})
}

// TrackingURLContainsFold applies the ContainsFold predicate on the "tracking_url" field.
func TrackingURLContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingURL), v))
	})
}

// WaybillNumberEQ applies the EQ predicate on the "waybill_number" field.
func WaybillNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberNEQ applies the NEQ predicate on the "waybill_number" field.
func WaybillNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberIn applies the In predicate on the "waybill_number" field.
func WaybillNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWaybillNumber), v...))
	})
}

// WaybillNumberNotIn applies the NotIn predicate on the "waybill_number" field.
func WaybillNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWaybillNumber), v...))
	})
}

// WaybillNumberGT applies the GT predicate on the "waybill_number" field.
func WaybillNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberGTE applies the GTE predicate on the "waybill_number" field.
func WaybillNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberLT applies the LT predicate on the "waybill_number" field.
func WaybillNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberLTE applies the LTE predicate on the "waybill_number" field.
func WaybillNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberContains applies the Contains predicate on the "waybill_number" field.
func WaybillNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberHasPrefix applies the HasPrefix predicate on the "waybill_number" field.
func WaybillNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberHasSuffix applies the HasSuffix predicate on the "waybill_number" field.
func WaybillNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberIsNil applies the IsNil predicate on the "waybill_number" field.
func WaybillNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWaybillNumber)))
	})
}

// WaybillNumberNotNil applies the NotNil predicate on the "waybill_number" field.
func WaybillNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWaybillNumber)))
	})
}

// WaybillNumberEqualFold applies the EqualFold predicate on the "waybill_number" field.
func WaybillNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWaybillNumber), v))
	})
}

// WaybillNumberContainsFold applies the ContainsFold predicate on the "waybill_number" field.
func WaybillNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWaybillNumber), v))
	})
}

// CourierOrderNumberEQ applies the EQ predicate on the "courier_order_number" field.
func CourierOrderNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberNEQ applies the NEQ predicate on the "courier_order_number" field.
func CourierOrderNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberIn applies the In predicate on the "courier_order_number" field.
func CourierOrderNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierOrderNumber), v...))
	})
}

// CourierOrderNumberNotIn applies the NotIn predicate on the "courier_order_number" field.
func CourierOrderNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierOrderNumber), v...))
	})
}

// CourierOrderNumberGT applies the GT predicate on the "courier_order_number" field.
func CourierOrderNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberGTE applies the GTE predicate on the "courier_order_number" field.
func CourierOrderNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberLT applies the LT predicate on the "courier_order_number" field.
func CourierOrderNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberLTE applies the LTE predicate on the "courier_order_number" field.
func CourierOrderNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberContains applies the Contains predicate on the "courier_order_number" field.
func CourierOrderNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberHasPrefix applies the HasPrefix predicate on the "courier_order_number" field.
func CourierOrderNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberHasSuffix applies the HasSuffix predicate on the "courier_order_number" field.
func CourierOrderNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberIsNil applies the IsNil predicate on the "courier_order_number" field.
func CourierOrderNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourierOrderNumber)))
	})
}

// CourierOrderNumberNotNil applies the NotNil predicate on the "courier_order_number" field.
func CourierOrderNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourierOrderNumber)))
	})
}

// CourierOrderNumberEqualFold applies the EqualFold predicate on the "courier_order_number" field.
func CourierOrderNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierOrderNumber), v))
	})
}

// CourierOrderNumberContainsFold applies the ContainsFold predicate on the "courier_order_number" field.
func CourierOrderNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberEQ applies the EQ predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberNEQ applies the NEQ predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberIn applies the In predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNssCourierOrderNumber), v...))
	})
}

// NssCourierOrderNumberNotIn applies the NotIn predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNssCourierOrderNumber), v...))
	})
}

// NssCourierOrderNumberGT applies the GT predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberGTE applies the GTE predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberLT applies the LT predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberLTE applies the LTE predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberContains applies the Contains predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberHasPrefix applies the HasPrefix predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberHasSuffix applies the HasSuffix predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberIsNil applies the IsNil predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNssCourierOrderNumber)))
	})
}

// NssCourierOrderNumberNotNil applies the NotNil predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNssCourierOrderNumber)))
	})
}

// NssCourierOrderNumberEqualFold applies the EqualFold predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssCourierOrderNumberContainsFold applies the ContainsFold predicate on the "nss_courier_order_number" field.
func NssCourierOrderNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNssCourierOrderNumber), v))
	})
}

// NssTrackingNumberEQ applies the EQ predicate on the "nss_tracking_number" field.
func NssTrackingNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberNEQ applies the NEQ predicate on the "nss_tracking_number" field.
func NssTrackingNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberIn applies the In predicate on the "nss_tracking_number" field.
func NssTrackingNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNssTrackingNumber), v...))
	})
}

// NssTrackingNumberNotIn applies the NotIn predicate on the "nss_tracking_number" field.
func NssTrackingNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNssTrackingNumber), v...))
	})
}

// NssTrackingNumberGT applies the GT predicate on the "nss_tracking_number" field.
func NssTrackingNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberGTE applies the GTE predicate on the "nss_tracking_number" field.
func NssTrackingNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberLT applies the LT predicate on the "nss_tracking_number" field.
func NssTrackingNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberLTE applies the LTE predicate on the "nss_tracking_number" field.
func NssTrackingNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberContains applies the Contains predicate on the "nss_tracking_number" field.
func NssTrackingNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberHasPrefix applies the HasPrefix predicate on the "nss_tracking_number" field.
func NssTrackingNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberHasSuffix applies the HasSuffix predicate on the "nss_tracking_number" field.
func NssTrackingNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberIsNil applies the IsNil predicate on the "nss_tracking_number" field.
func NssTrackingNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNssTrackingNumber)))
	})
}

// NssTrackingNumberNotNil applies the NotNil predicate on the "nss_tracking_number" field.
func NssTrackingNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNssTrackingNumber)))
	})
}

// NssTrackingNumberEqualFold applies the EqualFold predicate on the "nss_tracking_number" field.
func NssTrackingNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingNumberContainsFold applies the ContainsFold predicate on the "nss_tracking_number" field.
func NssTrackingNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNssTrackingNumber), v))
	})
}

// NssTrackingURLEQ applies the EQ predicate on the "nss_tracking_url" field.
func NssTrackingURLEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLNEQ applies the NEQ predicate on the "nss_tracking_url" field.
func NssTrackingURLNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLIn applies the In predicate on the "nss_tracking_url" field.
func NssTrackingURLIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNssTrackingURL), v...))
	})
}

// NssTrackingURLNotIn applies the NotIn predicate on the "nss_tracking_url" field.
func NssTrackingURLNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNssTrackingURL), v...))
	})
}

// NssTrackingURLGT applies the GT predicate on the "nss_tracking_url" field.
func NssTrackingURLGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLGTE applies the GTE predicate on the "nss_tracking_url" field.
func NssTrackingURLGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLLT applies the LT predicate on the "nss_tracking_url" field.
func NssTrackingURLLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLLTE applies the LTE predicate on the "nss_tracking_url" field.
func NssTrackingURLLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLContains applies the Contains predicate on the "nss_tracking_url" field.
func NssTrackingURLContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLHasPrefix applies the HasPrefix predicate on the "nss_tracking_url" field.
func NssTrackingURLHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLHasSuffix applies the HasSuffix predicate on the "nss_tracking_url" field.
func NssTrackingURLHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLIsNil applies the IsNil predicate on the "nss_tracking_url" field.
func NssTrackingURLIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNssTrackingURL)))
	})
}

// NssTrackingURLNotNil applies the NotNil predicate on the "nss_tracking_url" field.
func NssTrackingURLNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNssTrackingURL)))
	})
}

// NssTrackingURLEqualFold applies the EqualFold predicate on the "nss_tracking_url" field.
func NssTrackingURLEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNssTrackingURL), v))
	})
}

// NssTrackingURLContainsFold applies the ContainsFold predicate on the "nss_tracking_url" field.
func NssTrackingURLContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNssTrackingURL), v))
	})
}

// ShippingLabelURLEQ applies the EQ predicate on the "shipping_label_url" field.
func ShippingLabelURLEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLNEQ applies the NEQ predicate on the "shipping_label_url" field.
func ShippingLabelURLNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLIn applies the In predicate on the "shipping_label_url" field.
func ShippingLabelURLIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingLabelURL), v...))
	})
}

// ShippingLabelURLNotIn applies the NotIn predicate on the "shipping_label_url" field.
func ShippingLabelURLNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingLabelURL), v...))
	})
}

// ShippingLabelURLGT applies the GT predicate on the "shipping_label_url" field.
func ShippingLabelURLGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLGTE applies the GTE predicate on the "shipping_label_url" field.
func ShippingLabelURLGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLLT applies the LT predicate on the "shipping_label_url" field.
func ShippingLabelURLLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLLTE applies the LTE predicate on the "shipping_label_url" field.
func ShippingLabelURLLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLContains applies the Contains predicate on the "shipping_label_url" field.
func ShippingLabelURLContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLHasPrefix applies the HasPrefix predicate on the "shipping_label_url" field.
func ShippingLabelURLHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLHasSuffix applies the HasSuffix predicate on the "shipping_label_url" field.
func ShippingLabelURLHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLIsNil applies the IsNil predicate on the "shipping_label_url" field.
func ShippingLabelURLIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingLabelURL)))
	})
}

// ShippingLabelURLNotNil applies the NotNil predicate on the "shipping_label_url" field.
func ShippingLabelURLNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingLabelURL)))
	})
}

// ShippingLabelURLEqualFold applies the EqualFold predicate on the "shipping_label_url" field.
func ShippingLabelURLEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelURLContainsFold applies the ContainsFold predicate on the "shipping_label_url" field.
func ShippingLabelURLContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingLabelURL), v))
	})
}

// ShippingLabelPathEQ applies the EQ predicate on the "shipping_label_path" field.
func ShippingLabelPathEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathNEQ applies the NEQ predicate on the "shipping_label_path" field.
func ShippingLabelPathNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathIn applies the In predicate on the "shipping_label_path" field.
func ShippingLabelPathIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingLabelPath), v...))
	})
}

// ShippingLabelPathNotIn applies the NotIn predicate on the "shipping_label_path" field.
func ShippingLabelPathNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingLabelPath), v...))
	})
}

// ShippingLabelPathGT applies the GT predicate on the "shipping_label_path" field.
func ShippingLabelPathGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathGTE applies the GTE predicate on the "shipping_label_path" field.
func ShippingLabelPathGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathLT applies the LT predicate on the "shipping_label_path" field.
func ShippingLabelPathLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathLTE applies the LTE predicate on the "shipping_label_path" field.
func ShippingLabelPathLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathContains applies the Contains predicate on the "shipping_label_path" field.
func ShippingLabelPathContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathHasPrefix applies the HasPrefix predicate on the "shipping_label_path" field.
func ShippingLabelPathHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathHasSuffix applies the HasSuffix predicate on the "shipping_label_path" field.
func ShippingLabelPathHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathIsNil applies the IsNil predicate on the "shipping_label_path" field.
func ShippingLabelPathIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingLabelPath)))
	})
}

// ShippingLabelPathNotNil applies the NotNil predicate on the "shipping_label_path" field.
func ShippingLabelPathNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingLabelPath)))
	})
}

// ShippingLabelPathEqualFold applies the EqualFold predicate on the "shipping_label_path" field.
func ShippingLabelPathEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingLabelPath), v))
	})
}

// ShippingLabelPathContainsFold applies the ContainsFold predicate on the "shipping_label_path" field.
func ShippingLabelPathContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingLabelPath), v))
	})
}

// LabelDataPathEQ applies the EQ predicate on the "label_data_path" field.
func LabelDataPathEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathNEQ applies the NEQ predicate on the "label_data_path" field.
func LabelDataPathNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathIn applies the In predicate on the "label_data_path" field.
func LabelDataPathIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLabelDataPath), v...))
	})
}

// LabelDataPathNotIn applies the NotIn predicate on the "label_data_path" field.
func LabelDataPathNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLabelDataPath), v...))
	})
}

// LabelDataPathGT applies the GT predicate on the "label_data_path" field.
func LabelDataPathGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathGTE applies the GTE predicate on the "label_data_path" field.
func LabelDataPathGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathLT applies the LT predicate on the "label_data_path" field.
func LabelDataPathLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathLTE applies the LTE predicate on the "label_data_path" field.
func LabelDataPathLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathContains applies the Contains predicate on the "label_data_path" field.
func LabelDataPathContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathHasPrefix applies the HasPrefix predicate on the "label_data_path" field.
func LabelDataPathHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathHasSuffix applies the HasSuffix predicate on the "label_data_path" field.
func LabelDataPathHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathIsNil applies the IsNil predicate on the "label_data_path" field.
func LabelDataPathIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLabelDataPath)))
	})
}

// LabelDataPathNotNil applies the NotNil predicate on the "label_data_path" field.
func LabelDataPathNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLabelDataPath)))
	})
}

// LabelDataPathEqualFold applies the EqualFold predicate on the "label_data_path" field.
func LabelDataPathEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLabelDataPath), v))
	})
}

// LabelDataPathContainsFold applies the ContainsFold predicate on the "label_data_path" field.
func LabelDataPathContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLabelDataPath), v))
	})
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageID), v))
	})
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageID), v))
	})
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPackageID), v...))
	})
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPackageID), v...))
	})
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageID), v))
	})
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageID), v))
	})
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageID), v))
	})
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageID), v))
	})
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPackageID), v))
	})
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPackageID), v))
	})
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPackageID), v))
	})
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPackageID)))
	})
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPackageID)))
	})
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPackageID), v))
	})
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPackageID), v))
	})
}

// ShipDateEQ applies the EQ predicate on the "ship_date" field.
func ShipDateEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipDate), v))
	})
}

// ShipDateNEQ applies the NEQ predicate on the "ship_date" field.
func ShipDateNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipDate), v))
	})
}

// ShipDateIn applies the In predicate on the "ship_date" field.
func ShipDateIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipDate), v...))
	})
}

// ShipDateNotIn applies the NotIn predicate on the "ship_date" field.
func ShipDateNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipDate), v...))
	})
}

// ShipDateGT applies the GT predicate on the "ship_date" field.
func ShipDateGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipDate), v))
	})
}

// ShipDateGTE applies the GTE predicate on the "ship_date" field.
func ShipDateGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipDate), v))
	})
}

// ShipDateLT applies the LT predicate on the "ship_date" field.
func ShipDateLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipDate), v))
	})
}

// ShipDateLTE applies the LTE predicate on the "ship_date" field.
func ShipDateLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipDate), v))
	})
}

// ShipDateIsNil applies the IsNil predicate on the "ship_date" field.
func ShipDateIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipDate)))
	})
}

// ShipDateNotNil applies the NotNil predicate on the "ship_date" field.
func ShipDateNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipDate)))
	})
}

// RequestShippingAtEQ applies the EQ predicate on the "request_shipping_at" field.
func RequestShippingAtEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtNEQ applies the NEQ predicate on the "request_shipping_at" field.
func RequestShippingAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtIn applies the In predicate on the "request_shipping_at" field.
func RequestShippingAtIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequestShippingAt), v...))
	})
}

// RequestShippingAtNotIn applies the NotIn predicate on the "request_shipping_at" field.
func RequestShippingAtNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequestShippingAt), v...))
	})
}

// RequestShippingAtGT applies the GT predicate on the "request_shipping_at" field.
func RequestShippingAtGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtGTE applies the GTE predicate on the "request_shipping_at" field.
func RequestShippingAtGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtLT applies the LT predicate on the "request_shipping_at" field.
func RequestShippingAtLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtLTE applies the LTE predicate on the "request_shipping_at" field.
func RequestShippingAtLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestShippingAt), v))
	})
}

// RequestShippingAtIsNil applies the IsNil predicate on the "request_shipping_at" field.
func RequestShippingAtIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestShippingAt)))
	})
}

// RequestShippingAtNotNil applies the NotNil predicate on the "request_shipping_at" field.
func RequestShippingAtNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestShippingAt)))
	})
}

// UnshelfRequestedTimeEQ applies the EQ predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeNEQ applies the NEQ predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeNEQ(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeIn applies the In predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnshelfRequestedTime), v...))
	})
}

// UnshelfRequestedTimeNotIn applies the NotIn predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeNotIn(vs ...time.Time) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnshelfRequestedTime), v...))
	})
}

// UnshelfRequestedTimeGT applies the GT predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeGT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeGTE applies the GTE predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeGTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeLT applies the LT predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeLT(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeLTE applies the LTE predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeLTE(v time.Time) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnshelfRequestedTime), v))
	})
}

// UnshelfRequestedTimeIsNil applies the IsNil predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnshelfRequestedTime)))
	})
}

// UnshelfRequestedTimeNotNil applies the NotNil predicate on the "unshelf_requested_time" field.
func UnshelfRequestedTimeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnshelfRequestedTime)))
	})
}

// ContainerCodeEQ applies the EQ predicate on the "container_code" field.
func ContainerCodeEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeNEQ applies the NEQ predicate on the "container_code" field.
func ContainerCodeNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeIn applies the In predicate on the "container_code" field.
func ContainerCodeIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContainerCode), v...))
	})
}

// ContainerCodeNotIn applies the NotIn predicate on the "container_code" field.
func ContainerCodeNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContainerCode), v...))
	})
}

// ContainerCodeGT applies the GT predicate on the "container_code" field.
func ContainerCodeGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeGTE applies the GTE predicate on the "container_code" field.
func ContainerCodeGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeLT applies the LT predicate on the "container_code" field.
func ContainerCodeLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeLTE applies the LTE predicate on the "container_code" field.
func ContainerCodeLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeContains applies the Contains predicate on the "container_code" field.
func ContainerCodeContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeHasPrefix applies the HasPrefix predicate on the "container_code" field.
func ContainerCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeHasSuffix applies the HasSuffix predicate on the "container_code" field.
func ContainerCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeIsNil applies the IsNil predicate on the "container_code" field.
func ContainerCodeIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContainerCode)))
	})
}

// ContainerCodeNotNil applies the NotNil predicate on the "container_code" field.
func ContainerCodeNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContainerCode)))
	})
}

// ContainerCodeEqualFold applies the EqualFold predicate on the "container_code" field.
func ContainerCodeEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContainerCode), v))
	})
}

// ContainerCodeContainsFold applies the ContainsFold predicate on the "container_code" field.
func ContainerCodeContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContainerCode), v))
	})
}

// BasketNumberEQ applies the EQ predicate on the "basket_number" field.
func BasketNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberNEQ applies the NEQ predicate on the "basket_number" field.
func BasketNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberIn applies the In predicate on the "basket_number" field.
func BasketNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBasketNumber), v...))
	})
}

// BasketNumberNotIn applies the NotIn predicate on the "basket_number" field.
func BasketNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBasketNumber), v...))
	})
}

// BasketNumberGT applies the GT predicate on the "basket_number" field.
func BasketNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberGTE applies the GTE predicate on the "basket_number" field.
func BasketNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberLT applies the LT predicate on the "basket_number" field.
func BasketNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberLTE applies the LTE predicate on the "basket_number" field.
func BasketNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberContains applies the Contains predicate on the "basket_number" field.
func BasketNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberHasPrefix applies the HasPrefix predicate on the "basket_number" field.
func BasketNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberHasSuffix applies the HasSuffix predicate on the "basket_number" field.
func BasketNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberIsNil applies the IsNil predicate on the "basket_number" field.
func BasketNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBasketNumber)))
	})
}

// BasketNumberNotNil applies the NotNil predicate on the "basket_number" field.
func BasketNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBasketNumber)))
	})
}

// BasketNumberEqualFold applies the EqualFold predicate on the "basket_number" field.
func BasketNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBasketNumber), v))
	})
}

// BasketNumberContainsFold applies the ContainsFold predicate on the "basket_number" field.
func BasketNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBasketNumber), v))
	})
}

// PrintTimesEQ applies the EQ predicate on the "print_times" field.
func PrintTimesEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesNEQ applies the NEQ predicate on the "print_times" field.
func PrintTimesNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesIn applies the In predicate on the "print_times" field.
func PrintTimesIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrintTimes), v...))
	})
}

// PrintTimesNotIn applies the NotIn predicate on the "print_times" field.
func PrintTimesNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrintTimes), v...))
	})
}

// PrintTimesGT applies the GT predicate on the "print_times" field.
func PrintTimesGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesGTE applies the GTE predicate on the "print_times" field.
func PrintTimesGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesLT applies the LT predicate on the "print_times" field.
func PrintTimesLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesLTE applies the LTE predicate on the "print_times" field.
func PrintTimesLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrintTimes), v))
	})
}

// PrintTimesIsNil applies the IsNil predicate on the "print_times" field.
func PrintTimesIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrintTimes)))
	})
}

// PrintTimesNotNil applies the NotNil predicate on the "print_times" field.
func PrintTimesNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrintTimes)))
	})
}

// SortingTrackingNumberEQ applies the EQ predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberNEQ applies the NEQ predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberIn applies the In predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingTrackingNumber), v...))
	})
}

// SortingTrackingNumberNotIn applies the NotIn predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingTrackingNumber), v...))
	})
}

// SortingTrackingNumberGT applies the GT predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberGTE applies the GTE predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberLT applies the LT predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberLTE applies the LTE predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberContains applies the Contains predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberHasPrefix applies the HasPrefix predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberHasSuffix applies the HasSuffix predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberIsNil applies the IsNil predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingTrackingNumber)))
	})
}

// SortingTrackingNumberNotNil applies the NotNil predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingTrackingNumber)))
	})
}

// SortingTrackingNumberEqualFold applies the EqualFold predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingTrackingNumberContainsFold applies the ContainsFold predicate on the "sorting_tracking_number" field.
func SortingTrackingNumberContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSortingTrackingNumber), v))
	})
}

// SortingPortEQ applies the EQ predicate on the "sorting_port" field.
func SortingPortEQ(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingPort), v))
	})
}

// SortingPortNEQ applies the NEQ predicate on the "sorting_port" field.
func SortingPortNEQ(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingPort), v))
	})
}

// SortingPortIn applies the In predicate on the "sorting_port" field.
func SortingPortIn(vs ...int32) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingPort), v...))
	})
}

// SortingPortNotIn applies the NotIn predicate on the "sorting_port" field.
func SortingPortNotIn(vs ...int32) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingPort), v...))
	})
}

// SortingPortGT applies the GT predicate on the "sorting_port" field.
func SortingPortGT(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingPort), v))
	})
}

// SortingPortGTE applies the GTE predicate on the "sorting_port" field.
func SortingPortGTE(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingPort), v))
	})
}

// SortingPortLT applies the LT predicate on the "sorting_port" field.
func SortingPortLT(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingPort), v))
	})
}

// SortingPortLTE applies the LTE predicate on the "sorting_port" field.
func SortingPortLTE(v int32) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingPort), v))
	})
}

// SortingPortIsNil applies the IsNil predicate on the "sorting_port" field.
func SortingPortIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingPort)))
	})
}

// SortingPortNotNil applies the NotNil predicate on the "sorting_port" field.
func SortingPortNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingPort)))
	})
}

// SortingLengthEQ applies the EQ predicate on the "sorting_length" field.
func SortingLengthEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingLength), v))
	})
}

// SortingLengthNEQ applies the NEQ predicate on the "sorting_length" field.
func SortingLengthNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingLength), v))
	})
}

// SortingLengthIn applies the In predicate on the "sorting_length" field.
func SortingLengthIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingLength), v...))
	})
}

// SortingLengthNotIn applies the NotIn predicate on the "sorting_length" field.
func SortingLengthNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingLength), v...))
	})
}

// SortingLengthGT applies the GT predicate on the "sorting_length" field.
func SortingLengthGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingLength), v))
	})
}

// SortingLengthGTE applies the GTE predicate on the "sorting_length" field.
func SortingLengthGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingLength), v))
	})
}

// SortingLengthLT applies the LT predicate on the "sorting_length" field.
func SortingLengthLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingLength), v))
	})
}

// SortingLengthLTE applies the LTE predicate on the "sorting_length" field.
func SortingLengthLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingLength), v))
	})
}

// SortingLengthIsNil applies the IsNil predicate on the "sorting_length" field.
func SortingLengthIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingLength)))
	})
}

// SortingLengthNotNil applies the NotNil predicate on the "sorting_length" field.
func SortingLengthNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingLength)))
	})
}

// SortingWidthEQ applies the EQ predicate on the "sorting_width" field.
func SortingWidthEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthNEQ applies the NEQ predicate on the "sorting_width" field.
func SortingWidthNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthIn applies the In predicate on the "sorting_width" field.
func SortingWidthIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingWidth), v...))
	})
}

// SortingWidthNotIn applies the NotIn predicate on the "sorting_width" field.
func SortingWidthNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingWidth), v...))
	})
}

// SortingWidthGT applies the GT predicate on the "sorting_width" field.
func SortingWidthGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthGTE applies the GTE predicate on the "sorting_width" field.
func SortingWidthGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthLT applies the LT predicate on the "sorting_width" field.
func SortingWidthLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthLTE applies the LTE predicate on the "sorting_width" field.
func SortingWidthLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingWidth), v))
	})
}

// SortingWidthIsNil applies the IsNil predicate on the "sorting_width" field.
func SortingWidthIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingWidth)))
	})
}

// SortingWidthNotNil applies the NotNil predicate on the "sorting_width" field.
func SortingWidthNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingWidth)))
	})
}

// SortingHeightEQ applies the EQ predicate on the "sorting_height" field.
func SortingHeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightNEQ applies the NEQ predicate on the "sorting_height" field.
func SortingHeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightIn applies the In predicate on the "sorting_height" field.
func SortingHeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingHeight), v...))
	})
}

// SortingHeightNotIn applies the NotIn predicate on the "sorting_height" field.
func SortingHeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingHeight), v...))
	})
}

// SortingHeightGT applies the GT predicate on the "sorting_height" field.
func SortingHeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightGTE applies the GTE predicate on the "sorting_height" field.
func SortingHeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightLT applies the LT predicate on the "sorting_height" field.
func SortingHeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightLTE applies the LTE predicate on the "sorting_height" field.
func SortingHeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingHeight), v))
	})
}

// SortingHeightIsNil applies the IsNil predicate on the "sorting_height" field.
func SortingHeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingHeight)))
	})
}

// SortingHeightNotNil applies the NotNil predicate on the "sorting_height" field.
func SortingHeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingHeight)))
	})
}

// SortingWeightEQ applies the EQ predicate on the "sorting_weight" field.
func SortingWeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightNEQ applies the NEQ predicate on the "sorting_weight" field.
func SortingWeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightIn applies the In predicate on the "sorting_weight" field.
func SortingWeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingWeight), v...))
	})
}

// SortingWeightNotIn applies the NotIn predicate on the "sorting_weight" field.
func SortingWeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingWeight), v...))
	})
}

// SortingWeightGT applies the GT predicate on the "sorting_weight" field.
func SortingWeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightGTE applies the GTE predicate on the "sorting_weight" field.
func SortingWeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightLT applies the LT predicate on the "sorting_weight" field.
func SortingWeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightLTE applies the LTE predicate on the "sorting_weight" field.
func SortingWeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingWeight), v))
	})
}

// SortingWeightIsNil applies the IsNil predicate on the "sorting_weight" field.
func SortingWeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSortingWeight)))
	})
}

// SortingWeightNotNil applies the NotNil predicate on the "sorting_weight" field.
func SortingWeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSortingWeight)))
	})
}

// EstimatedWeightEQ applies the EQ predicate on the "estimated_weight" field.
func EstimatedWeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightNEQ applies the NEQ predicate on the "estimated_weight" field.
func EstimatedWeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightIn applies the In predicate on the "estimated_weight" field.
func EstimatedWeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEstimatedWeight), v...))
	})
}

// EstimatedWeightNotIn applies the NotIn predicate on the "estimated_weight" field.
func EstimatedWeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEstimatedWeight), v...))
	})
}

// EstimatedWeightGT applies the GT predicate on the "estimated_weight" field.
func EstimatedWeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightGTE applies the GTE predicate on the "estimated_weight" field.
func EstimatedWeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightLT applies the LT predicate on the "estimated_weight" field.
func EstimatedWeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightLTE applies the LTE predicate on the "estimated_weight" field.
func EstimatedWeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedWeight), v))
	})
}

// EstimatedWeightIsNil applies the IsNil predicate on the "estimated_weight" field.
func EstimatedWeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedWeight)))
	})
}

// EstimatedWeightNotNil applies the NotNil predicate on the "estimated_weight" field.
func EstimatedWeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedWeight)))
	})
}

// CheckoutActualWeightEQ applies the EQ predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightNEQ applies the NEQ predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightIn applies the In predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCheckoutActualWeight), v...))
	})
}

// CheckoutActualWeightNotIn applies the NotIn predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCheckoutActualWeight), v...))
	})
}

// CheckoutActualWeightGT applies the GT predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightGTE applies the GTE predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightLT applies the LT predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightLTE applies the LTE predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckoutActualWeight), v))
	})
}

// CheckoutActualWeightIsNil applies the IsNil predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCheckoutActualWeight)))
	})
}

// CheckoutActualWeightNotNil applies the NotNil predicate on the "checkout_actual_weight" field.
func CheckoutActualWeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCheckoutActualWeight)))
	})
}

// VolumeWeightEQ applies the EQ predicate on the "volume_weight" field.
func VolumeWeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightNEQ applies the NEQ predicate on the "volume_weight" field.
func VolumeWeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightIn applies the In predicate on the "volume_weight" field.
func VolumeWeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVolumeWeight), v...))
	})
}

// VolumeWeightNotIn applies the NotIn predicate on the "volume_weight" field.
func VolumeWeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVolumeWeight), v...))
	})
}

// VolumeWeightGT applies the GT predicate on the "volume_weight" field.
func VolumeWeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightGTE applies the GTE predicate on the "volume_weight" field.
func VolumeWeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightLT applies the LT predicate on the "volume_weight" field.
func VolumeWeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightLTE applies the LTE predicate on the "volume_weight" field.
func VolumeWeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVolumeWeight), v))
	})
}

// VolumeWeightIsNil applies the IsNil predicate on the "volume_weight" field.
func VolumeWeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVolumeWeight)))
	})
}

// VolumeWeightNotNil applies the NotNil predicate on the "volume_weight" field.
func VolumeWeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVolumeWeight)))
	})
}

// CourierWeightEQ applies the EQ predicate on the "courier_weight" field.
func CourierWeightEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightNEQ applies the NEQ predicate on the "courier_weight" field.
func CourierWeightNEQ(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightIn applies the In predicate on the "courier_weight" field.
func CourierWeightIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierWeight), v...))
	})
}

// CourierWeightNotIn applies the NotIn predicate on the "courier_weight" field.
func CourierWeightNotIn(vs ...int) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierWeight), v...))
	})
}

// CourierWeightGT applies the GT predicate on the "courier_weight" field.
func CourierWeightGT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightGTE applies the GTE predicate on the "courier_weight" field.
func CourierWeightGTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightLT applies the LT predicate on the "courier_weight" field.
func CourierWeightLT(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightLTE applies the LTE predicate on the "courier_weight" field.
func CourierWeightLTE(v int) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierWeight), v))
	})
}

// CourierWeightIsNil applies the IsNil predicate on the "courier_weight" field.
func CourierWeightIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourierWeight)))
	})
}

// CourierWeightNotNil applies the NotNil predicate on the "courier_weight" field.
func CourierWeightNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourierWeight)))
	})
}

// DeclaredValueInUsdEQ applies the EQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdNEQ applies the NEQ predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdIn applies the In predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdNotIn applies the NotIn predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInUsd), v...))
	})
}

// DeclaredValueInUsdGT applies the GT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdGTE applies the GTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLT applies the LT predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdLTE applies the LTE predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInUsd), v))
	})
}

// DeclaredValueInUsdIsNil applies the IsNil predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredValueInUsd)))
	})
}

// DeclaredValueInUsdNotNil applies the NotNil predicate on the "declared_value_in_usd" field.
func DeclaredValueInUsdNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredValueInUsd)))
	})
}

// DeclaredValueInEurEQ applies the EQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurNEQ applies the NEQ predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurIn applies the In predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurNotIn applies the NotIn predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeclaredValueInEur), v...))
	})
}

// DeclaredValueInEurGT applies the GT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurGTE applies the GTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLT applies the LT predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurLTE applies the LTE predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclaredValueInEur), v))
	})
}

// DeclaredValueInEurIsNil applies the IsNil predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeclaredValueInEur)))
	})
}

// DeclaredValueInEurNotNil applies the NotNil predicate on the "declared_value_in_eur" field.
func DeclaredValueInEurNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeclaredValueInEur)))
	})
}

// TotalItemsPriceEQ applies the EQ predicate on the "total_items_price" field.
func TotalItemsPriceEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceNEQ applies the NEQ predicate on the "total_items_price" field.
func TotalItemsPriceNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceIn applies the In predicate on the "total_items_price" field.
func TotalItemsPriceIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalItemsPrice), v...))
	})
}

// TotalItemsPriceNotIn applies the NotIn predicate on the "total_items_price" field.
func TotalItemsPriceNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalItemsPrice), v...))
	})
}

// TotalItemsPriceGT applies the GT predicate on the "total_items_price" field.
func TotalItemsPriceGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceGTE applies the GTE predicate on the "total_items_price" field.
func TotalItemsPriceGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceLT applies the LT predicate on the "total_items_price" field.
func TotalItemsPriceLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceLTE applies the LTE predicate on the "total_items_price" field.
func TotalItemsPriceLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalItemsPrice), v))
	})
}

// TotalItemsPriceIsNil applies the IsNil predicate on the "total_items_price" field.
func TotalItemsPriceIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalItemsPrice)))
	})
}

// TotalItemsPriceNotNil applies the NotNil predicate on the "total_items_price" field.
func TotalItemsPriceNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalItemsPrice)))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrency)))
	})
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrency)))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// DeliveryCostEQ applies the EQ predicate on the "delivery_cost" field.
func DeliveryCostEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostNEQ applies the NEQ predicate on the "delivery_cost" field.
func DeliveryCostNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostIn applies the In predicate on the "delivery_cost" field.
func DeliveryCostIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliveryCost), v...))
	})
}

// DeliveryCostNotIn applies the NotIn predicate on the "delivery_cost" field.
func DeliveryCostNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliveryCost), v...))
	})
}

// DeliveryCostGT applies the GT predicate on the "delivery_cost" field.
func DeliveryCostGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostGTE applies the GTE predicate on the "delivery_cost" field.
func DeliveryCostGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostLT applies the LT predicate on the "delivery_cost" field.
func DeliveryCostLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostLTE applies the LTE predicate on the "delivery_cost" field.
func DeliveryCostLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryCost), v))
	})
}

// MiscFeeEQ applies the EQ predicate on the "misc_fee" field.
func MiscFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeNEQ applies the NEQ predicate on the "misc_fee" field.
func MiscFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeIn applies the In predicate on the "misc_fee" field.
func MiscFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeNotIn applies the NotIn predicate on the "misc_fee" field.
func MiscFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeGT applies the GT predicate on the "misc_fee" field.
func MiscFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeGTE applies the GTE predicate on the "misc_fee" field.
func MiscFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLT applies the LT predicate on the "misc_fee" field.
func MiscFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLTE applies the LTE predicate on the "misc_fee" field.
func MiscFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiscFee), v))
	})
}

// FuelFeeEQ applies the EQ predicate on the "fuel_fee" field.
func FuelFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeNEQ applies the NEQ predicate on the "fuel_fee" field.
func FuelFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeIn applies the In predicate on the "fuel_fee" field.
func FuelFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeNotIn applies the NotIn predicate on the "fuel_fee" field.
func FuelFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeGT applies the GT predicate on the "fuel_fee" field.
func FuelFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeGTE applies the GTE predicate on the "fuel_fee" field.
func FuelFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLT applies the LT predicate on the "fuel_fee" field.
func FuelFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLTE applies the LTE predicate on the "fuel_fee" field.
func FuelFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFuelFee), v))
	})
}

// RegistrationFeeEQ applies the EQ predicate on the "registration_fee" field.
func RegistrationFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeNEQ applies the NEQ predicate on the "registration_fee" field.
func RegistrationFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeIn applies the In predicate on the "registration_fee" field.
func RegistrationFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeNotIn applies the NotIn predicate on the "registration_fee" field.
func RegistrationFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeGT applies the GT predicate on the "registration_fee" field.
func RegistrationFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeGTE applies the GTE predicate on the "registration_fee" field.
func RegistrationFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLT applies the LT predicate on the "registration_fee" field.
func RegistrationFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLTE applies the LTE predicate on the "registration_fee" field.
func RegistrationFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationFee), v))
	})
}

// ProcessingFeeEQ applies the EQ predicate on the "processing_fee" field.
func ProcessingFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeNEQ applies the NEQ predicate on the "processing_fee" field.
func ProcessingFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeIn applies the In predicate on the "processing_fee" field.
func ProcessingFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeNotIn applies the NotIn predicate on the "processing_fee" field.
func ProcessingFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeGT applies the GT predicate on the "processing_fee" field.
func ProcessingFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeGTE applies the GTE predicate on the "processing_fee" field.
func ProcessingFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLT applies the LT predicate on the "processing_fee" field.
func ProcessingFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLTE applies the LTE predicate on the "processing_fee" field.
func ProcessingFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessingFee), v))
	})
}

// PackageFeeEQ applies the EQ predicate on the "package_fee" field.
func PackageFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageFee), v))
	})
}

// PackageFeeNEQ applies the NEQ predicate on the "package_fee" field.
func PackageFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageFee), v))
	})
}

// PackageFeeIn applies the In predicate on the "package_fee" field.
func PackageFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPackageFee), v...))
	})
}

// PackageFeeNotIn applies the NotIn predicate on the "package_fee" field.
func PackageFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPackageFee), v...))
	})
}

// PackageFeeGT applies the GT predicate on the "package_fee" field.
func PackageFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageFee), v))
	})
}

// PackageFeeGTE applies the GTE predicate on the "package_fee" field.
func PackageFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageFee), v))
	})
}

// PackageFeeLT applies the LT predicate on the "package_fee" field.
func PackageFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageFee), v))
	})
}

// PackageFeeLTE applies the LTE predicate on the "package_fee" field.
func PackageFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageFee), v))
	})
}

// HandlingFeeEQ applies the EQ predicate on the "handling_fee" field.
func HandlingFeeEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeNEQ applies the NEQ predicate on the "handling_fee" field.
func HandlingFeeNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeIn applies the In predicate on the "handling_fee" field.
func HandlingFeeIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeNotIn applies the NotIn predicate on the "handling_fee" field.
func HandlingFeeNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeGT applies the GT predicate on the "handling_fee" field.
func HandlingFeeGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeGTE applies the GTE predicate on the "handling_fee" field.
func HandlingFeeGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLT applies the LT predicate on the "handling_fee" field.
func HandlingFeeLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLTE applies the LTE predicate on the "handling_fee" field.
func HandlingFeeLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlingFee), v))
	})
}

// VatEQ applies the EQ predicate on the "vat" field.
func VatEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVat), v))
	})
}

// VatNEQ applies the NEQ predicate on the "vat" field.
func VatNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVat), v))
	})
}

// VatIn applies the In predicate on the "vat" field.
func VatIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVat), v...))
	})
}

// VatNotIn applies the NotIn predicate on the "vat" field.
func VatNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVat), v...))
	})
}

// VatGT applies the GT predicate on the "vat" field.
func VatGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVat), v))
	})
}

// VatGTE applies the GTE predicate on the "vat" field.
func VatGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVat), v))
	})
}

// VatLT applies the LT predicate on the "vat" field.
func VatLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVat), v))
	})
}

// VatLTE applies the LTE predicate on the "vat" field.
func VatLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVat), v))
	})
}

// EstimatedCostEQ applies the EQ predicate on the "estimated_cost" field.
func EstimatedCostEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostNEQ applies the NEQ predicate on the "estimated_cost" field.
func EstimatedCostNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostIn applies the In predicate on the "estimated_cost" field.
func EstimatedCostIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEstimatedCost), v...))
	})
}

// EstimatedCostNotIn applies the NotIn predicate on the "estimated_cost" field.
func EstimatedCostNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEstimatedCost), v...))
	})
}

// EstimatedCostGT applies the GT predicate on the "estimated_cost" field.
func EstimatedCostGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostGTE applies the GTE predicate on the "estimated_cost" field.
func EstimatedCostGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostLT applies the LT predicate on the "estimated_cost" field.
func EstimatedCostLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostLTE applies the LTE predicate on the "estimated_cost" field.
func EstimatedCostLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCurrencyEQ applies the EQ predicate on the "estimated_currency" field.
func EstimatedCurrencyEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyNEQ applies the NEQ predicate on the "estimated_currency" field.
func EstimatedCurrencyNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyIn applies the In predicate on the "estimated_currency" field.
func EstimatedCurrencyIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEstimatedCurrency), v...))
	})
}

// EstimatedCurrencyNotIn applies the NotIn predicate on the "estimated_currency" field.
func EstimatedCurrencyNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEstimatedCurrency), v...))
	})
}

// EstimatedCurrencyGT applies the GT predicate on the "estimated_currency" field.
func EstimatedCurrencyGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyGTE applies the GTE predicate on the "estimated_currency" field.
func EstimatedCurrencyGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyLT applies the LT predicate on the "estimated_currency" field.
func EstimatedCurrencyLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyLTE applies the LTE predicate on the "estimated_currency" field.
func EstimatedCurrencyLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyContains applies the Contains predicate on the "estimated_currency" field.
func EstimatedCurrencyContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyHasPrefix applies the HasPrefix predicate on the "estimated_currency" field.
func EstimatedCurrencyHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyHasSuffix applies the HasSuffix predicate on the "estimated_currency" field.
func EstimatedCurrencyHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyEqualFold applies the EqualFold predicate on the "estimated_currency" field.
func EstimatedCurrencyEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEstimatedCurrency), v))
	})
}

// EstimatedCurrencyContainsFold applies the ContainsFold predicate on the "estimated_currency" field.
func EstimatedCurrencyContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEstimatedCurrency), v))
	})
}

// ReceivablesAmountEQ applies the EQ predicate on the "receivables_amount" field.
func ReceivablesAmountEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesAmountNEQ applies the NEQ predicate on the "receivables_amount" field.
func ReceivablesAmountNEQ(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesAmountIn applies the In predicate on the "receivables_amount" field.
func ReceivablesAmountIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceivablesAmount), v...))
	})
}

// ReceivablesAmountNotIn applies the NotIn predicate on the "receivables_amount" field.
func ReceivablesAmountNotIn(vs ...float64) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceivablesAmount), v...))
	})
}

// ReceivablesAmountGT applies the GT predicate on the "receivables_amount" field.
func ReceivablesAmountGT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesAmountGTE applies the GTE predicate on the "receivables_amount" field.
func ReceivablesAmountGTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesAmountLT applies the LT predicate on the "receivables_amount" field.
func ReceivablesAmountLT(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesAmountLTE applies the LTE predicate on the "receivables_amount" field.
func ReceivablesAmountLTE(v float64) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceivablesAmount), v))
	})
}

// ReceivablesCurrencyEQ applies the EQ predicate on the "receivables_currency" field.
func ReceivablesCurrencyEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyNEQ applies the NEQ predicate on the "receivables_currency" field.
func ReceivablesCurrencyNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyIn applies the In predicate on the "receivables_currency" field.
func ReceivablesCurrencyIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceivablesCurrency), v...))
	})
}

// ReceivablesCurrencyNotIn applies the NotIn predicate on the "receivables_currency" field.
func ReceivablesCurrencyNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceivablesCurrency), v...))
	})
}

// ReceivablesCurrencyGT applies the GT predicate on the "receivables_currency" field.
func ReceivablesCurrencyGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyGTE applies the GTE predicate on the "receivables_currency" field.
func ReceivablesCurrencyGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyLT applies the LT predicate on the "receivables_currency" field.
func ReceivablesCurrencyLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyLTE applies the LTE predicate on the "receivables_currency" field.
func ReceivablesCurrencyLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyContains applies the Contains predicate on the "receivables_currency" field.
func ReceivablesCurrencyContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyHasPrefix applies the HasPrefix predicate on the "receivables_currency" field.
func ReceivablesCurrencyHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyHasSuffix applies the HasSuffix predicate on the "receivables_currency" field.
func ReceivablesCurrencyHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyEqualFold applies the EqualFold predicate on the "receivables_currency" field.
func ReceivablesCurrencyEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceivablesCurrency), v))
	})
}

// ReceivablesCurrencyContainsFold applies the ContainsFold predicate on the "receivables_currency" field.
func ReceivablesCurrencyContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceivablesCurrency), v))
	})
}

// NotAcceptPlatformUpdateEQ applies the EQ predicate on the "not_accept_platform_update" field.
func NotAcceptPlatformUpdateEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAcceptPlatformUpdate), v))
	})
}

// NotAcceptPlatformUpdateNEQ applies the NEQ predicate on the "not_accept_platform_update" field.
func NotAcceptPlatformUpdateNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotAcceptPlatformUpdate), v))
	})
}

// NotAcceptPlatformUpdateItemEQ applies the EQ predicate on the "not_accept_platform_update_item" field.
func NotAcceptPlatformUpdateItemEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotAcceptPlatformUpdateItem), v))
	})
}

// NotAcceptPlatformUpdateItemNEQ applies the NEQ predicate on the "not_accept_platform_update_item" field.
func NotAcceptPlatformUpdateItemNEQ(v bool) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotAcceptPlatformUpdateItem), v))
	})
}

// JdPushedStatusEQ applies the EQ predicate on the "jd_pushed_status" field.
func JdPushedStatusEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusNEQ applies the NEQ predicate on the "jd_pushed_status" field.
func JdPushedStatusNEQ(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusIn applies the In predicate on the "jd_pushed_status" field.
func JdPushedStatusIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJdPushedStatus), v...))
	})
}

// JdPushedStatusNotIn applies the NotIn predicate on the "jd_pushed_status" field.
func JdPushedStatusNotIn(vs ...string) predicate.Order {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJdPushedStatus), v...))
	})
}

// JdPushedStatusGT applies the GT predicate on the "jd_pushed_status" field.
func JdPushedStatusGT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusGTE applies the GTE predicate on the "jd_pushed_status" field.
func JdPushedStatusGTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusLT applies the LT predicate on the "jd_pushed_status" field.
func JdPushedStatusLT(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusLTE applies the LTE predicate on the "jd_pushed_status" field.
func JdPushedStatusLTE(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusContains applies the Contains predicate on the "jd_pushed_status" field.
func JdPushedStatusContains(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusHasPrefix applies the HasPrefix predicate on the "jd_pushed_status" field.
func JdPushedStatusHasPrefix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusHasSuffix applies the HasSuffix predicate on the "jd_pushed_status" field.
func JdPushedStatusHasSuffix(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusEqualFold applies the EqualFold predicate on the "jd_pushed_status" field.
func JdPushedStatusEqualFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJdPushedStatus), v))
	})
}

// JdPushedStatusContainsFold applies the ContainsFold predicate on the "jd_pushed_status" field.
func JdPushedStatusContainsFold(v string) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJdPushedStatus), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderItem
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderItem
		step.Edge.Schema = schemaConfig.OrderItem
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHoldReasons applies the HasEdge predicate on the "order_hold_reasons" edge.
func HasOrderHoldReasons() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHoldReasonsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHoldReasonsTable, OrderHoldReasonsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderHoldReason
		step.Edge.Schema = schemaConfig.OrderHoldReason
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHoldReasonsWith applies the HasEdge predicate on the "order_hold_reasons" edge with a given conditions (other predicates).
func HasOrderHoldReasonsWith(preds ...predicate.OrderHoldReason) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHoldReasonsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHoldReasonsTable, OrderHoldReasonsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderHoldReason
		step.Edge.Schema = schemaConfig.OrderHoldReason
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderTaxations applies the HasEdge predicate on the "order_taxations" edge.
func HasOrderTaxations() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTaxationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTaxationsTable, OrderTaxationsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderTaxation
		step.Edge.Schema = schemaConfig.OrderTaxation
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderTaxationsWith applies the HasEdge predicate on the "order_taxations" edge with a given conditions (other predicates).
func HasOrderTaxationsWith(preds ...predicate.OrderTaxation) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTaxationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTaxationsTable, OrderTaxationsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrderTaxation
		step.Edge.Schema = schemaConfig.OrderTaxation
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStores applies the HasEdge predicate on the "stores" edge.
func HasStores() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoresTable, StoresColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoresWith applies the HasEdge predicate on the "stores" edge with a given conditions (other predicates).
func HasStoresWith(preds ...predicate.Store) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoresTable, StoresColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWarehouses applies the HasEdge predicate on the "warehouses" edge.
func HasWarehouses() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WarehousesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WarehousesTable, WarehousesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Warehouse
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWarehousesWith applies the HasEdge predicate on the "warehouses" edge with a given conditions (other predicates).
func HasWarehousesWith(preds ...predicate.Warehouse) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WarehousesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WarehousesTable, WarehousesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Warehouse
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannels applies the HasEdge predicate on the "channels" edge.
func HasChannels() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelsTable, ChannelsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelsWith applies the HasEdge predicate on the "channels" edge with a given conditions (other predicates).
func HasChannelsWith(preds ...predicate.Channel) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelsTable, ChannelsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrackMappings applies the HasEdge predicate on the "track_mappings" edge.
func HasTrackMappings() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrackMappingsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TrackMappingsTable, TrackMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TrackMapping
		step.Edge.Schema = schemaConfig.TrackMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrackMappingsWith applies the HasEdge predicate on the "track_mappings" edge with a given conditions (other predicates).
func HasTrackMappingsWith(preds ...predicate.TrackMapping) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrackMappingsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TrackMappingsTable, TrackMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.TrackMapping
		step.Edge.Schema = schemaConfig.TrackMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
