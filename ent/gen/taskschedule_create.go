// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/taskschedule"
)

// TaskScheduleCreate is the builder for creating a TaskSchedule entity.
type TaskScheduleCreate struct {
	config
	mutation *TaskScheduleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TaskScheduleCreate) SetCreatedAt(t time.Time) *TaskScheduleCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableCreatedAt(t *time.Time) *TaskScheduleCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TaskScheduleCreate) SetUpdatedAt(t time.Time) *TaskScheduleCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableUpdatedAt(t *time.Time) *TaskScheduleCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TaskScheduleCreate) SetDeletedAt(t time.Time) *TaskScheduleCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableDeletedAt(t *time.Time) *TaskScheduleCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetPlatform sets the "platform" field.
func (tsc *TaskScheduleCreate) SetPlatform(s string) *TaskScheduleCreate {
	tsc.mutation.SetPlatform(s)
	return tsc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillablePlatform(s *string) *TaskScheduleCreate {
	if s != nil {
		tsc.SetPlatform(*s)
	}
	return tsc
}

// SetStoreID sets the "store_id" field.
func (tsc *TaskScheduleCreate) SetStoreID(i int64) *TaskScheduleCreate {
	tsc.mutation.SetStoreID(i)
	return tsc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableStoreID(i *int64) *TaskScheduleCreate {
	if i != nil {
		tsc.SetStoreID(*i)
	}
	return tsc
}

// SetFuncName sets the "func_name" field.
func (tsc *TaskScheduleCreate) SetFuncName(s string) *TaskScheduleCreate {
	tsc.mutation.SetFuncName(s)
	return tsc
}

// SetDescription sets the "description" field.
func (tsc *TaskScheduleCreate) SetDescription(s string) *TaskScheduleCreate {
	tsc.mutation.SetDescription(s)
	return tsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableDescription(s *string) *TaskScheduleCreate {
	if s != nil {
		tsc.SetDescription(*s)
	}
	return tsc
}

// SetLocked sets the "locked" field.
func (tsc *TaskScheduleCreate) SetLocked(b bool) *TaskScheduleCreate {
	tsc.mutation.SetLocked(b)
	return tsc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableLocked(b *bool) *TaskScheduleCreate {
	if b != nil {
		tsc.SetLocked(*b)
	}
	return tsc
}

// SetLockedTimes sets the "locked_times" field.
func (tsc *TaskScheduleCreate) SetLockedTimes(i int64) *TaskScheduleCreate {
	tsc.mutation.SetLockedTimes(i)
	return tsc
}

// SetNillableLockedTimes sets the "locked_times" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableLockedTimes(i *int64) *TaskScheduleCreate {
	if i != nil {
		tsc.SetLockedTimes(*i)
	}
	return tsc
}

// SetRemark sets the "remark" field.
func (tsc *TaskScheduleCreate) SetRemark(s string) *TaskScheduleCreate {
	tsc.mutation.SetRemark(s)
	return tsc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableRemark(s *string) *TaskScheduleCreate {
	if s != nil {
		tsc.SetRemark(*s)
	}
	return tsc
}

// SetLastAccessAt sets the "last_access_at" field.
func (tsc *TaskScheduleCreate) SetLastAccessAt(t time.Time) *TaskScheduleCreate {
	tsc.mutation.SetLastAccessAt(t)
	return tsc
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableLastAccessAt(t *time.Time) *TaskScheduleCreate {
	if t != nil {
		tsc.SetLastAccessAt(*t)
	}
	return tsc
}

// SetStatus sets the "status" field.
func (tsc *TaskScheduleCreate) SetStatus(i int8) *TaskScheduleCreate {
	tsc.mutation.SetStatus(i)
	return tsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsc *TaskScheduleCreate) SetNillableStatus(i *int8) *TaskScheduleCreate {
	if i != nil {
		tsc.SetStatus(*i)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TaskScheduleCreate) SetID(i int64) *TaskScheduleCreate {
	tsc.mutation.SetID(i)
	return tsc
}

// Mutation returns the TaskScheduleMutation object of the builder.
func (tsc *TaskScheduleCreate) Mutation() *TaskScheduleMutation {
	return tsc.mutation
}

// Save creates the TaskSchedule in the database.
func (tsc *TaskScheduleCreate) Save(ctx context.Context) (*TaskSchedule, error) {
	var (
		err  error
		node *TaskSchedule
	)
	tsc.defaults()
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			if node, err = tsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			if tsc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TaskSchedule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TaskScheduleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TaskScheduleCreate) SaveX(ctx context.Context) *TaskSchedule {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TaskScheduleCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TaskScheduleCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TaskScheduleCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := taskschedule.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := taskschedule.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.Platform(); !ok {
		v := taskschedule.DefaultPlatform
		tsc.mutation.SetPlatform(v)
	}
	if _, ok := tsc.mutation.StoreID(); !ok {
		v := taskschedule.DefaultStoreID
		tsc.mutation.SetStoreID(v)
	}
	if _, ok := tsc.mutation.Description(); !ok {
		v := taskschedule.DefaultDescription
		tsc.mutation.SetDescription(v)
	}
	if _, ok := tsc.mutation.Locked(); !ok {
		v := taskschedule.DefaultLocked
		tsc.mutation.SetLocked(v)
	}
	if _, ok := tsc.mutation.LockedTimes(); !ok {
		v := taskschedule.DefaultLockedTimes
		tsc.mutation.SetLockedTimes(v)
	}
	if _, ok := tsc.mutation.Status(); !ok {
		v := taskschedule.DefaultStatus
		tsc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TaskScheduleCreate) check() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "TaskSchedule.created_at"`)}
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "TaskSchedule.updated_at"`)}
	}
	if _, ok := tsc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`gen: missing required field "TaskSchedule.platform"`)}
	}
	if _, ok := tsc.mutation.FuncName(); !ok {
		return &ValidationError{Name: "func_name", err: errors.New(`gen: missing required field "TaskSchedule.func_name"`)}
	}
	if _, ok := tsc.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`gen: missing required field "TaskSchedule.locked"`)}
	}
	if _, ok := tsc.mutation.LockedTimes(); !ok {
		return &ValidationError{Name: "locked_times", err: errors.New(`gen: missing required field "TaskSchedule.locked_times"`)}
	}
	if _, ok := tsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "TaskSchedule.status"`)}
	}
	return nil
}

func (tsc *TaskScheduleCreate) sqlSave(ctx context.Context) (*TaskSchedule, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tsc *TaskScheduleCreate) createSpec() (*TaskSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskSchedule{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskschedule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: taskschedule.FieldID,
			},
		}
	)
	_spec.Schema = tsc.schemaConfig.TaskSchedule
	_spec.OnConflict = tsc.conflict
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(taskschedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskschedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.SetField(taskschedule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tsc.mutation.Platform(); ok {
		_spec.SetField(taskschedule.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := tsc.mutation.StoreID(); ok {
		_spec.SetField(taskschedule.FieldStoreID, field.TypeInt64, value)
		_node.StoreID = value
	}
	if value, ok := tsc.mutation.FuncName(); ok {
		_spec.SetField(taskschedule.FieldFuncName, field.TypeString, value)
		_node.FuncName = value
	}
	if value, ok := tsc.mutation.Description(); ok {
		_spec.SetField(taskschedule.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tsc.mutation.Locked(); ok {
		_spec.SetField(taskschedule.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := tsc.mutation.LockedTimes(); ok {
		_spec.SetField(taskschedule.FieldLockedTimes, field.TypeInt64, value)
		_node.LockedTimes = value
	}
	if value, ok := tsc.mutation.Remark(); ok {
		_spec.SetField(taskschedule.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := tsc.mutation.LastAccessAt(); ok {
		_spec.SetField(taskschedule.FieldLastAccessAt, field.TypeTime, value)
		_node.LastAccessAt = value
	}
	if value, ok := tsc.mutation.Status(); ok {
		_spec.SetField(taskschedule.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskSchedule.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskScheduleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tsc *TaskScheduleCreate) OnConflict(opts ...sql.ConflictOption) *TaskScheduleUpsertOne {
	tsc.conflict = opts
	return &TaskScheduleUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TaskScheduleCreate) OnConflictColumns(columns ...string) *TaskScheduleUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TaskScheduleUpsertOne{
		create: tsc,
	}
}

type (
	// TaskScheduleUpsertOne is the builder for "upsert"-ing
	//  one TaskSchedule node.
	TaskScheduleUpsertOne struct {
		create *TaskScheduleCreate
	}

	// TaskScheduleUpsert is the "OnConflict" setter.
	TaskScheduleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskScheduleUpsert) SetUpdatedAt(v time.Time) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateUpdatedAt() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskScheduleUpsert) SetDeletedAt(v time.Time) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateDeletedAt() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskScheduleUpsert) ClearDeletedAt() *TaskScheduleUpsert {
	u.SetNull(taskschedule.FieldDeletedAt)
	return u
}

// SetPlatform sets the "platform" field.
func (u *TaskScheduleUpsert) SetPlatform(v string) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdatePlatform() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldPlatform)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *TaskScheduleUpsert) SetStoreID(v int64) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateStoreID() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldStoreID)
	return u
}

// AddStoreID adds v to the "store_id" field.
func (u *TaskScheduleUpsert) AddStoreID(v int64) *TaskScheduleUpsert {
	u.Add(taskschedule.FieldStoreID, v)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *TaskScheduleUpsert) ClearStoreID() *TaskScheduleUpsert {
	u.SetNull(taskschedule.FieldStoreID)
	return u
}

// SetFuncName sets the "func_name" field.
func (u *TaskScheduleUpsert) SetFuncName(v string) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldFuncName, v)
	return u
}

// UpdateFuncName sets the "func_name" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateFuncName() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldFuncName)
	return u
}

// SetDescription sets the "description" field.
func (u *TaskScheduleUpsert) SetDescription(v string) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateDescription() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TaskScheduleUpsert) ClearDescription() *TaskScheduleUpsert {
	u.SetNull(taskschedule.FieldDescription)
	return u
}

// SetLocked sets the "locked" field.
func (u *TaskScheduleUpsert) SetLocked(v bool) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateLocked() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldLocked)
	return u
}

// SetLockedTimes sets the "locked_times" field.
func (u *TaskScheduleUpsert) SetLockedTimes(v int64) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldLockedTimes, v)
	return u
}

// UpdateLockedTimes sets the "locked_times" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateLockedTimes() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldLockedTimes)
	return u
}

// AddLockedTimes adds v to the "locked_times" field.
func (u *TaskScheduleUpsert) AddLockedTimes(v int64) *TaskScheduleUpsert {
	u.Add(taskschedule.FieldLockedTimes, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *TaskScheduleUpsert) SetRemark(v string) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateRemark() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskScheduleUpsert) ClearRemark() *TaskScheduleUpsert {
	u.SetNull(taskschedule.FieldRemark)
	return u
}

// SetLastAccessAt sets the "last_access_at" field.
func (u *TaskScheduleUpsert) SetLastAccessAt(v time.Time) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldLastAccessAt, v)
	return u
}

// UpdateLastAccessAt sets the "last_access_at" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateLastAccessAt() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldLastAccessAt)
	return u
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (u *TaskScheduleUpsert) ClearLastAccessAt() *TaskScheduleUpsert {
	u.SetNull(taskschedule.FieldLastAccessAt)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskScheduleUpsert) SetStatus(v int8) *TaskScheduleUpsert {
	u.Set(taskschedule.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskScheduleUpsert) UpdateStatus() *TaskScheduleUpsert {
	u.SetExcluded(taskschedule.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TaskScheduleUpsert) AddStatus(v int8) *TaskScheduleUpsert {
	u.Add(taskschedule.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskScheduleUpsertOne) UpdateNewValues() *TaskScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskschedule.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(taskschedule.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskScheduleUpsertOne) Ignore() *TaskScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskScheduleUpsertOne) DoNothing() *TaskScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskScheduleCreate.OnConflict
// documentation for more info.
func (u *TaskScheduleUpsertOne) Update(set func(*TaskScheduleUpsert)) *TaskScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskScheduleUpsertOne) SetUpdatedAt(v time.Time) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateUpdatedAt() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskScheduleUpsertOne) SetDeletedAt(v time.Time) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateDeletedAt() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskScheduleUpsertOne) ClearDeletedAt() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPlatform sets the "platform" field.
func (u *TaskScheduleUpsertOne) SetPlatform(v string) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdatePlatform() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdatePlatform()
	})
}

// SetStoreID sets the "store_id" field.
func (u *TaskScheduleUpsertOne) SetStoreID(v int64) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetStoreID(v)
	})
}

// AddStoreID adds v to the "store_id" field.
func (u *TaskScheduleUpsertOne) AddStoreID(v int64) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateStoreID() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *TaskScheduleUpsertOne) ClearStoreID() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearStoreID()
	})
}

// SetFuncName sets the "func_name" field.
func (u *TaskScheduleUpsertOne) SetFuncName(v string) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetFuncName(v)
	})
}

// UpdateFuncName sets the "func_name" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateFuncName() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateFuncName()
	})
}

// SetDescription sets the "description" field.
func (u *TaskScheduleUpsertOne) SetDescription(v string) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateDescription() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TaskScheduleUpsertOne) ClearDescription() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearDescription()
	})
}

// SetLocked sets the "locked" field.
func (u *TaskScheduleUpsertOne) SetLocked(v bool) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateLocked() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLocked()
	})
}

// SetLockedTimes sets the "locked_times" field.
func (u *TaskScheduleUpsertOne) SetLockedTimes(v int64) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLockedTimes(v)
	})
}

// AddLockedTimes adds v to the "locked_times" field.
func (u *TaskScheduleUpsertOne) AddLockedTimes(v int64) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddLockedTimes(v)
	})
}

// UpdateLockedTimes sets the "locked_times" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateLockedTimes() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLockedTimes()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskScheduleUpsertOne) SetRemark(v string) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateRemark() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskScheduleUpsertOne) ClearRemark() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearRemark()
	})
}

// SetLastAccessAt sets the "last_access_at" field.
func (u *TaskScheduleUpsertOne) SetLastAccessAt(v time.Time) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLastAccessAt(v)
	})
}

// UpdateLastAccessAt sets the "last_access_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateLastAccessAt() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLastAccessAt()
	})
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (u *TaskScheduleUpsertOne) ClearLastAccessAt() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearLastAccessAt()
	})
}

// SetStatus sets the "status" field.
func (u *TaskScheduleUpsertOne) SetStatus(v int8) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TaskScheduleUpsertOne) AddStatus(v int8) *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskScheduleUpsertOne) UpdateStatus() *TaskScheduleUpsertOne {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TaskScheduleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TaskScheduleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskScheduleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskScheduleUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskScheduleUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskScheduleCreateBulk is the builder for creating many TaskSchedule entities in bulk.
type TaskScheduleCreateBulk struct {
	config
	builders []*TaskScheduleCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskSchedule entities in the database.
func (tscb *TaskScheduleCreateBulk) Save(ctx context.Context) ([]*TaskSchedule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TaskSchedule, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TaskScheduleCreateBulk) SaveX(ctx context.Context) []*TaskSchedule {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TaskScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TaskScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskSchedule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskScheduleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tscb *TaskScheduleCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskScheduleUpsertBulk {
	tscb.conflict = opts
	return &TaskScheduleUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TaskScheduleCreateBulk) OnConflictColumns(columns ...string) *TaskScheduleUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TaskScheduleUpsertBulk{
		create: tscb,
	}
}

// TaskScheduleUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskSchedule nodes.
type TaskScheduleUpsertBulk struct {
	create *TaskScheduleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskScheduleUpsertBulk) UpdateNewValues() *TaskScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskschedule.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(taskschedule.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskSchedule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskScheduleUpsertBulk) Ignore() *TaskScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskScheduleUpsertBulk) DoNothing() *TaskScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskScheduleCreateBulk.OnConflict
// documentation for more info.
func (u *TaskScheduleUpsertBulk) Update(set func(*TaskScheduleUpsert)) *TaskScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskScheduleUpsertBulk) SetUpdatedAt(v time.Time) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateUpdatedAt() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TaskScheduleUpsertBulk) SetDeletedAt(v time.Time) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateDeletedAt() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TaskScheduleUpsertBulk) ClearDeletedAt() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPlatform sets the "platform" field.
func (u *TaskScheduleUpsertBulk) SetPlatform(v string) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdatePlatform() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdatePlatform()
	})
}

// SetStoreID sets the "store_id" field.
func (u *TaskScheduleUpsertBulk) SetStoreID(v int64) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetStoreID(v)
	})
}

// AddStoreID adds v to the "store_id" field.
func (u *TaskScheduleUpsertBulk) AddStoreID(v int64) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateStoreID() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *TaskScheduleUpsertBulk) ClearStoreID() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearStoreID()
	})
}

// SetFuncName sets the "func_name" field.
func (u *TaskScheduleUpsertBulk) SetFuncName(v string) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetFuncName(v)
	})
}

// UpdateFuncName sets the "func_name" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateFuncName() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateFuncName()
	})
}

// SetDescription sets the "description" field.
func (u *TaskScheduleUpsertBulk) SetDescription(v string) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateDescription() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TaskScheduleUpsertBulk) ClearDescription() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearDescription()
	})
}

// SetLocked sets the "locked" field.
func (u *TaskScheduleUpsertBulk) SetLocked(v bool) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateLocked() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLocked()
	})
}

// SetLockedTimes sets the "locked_times" field.
func (u *TaskScheduleUpsertBulk) SetLockedTimes(v int64) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLockedTimes(v)
	})
}

// AddLockedTimes adds v to the "locked_times" field.
func (u *TaskScheduleUpsertBulk) AddLockedTimes(v int64) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddLockedTimes(v)
	})
}

// UpdateLockedTimes sets the "locked_times" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateLockedTimes() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLockedTimes()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskScheduleUpsertBulk) SetRemark(v string) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateRemark() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskScheduleUpsertBulk) ClearRemark() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearRemark()
	})
}

// SetLastAccessAt sets the "last_access_at" field.
func (u *TaskScheduleUpsertBulk) SetLastAccessAt(v time.Time) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetLastAccessAt(v)
	})
}

// UpdateLastAccessAt sets the "last_access_at" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateLastAccessAt() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateLastAccessAt()
	})
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (u *TaskScheduleUpsertBulk) ClearLastAccessAt() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.ClearLastAccessAt()
	})
}

// SetStatus sets the "status" field.
func (u *TaskScheduleUpsertBulk) SetStatus(v int8) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TaskScheduleUpsertBulk) AddStatus(v int8) *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskScheduleUpsertBulk) UpdateStatus() *TaskScheduleUpsertBulk {
	return u.Update(func(s *TaskScheduleUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TaskScheduleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the TaskScheduleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TaskScheduleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskScheduleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
