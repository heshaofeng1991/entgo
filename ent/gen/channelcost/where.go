// Code generated by ent, DO NOT EDIT.

package channelcost

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ChannelCostBatchID applies equality check predicate on the "channel_cost_batch_id" field. It's identical to ChannelCostBatchIDEQ.
func ChannelCostBatchID(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// Zone applies equality check predicate on the "zone" field. It's identical to ZoneEQ.
func Zone(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// StartWeight applies equality check predicate on the "start_weight" field. It's identical to StartWeightEQ.
func StartWeight(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartWeight), v))
	})
}

// EndWeight applies equality check predicate on the "end_weight" field. It's identical to EndWeightEQ.
func EndWeight(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndWeight), v))
	})
}

// FirstWeight applies equality check predicate on the "first_weight" field. It's identical to FirstWeightEQ.
func FirstWeight(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightFee applies equality check predicate on the "first_weight_fee" field. It's identical to FirstWeightFeeEQ.
func FirstWeightFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstWeightFee), v))
	})
}

// UnitWeight applies equality check predicate on the "unit_weight" field. It's identical to UnitWeightEQ.
func UnitWeight(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightFee applies equality check predicate on the "unit_weight_fee" field. It's identical to UnitWeightFeeEQ.
func UnitWeightFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitWeightFee), v))
	})
}

// FuelFee applies equality check predicate on the "fuel_fee" field. It's identical to FuelFeeEQ.
func FuelFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// ProcessingFee applies equality check predicate on the "processing_fee" field. It's identical to ProcessingFeeEQ.
func ProcessingFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// RegistrationFee applies equality check predicate on the "registration_fee" field. It's identical to RegistrationFeeEQ.
func RegistrationFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// MiscFee applies equality check predicate on the "misc_fee" field. It's identical to MiscFeeEQ.
func MiscFee(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// MinNormalDays applies equality check predicate on the "min_normal_days" field. It's identical to MinNormalDaysEQ.
func MinNormalDays(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinNormalDays), v))
	})
}

// MaxNormalDays applies equality check predicate on the "max_normal_days" field. It's identical to MaxNormalDaysEQ.
func MaxNormalDays(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxNormalDays), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// AverageDays applies equality check predicate on the "average_days" field. It's identical to AverageDaysEQ.
func AverageDays(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageDays), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ChannelCostBatchIDEQ applies the EQ predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDEQ(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelCostBatchIDNEQ applies the NEQ predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDNEQ(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelCostBatchIDIn applies the In predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDIn(vs ...int64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelCostBatchID), v...))
	})
}

// ChannelCostBatchIDNotIn applies the NotIn predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDNotIn(vs ...int64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelCostBatchID), v...))
	})
}

// ChannelCostBatchIDGT applies the GT predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDGT(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelCostBatchIDGTE applies the GTE predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDGTE(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelCostBatchIDLT applies the LT predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDLT(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelCostBatchIDLTE applies the LTE predicate on the "channel_cost_batch_id" field.
func ChannelCostBatchIDLTE(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelCostBatchID), v))
	})
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelID), v))
	})
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelID), v...))
	})
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelID), v...))
	})
}

// ChannelIDIsNil applies the IsNil predicate on the "channel_id" field.
func ChannelIDIsNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannelID)))
	})
}

// ChannelIDNotNil applies the NotNil predicate on the "channel_id" field.
func ChannelIDNotNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannelID)))
	})
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMode), v))
	})
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...int8) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMode), v...))
	})
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...int8) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMode), v...))
	})
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMode), v))
	})
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMode), v))
	})
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMode), v))
	})
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMode), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryCode), v))
	})
}

// ZoneEQ applies the EQ predicate on the "zone" field.
func ZoneEQ(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// ZoneNEQ applies the NEQ predicate on the "zone" field.
func ZoneNEQ(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZone), v))
	})
}

// ZoneIn applies the In predicate on the "zone" field.
func ZoneIn(vs ...string) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZone), v...))
	})
}

// ZoneNotIn applies the NotIn predicate on the "zone" field.
func ZoneNotIn(vs ...string) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZone), v...))
	})
}

// ZoneGT applies the GT predicate on the "zone" field.
func ZoneGT(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZone), v))
	})
}

// ZoneGTE applies the GTE predicate on the "zone" field.
func ZoneGTE(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZone), v))
	})
}

// ZoneLT applies the LT predicate on the "zone" field.
func ZoneLT(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZone), v))
	})
}

// ZoneLTE applies the LTE predicate on the "zone" field.
func ZoneLTE(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZone), v))
	})
}

// ZoneContains applies the Contains predicate on the "zone" field.
func ZoneContains(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZone), v))
	})
}

// ZoneHasPrefix applies the HasPrefix predicate on the "zone" field.
func ZoneHasPrefix(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZone), v))
	})
}

// ZoneHasSuffix applies the HasSuffix predicate on the "zone" field.
func ZoneHasSuffix(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZone), v))
	})
}

// ZoneEqualFold applies the EqualFold predicate on the "zone" field.
func ZoneEqualFold(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZone), v))
	})
}

// ZoneContainsFold applies the ContainsFold predicate on the "zone" field.
func ZoneContainsFold(v string) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZone), v))
	})
}

// StartWeightEQ applies the EQ predicate on the "start_weight" field.
func StartWeightEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartWeight), v))
	})
}

// StartWeightNEQ applies the NEQ predicate on the "start_weight" field.
func StartWeightNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartWeight), v))
	})
}

// StartWeightIn applies the In predicate on the "start_weight" field.
func StartWeightIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartWeight), v...))
	})
}

// StartWeightNotIn applies the NotIn predicate on the "start_weight" field.
func StartWeightNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartWeight), v...))
	})
}

// StartWeightGT applies the GT predicate on the "start_weight" field.
func StartWeightGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartWeight), v))
	})
}

// StartWeightGTE applies the GTE predicate on the "start_weight" field.
func StartWeightGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartWeight), v))
	})
}

// StartWeightLT applies the LT predicate on the "start_weight" field.
func StartWeightLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartWeight), v))
	})
}

// StartWeightLTE applies the LTE predicate on the "start_weight" field.
func StartWeightLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartWeight), v))
	})
}

// EndWeightEQ applies the EQ predicate on the "end_weight" field.
func EndWeightEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndWeight), v))
	})
}

// EndWeightNEQ applies the NEQ predicate on the "end_weight" field.
func EndWeightNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndWeight), v))
	})
}

// EndWeightIn applies the In predicate on the "end_weight" field.
func EndWeightIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndWeight), v...))
	})
}

// EndWeightNotIn applies the NotIn predicate on the "end_weight" field.
func EndWeightNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndWeight), v...))
	})
}

// EndWeightGT applies the GT predicate on the "end_weight" field.
func EndWeightGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndWeight), v))
	})
}

// EndWeightGTE applies the GTE predicate on the "end_weight" field.
func EndWeightGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndWeight), v))
	})
}

// EndWeightLT applies the LT predicate on the "end_weight" field.
func EndWeightLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndWeight), v))
	})
}

// EndWeightLTE applies the LTE predicate on the "end_weight" field.
func EndWeightLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndWeight), v))
	})
}

// FirstWeightEQ applies the EQ predicate on the "first_weight" field.
func FirstWeightEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightNEQ applies the NEQ predicate on the "first_weight" field.
func FirstWeightNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightIn applies the In predicate on the "first_weight" field.
func FirstWeightIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstWeight), v...))
	})
}

// FirstWeightNotIn applies the NotIn predicate on the "first_weight" field.
func FirstWeightNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstWeight), v...))
	})
}

// FirstWeightGT applies the GT predicate on the "first_weight" field.
func FirstWeightGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightGTE applies the GTE predicate on the "first_weight" field.
func FirstWeightGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightLT applies the LT predicate on the "first_weight" field.
func FirstWeightLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightLTE applies the LTE predicate on the "first_weight" field.
func FirstWeightLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstWeight), v))
	})
}

// FirstWeightFeeEQ applies the EQ predicate on the "first_weight_fee" field.
func FirstWeightFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstWeightFee), v))
	})
}

// FirstWeightFeeNEQ applies the NEQ predicate on the "first_weight_fee" field.
func FirstWeightFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstWeightFee), v))
	})
}

// FirstWeightFeeIn applies the In predicate on the "first_weight_fee" field.
func FirstWeightFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstWeightFee), v...))
	})
}

// FirstWeightFeeNotIn applies the NotIn predicate on the "first_weight_fee" field.
func FirstWeightFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstWeightFee), v...))
	})
}

// FirstWeightFeeGT applies the GT predicate on the "first_weight_fee" field.
func FirstWeightFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstWeightFee), v))
	})
}

// FirstWeightFeeGTE applies the GTE predicate on the "first_weight_fee" field.
func FirstWeightFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstWeightFee), v))
	})
}

// FirstWeightFeeLT applies the LT predicate on the "first_weight_fee" field.
func FirstWeightFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstWeightFee), v))
	})
}

// FirstWeightFeeLTE applies the LTE predicate on the "first_weight_fee" field.
func FirstWeightFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstWeightFee), v))
	})
}

// UnitWeightEQ applies the EQ predicate on the "unit_weight" field.
func UnitWeightEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightNEQ applies the NEQ predicate on the "unit_weight" field.
func UnitWeightNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightIn applies the In predicate on the "unit_weight" field.
func UnitWeightIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitWeight), v...))
	})
}

// UnitWeightNotIn applies the NotIn predicate on the "unit_weight" field.
func UnitWeightNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitWeight), v...))
	})
}

// UnitWeightGT applies the GT predicate on the "unit_weight" field.
func UnitWeightGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightGTE applies the GTE predicate on the "unit_weight" field.
func UnitWeightGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightLT applies the LT predicate on the "unit_weight" field.
func UnitWeightLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightLTE applies the LTE predicate on the "unit_weight" field.
func UnitWeightLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitWeight), v))
	})
}

// UnitWeightFeeEQ applies the EQ predicate on the "unit_weight_fee" field.
func UnitWeightFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeNEQ applies the NEQ predicate on the "unit_weight_fee" field.
func UnitWeightFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeIn applies the In predicate on the "unit_weight_fee" field.
func UnitWeightFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitWeightFee), v...))
	})
}

// UnitWeightFeeNotIn applies the NotIn predicate on the "unit_weight_fee" field.
func UnitWeightFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitWeightFee), v...))
	})
}

// UnitWeightFeeGT applies the GT predicate on the "unit_weight_fee" field.
func UnitWeightFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeGTE applies the GTE predicate on the "unit_weight_fee" field.
func UnitWeightFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeLT applies the LT predicate on the "unit_weight_fee" field.
func UnitWeightFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeLTE applies the LTE predicate on the "unit_weight_fee" field.
func UnitWeightFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitWeightFee), v))
	})
}

// UnitWeightFeeIsNil applies the IsNil predicate on the "unit_weight_fee" field.
func UnitWeightFeeIsNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitWeightFee)))
	})
}

// UnitWeightFeeNotNil applies the NotNil predicate on the "unit_weight_fee" field.
func UnitWeightFeeNotNil() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitWeightFee)))
	})
}

// FuelFeeEQ applies the EQ predicate on the "fuel_fee" field.
func FuelFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeNEQ applies the NEQ predicate on the "fuel_fee" field.
func FuelFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeIn applies the In predicate on the "fuel_fee" field.
func FuelFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeNotIn applies the NotIn predicate on the "fuel_fee" field.
func FuelFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeGT applies the GT predicate on the "fuel_fee" field.
func FuelFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeGTE applies the GTE predicate on the "fuel_fee" field.
func FuelFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLT applies the LT predicate on the "fuel_fee" field.
func FuelFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLTE applies the LTE predicate on the "fuel_fee" field.
func FuelFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFuelFee), v))
	})
}

// ProcessingFeeEQ applies the EQ predicate on the "processing_fee" field.
func ProcessingFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeNEQ applies the NEQ predicate on the "processing_fee" field.
func ProcessingFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeIn applies the In predicate on the "processing_fee" field.
func ProcessingFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeNotIn applies the NotIn predicate on the "processing_fee" field.
func ProcessingFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeGT applies the GT predicate on the "processing_fee" field.
func ProcessingFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeGTE applies the GTE predicate on the "processing_fee" field.
func ProcessingFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLT applies the LT predicate on the "processing_fee" field.
func ProcessingFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLTE applies the LTE predicate on the "processing_fee" field.
func ProcessingFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessingFee), v))
	})
}

// RegistrationFeeEQ applies the EQ predicate on the "registration_fee" field.
func RegistrationFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeNEQ applies the NEQ predicate on the "registration_fee" field.
func RegistrationFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeIn applies the In predicate on the "registration_fee" field.
func RegistrationFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeNotIn applies the NotIn predicate on the "registration_fee" field.
func RegistrationFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeGT applies the GT predicate on the "registration_fee" field.
func RegistrationFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeGTE applies the GTE predicate on the "registration_fee" field.
func RegistrationFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLT applies the LT predicate on the "registration_fee" field.
func RegistrationFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLTE applies the LTE predicate on the "registration_fee" field.
func RegistrationFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationFee), v))
	})
}

// MiscFeeEQ applies the EQ predicate on the "misc_fee" field.
func MiscFeeEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeNEQ applies the NEQ predicate on the "misc_fee" field.
func MiscFeeNEQ(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeIn applies the In predicate on the "misc_fee" field.
func MiscFeeIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeNotIn applies the NotIn predicate on the "misc_fee" field.
func MiscFeeNotIn(vs ...float64) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeGT applies the GT predicate on the "misc_fee" field.
func MiscFeeGT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeGTE applies the GTE predicate on the "misc_fee" field.
func MiscFeeGTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLT applies the LT predicate on the "misc_fee" field.
func MiscFeeLT(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLTE applies the LTE predicate on the "misc_fee" field.
func MiscFeeLTE(v float64) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiscFee), v))
	})
}

// MinNormalDaysEQ applies the EQ predicate on the "min_normal_days" field.
func MinNormalDaysEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysNEQ applies the NEQ predicate on the "min_normal_days" field.
func MinNormalDaysNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysIn applies the In predicate on the "min_normal_days" field.
func MinNormalDaysIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinNormalDays), v...))
	})
}

// MinNormalDaysNotIn applies the NotIn predicate on the "min_normal_days" field.
func MinNormalDaysNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinNormalDays), v...))
	})
}

// MinNormalDaysGT applies the GT predicate on the "min_normal_days" field.
func MinNormalDaysGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysGTE applies the GTE predicate on the "min_normal_days" field.
func MinNormalDaysGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysLT applies the LT predicate on the "min_normal_days" field.
func MinNormalDaysLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysLTE applies the LTE predicate on the "min_normal_days" field.
func MinNormalDaysLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinNormalDays), v))
	})
}

// MaxNormalDaysEQ applies the EQ predicate on the "max_normal_days" field.
func MaxNormalDaysEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysNEQ applies the NEQ predicate on the "max_normal_days" field.
func MaxNormalDaysNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysIn applies the In predicate on the "max_normal_days" field.
func MaxNormalDaysIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxNormalDays), v...))
	})
}

// MaxNormalDaysNotIn applies the NotIn predicate on the "max_normal_days" field.
func MaxNormalDaysNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxNormalDays), v...))
	})
}

// MaxNormalDaysGT applies the GT predicate on the "max_normal_days" field.
func MaxNormalDaysGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysGTE applies the GTE predicate on the "max_normal_days" field.
func MaxNormalDaysGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysLT applies the LT predicate on the "max_normal_days" field.
func MaxNormalDaysLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysLTE applies the LTE predicate on the "max_normal_days" field.
func MaxNormalDaysLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxNormalDays), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// AverageDaysEQ applies the EQ predicate on the "average_days" field.
func AverageDaysEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAverageDays), v))
	})
}

// AverageDaysNEQ applies the NEQ predicate on the "average_days" field.
func AverageDaysNEQ(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAverageDays), v))
	})
}

// AverageDaysIn applies the In predicate on the "average_days" field.
func AverageDaysIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAverageDays), v...))
	})
}

// AverageDaysNotIn applies the NotIn predicate on the "average_days" field.
func AverageDaysNotIn(vs ...int) predicate.ChannelCost {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAverageDays), v...))
	})
}

// AverageDaysGT applies the GT predicate on the "average_days" field.
func AverageDaysGT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAverageDays), v))
	})
}

// AverageDaysGTE applies the GTE predicate on the "average_days" field.
func AverageDaysGTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAverageDays), v))
	})
}

// AverageDaysLT applies the LT predicate on the "average_days" field.
func AverageDaysLT(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAverageDays), v))
	})
}

// AverageDaysLTE applies the LTE predicate on the "average_days" field.
func AverageDaysLTE(v int) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAverageDays), v))
	})
}

// HasChannels applies the HasEdge predicate on the "channels" edge.
func HasChannels() predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelsTable, ChannelsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.ChannelCost
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelsWith applies the HasEdge predicate on the "channels" edge with a given conditions (other predicates).
func HasChannelsWith(preds ...predicate.Channel) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelsTable, ChannelsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.ChannelCost
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChannelCost) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChannelCost) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChannelCost) predicate.ChannelCost {
	return predicate.ChannelCost(func(s *sql.Selector) {
		p(s.Not())
	})
}
