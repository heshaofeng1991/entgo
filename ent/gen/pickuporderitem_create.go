// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporderitem"
)

// PickupOrderItemCreate is the builder for creating a PickupOrderItem entity.
type PickupOrderItemCreate struct {
	config
	mutation *PickupOrderItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (poic *PickupOrderItemCreate) SetCreatedAt(t time.Time) *PickupOrderItemCreate {
	poic.mutation.SetCreatedAt(t)
	return poic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poic *PickupOrderItemCreate) SetNillableCreatedAt(t *time.Time) *PickupOrderItemCreate {
	if t != nil {
		poic.SetCreatedAt(*t)
	}
	return poic
}

// SetUpdatedAt sets the "updated_at" field.
func (poic *PickupOrderItemCreate) SetUpdatedAt(t time.Time) *PickupOrderItemCreate {
	poic.mutation.SetUpdatedAt(t)
	return poic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poic *PickupOrderItemCreate) SetNillableUpdatedAt(t *time.Time) *PickupOrderItemCreate {
	if t != nil {
		poic.SetUpdatedAt(*t)
	}
	return poic
}

// SetDeletedAt sets the "deleted_at" field.
func (poic *PickupOrderItemCreate) SetDeletedAt(t time.Time) *PickupOrderItemCreate {
	poic.mutation.SetDeletedAt(t)
	return poic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (poic *PickupOrderItemCreate) SetNillableDeletedAt(t *time.Time) *PickupOrderItemCreate {
	if t != nil {
		poic.SetDeletedAt(*t)
	}
	return poic
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (poic *PickupOrderItemCreate) SetPickupOrderID(i int64) *PickupOrderItemCreate {
	poic.mutation.SetPickupOrderID(i)
	return poic
}

// SetProductID sets the "product_id" field.
func (poic *PickupOrderItemCreate) SetProductID(i int64) *PickupOrderItemCreate {
	poic.mutation.SetProductID(i)
	return poic
}

// SetProductName sets the "product_name" field.
func (poic *PickupOrderItemCreate) SetProductName(s string) *PickupOrderItemCreate {
	poic.mutation.SetProductName(s)
	return poic
}

// SetSku sets the "sku" field.
func (poic *PickupOrderItemCreate) SetSku(s string) *PickupOrderItemCreate {
	poic.mutation.SetSku(s)
	return poic
}

// SetBarcode sets the "barcode" field.
func (poic *PickupOrderItemCreate) SetBarcode(s string) *PickupOrderItemCreate {
	poic.mutation.SetBarcode(s)
	return poic
}

// SetQty sets the "qty" field.
func (poic *PickupOrderItemCreate) SetQty(i int32) *PickupOrderItemCreate {
	poic.mutation.SetQty(i)
	return poic
}

// SetCustomerCode sets the "customer_code" field.
func (poic *PickupOrderItemCreate) SetCustomerCode(s string) *PickupOrderItemCreate {
	poic.mutation.SetCustomerCode(s)
	return poic
}

// SetID sets the "id" field.
func (poic *PickupOrderItemCreate) SetID(i int64) *PickupOrderItemCreate {
	poic.mutation.SetID(i)
	return poic
}

// Mutation returns the PickupOrderItemMutation object of the builder.
func (poic *PickupOrderItemCreate) Mutation() *PickupOrderItemMutation {
	return poic.mutation
}

// Save creates the PickupOrderItem in the database.
func (poic *PickupOrderItemCreate) Save(ctx context.Context) (*PickupOrderItem, error) {
	var (
		err  error
		node *PickupOrderItem
	)
	poic.defaults()
	if len(poic.hooks) == 0 {
		if err = poic.check(); err != nil {
			return nil, err
		}
		node, err = poic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = poic.check(); err != nil {
				return nil, err
			}
			poic.mutation = mutation
			if node, err = poic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(poic.hooks) - 1; i >= 0; i-- {
			if poic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = poic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, poic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PickupOrderItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PickupOrderItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (poic *PickupOrderItemCreate) SaveX(ctx context.Context) *PickupOrderItem {
	v, err := poic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poic *PickupOrderItemCreate) Exec(ctx context.Context) error {
	_, err := poic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poic *PickupOrderItemCreate) ExecX(ctx context.Context) {
	if err := poic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poic *PickupOrderItemCreate) defaults() {
	if _, ok := poic.mutation.CreatedAt(); !ok {
		v := pickuporderitem.DefaultCreatedAt()
		poic.mutation.SetCreatedAt(v)
	}
	if _, ok := poic.mutation.UpdatedAt(); !ok {
		v := pickuporderitem.DefaultUpdatedAt()
		poic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poic *PickupOrderItemCreate) check() error {
	if _, ok := poic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "PickupOrderItem.created_at"`)}
	}
	if _, ok := poic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "PickupOrderItem.updated_at"`)}
	}
	if _, ok := poic.mutation.PickupOrderID(); !ok {
		return &ValidationError{Name: "pickup_order_id", err: errors.New(`gen: missing required field "PickupOrderItem.pickup_order_id"`)}
	}
	if _, ok := poic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`gen: missing required field "PickupOrderItem.product_id"`)}
	}
	if _, ok := poic.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`gen: missing required field "PickupOrderItem.product_name"`)}
	}
	if _, ok := poic.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`gen: missing required field "PickupOrderItem.sku"`)}
	}
	if _, ok := poic.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`gen: missing required field "PickupOrderItem.barcode"`)}
	}
	if _, ok := poic.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`gen: missing required field "PickupOrderItem.qty"`)}
	}
	if _, ok := poic.mutation.CustomerCode(); !ok {
		return &ValidationError{Name: "customer_code", err: errors.New(`gen: missing required field "PickupOrderItem.customer_code"`)}
	}
	return nil
}

func (poic *PickupOrderItemCreate) sqlSave(ctx context.Context) (*PickupOrderItem, error) {
	_node, _spec := poic.createSpec()
	if err := sqlgraph.CreateNode(ctx, poic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (poic *PickupOrderItemCreate) createSpec() (*PickupOrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &PickupOrderItem{config: poic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pickuporderitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporderitem.FieldID,
			},
		}
	)
	_spec.Schema = poic.schemaConfig.PickupOrderItem
	_spec.OnConflict = poic.conflict
	if id, ok := poic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := poic.mutation.CreatedAt(); ok {
		_spec.SetField(pickuporderitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := poic.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporderitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := poic.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporderitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := poic.mutation.PickupOrderID(); ok {
		_spec.SetField(pickuporderitem.FieldPickupOrderID, field.TypeInt64, value)
		_node.PickupOrderID = value
	}
	if value, ok := poic.mutation.ProductID(); ok {
		_spec.SetField(pickuporderitem.FieldProductID, field.TypeInt64, value)
		_node.ProductID = value
	}
	if value, ok := poic.mutation.ProductName(); ok {
		_spec.SetField(pickuporderitem.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := poic.mutation.Sku(); ok {
		_spec.SetField(pickuporderitem.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := poic.mutation.Barcode(); ok {
		_spec.SetField(pickuporderitem.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := poic.mutation.Qty(); ok {
		_spec.SetField(pickuporderitem.FieldQty, field.TypeInt32, value)
		_node.Qty = value
	}
	if value, ok := poic.mutation.CustomerCode(); ok {
		_spec.SetField(pickuporderitem.FieldCustomerCode, field.TypeString, value)
		_node.CustomerCode = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PickupOrderItem.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PickupOrderItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (poic *PickupOrderItemCreate) OnConflict(opts ...sql.ConflictOption) *PickupOrderItemUpsertOne {
	poic.conflict = opts
	return &PickupOrderItemUpsertOne{
		create: poic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poic *PickupOrderItemCreate) OnConflictColumns(columns ...string) *PickupOrderItemUpsertOne {
	poic.conflict = append(poic.conflict, sql.ConflictColumns(columns...))
	return &PickupOrderItemUpsertOne{
		create: poic,
	}
}

type (
	// PickupOrderItemUpsertOne is the builder for "upsert"-ing
	//  one PickupOrderItem node.
	PickupOrderItemUpsertOne struct {
		create *PickupOrderItemCreate
	}

	// PickupOrderItemUpsert is the "OnConflict" setter.
	PickupOrderItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderItemUpsert) SetUpdatedAt(v time.Time) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateUpdatedAt() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderItemUpsert) SetDeletedAt(v time.Time) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateDeletedAt() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderItemUpsert) ClearDeletedAt() *PickupOrderItemUpsert {
	u.SetNull(pickuporderitem.FieldDeletedAt)
	return u
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *PickupOrderItemUpsert) SetPickupOrderID(v int64) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldPickupOrderID, v)
	return u
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdatePickupOrderID() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldPickupOrderID)
	return u
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *PickupOrderItemUpsert) AddPickupOrderID(v int64) *PickupOrderItemUpsert {
	u.Add(pickuporderitem.FieldPickupOrderID, v)
	return u
}

// SetProductID sets the "product_id" field.
func (u *PickupOrderItemUpsert) SetProductID(v int64) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateProductID() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *PickupOrderItemUpsert) AddProductID(v int64) *PickupOrderItemUpsert {
	u.Add(pickuporderitem.FieldProductID, v)
	return u
}

// SetProductName sets the "product_name" field.
func (u *PickupOrderItemUpsert) SetProductName(v string) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateProductName() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldProductName)
	return u
}

// SetSku sets the "sku" field.
func (u *PickupOrderItemUpsert) SetSku(v string) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldSku, v)
	return u
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateSku() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldSku)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *PickupOrderItemUpsert) SetBarcode(v string) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateBarcode() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldBarcode)
	return u
}

// SetQty sets the "qty" field.
func (u *PickupOrderItemUpsert) SetQty(v int32) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldQty, v)
	return u
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateQty() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldQty)
	return u
}

// AddQty adds v to the "qty" field.
func (u *PickupOrderItemUpsert) AddQty(v int32) *PickupOrderItemUpsert {
	u.Add(pickuporderitem.FieldQty, v)
	return u
}

// SetCustomerCode sets the "customer_code" field.
func (u *PickupOrderItemUpsert) SetCustomerCode(v string) *PickupOrderItemUpsert {
	u.Set(pickuporderitem.FieldCustomerCode, v)
	return u
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *PickupOrderItemUpsert) UpdateCustomerCode() *PickupOrderItemUpsert {
	u.SetExcluded(pickuporderitem.FieldCustomerCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pickuporderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PickupOrderItemUpsertOne) UpdateNewValues() *PickupOrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pickuporderitem.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pickuporderitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PickupOrderItemUpsertOne) Ignore() *PickupOrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PickupOrderItemUpsertOne) DoNothing() *PickupOrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PickupOrderItemCreate.OnConflict
// documentation for more info.
func (u *PickupOrderItemUpsertOne) Update(set func(*PickupOrderItemUpsert)) *PickupOrderItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PickupOrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderItemUpsertOne) SetUpdatedAt(v time.Time) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateUpdatedAt() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderItemUpsertOne) SetDeletedAt(v time.Time) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateDeletedAt() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderItemUpsertOne) ClearDeletedAt() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *PickupOrderItemUpsertOne) SetPickupOrderID(v int64) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetPickupOrderID(v)
	})
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *PickupOrderItemUpsertOne) AddPickupOrderID(v int64) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddPickupOrderID(v)
	})
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdatePickupOrderID() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdatePickupOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *PickupOrderItemUpsertOne) SetProductID(v int64) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *PickupOrderItemUpsertOne) AddProductID(v int64) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateProductID() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *PickupOrderItemUpsertOne) SetProductName(v string) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateProductName() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateProductName()
	})
}

// SetSku sets the "sku" field.
func (u *PickupOrderItemUpsertOne) SetSku(v string) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateSku() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *PickupOrderItemUpsertOne) SetBarcode(v string) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateBarcode() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetQty sets the "qty" field.
func (u *PickupOrderItemUpsertOne) SetQty(v int32) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *PickupOrderItemUpsertOne) AddQty(v int32) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateQty() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateQty()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *PickupOrderItemUpsertOne) SetCustomerCode(v string) *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *PickupOrderItemUpsertOne) UpdateCustomerCode() *PickupOrderItemUpsertOne {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *PickupOrderItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PickupOrderItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PickupOrderItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PickupOrderItemUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PickupOrderItemUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PickupOrderItemCreateBulk is the builder for creating many PickupOrderItem entities in bulk.
type PickupOrderItemCreateBulk struct {
	config
	builders []*PickupOrderItemCreate
	conflict []sql.ConflictOption
}

// Save creates the PickupOrderItem entities in the database.
func (poicb *PickupOrderItemCreateBulk) Save(ctx context.Context) ([]*PickupOrderItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(poicb.builders))
	nodes := make([]*PickupOrderItem, len(poicb.builders))
	mutators := make([]Mutator, len(poicb.builders))
	for i := range poicb.builders {
		func(i int, root context.Context) {
			builder := poicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PickupOrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, poicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = poicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, poicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, poicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (poicb *PickupOrderItemCreateBulk) SaveX(ctx context.Context) []*PickupOrderItem {
	v, err := poicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poicb *PickupOrderItemCreateBulk) Exec(ctx context.Context) error {
	_, err := poicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poicb *PickupOrderItemCreateBulk) ExecX(ctx context.Context) {
	if err := poicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PickupOrderItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PickupOrderItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (poicb *PickupOrderItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *PickupOrderItemUpsertBulk {
	poicb.conflict = opts
	return &PickupOrderItemUpsertBulk{
		create: poicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poicb *PickupOrderItemCreateBulk) OnConflictColumns(columns ...string) *PickupOrderItemUpsertBulk {
	poicb.conflict = append(poicb.conflict, sql.ConflictColumns(columns...))
	return &PickupOrderItemUpsertBulk{
		create: poicb,
	}
}

// PickupOrderItemUpsertBulk is the builder for "upsert"-ing
// a bulk of PickupOrderItem nodes.
type PickupOrderItemUpsertBulk struct {
	create *PickupOrderItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pickuporderitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PickupOrderItemUpsertBulk) UpdateNewValues() *PickupOrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pickuporderitem.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pickuporderitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PickupOrderItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PickupOrderItemUpsertBulk) Ignore() *PickupOrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PickupOrderItemUpsertBulk) DoNothing() *PickupOrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PickupOrderItemCreateBulk.OnConflict
// documentation for more info.
func (u *PickupOrderItemUpsertBulk) Update(set func(*PickupOrderItemUpsert)) *PickupOrderItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PickupOrderItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PickupOrderItemUpsertBulk) SetUpdatedAt(v time.Time) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateUpdatedAt() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PickupOrderItemUpsertBulk) SetDeletedAt(v time.Time) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateDeletedAt() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PickupOrderItemUpsertBulk) ClearDeletedAt() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (u *PickupOrderItemUpsertBulk) SetPickupOrderID(v int64) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetPickupOrderID(v)
	})
}

// AddPickupOrderID adds v to the "pickup_order_id" field.
func (u *PickupOrderItemUpsertBulk) AddPickupOrderID(v int64) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddPickupOrderID(v)
	})
}

// UpdatePickupOrderID sets the "pickup_order_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdatePickupOrderID() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdatePickupOrderID()
	})
}

// SetProductID sets the "product_id" field.
func (u *PickupOrderItemUpsertBulk) SetProductID(v int64) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *PickupOrderItemUpsertBulk) AddProductID(v int64) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateProductID() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *PickupOrderItemUpsertBulk) SetProductName(v string) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateProductName() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateProductName()
	})
}

// SetSku sets the "sku" field.
func (u *PickupOrderItemUpsertBulk) SetSku(v string) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateSku() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *PickupOrderItemUpsertBulk) SetBarcode(v string) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateBarcode() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetQty sets the "qty" field.
func (u *PickupOrderItemUpsertBulk) SetQty(v int32) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *PickupOrderItemUpsertBulk) AddQty(v int32) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateQty() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateQty()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *PickupOrderItemUpsertBulk) SetCustomerCode(v string) *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *PickupOrderItemUpsertBulk) UpdateCustomerCode() *PickupOrderItemUpsertBulk {
	return u.Update(func(s *PickupOrderItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *PickupOrderItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the PickupOrderItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for PickupOrderItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PickupOrderItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
