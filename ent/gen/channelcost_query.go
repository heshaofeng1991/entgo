// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelCostQuery is the builder for querying ChannelCost entities.
type ChannelCostQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.ChannelCost
	withChannels *ChannelQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChannelCostQuery builder.
func (ccq *ChannelCostQuery) Where(ps ...predicate.ChannelCost) *ChannelCostQuery {
	ccq.predicates = append(ccq.predicates, ps...)
	return ccq
}

// Limit adds a limit step to the query.
func (ccq *ChannelCostQuery) Limit(limit int) *ChannelCostQuery {
	ccq.limit = &limit
	return ccq
}

// Offset adds an offset step to the query.
func (ccq *ChannelCostQuery) Offset(offset int) *ChannelCostQuery {
	ccq.offset = &offset
	return ccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccq *ChannelCostQuery) Unique(unique bool) *ChannelCostQuery {
	ccq.unique = &unique
	return ccq
}

// Order adds an order step to the query.
func (ccq *ChannelCostQuery) Order(o ...OrderFunc) *ChannelCostQuery {
	ccq.order = append(ccq.order, o...)
	return ccq
}

// QueryChannels chains the current query on the "channels" edge.
func (ccq *ChannelCostQuery) QueryChannels() *ChannelQuery {
	query := &ChannelQuery{config: ccq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(channelcost.Table, channelcost.FieldID, selector),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelcost.ChannelsTable, channelcost.ChannelsColumn),
		)
		schemaConfig := ccq.schemaConfig
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.ChannelCost
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChannelCost entity from the query.
// Returns a *NotFoundError when no ChannelCost was found.
func (ccq *ChannelCostQuery) First(ctx context.Context) (*ChannelCost, error) {
	nodes, err := ccq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{channelcost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccq *ChannelCostQuery) FirstX(ctx context.Context) *ChannelCost {
	node, err := ccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChannelCost ID from the query.
// Returns a *NotFoundError when no ChannelCost ID was found.
func (ccq *ChannelCostQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ccq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{channelcost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccq *ChannelCostQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChannelCost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChannelCost entity is found.
// Returns a *NotFoundError when no ChannelCost entities are found.
func (ccq *ChannelCostQuery) Only(ctx context.Context) (*ChannelCost, error) {
	nodes, err := ccq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{channelcost.Label}
	default:
		return nil, &NotSingularError{channelcost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccq *ChannelCostQuery) OnlyX(ctx context.Context) *ChannelCost {
	node, err := ccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChannelCost ID in the query.
// Returns a *NotSingularError when more than one ChannelCost ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccq *ChannelCostQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ccq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{channelcost.Label}
	default:
		err = &NotSingularError{channelcost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccq *ChannelCostQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChannelCosts.
func (ccq *ChannelCostQuery) All(ctx context.Context) ([]*ChannelCost, error) {
	if err := ccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ccq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ccq *ChannelCostQuery) AllX(ctx context.Context) []*ChannelCost {
	nodes, err := ccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChannelCost IDs.
func (ccq *ChannelCostQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := ccq.Select(channelcost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccq *ChannelCostQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccq *ChannelCostQuery) Count(ctx context.Context) (int, error) {
	if err := ccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ccq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ccq *ChannelCostQuery) CountX(ctx context.Context) int {
	count, err := ccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccq *ChannelCostQuery) Exist(ctx context.Context) (bool, error) {
	if err := ccq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ccq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ccq *ChannelCostQuery) ExistX(ctx context.Context) bool {
	exist, err := ccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChannelCostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccq *ChannelCostQuery) Clone() *ChannelCostQuery {
	if ccq == nil {
		return nil
	}
	return &ChannelCostQuery{
		config:       ccq.config,
		limit:        ccq.limit,
		offset:       ccq.offset,
		order:        append([]OrderFunc{}, ccq.order...),
		predicates:   append([]predicate.ChannelCost{}, ccq.predicates...),
		withChannels: ccq.withChannels.Clone(),
		// clone intermediate query.
		sql:    ccq.sql.Clone(),
		path:   ccq.path,
		unique: ccq.unique,
	}
}

// WithChannels tells the query-builder to eager-load the nodes that are connected to
// the "channels" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ChannelCostQuery) WithChannels(opts ...func(*ChannelQuery)) *ChannelCostQuery {
	query := &ChannelQuery{config: ccq.config}
	for _, opt := range opts {
		opt(query)
	}
	ccq.withChannels = query
	return ccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChannelCost.Query().
//		GroupBy(channelcost.FieldCreatedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (ccq *ChannelCostQuery) GroupBy(field string, fields ...string) *ChannelCostGroupBy {
	grbuild := &ChannelCostGroupBy{config: ccq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ccq.sqlQuery(ctx), nil
	}
	grbuild.label = channelcost.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ChannelCost.Query().
//		Select(channelcost.FieldCreatedAt).
//		Scan(ctx, &v)
func (ccq *ChannelCostQuery) Select(fields ...string) *ChannelCostSelect {
	ccq.fields = append(ccq.fields, fields...)
	selbuild := &ChannelCostSelect{ChannelCostQuery: ccq}
	selbuild.label = channelcost.Label
	selbuild.flds, selbuild.scan = &ccq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ChannelCostSelect configured with the given aggregations.
func (ccq *ChannelCostQuery) Aggregate(fns ...AggregateFunc) *ChannelCostSelect {
	return ccq.Select().Aggregate(fns...)
}

func (ccq *ChannelCostQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ccq.fields {
		if !channelcost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if ccq.path != nil {
		prev, err := ccq.path(ctx)
		if err != nil {
			return err
		}
		ccq.sql = prev
	}
	return nil
}

func (ccq *ChannelCostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChannelCost, error) {
	var (
		nodes       = []*ChannelCost{}
		_spec       = ccq.querySpec()
		loadedTypes = [1]bool{
			ccq.withChannels != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChannelCost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChannelCost{config: ccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ccq.schemaConfig.ChannelCost
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccq.withChannels; query != nil {
		if err := ccq.loadChannels(ctx, query, nodes, nil,
			func(n *ChannelCost, e *Channel) { n.Edges.Channels = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccq *ChannelCostQuery) loadChannels(ctx context.Context, query *ChannelQuery, nodes []*ChannelCost, init func(*ChannelCost), assign func(*ChannelCost, *Channel)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ChannelCost)
	for i := range nodes {
		fk := nodes[i].ChannelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(channel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "channel_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ccq *ChannelCostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccq.querySpec()
	_spec.Node.Schema = ccq.schemaConfig.ChannelCost
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	_spec.Node.Columns = ccq.fields
	if len(ccq.fields) > 0 {
		_spec.Unique = ccq.unique != nil && *ccq.unique
	}
	return sqlgraph.CountNodes(ctx, ccq.driver, _spec)
}

func (ccq *ChannelCostQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ccq *ChannelCostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelcost.Table,
			Columns: channelcost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcost.FieldID,
			},
		},
		From:   ccq.sql,
		Unique: true,
	}
	if unique := ccq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ccq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelcost.FieldID)
		for i := range fields {
			if fields[i] != channelcost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccq *ChannelCostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccq.driver.Dialect())
	t1 := builder.Table(channelcost.Table)
	columns := ccq.fields
	if len(columns) == 0 {
		columns = channelcost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccq.sql != nil {
		selector = ccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccq.unique != nil && *ccq.unique {
		selector.Distinct()
	}
	t1.Schema(ccq.schemaConfig.ChannelCost)
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ccq.modifiers {
		m(selector)
	}
	for _, p := range ccq.predicates {
		p(selector)
	}
	for _, p := range ccq.order {
		p(selector)
	}
	if offset := ccq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ccq *ChannelCostQuery) Modify(modifiers ...func(s *sql.Selector)) *ChannelCostSelect {
	ccq.modifiers = append(ccq.modifiers, modifiers...)
	return ccq.Select()
}

// ChannelCostGroupBy is the group-by builder for ChannelCost entities.
type ChannelCostGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccgb *ChannelCostGroupBy) Aggregate(fns ...AggregateFunc) *ChannelCostGroupBy {
	ccgb.fns = append(ccgb.fns, fns...)
	return ccgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ccgb *ChannelCostGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ccgb.path(ctx)
	if err != nil {
		return err
	}
	ccgb.sql = query
	return ccgb.sqlScan(ctx, v)
}

func (ccgb *ChannelCostGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ccgb.fields {
		if !channelcost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ccgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ccgb *ChannelCostGroupBy) sqlQuery() *sql.Selector {
	selector := ccgb.sql.Select()
	aggregation := make([]string, 0, len(ccgb.fns))
	for _, fn := range ccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ccgb.fields)+len(ccgb.fns))
		for _, f := range ccgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ccgb.fields...)...)
}

// ChannelCostSelect is the builder for selecting fields of ChannelCost entities.
type ChannelCostSelect struct {
	*ChannelCostQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccs *ChannelCostSelect) Aggregate(fns ...AggregateFunc) *ChannelCostSelect {
	ccs.fns = append(ccs.fns, fns...)
	return ccs
}

// Scan applies the selector query and scans the result into the given value.
func (ccs *ChannelCostSelect) Scan(ctx context.Context, v any) error {
	if err := ccs.prepareQuery(ctx); err != nil {
		return err
	}
	ccs.sql = ccs.ChannelCostQuery.sqlQuery(ctx)
	return ccs.sqlScan(ctx, v)
}

func (ccs *ChannelCostSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ccs.fns))
	for _, fn := range ccs.fns {
		aggregation = append(aggregation, fn(ccs.sql))
	}
	switch n := len(*ccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ccs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ccs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ccs.sql.Query()
	if err := ccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ccs *ChannelCostSelect) Modify(modifiers ...func(s *sql.Selector)) *ChannelCostSelect {
	ccs.modifiers = append(ccs.modifiers, modifiers...)
	return ccs
}
