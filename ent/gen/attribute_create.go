// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/attribute"
)

// AttributeCreate is the builder for creating a Attribute entity.
type AttributeCreate struct {
	config
	mutation *AttributeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (ac *AttributeCreate) SetType(i int8) *AttributeCreate {
	ac.mutation.SetType(i)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableType(i *int8) *AttributeCreate {
	if i != nil {
		ac.SetType(*i)
	}
	return ac
}

// SetValue sets the "value" field.
func (ac *AttributeCreate) SetValue(s string) *AttributeCreate {
	ac.mutation.SetValue(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AttributeCreate) SetDescription(s string) *AttributeCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableDescription(s *string) *AttributeCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AttributeCreate) SetStatus(i int8) *AttributeCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableStatus(i *int8) *AttributeCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttributeCreate) SetCreatedAt(t time.Time) *AttributeCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableCreatedAt(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AttributeCreate) SetUpdatedAt(t time.Time) *AttributeCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableUpdatedAt(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AttributeCreate) SetDeletedAt(t time.Time) *AttributeCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AttributeCreate) SetNillableDeletedAt(t *time.Time) *AttributeCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttributeCreate) SetID(i int64) *AttributeCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AttributeMutation object of the builder.
func (ac *AttributeCreate) Mutation() *AttributeMutation {
	return ac.mutation
}

// Save creates the Attribute in the database.
func (ac *AttributeCreate) Save(ctx context.Context) (*Attribute, error) {
	var (
		err  error
		node *Attribute
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attribute)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttributeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttributeCreate) SaveX(ctx context.Context) *Attribute {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttributeCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttributeCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttributeCreate) defaults() {
	if _, ok := ac.mutation.GetType(); !ok {
		v := attribute.DefaultType
		ac.mutation.SetType(v)
	}
	if _, ok := ac.mutation.Description(); !ok {
		v := attribute.DefaultDescription
		ac.mutation.SetDescription(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := attribute.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := attribute.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := attribute.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttributeCreate) check() error {
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "Attribute.type"`)}
	}
	if _, ok := ac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`gen: missing required field "Attribute.value"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`gen: missing required field "Attribute.description"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Attribute.status"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Attribute.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Attribute.updated_at"`)}
	}
	return nil
}

func (ac *AttributeCreate) sqlSave(ctx context.Context) (*Attribute, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ac *AttributeCreate) createSpec() (*Attribute, *sqlgraph.CreateSpec) {
	var (
		_node = &Attribute{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attribute.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: attribute.FieldID,
			},
		}
	)
	_spec.Schema = ac.schemaConfig.Attribute
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(attribute.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Value(); ok {
		_spec.SetField(attribute.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(attribute.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(attribute.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(attribute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(attribute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(attribute.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attribute.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ac *AttributeCreate) OnConflict(opts ...sql.ConflictOption) *AttributeUpsertOne {
	ac.conflict = opts
	return &AttributeUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AttributeCreate) OnConflictColumns(columns ...string) *AttributeUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AttributeUpsertOne{
		create: ac,
	}
}

type (
	// AttributeUpsertOne is the builder for "upsert"-ing
	//  one Attribute node.
	AttributeUpsertOne struct {
		create *AttributeCreate
	}

	// AttributeUpsert is the "OnConflict" setter.
	AttributeUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *AttributeUpsert) SetType(v int8) *AttributeUpsert {
	u.Set(attribute.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateType() *AttributeUpsert {
	u.SetExcluded(attribute.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *AttributeUpsert) AddType(v int8) *AttributeUpsert {
	u.Add(attribute.FieldType, v)
	return u
}

// SetValue sets the "value" field.
func (u *AttributeUpsert) SetValue(v string) *AttributeUpsert {
	u.Set(attribute.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateValue() *AttributeUpsert {
	u.SetExcluded(attribute.FieldValue)
	return u
}

// SetDescription sets the "description" field.
func (u *AttributeUpsert) SetDescription(v string) *AttributeUpsert {
	u.Set(attribute.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateDescription() *AttributeUpsert {
	u.SetExcluded(attribute.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *AttributeUpsert) SetStatus(v int8) *AttributeUpsert {
	u.Set(attribute.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateStatus() *AttributeUpsert {
	u.SetExcluded(attribute.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AttributeUpsert) AddStatus(v int8) *AttributeUpsert {
	u.Add(attribute.FieldStatus, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AttributeUpsert) SetCreatedAt(v time.Time) *AttributeUpsert {
	u.Set(attribute.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateCreatedAt() *AttributeUpsert {
	u.SetExcluded(attribute.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttributeUpsert) SetUpdatedAt(v time.Time) *AttributeUpsert {
	u.Set(attribute.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateUpdatedAt() *AttributeUpsert {
	u.SetExcluded(attribute.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttributeUpsert) SetDeletedAt(v time.Time) *AttributeUpsert {
	u.Set(attribute.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttributeUpsert) UpdateDeletedAt() *AttributeUpsert {
	u.SetExcluded(attribute.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttributeUpsert) ClearDeletedAt() *AttributeUpsert {
	u.SetNull(attribute.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeUpsertOne) UpdateNewValues() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attribute.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttributeUpsertOne) Ignore() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeUpsertOne) DoNothing() *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeCreate.OnConflict
// documentation for more info.
func (u *AttributeUpsertOne) Update(set func(*AttributeUpsert)) *AttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *AttributeUpsertOne) SetType(v int8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AttributeUpsertOne) AddType(v int8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateType() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *AttributeUpsertOne) SetValue(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateValue() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateValue()
	})
}

// SetDescription sets the "description" field.
func (u *AttributeUpsertOne) SetDescription(v string) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateDescription() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *AttributeUpsertOne) SetStatus(v int8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AttributeUpsertOne) AddStatus(v int8) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateStatus() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AttributeUpsertOne) SetCreatedAt(v time.Time) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateCreatedAt() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttributeUpsertOne) SetUpdatedAt(v time.Time) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateUpdatedAt() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttributeUpsertOne) SetDeletedAt(v time.Time) *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttributeUpsertOne) UpdateDeletedAt() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttributeUpsertOne) ClearDeletedAt() *AttributeUpsertOne {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *AttributeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for AttributeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttributeUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttributeUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttributeCreateBulk is the builder for creating many Attribute entities in bulk.
type AttributeCreateBulk struct {
	config
	builders []*AttributeCreate
	conflict []sql.ConflictOption
}

// Save creates the Attribute entities in the database.
func (acb *AttributeCreateBulk) Save(ctx context.Context) ([]*Attribute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attribute, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttributeCreateBulk) SaveX(ctx context.Context) []*Attribute {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttributeCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attribute.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (acb *AttributeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttributeUpsertBulk {
	acb.conflict = opts
	return &AttributeUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AttributeCreateBulk) OnConflictColumns(columns ...string) *AttributeUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AttributeUpsertBulk{
		create: acb,
	}
}

// AttributeUpsertBulk is the builder for "upsert"-ing
// a bulk of Attribute nodes.
type AttributeUpsertBulk struct {
	create *AttributeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeUpsertBulk) UpdateNewValues() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attribute.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attribute.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttributeUpsertBulk) Ignore() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeUpsertBulk) DoNothing() *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeCreateBulk.OnConflict
// documentation for more info.
func (u *AttributeUpsertBulk) Update(set func(*AttributeUpsert)) *AttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *AttributeUpsertBulk) SetType(v int8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AttributeUpsertBulk) AddType(v int8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateType() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *AttributeUpsertBulk) SetValue(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateValue() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateValue()
	})
}

// SetDescription sets the "description" field.
func (u *AttributeUpsertBulk) SetDescription(v string) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateDescription() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDescription()
	})
}

// SetStatus sets the "status" field.
func (u *AttributeUpsertBulk) SetStatus(v int8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AttributeUpsertBulk) AddStatus(v int8) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateStatus() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AttributeUpsertBulk) SetCreatedAt(v time.Time) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateCreatedAt() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttributeUpsertBulk) SetUpdatedAt(v time.Time) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateUpdatedAt() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttributeUpsertBulk) SetDeletedAt(v time.Time) *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttributeUpsertBulk) UpdateDeletedAt() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttributeUpsertBulk) ClearDeletedAt() *AttributeUpsertBulk {
	return u.Update(func(s *AttributeUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *AttributeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the AttributeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for AttributeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
