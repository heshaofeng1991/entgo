// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
)

// ProductMappingCreate is the builder for creating a ProductMapping entity.
type ProductMappingCreate struct {
	config
	mutation *ProductMappingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *ProductMappingCreate) SetCreatedAt(t time.Time) *ProductMappingCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillableCreatedAt(t *time.Time) *ProductMappingCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *ProductMappingCreate) SetUpdatedAt(t time.Time) *ProductMappingCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillableUpdatedAt(t *time.Time) *ProductMappingCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *ProductMappingCreate) SetDeletedAt(t time.Time) *ProductMappingCreate {
	pmc.mutation.SetDeletedAt(t)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillableDeletedAt(t *time.Time) *ProductMappingCreate {
	if t != nil {
		pmc.SetDeletedAt(*t)
	}
	return pmc
}

// SetPlatformProductID sets the "platform_product_id" field.
func (pmc *ProductMappingCreate) SetPlatformProductID(i int64) *ProductMappingCreate {
	pmc.mutation.SetPlatformProductID(i)
	return pmc
}

// SetNillablePlatformProductID sets the "platform_product_id" field if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillablePlatformProductID(i *int64) *ProductMappingCreate {
	if i != nil {
		pmc.SetPlatformProductID(*i)
	}
	return pmc
}

// SetProductID sets the "product_id" field.
func (pmc *ProductMappingCreate) SetProductID(i int64) *ProductMappingCreate {
	pmc.mutation.SetProductID(i)
	return pmc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillableProductID(i *int64) *ProductMappingCreate {
	if i != nil {
		pmc.SetProductID(*i)
	}
	return pmc
}

// SetQty sets the "qty" field.
func (pmc *ProductMappingCreate) SetQty(i int) *ProductMappingCreate {
	pmc.mutation.SetQty(i)
	return pmc
}

// SetCreatedBy sets the "created_by" field.
func (pmc *ProductMappingCreate) SetCreatedBy(i int64) *ProductMappingCreate {
	pmc.mutation.SetCreatedBy(i)
	return pmc
}

// SetID sets the "id" field.
func (pmc *ProductMappingCreate) SetID(i int64) *ProductMappingCreate {
	pmc.mutation.SetID(i)
	return pmc
}

// SetPlatformProductsID sets the "platform_products" edge to the PlatformProduct entity by ID.
func (pmc *ProductMappingCreate) SetPlatformProductsID(id int64) *ProductMappingCreate {
	pmc.mutation.SetPlatformProductsID(id)
	return pmc
}

// SetNillablePlatformProductsID sets the "platform_products" edge to the PlatformProduct entity by ID if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillablePlatformProductsID(id *int64) *ProductMappingCreate {
	if id != nil {
		pmc = pmc.SetPlatformProductsID(*id)
	}
	return pmc
}

// SetPlatformProducts sets the "platform_products" edge to the PlatformProduct entity.
func (pmc *ProductMappingCreate) SetPlatformProducts(p *PlatformProduct) *ProductMappingCreate {
	return pmc.SetPlatformProductsID(p.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (pmc *ProductMappingCreate) SetProductsID(id int64) *ProductMappingCreate {
	pmc.mutation.SetProductsID(id)
	return pmc
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (pmc *ProductMappingCreate) SetNillableProductsID(id *int64) *ProductMappingCreate {
	if id != nil {
		pmc = pmc.SetProductsID(*id)
	}
	return pmc
}

// SetProducts sets the "products" edge to the Product entity.
func (pmc *ProductMappingCreate) SetProducts(p *Product) *ProductMappingCreate {
	return pmc.SetProductsID(p.ID)
}

// Mutation returns the ProductMappingMutation object of the builder.
func (pmc *ProductMappingCreate) Mutation() *ProductMappingMutation {
	return pmc.mutation
}

// Save creates the ProductMapping in the database.
func (pmc *ProductMappingCreate) Save(ctx context.Context) (*ProductMapping, error) {
	var (
		err  error
		node *ProductMapping
	)
	pmc.defaults()
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProductMapping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProductMappingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProductMappingCreate) SaveX(ctx context.Context) *ProductMapping {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProductMappingCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProductMappingCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *ProductMappingCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := productmapping.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := productmapping.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.PlatformProductID(); !ok {
		v := productmapping.DefaultPlatformProductID
		pmc.mutation.SetPlatformProductID(v)
	}
	if _, ok := pmc.mutation.ProductID(); !ok {
		v := productmapping.DefaultProductID
		pmc.mutation.SetProductID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProductMappingCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ProductMapping.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ProductMapping.updated_at"`)}
	}
	if _, ok := pmc.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`gen: missing required field "ProductMapping.qty"`)}
	}
	if _, ok := pmc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`gen: missing required field "ProductMapping.created_by"`)}
	}
	return nil
}

func (pmc *ProductMappingCreate) sqlSave(ctx context.Context) (*ProductMapping, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pmc *ProductMappingCreate) createSpec() (*ProductMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductMapping{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productmapping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: productmapping.FieldID,
			},
		}
	)
	_spec.Schema = pmc.schemaConfig.ProductMapping
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(productmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(productmapping.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(productmapping.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pmc.mutation.Qty(); ok {
		_spec.SetField(productmapping.FieldQty, field.TypeInt, value)
		_node.Qty = value
	}
	if value, ok := pmc.mutation.CreatedBy(); ok {
		_spec.SetField(productmapping.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if nodes := pmc.mutation.PlatformProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmapping.PlatformProductsTable,
			Columns: []string{productmapping.PlatformProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: platformproduct.FieldID,
				},
			},
		}
		edge.Schema = pmc.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlatformProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmapping.ProductsTable,
			Columns: []string{productmapping.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: product.FieldID,
				},
			},
		}
		edge.Schema = pmc.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductMapping.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductMappingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmc *ProductMappingCreate) OnConflict(opts ...sql.ConflictOption) *ProductMappingUpsertOne {
	pmc.conflict = opts
	return &ProductMappingUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *ProductMappingCreate) OnConflictColumns(columns ...string) *ProductMappingUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &ProductMappingUpsertOne{
		create: pmc,
	}
}

type (
	// ProductMappingUpsertOne is the builder for "upsert"-ing
	//  one ProductMapping node.
	ProductMappingUpsertOne struct {
		create *ProductMappingCreate
	}

	// ProductMappingUpsert is the "OnConflict" setter.
	ProductMappingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductMappingUpsert) SetUpdatedAt(v time.Time) *ProductMappingUpsert {
	u.Set(productmapping.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdateUpdatedAt() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductMappingUpsert) SetDeletedAt(v time.Time) *ProductMappingUpsert {
	u.Set(productmapping.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdateDeletedAt() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductMappingUpsert) ClearDeletedAt() *ProductMappingUpsert {
	u.SetNull(productmapping.FieldDeletedAt)
	return u
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *ProductMappingUpsert) SetPlatformProductID(v int64) *ProductMappingUpsert {
	u.Set(productmapping.FieldPlatformProductID, v)
	return u
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdatePlatformProductID() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldPlatformProductID)
	return u
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *ProductMappingUpsert) ClearPlatformProductID() *ProductMappingUpsert {
	u.SetNull(productmapping.FieldPlatformProductID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *ProductMappingUpsert) SetProductID(v int64) *ProductMappingUpsert {
	u.Set(productmapping.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdateProductID() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldProductID)
	return u
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductMappingUpsert) ClearProductID() *ProductMappingUpsert {
	u.SetNull(productmapping.FieldProductID)
	return u
}

// SetQty sets the "qty" field.
func (u *ProductMappingUpsert) SetQty(v int) *ProductMappingUpsert {
	u.Set(productmapping.FieldQty, v)
	return u
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdateQty() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldQty)
	return u
}

// AddQty adds v to the "qty" field.
func (u *ProductMappingUpsert) AddQty(v int) *ProductMappingUpsert {
	u.Add(productmapping.FieldQty, v)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductMappingUpsert) SetCreatedBy(v int64) *ProductMappingUpsert {
	u.Set(productmapping.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductMappingUpsert) UpdateCreatedBy() *ProductMappingUpsert {
	u.SetExcluded(productmapping.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductMappingUpsert) AddCreatedBy(v int64) *ProductMappingUpsert {
	u.Add(productmapping.FieldCreatedBy, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductMappingUpsertOne) UpdateNewValues() *ProductMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(productmapping.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(productmapping.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductMappingUpsertOne) Ignore() *ProductMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductMappingUpsertOne) DoNothing() *ProductMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductMappingCreate.OnConflict
// documentation for more info.
func (u *ProductMappingUpsertOne) Update(set func(*ProductMappingUpsert)) *ProductMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductMappingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductMappingUpsertOne) SetUpdatedAt(v time.Time) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdateUpdatedAt() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductMappingUpsertOne) SetDeletedAt(v time.Time) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdateDeletedAt() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductMappingUpsertOne) ClearDeletedAt() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *ProductMappingUpsertOne) SetPlatformProductID(v int64) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetPlatformProductID(v)
	})
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdatePlatformProductID() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdatePlatformProductID()
	})
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *ProductMappingUpsertOne) ClearPlatformProductID() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearPlatformProductID()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductMappingUpsertOne) SetProductID(v int64) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdateProductID() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductMappingUpsertOne) ClearProductID() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearProductID()
	})
}

// SetQty sets the "qty" field.
func (u *ProductMappingUpsertOne) SetQty(v int) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *ProductMappingUpsertOne) AddQty(v int) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdateQty() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateQty()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductMappingUpsertOne) SetCreatedBy(v int64) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductMappingUpsertOne) AddCreatedBy(v int64) *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductMappingUpsertOne) UpdateCreatedBy() *ProductMappingUpsertOne {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *ProductMappingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ProductMappingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductMappingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductMappingUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductMappingUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductMappingCreateBulk is the builder for creating many ProductMapping entities in bulk.
type ProductMappingCreateBulk struct {
	config
	builders []*ProductMappingCreate
	conflict []sql.ConflictOption
}

// Save creates the ProductMapping entities in the database.
func (pmcb *ProductMappingCreateBulk) Save(ctx context.Context) ([]*ProductMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProductMapping, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProductMappingCreateBulk) SaveX(ctx context.Context) []*ProductMapping {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProductMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProductMappingCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductMapping.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductMappingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmcb *ProductMappingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductMappingUpsertBulk {
	pmcb.conflict = opts
	return &ProductMappingUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *ProductMappingCreateBulk) OnConflictColumns(columns ...string) *ProductMappingUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &ProductMappingUpsertBulk{
		create: pmcb,
	}
}

// ProductMappingUpsertBulk is the builder for "upsert"-ing
// a bulk of ProductMapping nodes.
type ProductMappingUpsertBulk struct {
	create *ProductMappingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductMappingUpsertBulk) UpdateNewValues() *ProductMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(productmapping.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(productmapping.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductMapping.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductMappingUpsertBulk) Ignore() *ProductMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductMappingUpsertBulk) DoNothing() *ProductMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductMappingCreateBulk.OnConflict
// documentation for more info.
func (u *ProductMappingUpsertBulk) Update(set func(*ProductMappingUpsert)) *ProductMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductMappingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductMappingUpsertBulk) SetUpdatedAt(v time.Time) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdateUpdatedAt() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductMappingUpsertBulk) SetDeletedAt(v time.Time) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdateDeletedAt() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductMappingUpsertBulk) ClearDeletedAt() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPlatformProductID sets the "platform_product_id" field.
func (u *ProductMappingUpsertBulk) SetPlatformProductID(v int64) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetPlatformProductID(v)
	})
}

// UpdatePlatformProductID sets the "platform_product_id" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdatePlatformProductID() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdatePlatformProductID()
	})
}

// ClearPlatformProductID clears the value of the "platform_product_id" field.
func (u *ProductMappingUpsertBulk) ClearPlatformProductID() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearPlatformProductID()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductMappingUpsertBulk) SetProductID(v int64) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdateProductID() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *ProductMappingUpsertBulk) ClearProductID() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.ClearProductID()
	})
}

// SetQty sets the "qty" field.
func (u *ProductMappingUpsertBulk) SetQty(v int) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *ProductMappingUpsertBulk) AddQty(v int) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdateQty() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateQty()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductMappingUpsertBulk) SetCreatedBy(v int64) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductMappingUpsertBulk) AddCreatedBy(v int64) *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductMappingUpsertBulk) UpdateCreatedBy() *ProductMappingUpsertBulk {
	return u.Update(func(s *ProductMappingUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *ProductMappingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ProductMappingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ProductMappingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductMappingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
