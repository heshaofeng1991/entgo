// Code generated by ent, DO NOT EDIT.

package transactiondetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionType applies equality check predicate on the "transaction_type" field. It's identical to TransactionTypeEQ.
func TransactionType(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionType), v))
	})
}

// DeliveryCost applies equality check predicate on the "delivery_cost" field. It's identical to DeliveryCostEQ.
func DeliveryCost(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCost), v))
	})
}

// MiscFee applies equality check predicate on the "misc_fee" field. It's identical to MiscFeeEQ.
func MiscFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// FuelFee applies equality check predicate on the "fuel_fee" field. It's identical to FuelFeeEQ.
func FuelFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// RegistrationFee applies equality check predicate on the "registration_fee" field. It's identical to RegistrationFeeEQ.
func RegistrationFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// ProcessingFee applies equality check predicate on the "processing_fee" field. It's identical to ProcessingFeeEQ.
func ProcessingFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// PackageFee applies equality check predicate on the "package_fee" field. It's identical to PackageFeeEQ.
func PackageFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageFee), v))
	})
}

// HandlingFee applies equality check predicate on the "handling_fee" field. It's identical to HandlingFeeEQ.
func HandlingFee(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// Vat applies equality check predicate on the "vat" field. It's identical to VatEQ.
func Vat(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVat), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...int64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...int64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v int64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionTypeEQ applies the EQ predicate on the "transaction_type" field.
func TransactionTypeEQ(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeNEQ applies the NEQ predicate on the "transaction_type" field.
func TransactionTypeNEQ(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeIn applies the In predicate on the "transaction_type" field.
func TransactionTypeIn(vs ...string) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionType), v...))
	})
}

// TransactionTypeNotIn applies the NotIn predicate on the "transaction_type" field.
func TransactionTypeNotIn(vs ...string) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionType), v...))
	})
}

// TransactionTypeGT applies the GT predicate on the "transaction_type" field.
func TransactionTypeGT(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeGTE applies the GTE predicate on the "transaction_type" field.
func TransactionTypeGTE(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeLT applies the LT predicate on the "transaction_type" field.
func TransactionTypeLT(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeLTE applies the LTE predicate on the "transaction_type" field.
func TransactionTypeLTE(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeContains applies the Contains predicate on the "transaction_type" field.
func TransactionTypeContains(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeHasPrefix applies the HasPrefix predicate on the "transaction_type" field.
func TransactionTypeHasPrefix(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeHasSuffix applies the HasSuffix predicate on the "transaction_type" field.
func TransactionTypeHasSuffix(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeEqualFold applies the EqualFold predicate on the "transaction_type" field.
func TransactionTypeEqualFold(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeContainsFold applies the ContainsFold predicate on the "transaction_type" field.
func TransactionTypeContainsFold(v string) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionType), v))
	})
}

// DeliveryCostEQ applies the EQ predicate on the "delivery_cost" field.
func DeliveryCostEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostNEQ applies the NEQ predicate on the "delivery_cost" field.
func DeliveryCostNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostIn applies the In predicate on the "delivery_cost" field.
func DeliveryCostIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliveryCost), v...))
	})
}

// DeliveryCostNotIn applies the NotIn predicate on the "delivery_cost" field.
func DeliveryCostNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliveryCost), v...))
	})
}

// DeliveryCostGT applies the GT predicate on the "delivery_cost" field.
func DeliveryCostGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostGTE applies the GTE predicate on the "delivery_cost" field.
func DeliveryCostGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostLT applies the LT predicate on the "delivery_cost" field.
func DeliveryCostLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryCost), v))
	})
}

// DeliveryCostLTE applies the LTE predicate on the "delivery_cost" field.
func DeliveryCostLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryCost), v))
	})
}

// MiscFeeEQ applies the EQ predicate on the "misc_fee" field.
func MiscFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeNEQ applies the NEQ predicate on the "misc_fee" field.
func MiscFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiscFee), v))
	})
}

// MiscFeeIn applies the In predicate on the "misc_fee" field.
func MiscFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeNotIn applies the NotIn predicate on the "misc_fee" field.
func MiscFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMiscFee), v...))
	})
}

// MiscFeeGT applies the GT predicate on the "misc_fee" field.
func MiscFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeGTE applies the GTE predicate on the "misc_fee" field.
func MiscFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLT applies the LT predicate on the "misc_fee" field.
func MiscFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiscFee), v))
	})
}

// MiscFeeLTE applies the LTE predicate on the "misc_fee" field.
func MiscFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiscFee), v))
	})
}

// FuelFeeEQ applies the EQ predicate on the "fuel_fee" field.
func FuelFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeNEQ applies the NEQ predicate on the "fuel_fee" field.
func FuelFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFuelFee), v))
	})
}

// FuelFeeIn applies the In predicate on the "fuel_fee" field.
func FuelFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeNotIn applies the NotIn predicate on the "fuel_fee" field.
func FuelFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFuelFee), v...))
	})
}

// FuelFeeGT applies the GT predicate on the "fuel_fee" field.
func FuelFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeGTE applies the GTE predicate on the "fuel_fee" field.
func FuelFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLT applies the LT predicate on the "fuel_fee" field.
func FuelFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFuelFee), v))
	})
}

// FuelFeeLTE applies the LTE predicate on the "fuel_fee" field.
func FuelFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFuelFee), v))
	})
}

// RegistrationFeeEQ applies the EQ predicate on the "registration_fee" field.
func RegistrationFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeNEQ applies the NEQ predicate on the "registration_fee" field.
func RegistrationFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeIn applies the In predicate on the "registration_fee" field.
func RegistrationFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeNotIn applies the NotIn predicate on the "registration_fee" field.
func RegistrationFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRegistrationFee), v...))
	})
}

// RegistrationFeeGT applies the GT predicate on the "registration_fee" field.
func RegistrationFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeGTE applies the GTE predicate on the "registration_fee" field.
func RegistrationFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLT applies the LT predicate on the "registration_fee" field.
func RegistrationFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationFee), v))
	})
}

// RegistrationFeeLTE applies the LTE predicate on the "registration_fee" field.
func RegistrationFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationFee), v))
	})
}

// ProcessingFeeEQ applies the EQ predicate on the "processing_fee" field.
func ProcessingFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeNEQ applies the NEQ predicate on the "processing_fee" field.
func ProcessingFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeIn applies the In predicate on the "processing_fee" field.
func ProcessingFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeNotIn applies the NotIn predicate on the "processing_fee" field.
func ProcessingFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcessingFee), v...))
	})
}

// ProcessingFeeGT applies the GT predicate on the "processing_fee" field.
func ProcessingFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeGTE applies the GTE predicate on the "processing_fee" field.
func ProcessingFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLT applies the LT predicate on the "processing_fee" field.
func ProcessingFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessingFee), v))
	})
}

// ProcessingFeeLTE applies the LTE predicate on the "processing_fee" field.
func ProcessingFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessingFee), v))
	})
}

// PackageFeeEQ applies the EQ predicate on the "package_fee" field.
func PackageFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageFee), v))
	})
}

// PackageFeeNEQ applies the NEQ predicate on the "package_fee" field.
func PackageFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageFee), v))
	})
}

// PackageFeeIn applies the In predicate on the "package_fee" field.
func PackageFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPackageFee), v...))
	})
}

// PackageFeeNotIn applies the NotIn predicate on the "package_fee" field.
func PackageFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPackageFee), v...))
	})
}

// PackageFeeGT applies the GT predicate on the "package_fee" field.
func PackageFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageFee), v))
	})
}

// PackageFeeGTE applies the GTE predicate on the "package_fee" field.
func PackageFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageFee), v))
	})
}

// PackageFeeLT applies the LT predicate on the "package_fee" field.
func PackageFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageFee), v))
	})
}

// PackageFeeLTE applies the LTE predicate on the "package_fee" field.
func PackageFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageFee), v))
	})
}

// HandlingFeeEQ applies the EQ predicate on the "handling_fee" field.
func HandlingFeeEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeNEQ applies the NEQ predicate on the "handling_fee" field.
func HandlingFeeNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeIn applies the In predicate on the "handling_fee" field.
func HandlingFeeIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeNotIn applies the NotIn predicate on the "handling_fee" field.
func HandlingFeeNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHandlingFee), v...))
	})
}

// HandlingFeeGT applies the GT predicate on the "handling_fee" field.
func HandlingFeeGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeGTE applies the GTE predicate on the "handling_fee" field.
func HandlingFeeGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLT applies the LT predicate on the "handling_fee" field.
func HandlingFeeLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlingFee), v))
	})
}

// HandlingFeeLTE applies the LTE predicate on the "handling_fee" field.
func HandlingFeeLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlingFee), v))
	})
}

// VatEQ applies the EQ predicate on the "vat" field.
func VatEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVat), v))
	})
}

// VatNEQ applies the NEQ predicate on the "vat" field.
func VatNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVat), v))
	})
}

// VatIn applies the In predicate on the "vat" field.
func VatIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVat), v...))
	})
}

// VatNotIn applies the NotIn predicate on the "vat" field.
func VatNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVat), v...))
	})
}

// VatGT applies the GT predicate on the "vat" field.
func VatGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVat), v))
	})
}

// VatGTE applies the GTE predicate on the "vat" field.
func VatGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVat), v))
	})
}

// VatLT applies the LT predicate on the "vat" field.
func VatLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVat), v))
	})
}

// VatLTE applies the LTE predicate on the "vat" field.
func VatLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVat), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.TransactionDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransactionDetail) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransactionDetail) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransactionDetail) predicate.TransactionDetail {
	return predicate.TransactionDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
