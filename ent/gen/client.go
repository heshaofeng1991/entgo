// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/heshaofeng1991/entgo/ent/gen/migrate"

	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/attribute"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcostbatche"
	"github.com/heshaofeng1991/entgo/ent/gen/channeloption"
	"github.com/heshaofeng1991/entgo/ent/gen/channelrecommend"
	"github.com/heshaofeng1991/entgo/ent/gen/channelvolumefactor"
	"github.com/heshaofeng1991/entgo/ent/gen/country"
	"github.com/heshaofeng1991/entgo/ent/gen/countryzone"
	"github.com/heshaofeng1991/entgo/ent/gen/courierorder"
	"github.com/heshaofeng1991/entgo/ent/gen/customerconfig"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderholdreason"
	"github.com/heshaofeng1991/entgo/ent/gen/orderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporder"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/sequence"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/taskschedule"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/token"
	"github.com/heshaofeng1991/entgo/ent/gen/trackmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/transaction"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
	"github.com/heshaofeng1991/entgo/ent/gen/userreferral"
	"github.com/heshaofeng1991/entgo/ent/gen/valueaddedtax"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Announcements is the client for interacting with the Announcements builders.
	Announcements *AnnouncementsClient
	// Attribute is the client for interacting with the Attribute builders.
	Attribute *AttributeClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// ChannelCost is the client for interacting with the ChannelCost builders.
	ChannelCost *ChannelCostClient
	// ChannelCostBatche is the client for interacting with the ChannelCostBatche builders.
	ChannelCostBatche *ChannelCostBatcheClient
	// ChannelOption is the client for interacting with the ChannelOption builders.
	ChannelOption *ChannelOptionClient
	// ChannelRecommend is the client for interacting with the ChannelRecommend builders.
	ChannelRecommend *ChannelRecommendClient
	// ChannelVolumeFactor is the client for interacting with the ChannelVolumeFactor builders.
	ChannelVolumeFactor *ChannelVolumeFactorClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// CountryZone is the client for interacting with the CountryZone builders.
	CountryZone *CountryZoneClient
	// CourierOrder is the client for interacting with the CourierOrder builders.
	CourierOrder *CourierOrderClient
	// CustomerConfig is the client for interacting with the CustomerConfig builders.
	CustomerConfig *CustomerConfigClient
	// Inbound is the client for interacting with the Inbound builders.
	Inbound *InboundClient
	// InboundItem is the client for interacting with the InboundItem builders.
	InboundItem *InboundItemClient
	// Inventory is the client for interacting with the Inventory builders.
	Inventory *InventoryClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderHoldReason is the client for interacting with the OrderHoldReason builders.
	OrderHoldReason *OrderHoldReasonClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderTaxation is the client for interacting with the OrderTaxation builders.
	OrderTaxation *OrderTaxationClient
	// PickupOrder is the client for interacting with the PickupOrder builders.
	PickupOrder *PickupOrderClient
	// PickupOrderItem is the client for interacting with the PickupOrderItem builders.
	PickupOrderItem *PickupOrderItemClient
	// PlatformProduct is the client for interacting with the PlatformProduct builders.
	PlatformProduct *PlatformProductClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductMapping is the client for interacting with the ProductMapping builders.
	ProductMapping *ProductMappingClient
	// Sequence is the client for interacting with the Sequence builders.
	Sequence *SequenceClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
	// TaskSchedule is the client for interacting with the TaskSchedule builders.
	TaskSchedule *TaskScheduleClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// TrackMapping is the client for interacting with the TrackMapping builders.
	TrackMapping *TrackMappingClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// TransactionDetail is the client for interacting with the TransactionDetail builders.
	TransactionDetail *TransactionDetailClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserReferral is the client for interacting with the UserReferral builders.
	UserReferral *UserReferralClient
	// ValueAddedTax is the client for interacting with the ValueAddedTax builders.
	ValueAddedTax *ValueAddedTaxClient
	// Warehouse is the client for interacting with the Warehouse builders.
	Warehouse *WarehouseClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Announcements = NewAnnouncementsClient(c.config)
	c.Attribute = NewAttributeClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.ChannelCost = NewChannelCostClient(c.config)
	c.ChannelCostBatche = NewChannelCostBatcheClient(c.config)
	c.ChannelOption = NewChannelOptionClient(c.config)
	c.ChannelRecommend = NewChannelRecommendClient(c.config)
	c.ChannelVolumeFactor = NewChannelVolumeFactorClient(c.config)
	c.Country = NewCountryClient(c.config)
	c.CountryZone = NewCountryZoneClient(c.config)
	c.CourierOrder = NewCourierOrderClient(c.config)
	c.CustomerConfig = NewCustomerConfigClient(c.config)
	c.Inbound = NewInboundClient(c.config)
	c.InboundItem = NewInboundItemClient(c.config)
	c.Inventory = NewInventoryClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderHoldReason = NewOrderHoldReasonClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.OrderTaxation = NewOrderTaxationClient(c.config)
	c.PickupOrder = NewPickupOrderClient(c.config)
	c.PickupOrderItem = NewPickupOrderItemClient(c.config)
	c.PlatformProduct = NewPlatformProductClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductMapping = NewProductMappingClient(c.config)
	c.Sequence = NewSequenceClient(c.config)
	c.Store = NewStoreClient(c.config)
	c.TaskSchedule = NewTaskScheduleClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.TrackMapping = NewTrackMappingClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.TransactionDetail = NewTransactionDetailClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserReferral = NewUserReferralClient(c.config)
	c.ValueAddedTax = NewValueAddedTaxClient(c.config)
	c.Warehouse = NewWarehouseClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("gen: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("gen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Announcements:       NewAnnouncementsClient(cfg),
		Attribute:           NewAttributeClient(cfg),
		Channel:             NewChannelClient(cfg),
		ChannelCost:         NewChannelCostClient(cfg),
		ChannelCostBatche:   NewChannelCostBatcheClient(cfg),
		ChannelOption:       NewChannelOptionClient(cfg),
		ChannelRecommend:    NewChannelRecommendClient(cfg),
		ChannelVolumeFactor: NewChannelVolumeFactorClient(cfg),
		Country:             NewCountryClient(cfg),
		CountryZone:         NewCountryZoneClient(cfg),
		CourierOrder:        NewCourierOrderClient(cfg),
		CustomerConfig:      NewCustomerConfigClient(cfg),
		Inbound:             NewInboundClient(cfg),
		InboundItem:         NewInboundItemClient(cfg),
		Inventory:           NewInventoryClient(cfg),
		Order:               NewOrderClient(cfg),
		OrderHoldReason:     NewOrderHoldReasonClient(cfg),
		OrderItem:           NewOrderItemClient(cfg),
		OrderTaxation:       NewOrderTaxationClient(cfg),
		PickupOrder:         NewPickupOrderClient(cfg),
		PickupOrderItem:     NewPickupOrderItemClient(cfg),
		PlatformProduct:     NewPlatformProductClient(cfg),
		Product:             NewProductClient(cfg),
		ProductMapping:      NewProductMappingClient(cfg),
		Sequence:            NewSequenceClient(cfg),
		Store:               NewStoreClient(cfg),
		TaskSchedule:        NewTaskScheduleClient(cfg),
		Tenant:              NewTenantClient(cfg),
		Token:               NewTokenClient(cfg),
		TrackMapping:        NewTrackMappingClient(cfg),
		Transaction:         NewTransactionClient(cfg),
		TransactionDetail:   NewTransactionDetailClient(cfg),
		User:                NewUserClient(cfg),
		UserReferral:        NewUserReferralClient(cfg),
		ValueAddedTax:       NewValueAddedTaxClient(cfg),
		Warehouse:           NewWarehouseClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Announcements:       NewAnnouncementsClient(cfg),
		Attribute:           NewAttributeClient(cfg),
		Channel:             NewChannelClient(cfg),
		ChannelCost:         NewChannelCostClient(cfg),
		ChannelCostBatche:   NewChannelCostBatcheClient(cfg),
		ChannelOption:       NewChannelOptionClient(cfg),
		ChannelRecommend:    NewChannelRecommendClient(cfg),
		ChannelVolumeFactor: NewChannelVolumeFactorClient(cfg),
		Country:             NewCountryClient(cfg),
		CountryZone:         NewCountryZoneClient(cfg),
		CourierOrder:        NewCourierOrderClient(cfg),
		CustomerConfig:      NewCustomerConfigClient(cfg),
		Inbound:             NewInboundClient(cfg),
		InboundItem:         NewInboundItemClient(cfg),
		Inventory:           NewInventoryClient(cfg),
		Order:               NewOrderClient(cfg),
		OrderHoldReason:     NewOrderHoldReasonClient(cfg),
		OrderItem:           NewOrderItemClient(cfg),
		OrderTaxation:       NewOrderTaxationClient(cfg),
		PickupOrder:         NewPickupOrderClient(cfg),
		PickupOrderItem:     NewPickupOrderItemClient(cfg),
		PlatformProduct:     NewPlatformProductClient(cfg),
		Product:             NewProductClient(cfg),
		ProductMapping:      NewProductMappingClient(cfg),
		Sequence:            NewSequenceClient(cfg),
		Store:               NewStoreClient(cfg),
		TaskSchedule:        NewTaskScheduleClient(cfg),
		Tenant:              NewTenantClient(cfg),
		Token:               NewTokenClient(cfg),
		TrackMapping:        NewTrackMappingClient(cfg),
		Transaction:         NewTransactionClient(cfg),
		TransactionDetail:   NewTransactionDetailClient(cfg),
		User:                NewUserClient(cfg),
		UserReferral:        NewUserReferralClient(cfg),
		ValueAddedTax:       NewValueAddedTaxClient(cfg),
		Warehouse:           NewWarehouseClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Announcements.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Announcements.Use(hooks...)
	c.Attribute.Use(hooks...)
	c.Channel.Use(hooks...)
	c.ChannelCost.Use(hooks...)
	c.ChannelCostBatche.Use(hooks...)
	c.ChannelOption.Use(hooks...)
	c.ChannelRecommend.Use(hooks...)
	c.ChannelVolumeFactor.Use(hooks...)
	c.Country.Use(hooks...)
	c.CountryZone.Use(hooks...)
	c.CourierOrder.Use(hooks...)
	c.CustomerConfig.Use(hooks...)
	c.Inbound.Use(hooks...)
	c.InboundItem.Use(hooks...)
	c.Inventory.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderHoldReason.Use(hooks...)
	c.OrderItem.Use(hooks...)
	c.OrderTaxation.Use(hooks...)
	c.PickupOrder.Use(hooks...)
	c.PickupOrderItem.Use(hooks...)
	c.PlatformProduct.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductMapping.Use(hooks...)
	c.Sequence.Use(hooks...)
	c.Store.Use(hooks...)
	c.TaskSchedule.Use(hooks...)
	c.Tenant.Use(hooks...)
	c.Token.Use(hooks...)
	c.TrackMapping.Use(hooks...)
	c.Transaction.Use(hooks...)
	c.TransactionDetail.Use(hooks...)
	c.User.Use(hooks...)
	c.UserReferral.Use(hooks...)
	c.ValueAddedTax.Use(hooks...)
	c.Warehouse.Use(hooks...)
}

// AnnouncementsClient is a client for the Announcements schema.
type AnnouncementsClient struct {
	config
}

// NewAnnouncementsClient returns a client for the Announcements from the given config.
func NewAnnouncementsClient(c config) *AnnouncementsClient {
	return &AnnouncementsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `announcements.Hooks(f(g(h())))`.
func (c *AnnouncementsClient) Use(hooks ...Hook) {
	c.hooks.Announcements = append(c.hooks.Announcements, hooks...)
}

// Create returns a builder for creating a Announcements entity.
func (c *AnnouncementsClient) Create() *AnnouncementsCreate {
	mutation := newAnnouncementsMutation(c.config, OpCreate)
	return &AnnouncementsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Announcements entities.
func (c *AnnouncementsClient) CreateBulk(builders ...*AnnouncementsCreate) *AnnouncementsCreateBulk {
	return &AnnouncementsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Announcements.
func (c *AnnouncementsClient) Update() *AnnouncementsUpdate {
	mutation := newAnnouncementsMutation(c.config, OpUpdate)
	return &AnnouncementsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnouncementsClient) UpdateOne(a *Announcements) *AnnouncementsUpdateOne {
	mutation := newAnnouncementsMutation(c.config, OpUpdateOne, withAnnouncements(a))
	return &AnnouncementsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnouncementsClient) UpdateOneID(id int64) *AnnouncementsUpdateOne {
	mutation := newAnnouncementsMutation(c.config, OpUpdateOne, withAnnouncementsID(id))
	return &AnnouncementsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Announcements.
func (c *AnnouncementsClient) Delete() *AnnouncementsDelete {
	mutation := newAnnouncementsMutation(c.config, OpDelete)
	return &AnnouncementsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnnouncementsClient) DeleteOne(a *Announcements) *AnnouncementsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnnouncementsClient) DeleteOneID(id int64) *AnnouncementsDeleteOne {
	builder := c.Delete().Where(announcements.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnouncementsDeleteOne{builder}
}

// Query returns a query builder for Announcements.
func (c *AnnouncementsClient) Query() *AnnouncementsQuery {
	return &AnnouncementsQuery{
		config: c.config,
	}
}

// Get returns a Announcements entity by its id.
func (c *AnnouncementsClient) Get(ctx context.Context, id int64) (*Announcements, error) {
	return c.Query().Where(announcements.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnouncementsClient) GetX(ctx context.Context, id int64) *Announcements {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Announcements.
func (c *AnnouncementsClient) QueryUsers(a *Announcements) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(announcements.Table, announcements.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, announcements.UsersTable, announcements.UsersColumn),
		)
		schemaConfig := a.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Announcements
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnnouncementsClient) Hooks() []Hook {
	return c.hooks.Announcements
}

// AttributeClient is a client for the Attribute schema.
type AttributeClient struct {
	config
}

// NewAttributeClient returns a client for the Attribute from the given config.
func NewAttributeClient(c config) *AttributeClient {
	return &AttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attribute.Hooks(f(g(h())))`.
func (c *AttributeClient) Use(hooks ...Hook) {
	c.hooks.Attribute = append(c.hooks.Attribute, hooks...)
}

// Create returns a builder for creating a Attribute entity.
func (c *AttributeClient) Create() *AttributeCreate {
	mutation := newAttributeMutation(c.config, OpCreate)
	return &AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attribute entities.
func (c *AttributeClient) CreateBulk(builders ...*AttributeCreate) *AttributeCreateBulk {
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attribute.
func (c *AttributeClient) Update() *AttributeUpdate {
	mutation := newAttributeMutation(c.config, OpUpdate)
	return &AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeClient) UpdateOne(a *Attribute) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttribute(a))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeClient) UpdateOneID(id int64) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttributeID(id))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attribute.
func (c *AttributeClient) Delete() *AttributeDelete {
	mutation := newAttributeMutation(c.config, OpDelete)
	return &AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeClient) DeleteOne(a *Attribute) *AttributeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeClient) DeleteOneID(id int64) *AttributeDeleteOne {
	builder := c.Delete().Where(attribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeDeleteOne{builder}
}

// Query returns a query builder for Attribute.
func (c *AttributeClient) Query() *AttributeQuery {
	return &AttributeQuery{
		config: c.config,
	}
}

// Get returns a Attribute entity by its id.
func (c *AttributeClient) Get(ctx context.Context, id int64) (*Attribute, error) {
	return c.Query().Where(attribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeClient) GetX(ctx context.Context, id int64) *Attribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AttributeClient) Hooks() []Hook {
	return c.hooks.Attribute
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id int64) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id int64) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id int64) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id int64) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannelCosts queries the channel_costs edge of a Channel.
func (c *ChannelClient) QueryChannelCosts(ch *Channel) *ChannelCostQuery {
	query := &ChannelCostQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(channelcost.Table, channelcost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.ChannelCostsTable, channel.ChannelCostsColumn),
		)
		schemaConfig := ch.schemaConfig
		step.To.Schema = schemaConfig.ChannelCost
		step.Edge.Schema = schemaConfig.ChannelCost
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Channel.
func (c *ChannelClient) QueryOrders(ch *Channel) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.OrdersTable, channel.OrdersColumn),
		)
		schemaConfig := ch.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// ChannelCostClient is a client for the ChannelCost schema.
type ChannelCostClient struct {
	config
}

// NewChannelCostClient returns a client for the ChannelCost from the given config.
func NewChannelCostClient(c config) *ChannelCostClient {
	return &ChannelCostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelcost.Hooks(f(g(h())))`.
func (c *ChannelCostClient) Use(hooks ...Hook) {
	c.hooks.ChannelCost = append(c.hooks.ChannelCost, hooks...)
}

// Create returns a builder for creating a ChannelCost entity.
func (c *ChannelCostClient) Create() *ChannelCostCreate {
	mutation := newChannelCostMutation(c.config, OpCreate)
	return &ChannelCostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelCost entities.
func (c *ChannelCostClient) CreateBulk(builders ...*ChannelCostCreate) *ChannelCostCreateBulk {
	return &ChannelCostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelCost.
func (c *ChannelCostClient) Update() *ChannelCostUpdate {
	mutation := newChannelCostMutation(c.config, OpUpdate)
	return &ChannelCostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelCostClient) UpdateOne(cc *ChannelCost) *ChannelCostUpdateOne {
	mutation := newChannelCostMutation(c.config, OpUpdateOne, withChannelCost(cc))
	return &ChannelCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelCostClient) UpdateOneID(id int64) *ChannelCostUpdateOne {
	mutation := newChannelCostMutation(c.config, OpUpdateOne, withChannelCostID(id))
	return &ChannelCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelCost.
func (c *ChannelCostClient) Delete() *ChannelCostDelete {
	mutation := newChannelCostMutation(c.config, OpDelete)
	return &ChannelCostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelCostClient) DeleteOne(cc *ChannelCost) *ChannelCostDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelCostClient) DeleteOneID(id int64) *ChannelCostDeleteOne {
	builder := c.Delete().Where(channelcost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelCostDeleteOne{builder}
}

// Query returns a query builder for ChannelCost.
func (c *ChannelCostClient) Query() *ChannelCostQuery {
	return &ChannelCostQuery{
		config: c.config,
	}
}

// Get returns a ChannelCost entity by its id.
func (c *ChannelCostClient) Get(ctx context.Context, id int64) (*ChannelCost, error) {
	return c.Query().Where(channelcost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelCostClient) GetX(ctx context.Context, id int64) *ChannelCost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannels queries the channels edge of a ChannelCost.
func (c *ChannelCostClient) QueryChannels(cc *ChannelCost) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channelcost.Table, channelcost.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channelcost.ChannelsTable, channelcost.ChannelsColumn),
		)
		schemaConfig := cc.schemaConfig
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.ChannelCost
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelCostClient) Hooks() []Hook {
	return c.hooks.ChannelCost
}

// ChannelCostBatcheClient is a client for the ChannelCostBatche schema.
type ChannelCostBatcheClient struct {
	config
}

// NewChannelCostBatcheClient returns a client for the ChannelCostBatche from the given config.
func NewChannelCostBatcheClient(c config) *ChannelCostBatcheClient {
	return &ChannelCostBatcheClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelcostbatche.Hooks(f(g(h())))`.
func (c *ChannelCostBatcheClient) Use(hooks ...Hook) {
	c.hooks.ChannelCostBatche = append(c.hooks.ChannelCostBatche, hooks...)
}

// Create returns a builder for creating a ChannelCostBatche entity.
func (c *ChannelCostBatcheClient) Create() *ChannelCostBatcheCreate {
	mutation := newChannelCostBatcheMutation(c.config, OpCreate)
	return &ChannelCostBatcheCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelCostBatche entities.
func (c *ChannelCostBatcheClient) CreateBulk(builders ...*ChannelCostBatcheCreate) *ChannelCostBatcheCreateBulk {
	return &ChannelCostBatcheCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelCostBatche.
func (c *ChannelCostBatcheClient) Update() *ChannelCostBatcheUpdate {
	mutation := newChannelCostBatcheMutation(c.config, OpUpdate)
	return &ChannelCostBatcheUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelCostBatcheClient) UpdateOne(ccb *ChannelCostBatche) *ChannelCostBatcheUpdateOne {
	mutation := newChannelCostBatcheMutation(c.config, OpUpdateOne, withChannelCostBatche(ccb))
	return &ChannelCostBatcheUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelCostBatcheClient) UpdateOneID(id int64) *ChannelCostBatcheUpdateOne {
	mutation := newChannelCostBatcheMutation(c.config, OpUpdateOne, withChannelCostBatcheID(id))
	return &ChannelCostBatcheUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelCostBatche.
func (c *ChannelCostBatcheClient) Delete() *ChannelCostBatcheDelete {
	mutation := newChannelCostBatcheMutation(c.config, OpDelete)
	return &ChannelCostBatcheDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelCostBatcheClient) DeleteOne(ccb *ChannelCostBatche) *ChannelCostBatcheDeleteOne {
	return c.DeleteOneID(ccb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelCostBatcheClient) DeleteOneID(id int64) *ChannelCostBatcheDeleteOne {
	builder := c.Delete().Where(channelcostbatche.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelCostBatcheDeleteOne{builder}
}

// Query returns a query builder for ChannelCostBatche.
func (c *ChannelCostBatcheClient) Query() *ChannelCostBatcheQuery {
	return &ChannelCostBatcheQuery{
		config: c.config,
	}
}

// Get returns a ChannelCostBatche entity by its id.
func (c *ChannelCostBatcheClient) Get(ctx context.Context, id int64) (*ChannelCostBatche, error) {
	return c.Query().Where(channelcostbatche.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelCostBatcheClient) GetX(ctx context.Context, id int64) *ChannelCostBatche {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChannelCostBatcheClient) Hooks() []Hook {
	return c.hooks.ChannelCostBatche
}

// ChannelOptionClient is a client for the ChannelOption schema.
type ChannelOptionClient struct {
	config
}

// NewChannelOptionClient returns a client for the ChannelOption from the given config.
func NewChannelOptionClient(c config) *ChannelOptionClient {
	return &ChannelOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channeloption.Hooks(f(g(h())))`.
func (c *ChannelOptionClient) Use(hooks ...Hook) {
	c.hooks.ChannelOption = append(c.hooks.ChannelOption, hooks...)
}

// Create returns a builder for creating a ChannelOption entity.
func (c *ChannelOptionClient) Create() *ChannelOptionCreate {
	mutation := newChannelOptionMutation(c.config, OpCreate)
	return &ChannelOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelOption entities.
func (c *ChannelOptionClient) CreateBulk(builders ...*ChannelOptionCreate) *ChannelOptionCreateBulk {
	return &ChannelOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelOption.
func (c *ChannelOptionClient) Update() *ChannelOptionUpdate {
	mutation := newChannelOptionMutation(c.config, OpUpdate)
	return &ChannelOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelOptionClient) UpdateOne(co *ChannelOption) *ChannelOptionUpdateOne {
	mutation := newChannelOptionMutation(c.config, OpUpdateOne, withChannelOption(co))
	return &ChannelOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelOptionClient) UpdateOneID(id int64) *ChannelOptionUpdateOne {
	mutation := newChannelOptionMutation(c.config, OpUpdateOne, withChannelOptionID(id))
	return &ChannelOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelOption.
func (c *ChannelOptionClient) Delete() *ChannelOptionDelete {
	mutation := newChannelOptionMutation(c.config, OpDelete)
	return &ChannelOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelOptionClient) DeleteOne(co *ChannelOption) *ChannelOptionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelOptionClient) DeleteOneID(id int64) *ChannelOptionDeleteOne {
	builder := c.Delete().Where(channeloption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelOptionDeleteOne{builder}
}

// Query returns a query builder for ChannelOption.
func (c *ChannelOptionClient) Query() *ChannelOptionQuery {
	return &ChannelOptionQuery{
		config: c.config,
	}
}

// Get returns a ChannelOption entity by its id.
func (c *ChannelOptionClient) Get(ctx context.Context, id int64) (*ChannelOption, error) {
	return c.Query().Where(channeloption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelOptionClient) GetX(ctx context.Context, id int64) *ChannelOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChannelOptionClient) Hooks() []Hook {
	return c.hooks.ChannelOption
}

// ChannelRecommendClient is a client for the ChannelRecommend schema.
type ChannelRecommendClient struct {
	config
}

// NewChannelRecommendClient returns a client for the ChannelRecommend from the given config.
func NewChannelRecommendClient(c config) *ChannelRecommendClient {
	return &ChannelRecommendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelrecommend.Hooks(f(g(h())))`.
func (c *ChannelRecommendClient) Use(hooks ...Hook) {
	c.hooks.ChannelRecommend = append(c.hooks.ChannelRecommend, hooks...)
}

// Create returns a builder for creating a ChannelRecommend entity.
func (c *ChannelRecommendClient) Create() *ChannelRecommendCreate {
	mutation := newChannelRecommendMutation(c.config, OpCreate)
	return &ChannelRecommendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelRecommend entities.
func (c *ChannelRecommendClient) CreateBulk(builders ...*ChannelRecommendCreate) *ChannelRecommendCreateBulk {
	return &ChannelRecommendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelRecommend.
func (c *ChannelRecommendClient) Update() *ChannelRecommendUpdate {
	mutation := newChannelRecommendMutation(c.config, OpUpdate)
	return &ChannelRecommendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelRecommendClient) UpdateOne(cr *ChannelRecommend) *ChannelRecommendUpdateOne {
	mutation := newChannelRecommendMutation(c.config, OpUpdateOne, withChannelRecommend(cr))
	return &ChannelRecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelRecommendClient) UpdateOneID(id int64) *ChannelRecommendUpdateOne {
	mutation := newChannelRecommendMutation(c.config, OpUpdateOne, withChannelRecommendID(id))
	return &ChannelRecommendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelRecommend.
func (c *ChannelRecommendClient) Delete() *ChannelRecommendDelete {
	mutation := newChannelRecommendMutation(c.config, OpDelete)
	return &ChannelRecommendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelRecommendClient) DeleteOne(cr *ChannelRecommend) *ChannelRecommendDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelRecommendClient) DeleteOneID(id int64) *ChannelRecommendDeleteOne {
	builder := c.Delete().Where(channelrecommend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelRecommendDeleteOne{builder}
}

// Query returns a query builder for ChannelRecommend.
func (c *ChannelRecommendClient) Query() *ChannelRecommendQuery {
	return &ChannelRecommendQuery{
		config: c.config,
	}
}

// Get returns a ChannelRecommend entity by its id.
func (c *ChannelRecommendClient) Get(ctx context.Context, id int64) (*ChannelRecommend, error) {
	return c.Query().Where(channelrecommend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelRecommendClient) GetX(ctx context.Context, id int64) *ChannelRecommend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChannelRecommendClient) Hooks() []Hook {
	return c.hooks.ChannelRecommend
}

// ChannelVolumeFactorClient is a client for the ChannelVolumeFactor schema.
type ChannelVolumeFactorClient struct {
	config
}

// NewChannelVolumeFactorClient returns a client for the ChannelVolumeFactor from the given config.
func NewChannelVolumeFactorClient(c config) *ChannelVolumeFactorClient {
	return &ChannelVolumeFactorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channelvolumefactor.Hooks(f(g(h())))`.
func (c *ChannelVolumeFactorClient) Use(hooks ...Hook) {
	c.hooks.ChannelVolumeFactor = append(c.hooks.ChannelVolumeFactor, hooks...)
}

// Create returns a builder for creating a ChannelVolumeFactor entity.
func (c *ChannelVolumeFactorClient) Create() *ChannelVolumeFactorCreate {
	mutation := newChannelVolumeFactorMutation(c.config, OpCreate)
	return &ChannelVolumeFactorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChannelVolumeFactor entities.
func (c *ChannelVolumeFactorClient) CreateBulk(builders ...*ChannelVolumeFactorCreate) *ChannelVolumeFactorCreateBulk {
	return &ChannelVolumeFactorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChannelVolumeFactor.
func (c *ChannelVolumeFactorClient) Update() *ChannelVolumeFactorUpdate {
	mutation := newChannelVolumeFactorMutation(c.config, OpUpdate)
	return &ChannelVolumeFactorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelVolumeFactorClient) UpdateOne(cvf *ChannelVolumeFactor) *ChannelVolumeFactorUpdateOne {
	mutation := newChannelVolumeFactorMutation(c.config, OpUpdateOne, withChannelVolumeFactor(cvf))
	return &ChannelVolumeFactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelVolumeFactorClient) UpdateOneID(id int64) *ChannelVolumeFactorUpdateOne {
	mutation := newChannelVolumeFactorMutation(c.config, OpUpdateOne, withChannelVolumeFactorID(id))
	return &ChannelVolumeFactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChannelVolumeFactor.
func (c *ChannelVolumeFactorClient) Delete() *ChannelVolumeFactorDelete {
	mutation := newChannelVolumeFactorMutation(c.config, OpDelete)
	return &ChannelVolumeFactorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelVolumeFactorClient) DeleteOne(cvf *ChannelVolumeFactor) *ChannelVolumeFactorDeleteOne {
	return c.DeleteOneID(cvf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelVolumeFactorClient) DeleteOneID(id int64) *ChannelVolumeFactorDeleteOne {
	builder := c.Delete().Where(channelvolumefactor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelVolumeFactorDeleteOne{builder}
}

// Query returns a query builder for ChannelVolumeFactor.
func (c *ChannelVolumeFactorClient) Query() *ChannelVolumeFactorQuery {
	return &ChannelVolumeFactorQuery{
		config: c.config,
	}
}

// Get returns a ChannelVolumeFactor entity by its id.
func (c *ChannelVolumeFactorClient) Get(ctx context.Context, id int64) (*ChannelVolumeFactor, error) {
	return c.Query().Where(channelvolumefactor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelVolumeFactorClient) GetX(ctx context.Context, id int64) *ChannelVolumeFactor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChannelVolumeFactorClient) Hooks() []Hook {
	return c.hooks.ChannelVolumeFactor
}

// CountryClient is a client for the Country schema.
type CountryClient struct {
	config
}

// NewCountryClient returns a client for the Country from the given config.
func NewCountryClient(c config) *CountryClient {
	return &CountryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `country.Hooks(f(g(h())))`.
func (c *CountryClient) Use(hooks ...Hook) {
	c.hooks.Country = append(c.hooks.Country, hooks...)
}

// Create returns a builder for creating a Country entity.
func (c *CountryClient) Create() *CountryCreate {
	mutation := newCountryMutation(c.config, OpCreate)
	return &CountryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Country entities.
func (c *CountryClient) CreateBulk(builders ...*CountryCreate) *CountryCreateBulk {
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Country.
func (c *CountryClient) Update() *CountryUpdate {
	mutation := newCountryMutation(c.config, OpUpdate)
	return &CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryClient) UpdateOne(co *Country) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountry(co))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryClient) UpdateOneID(id int) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountryID(id))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Country.
func (c *CountryClient) Delete() *CountryDelete {
	mutation := newCountryMutation(c.config, OpDelete)
	return &CountryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryClient) DeleteOne(co *Country) *CountryDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CountryClient) DeleteOneID(id int) *CountryDeleteOne {
	builder := c.Delete().Where(country.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryDeleteOne{builder}
}

// Query returns a query builder for Country.
func (c *CountryClient) Query() *CountryQuery {
	return &CountryQuery{
		config: c.config,
	}
}

// Get returns a Country entity by its id.
func (c *CountryClient) Get(ctx context.Context, id int) (*Country, error) {
	return c.Query().Where(country.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryClient) GetX(ctx context.Context, id int) *Country {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CountryClient) Hooks() []Hook {
	return c.hooks.Country
}

// CountryZoneClient is a client for the CountryZone schema.
type CountryZoneClient struct {
	config
}

// NewCountryZoneClient returns a client for the CountryZone from the given config.
func NewCountryZoneClient(c config) *CountryZoneClient {
	return &CountryZoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `countryzone.Hooks(f(g(h())))`.
func (c *CountryZoneClient) Use(hooks ...Hook) {
	c.hooks.CountryZone = append(c.hooks.CountryZone, hooks...)
}

// Create returns a builder for creating a CountryZone entity.
func (c *CountryZoneClient) Create() *CountryZoneCreate {
	mutation := newCountryZoneMutation(c.config, OpCreate)
	return &CountryZoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CountryZone entities.
func (c *CountryZoneClient) CreateBulk(builders ...*CountryZoneCreate) *CountryZoneCreateBulk {
	return &CountryZoneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CountryZone.
func (c *CountryZoneClient) Update() *CountryZoneUpdate {
	mutation := newCountryZoneMutation(c.config, OpUpdate)
	return &CountryZoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryZoneClient) UpdateOne(cz *CountryZone) *CountryZoneUpdateOne {
	mutation := newCountryZoneMutation(c.config, OpUpdateOne, withCountryZone(cz))
	return &CountryZoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryZoneClient) UpdateOneID(id int) *CountryZoneUpdateOne {
	mutation := newCountryZoneMutation(c.config, OpUpdateOne, withCountryZoneID(id))
	return &CountryZoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CountryZone.
func (c *CountryZoneClient) Delete() *CountryZoneDelete {
	mutation := newCountryZoneMutation(c.config, OpDelete)
	return &CountryZoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryZoneClient) DeleteOne(cz *CountryZone) *CountryZoneDeleteOne {
	return c.DeleteOneID(cz.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CountryZoneClient) DeleteOneID(id int) *CountryZoneDeleteOne {
	builder := c.Delete().Where(countryzone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryZoneDeleteOne{builder}
}

// Query returns a query builder for CountryZone.
func (c *CountryZoneClient) Query() *CountryZoneQuery {
	return &CountryZoneQuery{
		config: c.config,
	}
}

// Get returns a CountryZone entity by its id.
func (c *CountryZoneClient) Get(ctx context.Context, id int) (*CountryZone, error) {
	return c.Query().Where(countryzone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryZoneClient) GetX(ctx context.Context, id int) *CountryZone {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CountryZoneClient) Hooks() []Hook {
	return c.hooks.CountryZone
}

// CourierOrderClient is a client for the CourierOrder schema.
type CourierOrderClient struct {
	config
}

// NewCourierOrderClient returns a client for the CourierOrder from the given config.
func NewCourierOrderClient(c config) *CourierOrderClient {
	return &CourierOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `courierorder.Hooks(f(g(h())))`.
func (c *CourierOrderClient) Use(hooks ...Hook) {
	c.hooks.CourierOrder = append(c.hooks.CourierOrder, hooks...)
}

// Create returns a builder for creating a CourierOrder entity.
func (c *CourierOrderClient) Create() *CourierOrderCreate {
	mutation := newCourierOrderMutation(c.config, OpCreate)
	return &CourierOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourierOrder entities.
func (c *CourierOrderClient) CreateBulk(builders ...*CourierOrderCreate) *CourierOrderCreateBulk {
	return &CourierOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourierOrder.
func (c *CourierOrderClient) Update() *CourierOrderUpdate {
	mutation := newCourierOrderMutation(c.config, OpUpdate)
	return &CourierOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourierOrderClient) UpdateOne(co *CourierOrder) *CourierOrderUpdateOne {
	mutation := newCourierOrderMutation(c.config, OpUpdateOne, withCourierOrder(co))
	return &CourierOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourierOrderClient) UpdateOneID(id int64) *CourierOrderUpdateOne {
	mutation := newCourierOrderMutation(c.config, OpUpdateOne, withCourierOrderID(id))
	return &CourierOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourierOrder.
func (c *CourierOrderClient) Delete() *CourierOrderDelete {
	mutation := newCourierOrderMutation(c.config, OpDelete)
	return &CourierOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourierOrderClient) DeleteOne(co *CourierOrder) *CourierOrderDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourierOrderClient) DeleteOneID(id int64) *CourierOrderDeleteOne {
	builder := c.Delete().Where(courierorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourierOrderDeleteOne{builder}
}

// Query returns a query builder for CourierOrder.
func (c *CourierOrderClient) Query() *CourierOrderQuery {
	return &CourierOrderQuery{
		config: c.config,
	}
}

// Get returns a CourierOrder entity by its id.
func (c *CourierOrderClient) Get(ctx context.Context, id int64) (*CourierOrder, error) {
	return c.Query().Where(courierorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourierOrderClient) GetX(ctx context.Context, id int64) *CourierOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CourierOrderClient) Hooks() []Hook {
	return c.hooks.CourierOrder
}

// CustomerConfigClient is a client for the CustomerConfig schema.
type CustomerConfigClient struct {
	config
}

// NewCustomerConfigClient returns a client for the CustomerConfig from the given config.
func NewCustomerConfigClient(c config) *CustomerConfigClient {
	return &CustomerConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customerconfig.Hooks(f(g(h())))`.
func (c *CustomerConfigClient) Use(hooks ...Hook) {
	c.hooks.CustomerConfig = append(c.hooks.CustomerConfig, hooks...)
}

// Create returns a builder for creating a CustomerConfig entity.
func (c *CustomerConfigClient) Create() *CustomerConfigCreate {
	mutation := newCustomerConfigMutation(c.config, OpCreate)
	return &CustomerConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerConfig entities.
func (c *CustomerConfigClient) CreateBulk(builders ...*CustomerConfigCreate) *CustomerConfigCreateBulk {
	return &CustomerConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerConfig.
func (c *CustomerConfigClient) Update() *CustomerConfigUpdate {
	mutation := newCustomerConfigMutation(c.config, OpUpdate)
	return &CustomerConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerConfigClient) UpdateOne(cc *CustomerConfig) *CustomerConfigUpdateOne {
	mutation := newCustomerConfigMutation(c.config, OpUpdateOne, withCustomerConfig(cc))
	return &CustomerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerConfigClient) UpdateOneID(id int64) *CustomerConfigUpdateOne {
	mutation := newCustomerConfigMutation(c.config, OpUpdateOne, withCustomerConfigID(id))
	return &CustomerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerConfig.
func (c *CustomerConfigClient) Delete() *CustomerConfigDelete {
	mutation := newCustomerConfigMutation(c.config, OpDelete)
	return &CustomerConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerConfigClient) DeleteOne(cc *CustomerConfig) *CustomerConfigDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerConfigClient) DeleteOneID(id int64) *CustomerConfigDeleteOne {
	builder := c.Delete().Where(customerconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerConfigDeleteOne{builder}
}

// Query returns a query builder for CustomerConfig.
func (c *CustomerConfigClient) Query() *CustomerConfigQuery {
	return &CustomerConfigQuery{
		config: c.config,
	}
}

// Get returns a CustomerConfig entity by its id.
func (c *CustomerConfigClient) Get(ctx context.Context, id int64) (*CustomerConfig, error) {
	return c.Query().Where(customerconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerConfigClient) GetX(ctx context.Context, id int64) *CustomerConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CustomerConfig.
func (c *CustomerConfigClient) QueryTenant(cc *CustomerConfig) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customerconfig.Table, customerconfig.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customerconfig.TenantTable, customerconfig.TenantColumn),
		)
		schemaConfig := cc.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.CustomerConfig
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerConfigClient) Hooks() []Hook {
	hooks := c.hooks.CustomerConfig
	return append(hooks[:len(hooks):len(hooks)], customerconfig.Hooks[:]...)
}

// InboundClient is a client for the Inbound schema.
type InboundClient struct {
	config
}

// NewInboundClient returns a client for the Inbound from the given config.
func NewInboundClient(c config) *InboundClient {
	return &InboundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inbound.Hooks(f(g(h())))`.
func (c *InboundClient) Use(hooks ...Hook) {
	c.hooks.Inbound = append(c.hooks.Inbound, hooks...)
}

// Create returns a builder for creating a Inbound entity.
func (c *InboundClient) Create() *InboundCreate {
	mutation := newInboundMutation(c.config, OpCreate)
	return &InboundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inbound entities.
func (c *InboundClient) CreateBulk(builders ...*InboundCreate) *InboundCreateBulk {
	return &InboundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inbound.
func (c *InboundClient) Update() *InboundUpdate {
	mutation := newInboundMutation(c.config, OpUpdate)
	return &InboundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InboundClient) UpdateOne(i *Inbound) *InboundUpdateOne {
	mutation := newInboundMutation(c.config, OpUpdateOne, withInbound(i))
	return &InboundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InboundClient) UpdateOneID(id int64) *InboundUpdateOne {
	mutation := newInboundMutation(c.config, OpUpdateOne, withInboundID(id))
	return &InboundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inbound.
func (c *InboundClient) Delete() *InboundDelete {
	mutation := newInboundMutation(c.config, OpDelete)
	return &InboundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InboundClient) DeleteOne(i *Inbound) *InboundDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InboundClient) DeleteOneID(id int64) *InboundDeleteOne {
	builder := c.Delete().Where(inbound.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InboundDeleteOne{builder}
}

// Query returns a query builder for Inbound.
func (c *InboundClient) Query() *InboundQuery {
	return &InboundQuery{
		config: c.config,
	}
}

// Get returns a Inbound entity by its id.
func (c *InboundClient) Get(ctx context.Context, id int64) (*Inbound, error) {
	return c.Query().Where(inbound.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InboundClient) GetX(ctx context.Context, id int64) *Inbound {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Inbound.
func (c *InboundClient) QueryTenant(i *Inbound) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inbound.Table, inbound.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inbound.TenantTable, inbound.TenantColumn),
		)
		schemaConfig := i.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inbound
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInboundItems queries the inbound_items edge of a Inbound.
func (c *InboundClient) QueryInboundItems(i *Inbound) *InboundItemQuery {
	query := &InboundItemQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inbound.Table, inbound.FieldID, id),
			sqlgraph.To(inbounditem.Table, inbounditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inbound.InboundItemsTable, inbound.InboundItemsColumn),
		)
		schemaConfig := i.schemaConfig
		step.To.Schema = schemaConfig.InboundItem
		step.Edge.Schema = schemaConfig.InboundItem
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InboundClient) Hooks() []Hook {
	hooks := c.hooks.Inbound
	return append(hooks[:len(hooks):len(hooks)], inbound.Hooks[:]...)
}

// InboundItemClient is a client for the InboundItem schema.
type InboundItemClient struct {
	config
}

// NewInboundItemClient returns a client for the InboundItem from the given config.
func NewInboundItemClient(c config) *InboundItemClient {
	return &InboundItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inbounditem.Hooks(f(g(h())))`.
func (c *InboundItemClient) Use(hooks ...Hook) {
	c.hooks.InboundItem = append(c.hooks.InboundItem, hooks...)
}

// Create returns a builder for creating a InboundItem entity.
func (c *InboundItemClient) Create() *InboundItemCreate {
	mutation := newInboundItemMutation(c.config, OpCreate)
	return &InboundItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InboundItem entities.
func (c *InboundItemClient) CreateBulk(builders ...*InboundItemCreate) *InboundItemCreateBulk {
	return &InboundItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InboundItem.
func (c *InboundItemClient) Update() *InboundItemUpdate {
	mutation := newInboundItemMutation(c.config, OpUpdate)
	return &InboundItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InboundItemClient) UpdateOne(ii *InboundItem) *InboundItemUpdateOne {
	mutation := newInboundItemMutation(c.config, OpUpdateOne, withInboundItem(ii))
	return &InboundItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InboundItemClient) UpdateOneID(id int64) *InboundItemUpdateOne {
	mutation := newInboundItemMutation(c.config, OpUpdateOne, withInboundItemID(id))
	return &InboundItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InboundItem.
func (c *InboundItemClient) Delete() *InboundItemDelete {
	mutation := newInboundItemMutation(c.config, OpDelete)
	return &InboundItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InboundItemClient) DeleteOne(ii *InboundItem) *InboundItemDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InboundItemClient) DeleteOneID(id int64) *InboundItemDeleteOne {
	builder := c.Delete().Where(inbounditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InboundItemDeleteOne{builder}
}

// Query returns a query builder for InboundItem.
func (c *InboundItemClient) Query() *InboundItemQuery {
	return &InboundItemQuery{
		config: c.config,
	}
}

// Get returns a InboundItem entity by its id.
func (c *InboundItemClient) Get(ctx context.Context, id int64) (*InboundItem, error) {
	return c.Query().Where(inbounditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InboundItemClient) GetX(ctx context.Context, id int64) *InboundItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a InboundItem.
func (c *InboundItemClient) QueryTenant(ii *InboundItem) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inbounditem.Table, inbounditem.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inbounditem.TenantTable, inbounditem.TenantColumn),
		)
		schemaConfig := ii.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.InboundItem
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInbounds queries the inbounds edge of a InboundItem.
func (c *InboundItemClient) QueryInbounds(ii *InboundItem) *InboundQuery {
	query := &InboundQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inbounditem.Table, inbounditem.FieldID, id),
			sqlgraph.To(inbound.Table, inbound.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inbounditem.InboundsTable, inbounditem.InboundsColumn),
		)
		schemaConfig := ii.schemaConfig
		step.To.Schema = schemaConfig.Inbound
		step.Edge.Schema = schemaConfig.InboundItem
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InboundItemClient) Hooks() []Hook {
	hooks := c.hooks.InboundItem
	return append(hooks[:len(hooks):len(hooks)], inbounditem.Hooks[:]...)
}

// InventoryClient is a client for the Inventory schema.
type InventoryClient struct {
	config
}

// NewInventoryClient returns a client for the Inventory from the given config.
func NewInventoryClient(c config) *InventoryClient {
	return &InventoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventory.Hooks(f(g(h())))`.
func (c *InventoryClient) Use(hooks ...Hook) {
	c.hooks.Inventory = append(c.hooks.Inventory, hooks...)
}

// Create returns a builder for creating a Inventory entity.
func (c *InventoryClient) Create() *InventoryCreate {
	mutation := newInventoryMutation(c.config, OpCreate)
	return &InventoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inventory entities.
func (c *InventoryClient) CreateBulk(builders ...*InventoryCreate) *InventoryCreateBulk {
	return &InventoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inventory.
func (c *InventoryClient) Update() *InventoryUpdate {
	mutation := newInventoryMutation(c.config, OpUpdate)
	return &InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryClient) UpdateOne(i *Inventory) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(i))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryClient) UpdateOneID(id int64) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventoryID(id))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inventory.
func (c *InventoryClient) Delete() *InventoryDelete {
	mutation := newInventoryMutation(c.config, OpDelete)
	return &InventoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventoryClient) DeleteOne(i *Inventory) *InventoryDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventoryClient) DeleteOneID(id int64) *InventoryDeleteOne {
	builder := c.Delete().Where(inventory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryDeleteOne{builder}
}

// Query returns a query builder for Inventory.
func (c *InventoryClient) Query() *InventoryQuery {
	return &InventoryQuery{
		config: c.config,
	}
}

// Get returns a Inventory entity by its id.
func (c *InventoryClient) Get(ctx context.Context, id int64) (*Inventory, error) {
	return c.Query().Where(inventory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryClient) GetX(ctx context.Context, id int64) *Inventory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Inventory.
func (c *InventoryClient) QueryTenant(i *Inventory) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventory.Table, inventory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inventory.TenantTable, inventory.TenantColumn),
		)
		schemaConfig := i.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Inventory
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Inventory.
func (c *InventoryClient) QueryProducts(i *Inventory) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventory.Table, inventory.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventory.ProductsTable, inventory.ProductsColumn),
		)
		schemaConfig := i.schemaConfig
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.Inventory
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventoryClient) Hooks() []Hook {
	hooks := c.hooks.Inventory
	return append(hooks[:len(hooks):len(hooks)], inventory.Hooks[:]...)
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Order.
func (c *OrderClient) QueryTenant(o *Order) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.TenantTable, order.TenantColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a Order.
func (c *OrderClient) QueryOrderItems(o *Order) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderItemsTable, order.OrderItemsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OrderItem
		step.Edge.Schema = schemaConfig.OrderItem
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHoldReasons queries the order_hold_reasons edge of a Order.
func (c *OrderClient) QueryOrderHoldReasons(o *Order) *OrderHoldReasonQuery {
	query := &OrderHoldReasonQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderholdreason.Table, orderholdreason.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderHoldReasonsTable, order.OrderHoldReasonsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OrderHoldReason
		step.Edge.Schema = schemaConfig.OrderHoldReason
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderTaxations queries the order_taxations edge of a Order.
func (c *OrderClient) QueryOrderTaxations(o *Order) *OrderTaxationQuery {
	query := &OrderTaxationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ordertaxation.Table, ordertaxation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderTaxationsTable, order.OrderTaxationsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OrderTaxation
		step.Edge.Schema = schemaConfig.OrderTaxation
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a Order.
func (c *OrderClient) QueryStores(o *Order) *StoreQuery {
	query := &StoreQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.StoresTable, order.StoresColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWarehouses queries the warehouses edge of a Order.
func (c *OrderClient) QueryWarehouses(o *Order) *WarehouseQuery {
	query := &WarehouseQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.WarehousesTable, order.WarehousesColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Warehouse
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannels queries the channels edge of a Order.
func (c *OrderClient) QueryChannels(o *Order) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ChannelsTable, order.ChannelsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Channel
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrackMappings queries the track_mappings edge of a Order.
func (c *OrderClient) QueryTrackMappings(o *Order) *TrackMappingQuery {
	query := &TrackMappingQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(trackmapping.Table, trackmapping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.TrackMappingsTable, order.TrackMappingsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.TrackMapping
		step.Edge.Schema = schemaConfig.TrackMapping
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// OrderHoldReasonClient is a client for the OrderHoldReason schema.
type OrderHoldReasonClient struct {
	config
}

// NewOrderHoldReasonClient returns a client for the OrderHoldReason from the given config.
func NewOrderHoldReasonClient(c config) *OrderHoldReasonClient {
	return &OrderHoldReasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderholdreason.Hooks(f(g(h())))`.
func (c *OrderHoldReasonClient) Use(hooks ...Hook) {
	c.hooks.OrderHoldReason = append(c.hooks.OrderHoldReason, hooks...)
}

// Create returns a builder for creating a OrderHoldReason entity.
func (c *OrderHoldReasonClient) Create() *OrderHoldReasonCreate {
	mutation := newOrderHoldReasonMutation(c.config, OpCreate)
	return &OrderHoldReasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHoldReason entities.
func (c *OrderHoldReasonClient) CreateBulk(builders ...*OrderHoldReasonCreate) *OrderHoldReasonCreateBulk {
	return &OrderHoldReasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHoldReason.
func (c *OrderHoldReasonClient) Update() *OrderHoldReasonUpdate {
	mutation := newOrderHoldReasonMutation(c.config, OpUpdate)
	return &OrderHoldReasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHoldReasonClient) UpdateOne(ohr *OrderHoldReason) *OrderHoldReasonUpdateOne {
	mutation := newOrderHoldReasonMutation(c.config, OpUpdateOne, withOrderHoldReason(ohr))
	return &OrderHoldReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHoldReasonClient) UpdateOneID(id int64) *OrderHoldReasonUpdateOne {
	mutation := newOrderHoldReasonMutation(c.config, OpUpdateOne, withOrderHoldReasonID(id))
	return &OrderHoldReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHoldReason.
func (c *OrderHoldReasonClient) Delete() *OrderHoldReasonDelete {
	mutation := newOrderHoldReasonMutation(c.config, OpDelete)
	return &OrderHoldReasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderHoldReasonClient) DeleteOne(ohr *OrderHoldReason) *OrderHoldReasonDeleteOne {
	return c.DeleteOneID(ohr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderHoldReasonClient) DeleteOneID(id int64) *OrderHoldReasonDeleteOne {
	builder := c.Delete().Where(orderholdreason.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHoldReasonDeleteOne{builder}
}

// Query returns a query builder for OrderHoldReason.
func (c *OrderHoldReasonClient) Query() *OrderHoldReasonQuery {
	return &OrderHoldReasonQuery{
		config: c.config,
	}
}

// Get returns a OrderHoldReason entity by its id.
func (c *OrderHoldReasonClient) Get(ctx context.Context, id int64) (*OrderHoldReason, error) {
	return c.Query().Where(orderholdreason.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHoldReasonClient) GetX(ctx context.Context, id int64) *OrderHoldReason {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a OrderHoldReason.
func (c *OrderHoldReasonClient) QueryOrders(ohr *OrderHoldReason) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ohr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderholdreason.Table, orderholdreason.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderholdreason.OrdersTable, orderholdreason.OrdersColumn),
		)
		schemaConfig := ohr.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderHoldReason
		fromV = sqlgraph.Neighbors(ohr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHoldReasonClient) Hooks() []Hook {
	return c.hooks.OrderHoldReason
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Create returns a builder for creating a OrderItem entity.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(oi *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(oi))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id int64) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderItemClient) DeleteOne(oi *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderItemClient) DeleteOneID(id int64) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id int64) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id int64) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a OrderItem.
func (c *OrderItemClient) QueryTenant(oi *OrderItem) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.TenantTable, orderitem.TenantColumn),
		)
		schemaConfig := oi.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.OrderItem
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a OrderItem.
func (c *OrderItemClient) QueryOrder(oi *OrderItem) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.OrderTable, orderitem.OrderColumn),
		)
		schemaConfig := oi.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderItem
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	hooks := c.hooks.OrderItem
	return append(hooks[:len(hooks):len(hooks)], orderitem.Hooks[:]...)
}

// OrderTaxationClient is a client for the OrderTaxation schema.
type OrderTaxationClient struct {
	config
}

// NewOrderTaxationClient returns a client for the OrderTaxation from the given config.
func NewOrderTaxationClient(c config) *OrderTaxationClient {
	return &OrderTaxationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordertaxation.Hooks(f(g(h())))`.
func (c *OrderTaxationClient) Use(hooks ...Hook) {
	c.hooks.OrderTaxation = append(c.hooks.OrderTaxation, hooks...)
}

// Create returns a builder for creating a OrderTaxation entity.
func (c *OrderTaxationClient) Create() *OrderTaxationCreate {
	mutation := newOrderTaxationMutation(c.config, OpCreate)
	return &OrderTaxationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderTaxation entities.
func (c *OrderTaxationClient) CreateBulk(builders ...*OrderTaxationCreate) *OrderTaxationCreateBulk {
	return &OrderTaxationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderTaxation.
func (c *OrderTaxationClient) Update() *OrderTaxationUpdate {
	mutation := newOrderTaxationMutation(c.config, OpUpdate)
	return &OrderTaxationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderTaxationClient) UpdateOne(ot *OrderTaxation) *OrderTaxationUpdateOne {
	mutation := newOrderTaxationMutation(c.config, OpUpdateOne, withOrderTaxation(ot))
	return &OrderTaxationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderTaxationClient) UpdateOneID(id int64) *OrderTaxationUpdateOne {
	mutation := newOrderTaxationMutation(c.config, OpUpdateOne, withOrderTaxationID(id))
	return &OrderTaxationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderTaxation.
func (c *OrderTaxationClient) Delete() *OrderTaxationDelete {
	mutation := newOrderTaxationMutation(c.config, OpDelete)
	return &OrderTaxationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderTaxationClient) DeleteOne(ot *OrderTaxation) *OrderTaxationDeleteOne {
	return c.DeleteOneID(ot.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderTaxationClient) DeleteOneID(id int64) *OrderTaxationDeleteOne {
	builder := c.Delete().Where(ordertaxation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderTaxationDeleteOne{builder}
}

// Query returns a query builder for OrderTaxation.
func (c *OrderTaxationClient) Query() *OrderTaxationQuery {
	return &OrderTaxationQuery{
		config: c.config,
	}
}

// Get returns a OrderTaxation entity by its id.
func (c *OrderTaxationClient) Get(ctx context.Context, id int64) (*OrderTaxation, error) {
	return c.Query().Where(ordertaxation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderTaxationClient) GetX(ctx context.Context, id int64) *OrderTaxation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a OrderTaxation.
func (c *OrderTaxationClient) QueryOrders(ot *OrderTaxation) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordertaxation.Table, ordertaxation.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordertaxation.OrdersTable, ordertaxation.OrdersColumn),
		)
		schemaConfig := ot.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderTaxation
		fromV = sqlgraph.Neighbors(ot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderTaxationClient) Hooks() []Hook {
	return c.hooks.OrderTaxation
}

// PickupOrderClient is a client for the PickupOrder schema.
type PickupOrderClient struct {
	config
}

// NewPickupOrderClient returns a client for the PickupOrder from the given config.
func NewPickupOrderClient(c config) *PickupOrderClient {
	return &PickupOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pickuporder.Hooks(f(g(h())))`.
func (c *PickupOrderClient) Use(hooks ...Hook) {
	c.hooks.PickupOrder = append(c.hooks.PickupOrder, hooks...)
}

// Create returns a builder for creating a PickupOrder entity.
func (c *PickupOrderClient) Create() *PickupOrderCreate {
	mutation := newPickupOrderMutation(c.config, OpCreate)
	return &PickupOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PickupOrder entities.
func (c *PickupOrderClient) CreateBulk(builders ...*PickupOrderCreate) *PickupOrderCreateBulk {
	return &PickupOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PickupOrder.
func (c *PickupOrderClient) Update() *PickupOrderUpdate {
	mutation := newPickupOrderMutation(c.config, OpUpdate)
	return &PickupOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PickupOrderClient) UpdateOne(po *PickupOrder) *PickupOrderUpdateOne {
	mutation := newPickupOrderMutation(c.config, OpUpdateOne, withPickupOrder(po))
	return &PickupOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PickupOrderClient) UpdateOneID(id int64) *PickupOrderUpdateOne {
	mutation := newPickupOrderMutation(c.config, OpUpdateOne, withPickupOrderID(id))
	return &PickupOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PickupOrder.
func (c *PickupOrderClient) Delete() *PickupOrderDelete {
	mutation := newPickupOrderMutation(c.config, OpDelete)
	return &PickupOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PickupOrderClient) DeleteOne(po *PickupOrder) *PickupOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PickupOrderClient) DeleteOneID(id int64) *PickupOrderDeleteOne {
	builder := c.Delete().Where(pickuporder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PickupOrderDeleteOne{builder}
}

// Query returns a query builder for PickupOrder.
func (c *PickupOrderClient) Query() *PickupOrderQuery {
	return &PickupOrderQuery{
		config: c.config,
	}
}

// Get returns a PickupOrder entity by its id.
func (c *PickupOrderClient) Get(ctx context.Context, id int64) (*PickupOrder, error) {
	return c.Query().Where(pickuporder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PickupOrderClient) GetX(ctx context.Context, id int64) *PickupOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PickupOrderClient) Hooks() []Hook {
	return c.hooks.PickupOrder
}

// PickupOrderItemClient is a client for the PickupOrderItem schema.
type PickupOrderItemClient struct {
	config
}

// NewPickupOrderItemClient returns a client for the PickupOrderItem from the given config.
func NewPickupOrderItemClient(c config) *PickupOrderItemClient {
	return &PickupOrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pickuporderitem.Hooks(f(g(h())))`.
func (c *PickupOrderItemClient) Use(hooks ...Hook) {
	c.hooks.PickupOrderItem = append(c.hooks.PickupOrderItem, hooks...)
}

// Create returns a builder for creating a PickupOrderItem entity.
func (c *PickupOrderItemClient) Create() *PickupOrderItemCreate {
	mutation := newPickupOrderItemMutation(c.config, OpCreate)
	return &PickupOrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PickupOrderItem entities.
func (c *PickupOrderItemClient) CreateBulk(builders ...*PickupOrderItemCreate) *PickupOrderItemCreateBulk {
	return &PickupOrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PickupOrderItem.
func (c *PickupOrderItemClient) Update() *PickupOrderItemUpdate {
	mutation := newPickupOrderItemMutation(c.config, OpUpdate)
	return &PickupOrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PickupOrderItemClient) UpdateOne(poi *PickupOrderItem) *PickupOrderItemUpdateOne {
	mutation := newPickupOrderItemMutation(c.config, OpUpdateOne, withPickupOrderItem(poi))
	return &PickupOrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PickupOrderItemClient) UpdateOneID(id int64) *PickupOrderItemUpdateOne {
	mutation := newPickupOrderItemMutation(c.config, OpUpdateOne, withPickupOrderItemID(id))
	return &PickupOrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PickupOrderItem.
func (c *PickupOrderItemClient) Delete() *PickupOrderItemDelete {
	mutation := newPickupOrderItemMutation(c.config, OpDelete)
	return &PickupOrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PickupOrderItemClient) DeleteOne(poi *PickupOrderItem) *PickupOrderItemDeleteOne {
	return c.DeleteOneID(poi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PickupOrderItemClient) DeleteOneID(id int64) *PickupOrderItemDeleteOne {
	builder := c.Delete().Where(pickuporderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PickupOrderItemDeleteOne{builder}
}

// Query returns a query builder for PickupOrderItem.
func (c *PickupOrderItemClient) Query() *PickupOrderItemQuery {
	return &PickupOrderItemQuery{
		config: c.config,
	}
}

// Get returns a PickupOrderItem entity by its id.
func (c *PickupOrderItemClient) Get(ctx context.Context, id int64) (*PickupOrderItem, error) {
	return c.Query().Where(pickuporderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PickupOrderItemClient) GetX(ctx context.Context, id int64) *PickupOrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PickupOrderItemClient) Hooks() []Hook {
	return c.hooks.PickupOrderItem
}

// PlatformProductClient is a client for the PlatformProduct schema.
type PlatformProductClient struct {
	config
}

// NewPlatformProductClient returns a client for the PlatformProduct from the given config.
func NewPlatformProductClient(c config) *PlatformProductClient {
	return &PlatformProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `platformproduct.Hooks(f(g(h())))`.
func (c *PlatformProductClient) Use(hooks ...Hook) {
	c.hooks.PlatformProduct = append(c.hooks.PlatformProduct, hooks...)
}

// Create returns a builder for creating a PlatformProduct entity.
func (c *PlatformProductClient) Create() *PlatformProductCreate {
	mutation := newPlatformProductMutation(c.config, OpCreate)
	return &PlatformProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlatformProduct entities.
func (c *PlatformProductClient) CreateBulk(builders ...*PlatformProductCreate) *PlatformProductCreateBulk {
	return &PlatformProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlatformProduct.
func (c *PlatformProductClient) Update() *PlatformProductUpdate {
	mutation := newPlatformProductMutation(c.config, OpUpdate)
	return &PlatformProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlatformProductClient) UpdateOne(pp *PlatformProduct) *PlatformProductUpdateOne {
	mutation := newPlatformProductMutation(c.config, OpUpdateOne, withPlatformProduct(pp))
	return &PlatformProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlatformProductClient) UpdateOneID(id int64) *PlatformProductUpdateOne {
	mutation := newPlatformProductMutation(c.config, OpUpdateOne, withPlatformProductID(id))
	return &PlatformProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlatformProduct.
func (c *PlatformProductClient) Delete() *PlatformProductDelete {
	mutation := newPlatformProductMutation(c.config, OpDelete)
	return &PlatformProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlatformProductClient) DeleteOne(pp *PlatformProduct) *PlatformProductDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlatformProductClient) DeleteOneID(id int64) *PlatformProductDeleteOne {
	builder := c.Delete().Where(platformproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlatformProductDeleteOne{builder}
}

// Query returns a query builder for PlatformProduct.
func (c *PlatformProductClient) Query() *PlatformProductQuery {
	return &PlatformProductQuery{
		config: c.config,
	}
}

// Get returns a PlatformProduct entity by its id.
func (c *PlatformProductClient) Get(ctx context.Context, id int64) (*PlatformProduct, error) {
	return c.Query().Where(platformproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlatformProductClient) GetX(ctx context.Context, id int64) *PlatformProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a PlatformProduct.
func (c *PlatformProductClient) QueryTenant(pp *PlatformProduct) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(platformproduct.Table, platformproduct.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, platformproduct.TenantTable, platformproduct.TenantColumn),
		)
		schemaConfig := pp.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.PlatformProduct
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductMappings queries the product_mappings edge of a PlatformProduct.
func (c *PlatformProductClient) QueryProductMappings(pp *PlatformProduct) *ProductMappingQuery {
	query := &ProductMappingQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(platformproduct.Table, platformproduct.FieldID, id),
			sqlgraph.To(productmapping.Table, productmapping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, platformproduct.ProductMappingsTable, platformproduct.ProductMappingsColumn),
		)
		schemaConfig := pp.schemaConfig
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a PlatformProduct.
func (c *PlatformProductClient) QueryStores(pp *PlatformProduct) *StoreQuery {
	query := &StoreQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(platformproduct.Table, platformproduct.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, platformproduct.StoresTable, platformproduct.StoresColumn),
		)
		schemaConfig := pp.schemaConfig
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.PlatformProduct
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlatformProductClient) Hooks() []Hook {
	hooks := c.hooks.PlatformProduct
	return append(hooks[:len(hooks):len(hooks)], platformproduct.Hooks[:]...)
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int64) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int64) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int64) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int64) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Product.
func (c *ProductClient) QueryTenant(pr *Product) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, product.TenantTable, product.TenantColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Product
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventories queries the inventories edge of a Product.
func (c *ProductClient) QueryInventories(pr *Product) *InventoryQuery {
	query := &InventoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(inventory.Table, inventory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.InventoriesTable, product.InventoriesColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Inventory
		step.Edge.Schema = schemaConfig.Inventory
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductMappings queries the product_mappings edge of a Product.
func (c *ProductClient) QueryProductMappings(pr *Product) *ProductMappingQuery {
	query := &ProductMappingQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productmapping.Table, productmapping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductMappingsTable, product.ProductMappingsColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	hooks := c.hooks.Product
	return append(hooks[:len(hooks):len(hooks)], product.Hooks[:]...)
}

// ProductMappingClient is a client for the ProductMapping schema.
type ProductMappingClient struct {
	config
}

// NewProductMappingClient returns a client for the ProductMapping from the given config.
func NewProductMappingClient(c config) *ProductMappingClient {
	return &ProductMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productmapping.Hooks(f(g(h())))`.
func (c *ProductMappingClient) Use(hooks ...Hook) {
	c.hooks.ProductMapping = append(c.hooks.ProductMapping, hooks...)
}

// Create returns a builder for creating a ProductMapping entity.
func (c *ProductMappingClient) Create() *ProductMappingCreate {
	mutation := newProductMappingMutation(c.config, OpCreate)
	return &ProductMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductMapping entities.
func (c *ProductMappingClient) CreateBulk(builders ...*ProductMappingCreate) *ProductMappingCreateBulk {
	return &ProductMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductMapping.
func (c *ProductMappingClient) Update() *ProductMappingUpdate {
	mutation := newProductMappingMutation(c.config, OpUpdate)
	return &ProductMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductMappingClient) UpdateOne(pm *ProductMapping) *ProductMappingUpdateOne {
	mutation := newProductMappingMutation(c.config, OpUpdateOne, withProductMapping(pm))
	return &ProductMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductMappingClient) UpdateOneID(id int64) *ProductMappingUpdateOne {
	mutation := newProductMappingMutation(c.config, OpUpdateOne, withProductMappingID(id))
	return &ProductMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductMapping.
func (c *ProductMappingClient) Delete() *ProductMappingDelete {
	mutation := newProductMappingMutation(c.config, OpDelete)
	return &ProductMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductMappingClient) DeleteOne(pm *ProductMapping) *ProductMappingDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductMappingClient) DeleteOneID(id int64) *ProductMappingDeleteOne {
	builder := c.Delete().Where(productmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductMappingDeleteOne{builder}
}

// Query returns a query builder for ProductMapping.
func (c *ProductMappingClient) Query() *ProductMappingQuery {
	return &ProductMappingQuery{
		config: c.config,
	}
}

// Get returns a ProductMapping entity by its id.
func (c *ProductMappingClient) Get(ctx context.Context, id int64) (*ProductMapping, error) {
	return c.Query().Where(productmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductMappingClient) GetX(ctx context.Context, id int64) *ProductMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlatformProducts queries the platform_products edge of a ProductMapping.
func (c *ProductMappingClient) QueryPlatformProducts(pm *ProductMapping) *PlatformProductQuery {
	query := &PlatformProductQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmapping.Table, productmapping.FieldID, id),
			sqlgraph.To(platformproduct.Table, platformproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmapping.PlatformProductsTable, productmapping.PlatformProductsColumn),
		)
		schemaConfig := pm.schemaConfig
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.ProductMapping
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductMapping.
func (c *ProductMappingClient) QueryProducts(pm *ProductMapping) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmapping.Table, productmapping.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmapping.ProductsTable, productmapping.ProductsColumn),
		)
		schemaConfig := pm.schemaConfig
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.ProductMapping
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductMappingClient) Hooks() []Hook {
	return c.hooks.ProductMapping
}

// SequenceClient is a client for the Sequence schema.
type SequenceClient struct {
	config
}

// NewSequenceClient returns a client for the Sequence from the given config.
func NewSequenceClient(c config) *SequenceClient {
	return &SequenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sequence.Hooks(f(g(h())))`.
func (c *SequenceClient) Use(hooks ...Hook) {
	c.hooks.Sequence = append(c.hooks.Sequence, hooks...)
}

// Create returns a builder for creating a Sequence entity.
func (c *SequenceClient) Create() *SequenceCreate {
	mutation := newSequenceMutation(c.config, OpCreate)
	return &SequenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sequence entities.
func (c *SequenceClient) CreateBulk(builders ...*SequenceCreate) *SequenceCreateBulk {
	return &SequenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sequence.
func (c *SequenceClient) Update() *SequenceUpdate {
	mutation := newSequenceMutation(c.config, OpUpdate)
	return &SequenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SequenceClient) UpdateOne(s *Sequence) *SequenceUpdateOne {
	mutation := newSequenceMutation(c.config, OpUpdateOne, withSequence(s))
	return &SequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SequenceClient) UpdateOneID(id int64) *SequenceUpdateOne {
	mutation := newSequenceMutation(c.config, OpUpdateOne, withSequenceID(id))
	return &SequenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sequence.
func (c *SequenceClient) Delete() *SequenceDelete {
	mutation := newSequenceMutation(c.config, OpDelete)
	return &SequenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SequenceClient) DeleteOne(s *Sequence) *SequenceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SequenceClient) DeleteOneID(id int64) *SequenceDeleteOne {
	builder := c.Delete().Where(sequence.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SequenceDeleteOne{builder}
}

// Query returns a query builder for Sequence.
func (c *SequenceClient) Query() *SequenceQuery {
	return &SequenceQuery{
		config: c.config,
	}
}

// Get returns a Sequence entity by its id.
func (c *SequenceClient) Get(ctx context.Context, id int64) (*Sequence, error) {
	return c.Query().Where(sequence.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SequenceClient) GetX(ctx context.Context, id int64) *Sequence {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Sequence.
func (c *SequenceClient) QueryTenant(s *Sequence) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sequence.Table, sequence.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sequence.TenantTable, sequence.TenantColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Sequence
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SequenceClient) Hooks() []Hook {
	hooks := c.hooks.Sequence
	return append(hooks[:len(hooks):len(hooks)], sequence.Hooks[:]...)
}

// StoreClient is a client for the Store schema.
type StoreClient struct {
	config
}

// NewStoreClient returns a client for the Store from the given config.
func NewStoreClient(c config) *StoreClient {
	return &StoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `store.Hooks(f(g(h())))`.
func (c *StoreClient) Use(hooks ...Hook) {
	c.hooks.Store = append(c.hooks.Store, hooks...)
}

// Create returns a builder for creating a Store entity.
func (c *StoreClient) Create() *StoreCreate {
	mutation := newStoreMutation(c.config, OpCreate)
	return &StoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Store entities.
func (c *StoreClient) CreateBulk(builders ...*StoreCreate) *StoreCreateBulk {
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Store.
func (c *StoreClient) Update() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreClient) UpdateOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreClient) UpdateOneID(id int64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Store.
func (c *StoreClient) Delete() *StoreDelete {
	mutation := newStoreMutation(c.config, OpDelete)
	return &StoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreClient) DeleteOne(s *Store) *StoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreClient) DeleteOneID(id int64) *StoreDeleteOne {
	builder := c.Delete().Where(store.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreDeleteOne{builder}
}

// Query returns a query builder for Store.
func (c *StoreClient) Query() *StoreQuery {
	return &StoreQuery{
		config: c.config,
	}
}

// Get returns a Store entity by its id.
func (c *StoreClient) Get(ctx context.Context, id int64) (*Store, error) {
	return c.Query().Where(store.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreClient) GetX(ctx context.Context, id int64) *Store {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Store.
func (c *StoreClient) QueryTenant(s *Store) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.TenantTable, store.TenantColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Store
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Store.
func (c *StoreClient) QueryOrders(s *Store) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.OrdersTable, store.OrdersColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlatformProducts queries the platform_products edge of a Store.
func (c *StoreClient) QueryPlatformProducts(s *Store) *PlatformProductQuery {
	query := &PlatformProductQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(platformproduct.Table, platformproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.PlatformProductsTable, store.PlatformProductsColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.PlatformProduct
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreClient) Hooks() []Hook {
	hooks := c.hooks.Store
	return append(hooks[:len(hooks):len(hooks)], store.Hooks[:]...)
}

// TaskScheduleClient is a client for the TaskSchedule schema.
type TaskScheduleClient struct {
	config
}

// NewTaskScheduleClient returns a client for the TaskSchedule from the given config.
func NewTaskScheduleClient(c config) *TaskScheduleClient {
	return &TaskScheduleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskschedule.Hooks(f(g(h())))`.
func (c *TaskScheduleClient) Use(hooks ...Hook) {
	c.hooks.TaskSchedule = append(c.hooks.TaskSchedule, hooks...)
}

// Create returns a builder for creating a TaskSchedule entity.
func (c *TaskScheduleClient) Create() *TaskScheduleCreate {
	mutation := newTaskScheduleMutation(c.config, OpCreate)
	return &TaskScheduleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskSchedule entities.
func (c *TaskScheduleClient) CreateBulk(builders ...*TaskScheduleCreate) *TaskScheduleCreateBulk {
	return &TaskScheduleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskSchedule.
func (c *TaskScheduleClient) Update() *TaskScheduleUpdate {
	mutation := newTaskScheduleMutation(c.config, OpUpdate)
	return &TaskScheduleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskScheduleClient) UpdateOne(ts *TaskSchedule) *TaskScheduleUpdateOne {
	mutation := newTaskScheduleMutation(c.config, OpUpdateOne, withTaskSchedule(ts))
	return &TaskScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskScheduleClient) UpdateOneID(id int64) *TaskScheduleUpdateOne {
	mutation := newTaskScheduleMutation(c.config, OpUpdateOne, withTaskScheduleID(id))
	return &TaskScheduleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskSchedule.
func (c *TaskScheduleClient) Delete() *TaskScheduleDelete {
	mutation := newTaskScheduleMutation(c.config, OpDelete)
	return &TaskScheduleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskScheduleClient) DeleteOne(ts *TaskSchedule) *TaskScheduleDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskScheduleClient) DeleteOneID(id int64) *TaskScheduleDeleteOne {
	builder := c.Delete().Where(taskschedule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskScheduleDeleteOne{builder}
}

// Query returns a query builder for TaskSchedule.
func (c *TaskScheduleClient) Query() *TaskScheduleQuery {
	return &TaskScheduleQuery{
		config: c.config,
	}
}

// Get returns a TaskSchedule entity by its id.
func (c *TaskScheduleClient) Get(ctx context.Context, id int64) (*TaskSchedule, error) {
	return c.Query().Where(taskschedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskScheduleClient) GetX(ctx context.Context, id int64) *TaskSchedule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskScheduleClient) Hooks() []Hook {
	return c.hooks.TaskSchedule
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int64) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int64) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int64) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int64) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int64) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int64) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int64) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int64) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// TrackMappingClient is a client for the TrackMapping schema.
type TrackMappingClient struct {
	config
}

// NewTrackMappingClient returns a client for the TrackMapping from the given config.
func NewTrackMappingClient(c config) *TrackMappingClient {
	return &TrackMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trackmapping.Hooks(f(g(h())))`.
func (c *TrackMappingClient) Use(hooks ...Hook) {
	c.hooks.TrackMapping = append(c.hooks.TrackMapping, hooks...)
}

// Create returns a builder for creating a TrackMapping entity.
func (c *TrackMappingClient) Create() *TrackMappingCreate {
	mutation := newTrackMappingMutation(c.config, OpCreate)
	return &TrackMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrackMapping entities.
func (c *TrackMappingClient) CreateBulk(builders ...*TrackMappingCreate) *TrackMappingCreateBulk {
	return &TrackMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrackMapping.
func (c *TrackMappingClient) Update() *TrackMappingUpdate {
	mutation := newTrackMappingMutation(c.config, OpUpdate)
	return &TrackMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrackMappingClient) UpdateOne(tm *TrackMapping) *TrackMappingUpdateOne {
	mutation := newTrackMappingMutation(c.config, OpUpdateOne, withTrackMapping(tm))
	return &TrackMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrackMappingClient) UpdateOneID(id int64) *TrackMappingUpdateOne {
	mutation := newTrackMappingMutation(c.config, OpUpdateOne, withTrackMappingID(id))
	return &TrackMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrackMapping.
func (c *TrackMappingClient) Delete() *TrackMappingDelete {
	mutation := newTrackMappingMutation(c.config, OpDelete)
	return &TrackMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrackMappingClient) DeleteOne(tm *TrackMapping) *TrackMappingDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrackMappingClient) DeleteOneID(id int64) *TrackMappingDeleteOne {
	builder := c.Delete().Where(trackmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrackMappingDeleteOne{builder}
}

// Query returns a query builder for TrackMapping.
func (c *TrackMappingClient) Query() *TrackMappingQuery {
	return &TrackMappingQuery{
		config: c.config,
	}
}

// Get returns a TrackMapping entity by its id.
func (c *TrackMappingClient) Get(ctx context.Context, id int64) (*TrackMapping, error) {
	return c.Query().Where(trackmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrackMappingClient) GetX(ctx context.Context, id int64) *TrackMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a TrackMapping.
func (c *TrackMappingClient) QueryOrders(tm *TrackMapping) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trackmapping.Table, trackmapping.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trackmapping.OrdersTable, trackmapping.OrdersColumn),
		)
		schemaConfig := tm.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.TrackMapping
		fromV = sqlgraph.Neighbors(tm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrackMappingClient) Hooks() []Hook {
	return c.hooks.TrackMapping
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id int64) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id int64) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id int64) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id int64) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Transaction.
func (c *TransactionClient) QueryTenant(t *Transaction) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, transaction.TenantTable, transaction.TenantColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Transaction
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a Transaction.
func (c *TransactionClient) QueryDetails(t *Transaction) *TransactionDetailQuery {
	query := &TransactionDetailQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(transactiondetail.Table, transactiondetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, transaction.DetailsTable, transaction.DetailsColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.TransactionDetail
		step.Edge.Schema = schemaConfig.TransactionDetail
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	hooks := c.hooks.Transaction
	return append(hooks[:len(hooks):len(hooks)], transaction.Hooks[:]...)
}

// TransactionDetailClient is a client for the TransactionDetail schema.
type TransactionDetailClient struct {
	config
}

// NewTransactionDetailClient returns a client for the TransactionDetail from the given config.
func NewTransactionDetailClient(c config) *TransactionDetailClient {
	return &TransactionDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactiondetail.Hooks(f(g(h())))`.
func (c *TransactionDetailClient) Use(hooks ...Hook) {
	c.hooks.TransactionDetail = append(c.hooks.TransactionDetail, hooks...)
}

// Create returns a builder for creating a TransactionDetail entity.
func (c *TransactionDetailClient) Create() *TransactionDetailCreate {
	mutation := newTransactionDetailMutation(c.config, OpCreate)
	return &TransactionDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionDetail entities.
func (c *TransactionDetailClient) CreateBulk(builders ...*TransactionDetailCreate) *TransactionDetailCreateBulk {
	return &TransactionDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionDetail.
func (c *TransactionDetailClient) Update() *TransactionDetailUpdate {
	mutation := newTransactionDetailMutation(c.config, OpUpdate)
	return &TransactionDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionDetailClient) UpdateOne(td *TransactionDetail) *TransactionDetailUpdateOne {
	mutation := newTransactionDetailMutation(c.config, OpUpdateOne, withTransactionDetail(td))
	return &TransactionDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionDetailClient) UpdateOneID(id int64) *TransactionDetailUpdateOne {
	mutation := newTransactionDetailMutation(c.config, OpUpdateOne, withTransactionDetailID(id))
	return &TransactionDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionDetail.
func (c *TransactionDetailClient) Delete() *TransactionDetailDelete {
	mutation := newTransactionDetailMutation(c.config, OpDelete)
	return &TransactionDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionDetailClient) DeleteOne(td *TransactionDetail) *TransactionDetailDeleteOne {
	return c.DeleteOneID(td.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionDetailClient) DeleteOneID(id int64) *TransactionDetailDeleteOne {
	builder := c.Delete().Where(transactiondetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDetailDeleteOne{builder}
}

// Query returns a query builder for TransactionDetail.
func (c *TransactionDetailClient) Query() *TransactionDetailQuery {
	return &TransactionDetailQuery{
		config: c.config,
	}
}

// Get returns a TransactionDetail entity by its id.
func (c *TransactionDetailClient) Get(ctx context.Context, id int64) (*TransactionDetail, error) {
	return c.Query().Where(transactiondetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionDetailClient) GetX(ctx context.Context, id int64) *TransactionDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionDetailClient) Hooks() []Hook {
	return c.hooks.TransactionDetail
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a User.
func (c *UserClient) QueryTenant(u *User) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.TenantTable, user.TenantColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnnouncements queries the announcements edge of a User.
func (c *UserClient) QueryAnnouncements(u *User) *AnnouncementsQuery {
	query := &AnnouncementsQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(announcements.Table, announcements.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AnnouncementsTable, user.AnnouncementsColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Announcements
		step.Edge.Schema = schemaConfig.Announcements
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// UserReferralClient is a client for the UserReferral schema.
type UserReferralClient struct {
	config
}

// NewUserReferralClient returns a client for the UserReferral from the given config.
func NewUserReferralClient(c config) *UserReferralClient {
	return &UserReferralClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userreferral.Hooks(f(g(h())))`.
func (c *UserReferralClient) Use(hooks ...Hook) {
	c.hooks.UserReferral = append(c.hooks.UserReferral, hooks...)
}

// Create returns a builder for creating a UserReferral entity.
func (c *UserReferralClient) Create() *UserReferralCreate {
	mutation := newUserReferralMutation(c.config, OpCreate)
	return &UserReferralCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserReferral entities.
func (c *UserReferralClient) CreateBulk(builders ...*UserReferralCreate) *UserReferralCreateBulk {
	return &UserReferralCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserReferral.
func (c *UserReferralClient) Update() *UserReferralUpdate {
	mutation := newUserReferralMutation(c.config, OpUpdate)
	return &UserReferralUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserReferralClient) UpdateOne(ur *UserReferral) *UserReferralUpdateOne {
	mutation := newUserReferralMutation(c.config, OpUpdateOne, withUserReferral(ur))
	return &UserReferralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserReferralClient) UpdateOneID(id int64) *UserReferralUpdateOne {
	mutation := newUserReferralMutation(c.config, OpUpdateOne, withUserReferralID(id))
	return &UserReferralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserReferral.
func (c *UserReferralClient) Delete() *UserReferralDelete {
	mutation := newUserReferralMutation(c.config, OpDelete)
	return &UserReferralDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserReferralClient) DeleteOne(ur *UserReferral) *UserReferralDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserReferralClient) DeleteOneID(id int64) *UserReferralDeleteOne {
	builder := c.Delete().Where(userreferral.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserReferralDeleteOne{builder}
}

// Query returns a query builder for UserReferral.
func (c *UserReferralClient) Query() *UserReferralQuery {
	return &UserReferralQuery{
		config: c.config,
	}
}

// Get returns a UserReferral entity by its id.
func (c *UserReferralClient) Get(ctx context.Context, id int64) (*UserReferral, error) {
	return c.Query().Where(userreferral.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserReferralClient) GetX(ctx context.Context, id int64) *UserReferral {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a UserReferral.
func (c *UserReferralClient) QueryTenant(ur *UserReferral) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userreferral.Table, userreferral.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userreferral.TenantTable, userreferral.TenantColumn),
		)
		schemaConfig := ur.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.UserReferral
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserReferralClient) Hooks() []Hook {
	hooks := c.hooks.UserReferral
	return append(hooks[:len(hooks):len(hooks)], userreferral.Hooks[:]...)
}

// ValueAddedTaxClient is a client for the ValueAddedTax schema.
type ValueAddedTaxClient struct {
	config
}

// NewValueAddedTaxClient returns a client for the ValueAddedTax from the given config.
func NewValueAddedTaxClient(c config) *ValueAddedTaxClient {
	return &ValueAddedTaxClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `valueaddedtax.Hooks(f(g(h())))`.
func (c *ValueAddedTaxClient) Use(hooks ...Hook) {
	c.hooks.ValueAddedTax = append(c.hooks.ValueAddedTax, hooks...)
}

// Create returns a builder for creating a ValueAddedTax entity.
func (c *ValueAddedTaxClient) Create() *ValueAddedTaxCreate {
	mutation := newValueAddedTaxMutation(c.config, OpCreate)
	return &ValueAddedTaxCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ValueAddedTax entities.
func (c *ValueAddedTaxClient) CreateBulk(builders ...*ValueAddedTaxCreate) *ValueAddedTaxCreateBulk {
	return &ValueAddedTaxCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ValueAddedTax.
func (c *ValueAddedTaxClient) Update() *ValueAddedTaxUpdate {
	mutation := newValueAddedTaxMutation(c.config, OpUpdate)
	return &ValueAddedTaxUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ValueAddedTaxClient) UpdateOne(vat *ValueAddedTax) *ValueAddedTaxUpdateOne {
	mutation := newValueAddedTaxMutation(c.config, OpUpdateOne, withValueAddedTax(vat))
	return &ValueAddedTaxUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ValueAddedTaxClient) UpdateOneID(id int64) *ValueAddedTaxUpdateOne {
	mutation := newValueAddedTaxMutation(c.config, OpUpdateOne, withValueAddedTaxID(id))
	return &ValueAddedTaxUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ValueAddedTax.
func (c *ValueAddedTaxClient) Delete() *ValueAddedTaxDelete {
	mutation := newValueAddedTaxMutation(c.config, OpDelete)
	return &ValueAddedTaxDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ValueAddedTaxClient) DeleteOne(vat *ValueAddedTax) *ValueAddedTaxDeleteOne {
	return c.DeleteOneID(vat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ValueAddedTaxClient) DeleteOneID(id int64) *ValueAddedTaxDeleteOne {
	builder := c.Delete().Where(valueaddedtax.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ValueAddedTaxDeleteOne{builder}
}

// Query returns a query builder for ValueAddedTax.
func (c *ValueAddedTaxClient) Query() *ValueAddedTaxQuery {
	return &ValueAddedTaxQuery{
		config: c.config,
	}
}

// Get returns a ValueAddedTax entity by its id.
func (c *ValueAddedTaxClient) Get(ctx context.Context, id int64) (*ValueAddedTax, error) {
	return c.Query().Where(valueaddedtax.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ValueAddedTaxClient) GetX(ctx context.Context, id int64) *ValueAddedTax {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ValueAddedTaxClient) Hooks() []Hook {
	return c.hooks.ValueAddedTax
}

// WarehouseClient is a client for the Warehouse schema.
type WarehouseClient struct {
	config
}

// NewWarehouseClient returns a client for the Warehouse from the given config.
func NewWarehouseClient(c config) *WarehouseClient {
	return &WarehouseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `warehouse.Hooks(f(g(h())))`.
func (c *WarehouseClient) Use(hooks ...Hook) {
	c.hooks.Warehouse = append(c.hooks.Warehouse, hooks...)
}

// Create returns a builder for creating a Warehouse entity.
func (c *WarehouseClient) Create() *WarehouseCreate {
	mutation := newWarehouseMutation(c.config, OpCreate)
	return &WarehouseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Warehouse entities.
func (c *WarehouseClient) CreateBulk(builders ...*WarehouseCreate) *WarehouseCreateBulk {
	return &WarehouseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Warehouse.
func (c *WarehouseClient) Update() *WarehouseUpdate {
	mutation := newWarehouseMutation(c.config, OpUpdate)
	return &WarehouseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WarehouseClient) UpdateOne(w *Warehouse) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouse(w))
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WarehouseClient) UpdateOneID(id int64) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouseID(id))
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Warehouse.
func (c *WarehouseClient) Delete() *WarehouseDelete {
	mutation := newWarehouseMutation(c.config, OpDelete)
	return &WarehouseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WarehouseClient) DeleteOne(w *Warehouse) *WarehouseDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WarehouseClient) DeleteOneID(id int64) *WarehouseDeleteOne {
	builder := c.Delete().Where(warehouse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WarehouseDeleteOne{builder}
}

// Query returns a query builder for Warehouse.
func (c *WarehouseClient) Query() *WarehouseQuery {
	return &WarehouseQuery{
		config: c.config,
	}
}

// Get returns a Warehouse entity by its id.
func (c *WarehouseClient) Get(ctx context.Context, id int64) (*Warehouse, error) {
	return c.Query().Where(warehouse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WarehouseClient) GetX(ctx context.Context, id int64) *Warehouse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a Warehouse.
func (c *WarehouseClient) QueryOrders(w *Warehouse) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouse.Table, warehouse.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, warehouse.OrdersTable, warehouse.OrdersColumn),
		)
		schemaConfig := w.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WarehouseClient) Hooks() []Hook {
	return c.hooks.Warehouse
}
