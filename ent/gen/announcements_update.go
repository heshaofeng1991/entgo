// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
)

// AnnouncementsUpdate is the builder for updating Announcements entities.
type AnnouncementsUpdate struct {
	config
	hooks     []Hook
	mutation  *AnnouncementsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AnnouncementsUpdate builder.
func (au *AnnouncementsUpdate) Where(ps ...predicate.Announcements) *AnnouncementsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AnnouncementsUpdate) SetUpdatedAt(t time.Time) *AnnouncementsUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AnnouncementsUpdate) SetDeletedAt(t time.Time) *AnnouncementsUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableDeletedAt(t *time.Time) *AnnouncementsUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AnnouncementsUpdate) ClearDeletedAt() *AnnouncementsUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetTitle sets the "title" field.
func (au *AnnouncementsUpdate) SetTitle(s string) *AnnouncementsUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableTitle(s *string) *AnnouncementsUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetContent sets the "content" field.
func (au *AnnouncementsUpdate) SetContent(s string) *AnnouncementsUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableContent(s *string) *AnnouncementsUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AnnouncementsUpdate) SetStatus(i int) *AnnouncementsUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableStatus(i *int) *AnnouncementsUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AnnouncementsUpdate) AddStatus(i int) *AnnouncementsUpdate {
	au.mutation.AddStatus(i)
	return au
}

// SetIndex sets the "index" field.
func (au *AnnouncementsUpdate) SetIndex(i int) *AnnouncementsUpdate {
	au.mutation.ResetIndex()
	au.mutation.SetIndex(i)
	return au
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableIndex(i *int) *AnnouncementsUpdate {
	if i != nil {
		au.SetIndex(*i)
	}
	return au
}

// AddIndex adds i to the "index" field.
func (au *AnnouncementsUpdate) AddIndex(i int) *AnnouncementsUpdate {
	au.mutation.AddIndex(i)
	return au
}

// SetCreateBy sets the "create_by" field.
func (au *AnnouncementsUpdate) SetCreateBy(i int64) *AnnouncementsUpdate {
	au.mutation.SetCreateBy(i)
	return au
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableCreateBy(i *int64) *AnnouncementsUpdate {
	if i != nil {
		au.SetCreateBy(*i)
	}
	return au
}

// ClearCreateBy clears the value of the "create_by" field.
func (au *AnnouncementsUpdate) ClearCreateBy() *AnnouncementsUpdate {
	au.mutation.ClearCreateBy()
	return au
}

// SetExpiration sets the "expiration" field.
func (au *AnnouncementsUpdate) SetExpiration(t time.Time) *AnnouncementsUpdate {
	au.mutation.SetExpiration(t)
	return au
}

// SetEffectiveTime sets the "effective_time" field.
func (au *AnnouncementsUpdate) SetEffectiveTime(t time.Time) *AnnouncementsUpdate {
	au.mutation.SetEffectiveTime(t)
	return au
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (au *AnnouncementsUpdate) SetUsersID(id int64) *AnnouncementsUpdate {
	au.mutation.SetUsersID(id)
	return au
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (au *AnnouncementsUpdate) SetNillableUsersID(id *int64) *AnnouncementsUpdate {
	if id != nil {
		au = au.SetUsersID(*id)
	}
	return au
}

// SetUsers sets the "users" edge to the User entity.
func (au *AnnouncementsUpdate) SetUsers(u *User) *AnnouncementsUpdate {
	return au.SetUsersID(u.ID)
}

// Mutation returns the AnnouncementsMutation object of the builder.
func (au *AnnouncementsUpdate) Mutation() *AnnouncementsMutation {
	return au.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (au *AnnouncementsUpdate) ClearUsers() *AnnouncementsUpdate {
	au.mutation.ClearUsers()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnouncementsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnouncementsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnouncementsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnouncementsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AnnouncementsUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := announcements.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnnouncementsUpdate) check() error {
	if v, ok := au.mutation.CreateBy(); ok {
		if err := announcements.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`gen: validator failed for field "Announcements.create_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AnnouncementsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AnnouncementsUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AnnouncementsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announcements.Table,
			Columns: announcements.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: announcements.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(announcements.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(announcements.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(announcements.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(announcements.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(announcements.FieldContent, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(announcements.FieldStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(announcements.FieldStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.Index(); ok {
		_spec.SetField(announcements.FieldIndex, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedIndex(); ok {
		_spec.AddField(announcements.FieldIndex, field.TypeInt, value)
	}
	if value, ok := au.mutation.Expiration(); ok {
		_spec.SetField(announcements.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := au.mutation.EffectiveTime(); ok {
		_spec.SetField(announcements.FieldEffectiveTime, field.TypeTime, value)
	}
	if au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = au.schemaConfig.Announcements
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = au.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = au.schemaConfig.Announcements
	ctx = internal.NewSchemaConfigContext(ctx, au.schemaConfig)
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcements.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AnnouncementsUpdateOne is the builder for updating a single Announcements entity.
type AnnouncementsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AnnouncementsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AnnouncementsUpdateOne) SetUpdatedAt(t time.Time) *AnnouncementsUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AnnouncementsUpdateOne) SetDeletedAt(t time.Time) *AnnouncementsUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableDeletedAt(t *time.Time) *AnnouncementsUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AnnouncementsUpdateOne) ClearDeletedAt() *AnnouncementsUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetTitle sets the "title" field.
func (auo *AnnouncementsUpdateOne) SetTitle(s string) *AnnouncementsUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableTitle(s *string) *AnnouncementsUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetContent sets the "content" field.
func (auo *AnnouncementsUpdateOne) SetContent(s string) *AnnouncementsUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableContent(s *string) *AnnouncementsUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AnnouncementsUpdateOne) SetStatus(i int) *AnnouncementsUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableStatus(i *int) *AnnouncementsUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AnnouncementsUpdateOne) AddStatus(i int) *AnnouncementsUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// SetIndex sets the "index" field.
func (auo *AnnouncementsUpdateOne) SetIndex(i int) *AnnouncementsUpdateOne {
	auo.mutation.ResetIndex()
	auo.mutation.SetIndex(i)
	return auo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableIndex(i *int) *AnnouncementsUpdateOne {
	if i != nil {
		auo.SetIndex(*i)
	}
	return auo
}

// AddIndex adds i to the "index" field.
func (auo *AnnouncementsUpdateOne) AddIndex(i int) *AnnouncementsUpdateOne {
	auo.mutation.AddIndex(i)
	return auo
}

// SetCreateBy sets the "create_by" field.
func (auo *AnnouncementsUpdateOne) SetCreateBy(i int64) *AnnouncementsUpdateOne {
	auo.mutation.SetCreateBy(i)
	return auo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableCreateBy(i *int64) *AnnouncementsUpdateOne {
	if i != nil {
		auo.SetCreateBy(*i)
	}
	return auo
}

// ClearCreateBy clears the value of the "create_by" field.
func (auo *AnnouncementsUpdateOne) ClearCreateBy() *AnnouncementsUpdateOne {
	auo.mutation.ClearCreateBy()
	return auo
}

// SetExpiration sets the "expiration" field.
func (auo *AnnouncementsUpdateOne) SetExpiration(t time.Time) *AnnouncementsUpdateOne {
	auo.mutation.SetExpiration(t)
	return auo
}

// SetEffectiveTime sets the "effective_time" field.
func (auo *AnnouncementsUpdateOne) SetEffectiveTime(t time.Time) *AnnouncementsUpdateOne {
	auo.mutation.SetEffectiveTime(t)
	return auo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (auo *AnnouncementsUpdateOne) SetUsersID(id int64) *AnnouncementsUpdateOne {
	auo.mutation.SetUsersID(id)
	return auo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (auo *AnnouncementsUpdateOne) SetNillableUsersID(id *int64) *AnnouncementsUpdateOne {
	if id != nil {
		auo = auo.SetUsersID(*id)
	}
	return auo
}

// SetUsers sets the "users" edge to the User entity.
func (auo *AnnouncementsUpdateOne) SetUsers(u *User) *AnnouncementsUpdateOne {
	return auo.SetUsersID(u.ID)
}

// Mutation returns the AnnouncementsMutation object of the builder.
func (auo *AnnouncementsUpdateOne) Mutation() *AnnouncementsMutation {
	return auo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (auo *AnnouncementsUpdateOne) ClearUsers() *AnnouncementsUpdateOne {
	auo.mutation.ClearUsers()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnouncementsUpdateOne) Select(field string, fields ...string) *AnnouncementsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Announcements entity.
func (auo *AnnouncementsUpdateOne) Save(ctx context.Context) (*Announcements, error) {
	var (
		err  error
		node *Announcements
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Announcements)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AnnouncementsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnouncementsUpdateOne) SaveX(ctx context.Context) *Announcements {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnouncementsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnouncementsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AnnouncementsUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := announcements.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnnouncementsUpdateOne) check() error {
	if v, ok := auo.mutation.CreateBy(); ok {
		if err := announcements.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`gen: validator failed for field "Announcements.create_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AnnouncementsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AnnouncementsUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AnnouncementsUpdateOne) sqlSave(ctx context.Context) (_node *Announcements, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   announcements.Table,
			Columns: announcements.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: announcements.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Announcements.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, announcements.FieldID)
		for _, f := range fields {
			if !announcements.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != announcements.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(announcements.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(announcements.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(announcements.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(announcements.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(announcements.FieldContent, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(announcements.FieldStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(announcements.FieldStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Index(); ok {
		_spec.SetField(announcements.FieldIndex, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedIndex(); ok {
		_spec.AddField(announcements.FieldIndex, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Expiration(); ok {
		_spec.SetField(announcements.FieldExpiration, field.TypeTime, value)
	}
	if value, ok := auo.mutation.EffectiveTime(); ok {
		_spec.SetField(announcements.FieldEffectiveTime, field.TypeTime, value)
	}
	if auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auo.schemaConfig.Announcements
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = auo.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auo.schemaConfig.Announcements
	ctx = internal.NewSchemaConfigContext(ctx, auo.schemaConfig)
	_spec.AddModifiers(auo.modifiers...)
	_node = &Announcements{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcements.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
