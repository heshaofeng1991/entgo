// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/sequence"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// Sequence is the model entity for the Sequence schema.
type Sequence struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Prefix holds the value of the "prefix" field.
	Prefix string `json:"prefix,omitempty"`
	// Value holds the value of the "value" field.
	Value int64 `json:"value,omitempty"`
	// DisplayValue holds the value of the "display_value" field.
	DisplayValue string `json:"display_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SequenceQuery when eager-loading is set.
	Edges           SequenceEdges `json:"edges"`
	sequence_tenant *int64
}

// SequenceEdges holds the relations/edges for other nodes in the graph.
type SequenceEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SequenceEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sequence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sequence.FieldID, sequence.FieldValue:
			values[i] = new(sql.NullInt64)
		case sequence.FieldName, sequence.FieldPrefix, sequence.FieldDisplayValue:
			values[i] = new(sql.NullString)
		case sequence.FieldCreatedAt, sequence.FieldUpdatedAt, sequence.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sequence.ForeignKeys[0]: // sequence_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sequence", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sequence fields.
func (s *Sequence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sequence.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case sequence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sequence.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sequence.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case sequence.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case sequence.FieldPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefix", values[i])
			} else if value.Valid {
				s.Prefix = value.String
			}
		case sequence.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.Int64
			}
		case sequence.FieldDisplayValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_value", values[i])
			} else if value.Valid {
				s.DisplayValue = value.String
			}
		case sequence.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sequence_tenant", value)
			} else if value.Valid {
				s.sequence_tenant = new(int64)
				*s.sequence_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Sequence entity.
func (s *Sequence) QueryTenant() *TenantQuery {
	return (&SequenceClient{config: s.config}).QueryTenant(s)
}

// Update returns a builder for updating this Sequence.
// Note that you need to call Sequence.Unwrap() before calling this method if this Sequence
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sequence) Update() *SequenceUpdateOne {
	return (&SequenceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sequence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sequence) Unwrap() *Sequence {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("gen: Sequence is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sequence) String() string {
	var builder strings.Builder
	builder.WriteString("Sequence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("prefix=")
	builder.WriteString(s.Prefix)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", s.Value))
	builder.WriteString(", ")
	builder.WriteString("display_value=")
	builder.WriteString(s.DisplayValue)
	builder.WriteByte(')')
	return builder.String()
}

// Sequences is a parsable slice of Sequence.
type Sequences []*Sequence

func (s Sequences) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
