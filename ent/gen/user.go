// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// SelectedWarehouseID holds the value of the "selected_warehouse_id" field.
	SelectedWarehouseID int64 `json:"selected_warehouse_id,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// GuideFinished holds the value of the "guide_finished" field.
	GuideFinished bool `json:"guide_finished,omitempty"`
	// GuideStatus holds the value of the "guide_status" field.
	GuideStatus int `json:"guide_status,omitempty"`
	// HsObjectID holds the value of the "hs_object_id" field.
	HsObjectID string `json:"hs_object_id,omitempty"`
	// Questions holds the value of the "questions" field.
	Questions string `json:"questions,omitempty"`
	// LastLoggedTime holds the value of the "last_logged_time" field.
	LastLoggedTime time.Time `json:"last_logged_time,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Concerns holds the value of the "concerns" field.
	Concerns string `json:"concerns,omitempty"`
	// StoreCode holds the value of the "store_code" field.
	StoreCode string `json:"store_code,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// 用户来源
	Source string `json:"source,omitempty"`
	// 来源标签
	SourceTag string `json:"source_tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges       UserEdges `json:"edges"`
	user_tenant *int64
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Announcements holds the value of the announcements edge.
	Announcements []*Announcements `json:"announcements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AnnouncementsOrErr returns the Announcements value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AnnouncementsOrErr() ([]*Announcements, error) {
	if e.loadedTypes[1] {
		return e.Announcements, nil
	}
	return nil, &NotLoadedError{edge: "announcements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldGuideFinished:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldSelectedWarehouseID, user.FieldStatus, user.FieldGuideStatus:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldType, user.FieldPassword, user.FieldAvatar, user.FieldCode, user.FieldHsObjectID, user.FieldQuestions, user.FieldWebsite, user.FieldPlatform, user.FieldConcerns, user.FieldStoreCode, user.FieldPhone, user.FieldSource, user.FieldSourceTag:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt, user.FieldLastLoggedTime:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // user_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int64(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				u.Type = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldSelectedWarehouseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field selected_warehouse_id", values[i])
			} else if value.Valid {
				u.SelectedWarehouseID = value.Int64
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				u.Code = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = int8(value.Int64)
			}
		case user.FieldGuideFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field guide_finished", values[i])
			} else if value.Valid {
				u.GuideFinished = value.Bool
			}
		case user.FieldGuideStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guide_status", values[i])
			} else if value.Valid {
				u.GuideStatus = int(value.Int64)
			}
		case user.FieldHsObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hs_object_id", values[i])
			} else if value.Valid {
				u.HsObjectID = value.String
			}
		case user.FieldQuestions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field questions", values[i])
			} else if value.Valid {
				u.Questions = value.String
			}
		case user.FieldLastLoggedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_logged_time", values[i])
			} else if value.Valid {
				u.LastLoggedTime = value.Time
			}
		case user.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				u.Website = value.String
			}
		case user.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				u.Platform = value.String
			}
		case user.FieldConcerns:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field concerns", values[i])
			} else if value.Valid {
				u.Concerns = value.String
			}
		case user.FieldStoreCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_code", values[i])
			} else if value.Valid {
				u.StoreCode = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				u.Source = value.String
			}
		case user.FieldSourceTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_tag", values[i])
			} else if value.Valid {
				u.SourceTag = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_tenant", value)
			} else if value.Valid {
				u.user_tenant = new(int64)
				*u.user_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the User entity.
func (u *User) QueryTenant() *TenantQuery {
	return (&UserClient{config: u.config}).QueryTenant(u)
}

// QueryAnnouncements queries the "announcements" edge of the User entity.
func (u *User) QueryAnnouncements() *AnnouncementsQuery {
	return (&UserClient{config: u.config}).QueryAnnouncements(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("gen: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(u.Type)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("selected_warehouse_id=")
	builder.WriteString(fmt.Sprintf("%v", u.SelectedWarehouseID))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(u.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("guide_finished=")
	builder.WriteString(fmt.Sprintf("%v", u.GuideFinished))
	builder.WriteString(", ")
	builder.WriteString("guide_status=")
	builder.WriteString(fmt.Sprintf("%v", u.GuideStatus))
	builder.WriteString(", ")
	builder.WriteString("hs_object_id=")
	builder.WriteString(u.HsObjectID)
	builder.WriteString(", ")
	builder.WriteString("questions=")
	builder.WriteString(u.Questions)
	builder.WriteString(", ")
	builder.WriteString("last_logged_time=")
	builder.WriteString(u.LastLoggedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(u.Website)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(u.Platform)
	builder.WriteString(", ")
	builder.WriteString("concerns=")
	builder.WriteString(u.Concerns)
	builder.WriteString(", ")
	builder.WriteString("store_code=")
	builder.WriteString(u.StoreCode)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(u.Source)
	builder.WriteString(", ")
	builder.WriteString("source_tag=")
	builder.WriteString(u.SourceTag)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
