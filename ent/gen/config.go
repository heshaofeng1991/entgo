// Code generated by ent, DO NOT EDIT.

package gen

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...any)
	// hooks to execute on mutations.
	hooks *hooks
	// schemaConfig contains alternative names for all tables.
	schemaConfig SchemaConfig
}

// hooks per client, for fast access.
type hooks struct {
	Announcements       []ent.Hook
	Attribute           []ent.Hook
	Channel             []ent.Hook
	ChannelCost         []ent.Hook
	ChannelCostBatche   []ent.Hook
	ChannelOption       []ent.Hook
	ChannelRecommend    []ent.Hook
	ChannelVolumeFactor []ent.Hook
	Country             []ent.Hook
	CountryZone         []ent.Hook
	CourierOrder        []ent.Hook
	CustomerConfig      []ent.Hook
	Inbound             []ent.Hook
	InboundItem         []ent.Hook
	Inventory           []ent.Hook
	Order               []ent.Hook
	OrderHoldReason     []ent.Hook
	OrderItem           []ent.Hook
	OrderTaxation       []ent.Hook
	PickupOrder         []ent.Hook
	PickupOrderItem     []ent.Hook
	PlatformProduct     []ent.Hook
	Product             []ent.Hook
	ProductMapping      []ent.Hook
	Sequence            []ent.Hook
	Store               []ent.Hook
	TaskSchedule        []ent.Hook
	Tenant              []ent.Hook
	Token               []ent.Hook
	TrackMapping        []ent.Hook
	Transaction         []ent.Hook
	TransactionDetail   []ent.Hook
	User                []ent.Hook
	UserReferral        []ent.Hook
	ValueAddedTax       []ent.Hook
	Warehouse           []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}
