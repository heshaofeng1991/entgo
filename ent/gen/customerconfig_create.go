// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/customerconfig"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// CustomerConfigCreate is the builder for creating a CustomerConfig entity.
type CustomerConfigCreate struct {
	config
	mutation *CustomerConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CustomerConfigCreate) SetCreatedAt(t time.Time) *CustomerConfigCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CustomerConfigCreate) SetNillableCreatedAt(t *time.Time) *CustomerConfigCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CustomerConfigCreate) SetUpdatedAt(t time.Time) *CustomerConfigCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CustomerConfigCreate) SetNillableUpdatedAt(t *time.Time) *CustomerConfigCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CustomerConfigCreate) SetDeletedAt(t time.Time) *CustomerConfigCreate {
	ccc.mutation.SetDeletedAt(t)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CustomerConfigCreate) SetNillableDeletedAt(t *time.Time) *CustomerConfigCreate {
	if t != nil {
		ccc.SetDeletedAt(*t)
	}
	return ccc
}

// SetChannelID sets the "channel_id" field.
func (ccc *CustomerConfigCreate) SetChannelID(i int64) *CustomerConfigCreate {
	ccc.mutation.SetChannelID(i)
	return ccc
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (ccc *CustomerConfigCreate) SetExcludeCountryCode(s string) *CustomerConfigCreate {
	ccc.mutation.SetExcludeCountryCode(s)
	return ccc
}

// SetStatus sets the "status" field.
func (ccc *CustomerConfigCreate) SetStatus(i int8) *CustomerConfigCreate {
	ccc.mutation.SetStatus(i)
	return ccc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccc *CustomerConfigCreate) SetNillableStatus(i *int8) *CustomerConfigCreate {
	if i != nil {
		ccc.SetStatus(*i)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CustomerConfigCreate) SetID(i int64) *CustomerConfigCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ccc *CustomerConfigCreate) SetTenantID(id int64) *CustomerConfigCreate {
	ccc.mutation.SetTenantID(id)
	return ccc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccc *CustomerConfigCreate) SetTenant(t *Tenant) *CustomerConfigCreate {
	return ccc.SetTenantID(t.ID)
}

// Mutation returns the CustomerConfigMutation object of the builder.
func (ccc *CustomerConfigCreate) Mutation() *CustomerConfigMutation {
	return ccc.mutation
}

// Save creates the CustomerConfig in the database.
func (ccc *CustomerConfigCreate) Save(ctx context.Context) (*CustomerConfig, error) {
	var (
		err  error
		node *CustomerConfig
	)
	if err := ccc.defaults(); err != nil {
		return nil, err
	}
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CustomerConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CustomerConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CustomerConfigCreate) SaveX(ctx context.Context) *CustomerConfig {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CustomerConfigCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CustomerConfigCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CustomerConfigCreate) defaults() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		if customerconfig.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized customerconfig.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := customerconfig.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		if customerconfig.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized customerconfig.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := customerconfig.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.Status(); !ok {
		v := customerconfig.DefaultStatus
		ccc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CustomerConfigCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "CustomerConfig.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "CustomerConfig.updated_at"`)}
	}
	if _, ok := ccc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`gen: missing required field "CustomerConfig.channel_id"`)}
	}
	if _, ok := ccc.mutation.ExcludeCountryCode(); !ok {
		return &ValidationError{Name: "exclude_country_code", err: errors.New(`gen: missing required field "CustomerConfig.exclude_country_code"`)}
	}
	if _, ok := ccc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "CustomerConfig.status"`)}
	}
	if _, ok := ccc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "CustomerConfig.tenant"`)}
	}
	return nil
}

func (ccc *CustomerConfigCreate) sqlSave(ctx context.Context) (*CustomerConfig, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ccc *CustomerConfigCreate) createSpec() (*CustomerConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerConfig{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customerconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customerconfig.FieldID,
			},
		}
	)
	_spec.Schema = ccc.schemaConfig.CustomerConfig
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(customerconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(customerconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(customerconfig.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ccc.mutation.ChannelID(); ok {
		_spec.SetField(customerconfig.FieldChannelID, field.TypeInt64, value)
		_node.ChannelID = value
	}
	if value, ok := ccc.mutation.ExcludeCountryCode(); ok {
		_spec.SetField(customerconfig.FieldExcludeCountryCode, field.TypeString, value)
		_node.ExcludeCountryCode = value
	}
	if value, ok := ccc.mutation.Status(); ok {
		_spec.SetField(customerconfig.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if nodes := ccc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ccc.schemaConfig.CustomerConfig
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_config_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccc *CustomerConfigCreate) OnConflict(opts ...sql.ConflictOption) *CustomerConfigUpsertOne {
	ccc.conflict = opts
	return &CustomerConfigUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *CustomerConfigCreate) OnConflictColumns(columns ...string) *CustomerConfigUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &CustomerConfigUpsertOne{
		create: ccc,
	}
}

type (
	// CustomerConfigUpsertOne is the builder for "upsert"-ing
	//  one CustomerConfig node.
	CustomerConfigUpsertOne struct {
		create *CustomerConfigCreate
	}

	// CustomerConfigUpsert is the "OnConflict" setter.
	CustomerConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerConfigUpsert) SetUpdatedAt(v time.Time) *CustomerConfigUpsert {
	u.Set(customerconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerConfigUpsert) UpdateUpdatedAt() *CustomerConfigUpsert {
	u.SetExcluded(customerconfig.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerConfigUpsert) SetDeletedAt(v time.Time) *CustomerConfigUpsert {
	u.Set(customerconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerConfigUpsert) UpdateDeletedAt() *CustomerConfigUpsert {
	u.SetExcluded(customerconfig.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerConfigUpsert) ClearDeletedAt() *CustomerConfigUpsert {
	u.SetNull(customerconfig.FieldDeletedAt)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *CustomerConfigUpsert) SetChannelID(v int64) *CustomerConfigUpsert {
	u.Set(customerconfig.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CustomerConfigUpsert) UpdateChannelID() *CustomerConfigUpsert {
	u.SetExcluded(customerconfig.FieldChannelID)
	return u
}

// AddChannelID adds v to the "channel_id" field.
func (u *CustomerConfigUpsert) AddChannelID(v int64) *CustomerConfigUpsert {
	u.Add(customerconfig.FieldChannelID, v)
	return u
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (u *CustomerConfigUpsert) SetExcludeCountryCode(v string) *CustomerConfigUpsert {
	u.Set(customerconfig.FieldExcludeCountryCode, v)
	return u
}

// UpdateExcludeCountryCode sets the "exclude_country_code" field to the value that was provided on create.
func (u *CustomerConfigUpsert) UpdateExcludeCountryCode() *CustomerConfigUpsert {
	u.SetExcluded(customerconfig.FieldExcludeCountryCode)
	return u
}

// SetStatus sets the "status" field.
func (u *CustomerConfigUpsert) SetStatus(v int8) *CustomerConfigUpsert {
	u.Set(customerconfig.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerConfigUpsert) UpdateStatus() *CustomerConfigUpsert {
	u.SetExcluded(customerconfig.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CustomerConfigUpsert) AddStatus(v int8) *CustomerConfigUpsert {
	u.Add(customerconfig.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customerconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerConfigUpsertOne) UpdateNewValues() *CustomerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customerconfig.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customerconfig.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerConfigUpsertOne) Ignore() *CustomerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerConfigUpsertOne) DoNothing() *CustomerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerConfigCreate.OnConflict
// documentation for more info.
func (u *CustomerConfigUpsertOne) Update(set func(*CustomerConfigUpsert)) *CustomerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerConfigUpsertOne) SetUpdatedAt(v time.Time) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerConfigUpsertOne) UpdateUpdatedAt() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerConfigUpsertOne) SetDeletedAt(v time.Time) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerConfigUpsertOne) UpdateDeletedAt() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerConfigUpsertOne) ClearDeletedAt() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *CustomerConfigUpsertOne) SetChannelID(v int64) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *CustomerConfigUpsertOne) AddChannelID(v int64) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CustomerConfigUpsertOne) UpdateChannelID() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateChannelID()
	})
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (u *CustomerConfigUpsertOne) SetExcludeCountryCode(v string) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetExcludeCountryCode(v)
	})
}

// UpdateExcludeCountryCode sets the "exclude_country_code" field to the value that was provided on create.
func (u *CustomerConfigUpsertOne) UpdateExcludeCountryCode() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateExcludeCountryCode()
	})
}

// SetStatus sets the "status" field.
func (u *CustomerConfigUpsertOne) SetStatus(v int8) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CustomerConfigUpsertOne) AddStatus(v int8) *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerConfigUpsertOne) UpdateStatus() *CustomerConfigUpsertOne {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CustomerConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for CustomerConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerConfigUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerConfigUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerConfigCreateBulk is the builder for creating many CustomerConfig entities in bulk.
type CustomerConfigCreateBulk struct {
	config
	builders []*CustomerConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerConfig entities in the database.
func (cccb *CustomerConfigCreateBulk) Save(ctx context.Context) ([]*CustomerConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CustomerConfig, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CustomerConfigCreateBulk) SaveX(ctx context.Context) []*CustomerConfig {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CustomerConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CustomerConfigCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cccb *CustomerConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerConfigUpsertBulk {
	cccb.conflict = opts
	return &CustomerConfigUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *CustomerConfigCreateBulk) OnConflictColumns(columns ...string) *CustomerConfigUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerConfigUpsertBulk{
		create: cccb,
	}
}

// CustomerConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerConfig nodes.
type CustomerConfigUpsertBulk struct {
	create *CustomerConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customerconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerConfigUpsertBulk) UpdateNewValues() *CustomerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customerconfig.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customerconfig.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerConfigUpsertBulk) Ignore() *CustomerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerConfigUpsertBulk) DoNothing() *CustomerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerConfigCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerConfigUpsertBulk) Update(set func(*CustomerConfigUpsert)) *CustomerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerConfigUpsertBulk) SetUpdatedAt(v time.Time) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerConfigUpsertBulk) UpdateUpdatedAt() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerConfigUpsertBulk) SetDeletedAt(v time.Time) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerConfigUpsertBulk) UpdateDeletedAt() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerConfigUpsertBulk) ClearDeletedAt() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.ClearDeletedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *CustomerConfigUpsertBulk) SetChannelID(v int64) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *CustomerConfigUpsertBulk) AddChannelID(v int64) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *CustomerConfigUpsertBulk) UpdateChannelID() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateChannelID()
	})
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (u *CustomerConfigUpsertBulk) SetExcludeCountryCode(v string) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetExcludeCountryCode(v)
	})
}

// UpdateExcludeCountryCode sets the "exclude_country_code" field to the value that was provided on create.
func (u *CustomerConfigUpsertBulk) UpdateExcludeCountryCode() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateExcludeCountryCode()
	})
}

// SetStatus sets the "status" field.
func (u *CustomerConfigUpsertBulk) SetStatus(v int8) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CustomerConfigUpsertBulk) AddStatus(v int8) *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CustomerConfigUpsertBulk) UpdateStatus() *CustomerConfigUpsertBulk {
	return u.Update(func(s *CustomerConfigUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CustomerConfigUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the CustomerConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for CustomerConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
