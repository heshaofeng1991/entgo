// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// PlatformProductUpdate is the builder for updating PlatformProduct entities.
type PlatformProductUpdate struct {
	config
	hooks     []Hook
	mutation  *PlatformProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlatformProductUpdate builder.
func (ppu *PlatformProductUpdate) Where(ps ...predicate.PlatformProduct) *PlatformProductUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *PlatformProductUpdate) SetUpdatedAt(t time.Time) *PlatformProductUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetDeletedAt sets the "deleted_at" field.
func (ppu *PlatformProductUpdate) SetDeletedAt(t time.Time) *PlatformProductUpdate {
	ppu.mutation.SetDeletedAt(t)
	return ppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableDeletedAt(t *time.Time) *PlatformProductUpdate {
	if t != nil {
		ppu.SetDeletedAt(*t)
	}
	return ppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppu *PlatformProductUpdate) ClearDeletedAt() *PlatformProductUpdate {
	ppu.mutation.ClearDeletedAt()
	return ppu
}

// SetStoreID sets the "store_id" field.
func (ppu *PlatformProductUpdate) SetStoreID(i int64) *PlatformProductUpdate {
	ppu.mutation.SetStoreID(i)
	return ppu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableStoreID(i *int64) *PlatformProductUpdate {
	if i != nil {
		ppu.SetStoreID(*i)
	}
	return ppu
}

// ClearStoreID clears the value of the "store_id" field.
func (ppu *PlatformProductUpdate) ClearStoreID() *PlatformProductUpdate {
	ppu.mutation.ClearStoreID()
	return ppu
}

// SetListingID sets the "listing_id" field.
func (ppu *PlatformProductUpdate) SetListingID(s string) *PlatformProductUpdate {
	ppu.mutation.SetListingID(s)
	return ppu
}

// SetCollectionID sets the "collection_id" field.
func (ppu *PlatformProductUpdate) SetCollectionID(s string) *PlatformProductUpdate {
	ppu.mutation.SetCollectionID(s)
	return ppu
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableCollectionID(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetCollectionID(*s)
	}
	return ppu
}

// SetListingSku sets the "listing_sku" field.
func (ppu *PlatformProductUpdate) SetListingSku(s string) *PlatformProductUpdate {
	ppu.mutation.SetListingSku(s)
	return ppu
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableListingSku(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetListingSku(*s)
	}
	return ppu
}

// SetBarcode sets the "barcode" field.
func (ppu *PlatformProductUpdate) SetBarcode(s string) *PlatformProductUpdate {
	ppu.mutation.SetBarcode(s)
	return ppu
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableBarcode(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetBarcode(*s)
	}
	return ppu
}

// SetName sets the "name" field.
func (ppu *PlatformProductUpdate) SetName(s string) *PlatformProductUpdate {
	ppu.mutation.SetName(s)
	return ppu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableName(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetName(*s)
	}
	return ppu
}

// SetImages sets the "images" field.
func (ppu *PlatformProductUpdate) SetImages(s string) *PlatformProductUpdate {
	ppu.mutation.SetImages(s)
	return ppu
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableImages(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetImages(*s)
	}
	return ppu
}

// ClearImages clears the value of the "images" field.
func (ppu *PlatformProductUpdate) ClearImages() *PlatformProductUpdate {
	ppu.mutation.ClearImages()
	return ppu
}

// SetVendor sets the "vendor" field.
func (ppu *PlatformProductUpdate) SetVendor(s string) *PlatformProductUpdate {
	ppu.mutation.SetVendor(s)
	return ppu
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableVendor(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetVendor(*s)
	}
	return ppu
}

// ClearVendor clears the value of the "vendor" field.
func (ppu *PlatformProductUpdate) ClearVendor() *PlatformProductUpdate {
	ppu.mutation.ClearVendor()
	return ppu
}

// SetSellingPrice sets the "selling_price" field.
func (ppu *PlatformProductUpdate) SetSellingPrice(f float64) *PlatformProductUpdate {
	ppu.mutation.ResetSellingPrice()
	ppu.mutation.SetSellingPrice(f)
	return ppu
}

// SetNillableSellingPrice sets the "selling_price" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableSellingPrice(f *float64) *PlatformProductUpdate {
	if f != nil {
		ppu.SetSellingPrice(*f)
	}
	return ppu
}

// AddSellingPrice adds f to the "selling_price" field.
func (ppu *PlatformProductUpdate) AddSellingPrice(f float64) *PlatformProductUpdate {
	ppu.mutation.AddSellingPrice(f)
	return ppu
}

// SetCurrency sets the "currency" field.
func (ppu *PlatformProductUpdate) SetCurrency(s string) *PlatformProductUpdate {
	ppu.mutation.SetCurrency(s)
	return ppu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableCurrency(s *string) *PlatformProductUpdate {
	if s != nil {
		ppu.SetCurrency(*s)
	}
	return ppu
}

// SetGrams sets the "grams" field.
func (ppu *PlatformProductUpdate) SetGrams(i int) *PlatformProductUpdate {
	ppu.mutation.ResetGrams()
	ppu.mutation.SetGrams(i)
	return ppu
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableGrams(i *int) *PlatformProductUpdate {
	if i != nil {
		ppu.SetGrams(*i)
	}
	return ppu
}

// AddGrams adds i to the "grams" field.
func (ppu *PlatformProductUpdate) AddGrams(i int) *PlatformProductUpdate {
	ppu.mutation.AddGrams(i)
	return ppu
}

// SetPlatformStatus sets the "platform_status" field.
func (ppu *PlatformProductUpdate) SetPlatformStatus(i int8) *PlatformProductUpdate {
	ppu.mutation.ResetPlatformStatus()
	ppu.mutation.SetPlatformStatus(i)
	return ppu
}

// SetNillablePlatformStatus sets the "platform_status" field if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillablePlatformStatus(i *int8) *PlatformProductUpdate {
	if i != nil {
		ppu.SetPlatformStatus(*i)
	}
	return ppu
}

// AddPlatformStatus adds i to the "platform_status" field.
func (ppu *PlatformProductUpdate) AddPlatformStatus(i int8) *PlatformProductUpdate {
	ppu.mutation.AddPlatformStatus(i)
	return ppu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ppu *PlatformProductUpdate) SetTenantID(id int64) *PlatformProductUpdate {
	ppu.mutation.SetTenantID(id)
	return ppu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ppu *PlatformProductUpdate) SetTenant(t *Tenant) *PlatformProductUpdate {
	return ppu.SetTenantID(t.ID)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (ppu *PlatformProductUpdate) AddProductMappingIDs(ids ...int64) *PlatformProductUpdate {
	ppu.mutation.AddProductMappingIDs(ids...)
	return ppu
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (ppu *PlatformProductUpdate) AddProductMappings(p ...*ProductMapping) *PlatformProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddProductMappingIDs(ids...)
}

// SetStoresID sets the "stores" edge to the Store entity by ID.
func (ppu *PlatformProductUpdate) SetStoresID(id int64) *PlatformProductUpdate {
	ppu.mutation.SetStoresID(id)
	return ppu
}

// SetNillableStoresID sets the "stores" edge to the Store entity by ID if the given value is not nil.
func (ppu *PlatformProductUpdate) SetNillableStoresID(id *int64) *PlatformProductUpdate {
	if id != nil {
		ppu = ppu.SetStoresID(*id)
	}
	return ppu
}

// SetStores sets the "stores" edge to the Store entity.
func (ppu *PlatformProductUpdate) SetStores(s *Store) *PlatformProductUpdate {
	return ppu.SetStoresID(s.ID)
}

// Mutation returns the PlatformProductMutation object of the builder.
func (ppu *PlatformProductUpdate) Mutation() *PlatformProductMutation {
	return ppu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ppu *PlatformProductUpdate) ClearTenant() *PlatformProductUpdate {
	ppu.mutation.ClearTenant()
	return ppu
}

// ClearProductMappings clears all "product_mappings" edges to the ProductMapping entity.
func (ppu *PlatformProductUpdate) ClearProductMappings() *PlatformProductUpdate {
	ppu.mutation.ClearProductMappings()
	return ppu
}

// RemoveProductMappingIDs removes the "product_mappings" edge to ProductMapping entities by IDs.
func (ppu *PlatformProductUpdate) RemoveProductMappingIDs(ids ...int64) *PlatformProductUpdate {
	ppu.mutation.RemoveProductMappingIDs(ids...)
	return ppu
}

// RemoveProductMappings removes "product_mappings" edges to ProductMapping entities.
func (ppu *PlatformProductUpdate) RemoveProductMappings(p ...*ProductMapping) *PlatformProductUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveProductMappingIDs(ids...)
}

// ClearStores clears the "stores" edge to the Store entity.
func (ppu *PlatformProductUpdate) ClearStores() *PlatformProductUpdate {
	ppu.mutation.ClearStores()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PlatformProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ppu.defaults(); err != nil {
		return 0, err
	}
	if len(ppu.hooks) == 0 {
		if err = ppu.check(); err != nil {
			return 0, err
		}
		affected, err = ppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlatformProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppu.check(); err != nil {
				return 0, err
			}
			ppu.mutation = mutation
			affected, err = ppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ppu.hooks) - 1; i >= 0; i-- {
			if ppu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PlatformProductUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PlatformProductUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PlatformProductUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PlatformProductUpdate) defaults() error {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		if platformproduct.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized platformproduct.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := platformproduct.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppu *PlatformProductUpdate) check() error {
	if v, ok := ppu.mutation.ListingID(); ok {
		if err := platformproduct.ListingIDValidator(v); err != nil {
			return &ValidationError{Name: "listing_id", err: fmt.Errorf(`gen: validator failed for field "PlatformProduct.listing_id": %w`, err)}
		}
	}
	if _, ok := ppu.mutation.TenantID(); ppu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "PlatformProduct.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppu *PlatformProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlatformProductUpdate {
	ppu.modifiers = append(ppu.modifiers, modifiers...)
	return ppu
}

func (ppu *PlatformProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   platformproduct.Table,
			Columns: platformproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: platformproduct.FieldID,
			},
		},
	}
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(platformproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.DeletedAt(); ok {
		_spec.SetField(platformproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if ppu.mutation.DeletedAtCleared() {
		_spec.ClearField(platformproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ppu.mutation.ListingID(); ok {
		_spec.SetField(platformproduct.FieldListingID, field.TypeString, value)
	}
	if value, ok := ppu.mutation.CollectionID(); ok {
		_spec.SetField(platformproduct.FieldCollectionID, field.TypeString, value)
	}
	if value, ok := ppu.mutation.ListingSku(); ok {
		_spec.SetField(platformproduct.FieldListingSku, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Barcode(); ok {
		_spec.SetField(platformproduct.FieldBarcode, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Name(); ok {
		_spec.SetField(platformproduct.FieldName, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Images(); ok {
		_spec.SetField(platformproduct.FieldImages, field.TypeString, value)
	}
	if ppu.mutation.ImagesCleared() {
		_spec.ClearField(platformproduct.FieldImages, field.TypeString)
	}
	if value, ok := ppu.mutation.Vendor(); ok {
		_spec.SetField(platformproduct.FieldVendor, field.TypeString, value)
	}
	if ppu.mutation.VendorCleared() {
		_spec.ClearField(platformproduct.FieldVendor, field.TypeString)
	}
	if value, ok := ppu.mutation.SellingPrice(); ok {
		_spec.SetField(platformproduct.FieldSellingPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedSellingPrice(); ok {
		_spec.AddField(platformproduct.FieldSellingPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.Currency(); ok {
		_spec.SetField(platformproduct.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Grams(); ok {
		_spec.SetField(platformproduct.FieldGrams, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedGrams(); ok {
		_spec.AddField(platformproduct.FieldGrams, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.PlatformStatus(); ok {
		_spec.SetField(platformproduct.FieldPlatformStatus, field.TypeInt8, value)
	}
	if value, ok := ppu.mutation.AddedPlatformStatus(); ok {
		_spec.AddField(platformproduct.FieldPlatformStatus, field.TypeInt8, value)
	}
	if ppu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.ProductMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedProductMappingsIDs(); len(nodes) > 0 && !ppu.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ppu.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ppu.schemaConfig.PlatformProduct
	ctx = internal.NewSchemaConfigContext(ctx, ppu.schemaConfig)
	_spec.AddModifiers(ppu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PlatformProductUpdateOne is the builder for updating a single PlatformProduct entity.
type PlatformProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlatformProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *PlatformProductUpdateOne) SetUpdatedAt(t time.Time) *PlatformProductUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ppuo *PlatformProductUpdateOne) SetDeletedAt(t time.Time) *PlatformProductUpdateOne {
	ppuo.mutation.SetDeletedAt(t)
	return ppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableDeletedAt(t *time.Time) *PlatformProductUpdateOne {
	if t != nil {
		ppuo.SetDeletedAt(*t)
	}
	return ppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppuo *PlatformProductUpdateOne) ClearDeletedAt() *PlatformProductUpdateOne {
	ppuo.mutation.ClearDeletedAt()
	return ppuo
}

// SetStoreID sets the "store_id" field.
func (ppuo *PlatformProductUpdateOne) SetStoreID(i int64) *PlatformProductUpdateOne {
	ppuo.mutation.SetStoreID(i)
	return ppuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableStoreID(i *int64) *PlatformProductUpdateOne {
	if i != nil {
		ppuo.SetStoreID(*i)
	}
	return ppuo
}

// ClearStoreID clears the value of the "store_id" field.
func (ppuo *PlatformProductUpdateOne) ClearStoreID() *PlatformProductUpdateOne {
	ppuo.mutation.ClearStoreID()
	return ppuo
}

// SetListingID sets the "listing_id" field.
func (ppuo *PlatformProductUpdateOne) SetListingID(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetListingID(s)
	return ppuo
}

// SetCollectionID sets the "collection_id" field.
func (ppuo *PlatformProductUpdateOne) SetCollectionID(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetCollectionID(s)
	return ppuo
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableCollectionID(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetCollectionID(*s)
	}
	return ppuo
}

// SetListingSku sets the "listing_sku" field.
func (ppuo *PlatformProductUpdateOne) SetListingSku(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetListingSku(s)
	return ppuo
}

// SetNillableListingSku sets the "listing_sku" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableListingSku(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetListingSku(*s)
	}
	return ppuo
}

// SetBarcode sets the "barcode" field.
func (ppuo *PlatformProductUpdateOne) SetBarcode(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetBarcode(s)
	return ppuo
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableBarcode(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetBarcode(*s)
	}
	return ppuo
}

// SetName sets the "name" field.
func (ppuo *PlatformProductUpdateOne) SetName(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetName(s)
	return ppuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableName(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetName(*s)
	}
	return ppuo
}

// SetImages sets the "images" field.
func (ppuo *PlatformProductUpdateOne) SetImages(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetImages(s)
	return ppuo
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableImages(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetImages(*s)
	}
	return ppuo
}

// ClearImages clears the value of the "images" field.
func (ppuo *PlatformProductUpdateOne) ClearImages() *PlatformProductUpdateOne {
	ppuo.mutation.ClearImages()
	return ppuo
}

// SetVendor sets the "vendor" field.
func (ppuo *PlatformProductUpdateOne) SetVendor(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetVendor(s)
	return ppuo
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableVendor(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetVendor(*s)
	}
	return ppuo
}

// ClearVendor clears the value of the "vendor" field.
func (ppuo *PlatformProductUpdateOne) ClearVendor() *PlatformProductUpdateOne {
	ppuo.mutation.ClearVendor()
	return ppuo
}

// SetSellingPrice sets the "selling_price" field.
func (ppuo *PlatformProductUpdateOne) SetSellingPrice(f float64) *PlatformProductUpdateOne {
	ppuo.mutation.ResetSellingPrice()
	ppuo.mutation.SetSellingPrice(f)
	return ppuo
}

// SetNillableSellingPrice sets the "selling_price" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableSellingPrice(f *float64) *PlatformProductUpdateOne {
	if f != nil {
		ppuo.SetSellingPrice(*f)
	}
	return ppuo
}

// AddSellingPrice adds f to the "selling_price" field.
func (ppuo *PlatformProductUpdateOne) AddSellingPrice(f float64) *PlatformProductUpdateOne {
	ppuo.mutation.AddSellingPrice(f)
	return ppuo
}

// SetCurrency sets the "currency" field.
func (ppuo *PlatformProductUpdateOne) SetCurrency(s string) *PlatformProductUpdateOne {
	ppuo.mutation.SetCurrency(s)
	return ppuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableCurrency(s *string) *PlatformProductUpdateOne {
	if s != nil {
		ppuo.SetCurrency(*s)
	}
	return ppuo
}

// SetGrams sets the "grams" field.
func (ppuo *PlatformProductUpdateOne) SetGrams(i int) *PlatformProductUpdateOne {
	ppuo.mutation.ResetGrams()
	ppuo.mutation.SetGrams(i)
	return ppuo
}

// SetNillableGrams sets the "grams" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableGrams(i *int) *PlatformProductUpdateOne {
	if i != nil {
		ppuo.SetGrams(*i)
	}
	return ppuo
}

// AddGrams adds i to the "grams" field.
func (ppuo *PlatformProductUpdateOne) AddGrams(i int) *PlatformProductUpdateOne {
	ppuo.mutation.AddGrams(i)
	return ppuo
}

// SetPlatformStatus sets the "platform_status" field.
func (ppuo *PlatformProductUpdateOne) SetPlatformStatus(i int8) *PlatformProductUpdateOne {
	ppuo.mutation.ResetPlatformStatus()
	ppuo.mutation.SetPlatformStatus(i)
	return ppuo
}

// SetNillablePlatformStatus sets the "platform_status" field if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillablePlatformStatus(i *int8) *PlatformProductUpdateOne {
	if i != nil {
		ppuo.SetPlatformStatus(*i)
	}
	return ppuo
}

// AddPlatformStatus adds i to the "platform_status" field.
func (ppuo *PlatformProductUpdateOne) AddPlatformStatus(i int8) *PlatformProductUpdateOne {
	ppuo.mutation.AddPlatformStatus(i)
	return ppuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ppuo *PlatformProductUpdateOne) SetTenantID(id int64) *PlatformProductUpdateOne {
	ppuo.mutation.SetTenantID(id)
	return ppuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ppuo *PlatformProductUpdateOne) SetTenant(t *Tenant) *PlatformProductUpdateOne {
	return ppuo.SetTenantID(t.ID)
}

// AddProductMappingIDs adds the "product_mappings" edge to the ProductMapping entity by IDs.
func (ppuo *PlatformProductUpdateOne) AddProductMappingIDs(ids ...int64) *PlatformProductUpdateOne {
	ppuo.mutation.AddProductMappingIDs(ids...)
	return ppuo
}

// AddProductMappings adds the "product_mappings" edges to the ProductMapping entity.
func (ppuo *PlatformProductUpdateOne) AddProductMappings(p ...*ProductMapping) *PlatformProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddProductMappingIDs(ids...)
}

// SetStoresID sets the "stores" edge to the Store entity by ID.
func (ppuo *PlatformProductUpdateOne) SetStoresID(id int64) *PlatformProductUpdateOne {
	ppuo.mutation.SetStoresID(id)
	return ppuo
}

// SetNillableStoresID sets the "stores" edge to the Store entity by ID if the given value is not nil.
func (ppuo *PlatformProductUpdateOne) SetNillableStoresID(id *int64) *PlatformProductUpdateOne {
	if id != nil {
		ppuo = ppuo.SetStoresID(*id)
	}
	return ppuo
}

// SetStores sets the "stores" edge to the Store entity.
func (ppuo *PlatformProductUpdateOne) SetStores(s *Store) *PlatformProductUpdateOne {
	return ppuo.SetStoresID(s.ID)
}

// Mutation returns the PlatformProductMutation object of the builder.
func (ppuo *PlatformProductUpdateOne) Mutation() *PlatformProductMutation {
	return ppuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ppuo *PlatformProductUpdateOne) ClearTenant() *PlatformProductUpdateOne {
	ppuo.mutation.ClearTenant()
	return ppuo
}

// ClearProductMappings clears all "product_mappings" edges to the ProductMapping entity.
func (ppuo *PlatformProductUpdateOne) ClearProductMappings() *PlatformProductUpdateOne {
	ppuo.mutation.ClearProductMappings()
	return ppuo
}

// RemoveProductMappingIDs removes the "product_mappings" edge to ProductMapping entities by IDs.
func (ppuo *PlatformProductUpdateOne) RemoveProductMappingIDs(ids ...int64) *PlatformProductUpdateOne {
	ppuo.mutation.RemoveProductMappingIDs(ids...)
	return ppuo
}

// RemoveProductMappings removes "product_mappings" edges to ProductMapping entities.
func (ppuo *PlatformProductUpdateOne) RemoveProductMappings(p ...*ProductMapping) *PlatformProductUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveProductMappingIDs(ids...)
}

// ClearStores clears the "stores" edge to the Store entity.
func (ppuo *PlatformProductUpdateOne) ClearStores() *PlatformProductUpdateOne {
	ppuo.mutation.ClearStores()
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PlatformProductUpdateOne) Select(field string, fields ...string) *PlatformProductUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PlatformProduct entity.
func (ppuo *PlatformProductUpdateOne) Save(ctx context.Context) (*PlatformProduct, error) {
	var (
		err  error
		node *PlatformProduct
	)
	if err := ppuo.defaults(); err != nil {
		return nil, err
	}
	if len(ppuo.hooks) == 0 {
		if err = ppuo.check(); err != nil {
			return nil, err
		}
		node, err = ppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlatformProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppuo.check(); err != nil {
				return nil, err
			}
			ppuo.mutation = mutation
			node, err = ppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ppuo.hooks) - 1; i >= 0; i-- {
			if ppuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ppuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ppuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlatformProduct)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlatformProductMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PlatformProductUpdateOne) SaveX(ctx context.Context) *PlatformProduct {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PlatformProductUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PlatformProductUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PlatformProductUpdateOne) defaults() error {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		if platformproduct.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized platformproduct.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := platformproduct.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *PlatformProductUpdateOne) check() error {
	if v, ok := ppuo.mutation.ListingID(); ok {
		if err := platformproduct.ListingIDValidator(v); err != nil {
			return &ValidationError{Name: "listing_id", err: fmt.Errorf(`gen: validator failed for field "PlatformProduct.listing_id": %w`, err)}
		}
	}
	if _, ok := ppuo.mutation.TenantID(); ppuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "PlatformProduct.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppuo *PlatformProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlatformProductUpdateOne {
	ppuo.modifiers = append(ppuo.modifiers, modifiers...)
	return ppuo
}

func (ppuo *PlatformProductUpdateOne) sqlSave(ctx context.Context) (_node *PlatformProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   platformproduct.Table,
			Columns: platformproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: platformproduct.FieldID,
			},
		},
	}
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "PlatformProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformproduct.FieldID)
		for _, f := range fields {
			if !platformproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != platformproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(platformproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.DeletedAt(); ok {
		_spec.SetField(platformproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if ppuo.mutation.DeletedAtCleared() {
		_spec.ClearField(platformproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ppuo.mutation.ListingID(); ok {
		_spec.SetField(platformproduct.FieldListingID, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.CollectionID(); ok {
		_spec.SetField(platformproduct.FieldCollectionID, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.ListingSku(); ok {
		_spec.SetField(platformproduct.FieldListingSku, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Barcode(); ok {
		_spec.SetField(platformproduct.FieldBarcode, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Name(); ok {
		_spec.SetField(platformproduct.FieldName, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Images(); ok {
		_spec.SetField(platformproduct.FieldImages, field.TypeString, value)
	}
	if ppuo.mutation.ImagesCleared() {
		_spec.ClearField(platformproduct.FieldImages, field.TypeString)
	}
	if value, ok := ppuo.mutation.Vendor(); ok {
		_spec.SetField(platformproduct.FieldVendor, field.TypeString, value)
	}
	if ppuo.mutation.VendorCleared() {
		_spec.ClearField(platformproduct.FieldVendor, field.TypeString)
	}
	if value, ok := ppuo.mutation.SellingPrice(); ok {
		_spec.SetField(platformproduct.FieldSellingPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedSellingPrice(); ok {
		_spec.AddField(platformproduct.FieldSellingPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.Currency(); ok {
		_spec.SetField(platformproduct.FieldCurrency, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Grams(); ok {
		_spec.SetField(platformproduct.FieldGrams, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedGrams(); ok {
		_spec.AddField(platformproduct.FieldGrams, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.PlatformStatus(); ok {
		_spec.SetField(platformproduct.FieldPlatformStatus, field.TypeInt8, value)
	}
	if value, ok := ppuo.mutation.AddedPlatformStatus(); ok {
		_spec.AddField(platformproduct.FieldPlatformStatus, field.TypeInt8, value)
	}
	if ppuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.ProductMapping
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedProductMappingsIDs(); len(nodes) > 0 && !ppuo.mutation.ProductMappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductMappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: productmapping.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.ProductMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.PlatformProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: store.FieldID,
				},
			},
		}
		edge.Schema = ppuo.schemaConfig.PlatformProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ppuo.schemaConfig.PlatformProduct
	ctx = internal.NewSchemaConfigContext(ctx, ppuo.schemaConfig)
	_spec.AddModifiers(ppuo.modifiers...)
	_node = &PlatformProduct{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
