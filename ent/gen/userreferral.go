// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/userreferral"
)

// UserReferral is the model entity for the UserReferral schema.
type UserReferral struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 被邀请人ID
	UserID int64 `json:"user_id,omitempty"`
	// First Shipment Date
	FirstShipmentDate time.Time `json:"first_shipment_date,omitempty"`
	// Total Commission
	TotalCommission float64 `json:"total_commission,omitempty"`
	// Invited by user ID
	InvitedByUserID int64 `json:"invited_by_user_id,omitempty"`
	// 1=>Pending, 2=>Qualified
	Status int8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserReferralQuery when eager-loading is set.
	Edges                UserReferralEdges `json:"edges"`
	user_referral_tenant *int64
}

// UserReferralEdges holds the relations/edges for other nodes in the graph.
type UserReferralEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserReferralEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserReferral) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userreferral.FieldTotalCommission:
			values[i] = new(sql.NullFloat64)
		case userreferral.FieldID, userreferral.FieldUserID, userreferral.FieldInvitedByUserID, userreferral.FieldStatus:
			values[i] = new(sql.NullInt64)
		case userreferral.FieldCreatedAt, userreferral.FieldUpdatedAt, userreferral.FieldDeletedAt, userreferral.FieldFirstShipmentDate:
			values[i] = new(sql.NullTime)
		case userreferral.ForeignKeys[0]: // user_referral_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserReferral", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserReferral fields.
func (ur *UserReferral) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userreferral.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int64(value.Int64)
		case userreferral.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ur.CreatedAt = value.Time
			}
		case userreferral.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ur.UpdatedAt = value.Time
			}
		case userreferral.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ur.DeletedAt = value.Time
			}
		case userreferral.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ur.UserID = value.Int64
			}
		case userreferral.FieldFirstShipmentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_shipment_date", values[i])
			} else if value.Valid {
				ur.FirstShipmentDate = value.Time
			}
		case userreferral.FieldTotalCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_commission", values[i])
			} else if value.Valid {
				ur.TotalCommission = value.Float64
			}
		case userreferral.FieldInvitedByUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invited_by_user_id", values[i])
			} else if value.Valid {
				ur.InvitedByUserID = value.Int64
			}
		case userreferral.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ur.Status = int8(value.Int64)
			}
		case userreferral.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_referral_tenant", value)
			} else if value.Valid {
				ur.user_referral_tenant = new(int64)
				*ur.user_referral_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the UserReferral entity.
func (ur *UserReferral) QueryTenant() *TenantQuery {
	return (&UserReferralClient{config: ur.config}).QueryTenant(ur)
}

// Update returns a builder for updating this UserReferral.
// Note that you need to call UserReferral.Unwrap() before calling this method if this UserReferral
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserReferral) Update() *UserReferralUpdateOne {
	return (&UserReferralClient{config: ur.config}).UpdateOne(ur)
}

// Unwrap unwraps the UserReferral entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserReferral) Unwrap() *UserReferral {
	_tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("gen: UserReferral is not a transactional entity")
	}
	ur.config.driver = _tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserReferral) String() string {
	var builder strings.Builder
	builder.WriteString("UserReferral(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ur.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ur.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ur.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ur.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID))
	builder.WriteString(", ")
	builder.WriteString("first_shipment_date=")
	builder.WriteString(ur.FirstShipmentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("total_commission=")
	builder.WriteString(fmt.Sprintf("%v", ur.TotalCommission))
	builder.WriteString(", ")
	builder.WriteString("invited_by_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.InvitedByUserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ur.Status))
	builder.WriteByte(')')
	return builder.String()
}

// UserReferrals is a parsable slice of UserReferral.
type UserReferrals []*UserReferral

func (ur UserReferrals) config(cfg config) {
	for _i := range ur {
		ur[_i].config = cfg
	}
}
