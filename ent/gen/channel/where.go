// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// CourierPlatform applies equality check predicate on the "courier_platform" field. It's identical to CourierPlatformEQ.
func CourierPlatform(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// QuotationCurrency applies equality check predicate on the "quotation_currency" field. It's identical to QuotationCurrencyEQ.
func QuotationCurrency(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuotationCurrency), v))
	})
}

// VolumeFactor applies equality check predicate on the "volume_factor" field. It's identical to VolumeFactorEQ.
func VolumeFactor(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumeFactor), v))
	})
}

// EnName applies equality check predicate on the "en_name" field. It's identical to EnNameEQ.
func EnName(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnName), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// HasTrackingNumber applies equality check predicate on the "has_tracking_number" field. It's identical to HasTrackingNumberEQ.
func HasTrackingNumber(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasTrackingNumber), v))
	})
}

// MinNormalDays applies equality check predicate on the "min_normal_days" field. It's identical to MinNormalDaysEQ.
func MinNormalDays(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinNormalDays), v))
	})
}

// MaxNormalDays applies equality check predicate on the "max_normal_days" field. It's identical to MaxNormalDaysEQ.
func MaxNormalDays(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxNormalDays), v))
	})
}

// MaxWeight applies equality check predicate on the "max_weight" field. It's identical to MaxWeightEQ.
func MaxWeight(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxWeight), v))
	})
}

// MaxLength applies equality check predicate on the "max_length" field. It's identical to MaxLengthEQ.
func MaxLength(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxLength), v))
	})
}

// MinLength applies equality check predicate on the "min_length" field. It's identical to MinLengthEQ.
func MinLength(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinLength), v))
	})
}

// MaxThreeSideSum applies equality check predicate on the "max_three_side_sum" field. It's identical to MaxThreeSideSumEQ.
func MaxThreeSideSum(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxThreeSideSum), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// SortingPort applies equality check predicate on the "sorting_port" field. It's identical to SortingPortEQ.
func SortingPort(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingPort), v))
	})
}

// PrepayTariff applies equality check predicate on the "prepay_tariff" field. It's identical to PrepayTariffEQ.
func PrepayTariff(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	})
}

// ExcludeAttributes applies equality check predicate on the "exclude_attributes" field. It's identical to ExcludeAttributesEQ.
func ExcludeAttributes(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExcludeAttributes), v))
	})
}

// Battery applies equality check predicate on the "battery" field. It's identical to BatteryEQ.
func Battery(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattery), v))
	})
}

// Virtual applies equality check predicate on the "virtual" field. It's identical to VirtualEQ.
func Virtual(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtual), v))
	})
}

// ChannelType applies equality check predicate on the "channel_type" field. It's identical to ChannelTypeEQ.
func ChannelType(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelType), v))
	})
}

// DeliverDuty applies equality check predicate on the "deliver_duty" field. It's identical to DeliverDutyEQ.
func DeliverDuty(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliverDuty), v))
	})
}

// Special applies equality check predicate on the "special" field. It's identical to SpecialEQ.
func Special(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecial), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...int64) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...int64) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDGT applies the GT predicate on the "warehouse_id" field.
func WarehouseIDGT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDGTE applies the GTE predicate on the "warehouse_id" field.
func WarehouseIDGTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLT applies the LT predicate on the "warehouse_id" field.
func WarehouseIDLT(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLTE applies the LTE predicate on the "warehouse_id" field.
func WarehouseIDLTE(v int64) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarehouseID), v))
	})
}

// CourierPlatformEQ applies the EQ predicate on the "courier_platform" field.
func CourierPlatformEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformNEQ applies the NEQ predicate on the "courier_platform" field.
func CourierPlatformNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformIn applies the In predicate on the "courier_platform" field.
func CourierPlatformIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformNotIn applies the NotIn predicate on the "courier_platform" field.
func CourierPlatformNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourierPlatform), v...))
	})
}

// CourierPlatformGT applies the GT predicate on the "courier_platform" field.
func CourierPlatformGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformGTE applies the GTE predicate on the "courier_platform" field.
func CourierPlatformGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLT applies the LT predicate on the "courier_platform" field.
func CourierPlatformLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformLTE applies the LTE predicate on the "courier_platform" field.
func CourierPlatformLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContains applies the Contains predicate on the "courier_platform" field.
func CourierPlatformContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasPrefix applies the HasPrefix predicate on the "courier_platform" field.
func CourierPlatformHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformHasSuffix applies the HasSuffix predicate on the "courier_platform" field.
func CourierPlatformHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformEqualFold applies the EqualFold predicate on the "courier_platform" field.
func CourierPlatformEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourierPlatform), v))
	})
}

// CourierPlatformContainsFold applies the ContainsFold predicate on the "courier_platform" field.
func CourierPlatformContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourierPlatform), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// QuotationCurrencyEQ applies the EQ predicate on the "quotation_currency" field.
func QuotationCurrencyEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyNEQ applies the NEQ predicate on the "quotation_currency" field.
func QuotationCurrencyNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyIn applies the In predicate on the "quotation_currency" field.
func QuotationCurrencyIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuotationCurrency), v...))
	})
}

// QuotationCurrencyNotIn applies the NotIn predicate on the "quotation_currency" field.
func QuotationCurrencyNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuotationCurrency), v...))
	})
}

// QuotationCurrencyGT applies the GT predicate on the "quotation_currency" field.
func QuotationCurrencyGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyGTE applies the GTE predicate on the "quotation_currency" field.
func QuotationCurrencyGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyLT applies the LT predicate on the "quotation_currency" field.
func QuotationCurrencyLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyLTE applies the LTE predicate on the "quotation_currency" field.
func QuotationCurrencyLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyContains applies the Contains predicate on the "quotation_currency" field.
func QuotationCurrencyContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyHasPrefix applies the HasPrefix predicate on the "quotation_currency" field.
func QuotationCurrencyHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyHasSuffix applies the HasSuffix predicate on the "quotation_currency" field.
func QuotationCurrencyHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyEqualFold applies the EqualFold predicate on the "quotation_currency" field.
func QuotationCurrencyEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuotationCurrency), v))
	})
}

// QuotationCurrencyContainsFold applies the ContainsFold predicate on the "quotation_currency" field.
func QuotationCurrencyContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuotationCurrency), v))
	})
}

// VolumeFactorEQ applies the EQ predicate on the "volume_factor" field.
func VolumeFactorEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolumeFactor), v))
	})
}

// VolumeFactorNEQ applies the NEQ predicate on the "volume_factor" field.
func VolumeFactorNEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVolumeFactor), v))
	})
}

// VolumeFactorIn applies the In predicate on the "volume_factor" field.
func VolumeFactorIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVolumeFactor), v...))
	})
}

// VolumeFactorNotIn applies the NotIn predicate on the "volume_factor" field.
func VolumeFactorNotIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVolumeFactor), v...))
	})
}

// VolumeFactorGT applies the GT predicate on the "volume_factor" field.
func VolumeFactorGT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVolumeFactor), v))
	})
}

// VolumeFactorGTE applies the GTE predicate on the "volume_factor" field.
func VolumeFactorGTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVolumeFactor), v))
	})
}

// VolumeFactorLT applies the LT predicate on the "volume_factor" field.
func VolumeFactorLT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVolumeFactor), v))
	})
}

// VolumeFactorLTE applies the LTE predicate on the "volume_factor" field.
func VolumeFactorLTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVolumeFactor), v))
	})
}

// EnNameEQ applies the EQ predicate on the "en_name" field.
func EnNameEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnName), v))
	})
}

// EnNameNEQ applies the NEQ predicate on the "en_name" field.
func EnNameNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnName), v))
	})
}

// EnNameIn applies the In predicate on the "en_name" field.
func EnNameIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnName), v...))
	})
}

// EnNameNotIn applies the NotIn predicate on the "en_name" field.
func EnNameNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnName), v...))
	})
}

// EnNameGT applies the GT predicate on the "en_name" field.
func EnNameGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnName), v))
	})
}

// EnNameGTE applies the GTE predicate on the "en_name" field.
func EnNameGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnName), v))
	})
}

// EnNameLT applies the LT predicate on the "en_name" field.
func EnNameLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnName), v))
	})
}

// EnNameLTE applies the LTE predicate on the "en_name" field.
func EnNameLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnName), v))
	})
}

// EnNameContains applies the Contains predicate on the "en_name" field.
func EnNameContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEnName), v))
	})
}

// EnNameHasPrefix applies the HasPrefix predicate on the "en_name" field.
func EnNameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEnName), v))
	})
}

// EnNameHasSuffix applies the HasSuffix predicate on the "en_name" field.
func EnNameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEnName), v))
	})
}

// EnNameEqualFold applies the EqualFold predicate on the "en_name" field.
func EnNameEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEnName), v))
	})
}

// EnNameContainsFold applies the ContainsFold predicate on the "en_name" field.
func EnNameContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEnName), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// HasTrackingNumberEQ applies the EQ predicate on the "has_tracking_number" field.
func HasTrackingNumberEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasTrackingNumber), v))
	})
}

// HasTrackingNumberNEQ applies the NEQ predicate on the "has_tracking_number" field.
func HasTrackingNumberNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasTrackingNumber), v))
	})
}

// HasTrackingNumberIn applies the In predicate on the "has_tracking_number" field.
func HasTrackingNumberIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHasTrackingNumber), v...))
	})
}

// HasTrackingNumberNotIn applies the NotIn predicate on the "has_tracking_number" field.
func HasTrackingNumberNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHasTrackingNumber), v...))
	})
}

// HasTrackingNumberGT applies the GT predicate on the "has_tracking_number" field.
func HasTrackingNumberGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHasTrackingNumber), v))
	})
}

// HasTrackingNumberGTE applies the GTE predicate on the "has_tracking_number" field.
func HasTrackingNumberGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHasTrackingNumber), v))
	})
}

// HasTrackingNumberLT applies the LT predicate on the "has_tracking_number" field.
func HasTrackingNumberLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHasTrackingNumber), v))
	})
}

// HasTrackingNumberLTE applies the LTE predicate on the "has_tracking_number" field.
func HasTrackingNumberLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHasTrackingNumber), v))
	})
}

// MinNormalDaysEQ applies the EQ predicate on the "min_normal_days" field.
func MinNormalDaysEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysNEQ applies the NEQ predicate on the "min_normal_days" field.
func MinNormalDaysNEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysIn applies the In predicate on the "min_normal_days" field.
func MinNormalDaysIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinNormalDays), v...))
	})
}

// MinNormalDaysNotIn applies the NotIn predicate on the "min_normal_days" field.
func MinNormalDaysNotIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinNormalDays), v...))
	})
}

// MinNormalDaysGT applies the GT predicate on the "min_normal_days" field.
func MinNormalDaysGT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysGTE applies the GTE predicate on the "min_normal_days" field.
func MinNormalDaysGTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysLT applies the LT predicate on the "min_normal_days" field.
func MinNormalDaysLT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinNormalDays), v))
	})
}

// MinNormalDaysLTE applies the LTE predicate on the "min_normal_days" field.
func MinNormalDaysLTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinNormalDays), v))
	})
}

// MaxNormalDaysEQ applies the EQ predicate on the "max_normal_days" field.
func MaxNormalDaysEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysNEQ applies the NEQ predicate on the "max_normal_days" field.
func MaxNormalDaysNEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysIn applies the In predicate on the "max_normal_days" field.
func MaxNormalDaysIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxNormalDays), v...))
	})
}

// MaxNormalDaysNotIn applies the NotIn predicate on the "max_normal_days" field.
func MaxNormalDaysNotIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxNormalDays), v...))
	})
}

// MaxNormalDaysGT applies the GT predicate on the "max_normal_days" field.
func MaxNormalDaysGT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysGTE applies the GTE predicate on the "max_normal_days" field.
func MaxNormalDaysGTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysLT applies the LT predicate on the "max_normal_days" field.
func MaxNormalDaysLT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxNormalDays), v))
	})
}

// MaxNormalDaysLTE applies the LTE predicate on the "max_normal_days" field.
func MaxNormalDaysLTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxNormalDays), v))
	})
}

// MaxWeightEQ applies the EQ predicate on the "max_weight" field.
func MaxWeightEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxWeight), v))
	})
}

// MaxWeightNEQ applies the NEQ predicate on the "max_weight" field.
func MaxWeightNEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxWeight), v))
	})
}

// MaxWeightIn applies the In predicate on the "max_weight" field.
func MaxWeightIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxWeight), v...))
	})
}

// MaxWeightNotIn applies the NotIn predicate on the "max_weight" field.
func MaxWeightNotIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxWeight), v...))
	})
}

// MaxWeightGT applies the GT predicate on the "max_weight" field.
func MaxWeightGT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxWeight), v))
	})
}

// MaxWeightGTE applies the GTE predicate on the "max_weight" field.
func MaxWeightGTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxWeight), v))
	})
}

// MaxWeightLT applies the LT predicate on the "max_weight" field.
func MaxWeightLT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxWeight), v))
	})
}

// MaxWeightLTE applies the LTE predicate on the "max_weight" field.
func MaxWeightLTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxWeight), v))
	})
}

// MaxLengthEQ applies the EQ predicate on the "max_length" field.
func MaxLengthEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxLength), v))
	})
}

// MaxLengthNEQ applies the NEQ predicate on the "max_length" field.
func MaxLengthNEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxLength), v))
	})
}

// MaxLengthIn applies the In predicate on the "max_length" field.
func MaxLengthIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxLength), v...))
	})
}

// MaxLengthNotIn applies the NotIn predicate on the "max_length" field.
func MaxLengthNotIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxLength), v...))
	})
}

// MaxLengthGT applies the GT predicate on the "max_length" field.
func MaxLengthGT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxLength), v))
	})
}

// MaxLengthGTE applies the GTE predicate on the "max_length" field.
func MaxLengthGTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxLength), v))
	})
}

// MaxLengthLT applies the LT predicate on the "max_length" field.
func MaxLengthLT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxLength), v))
	})
}

// MaxLengthLTE applies the LTE predicate on the "max_length" field.
func MaxLengthLTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxLength), v))
	})
}

// MinLengthEQ applies the EQ predicate on the "min_length" field.
func MinLengthEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinLength), v))
	})
}

// MinLengthNEQ applies the NEQ predicate on the "min_length" field.
func MinLengthNEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinLength), v))
	})
}

// MinLengthIn applies the In predicate on the "min_length" field.
func MinLengthIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinLength), v...))
	})
}

// MinLengthNotIn applies the NotIn predicate on the "min_length" field.
func MinLengthNotIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinLength), v...))
	})
}

// MinLengthGT applies the GT predicate on the "min_length" field.
func MinLengthGT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinLength), v))
	})
}

// MinLengthGTE applies the GTE predicate on the "min_length" field.
func MinLengthGTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinLength), v))
	})
}

// MinLengthLT applies the LT predicate on the "min_length" field.
func MinLengthLT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinLength), v))
	})
}

// MinLengthLTE applies the LTE predicate on the "min_length" field.
func MinLengthLTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinLength), v))
	})
}

// MaxThreeSideSumEQ applies the EQ predicate on the "max_three_side_sum" field.
func MaxThreeSideSumEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxThreeSideSum), v))
	})
}

// MaxThreeSideSumNEQ applies the NEQ predicate on the "max_three_side_sum" field.
func MaxThreeSideSumNEQ(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxThreeSideSum), v))
	})
}

// MaxThreeSideSumIn applies the In predicate on the "max_three_side_sum" field.
func MaxThreeSideSumIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMaxThreeSideSum), v...))
	})
}

// MaxThreeSideSumNotIn applies the NotIn predicate on the "max_three_side_sum" field.
func MaxThreeSideSumNotIn(vs ...int) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMaxThreeSideSum), v...))
	})
}

// MaxThreeSideSumGT applies the GT predicate on the "max_three_side_sum" field.
func MaxThreeSideSumGT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxThreeSideSum), v))
	})
}

// MaxThreeSideSumGTE applies the GTE predicate on the "max_three_side_sum" field.
func MaxThreeSideSumGTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxThreeSideSum), v))
	})
}

// MaxThreeSideSumLT applies the LT predicate on the "max_three_side_sum" field.
func MaxThreeSideSumLT(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxThreeSideSum), v))
	})
}

// MaxThreeSideSumLTE applies the LTE predicate on the "max_three_side_sum" field.
func MaxThreeSideSumLTE(v int) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxThreeSideSum), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// SortingPortEQ applies the EQ predicate on the "sorting_port" field.
func SortingPortEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSortingPort), v))
	})
}

// SortingPortNEQ applies the NEQ predicate on the "sorting_port" field.
func SortingPortNEQ(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSortingPort), v))
	})
}

// SortingPortIn applies the In predicate on the "sorting_port" field.
func SortingPortIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSortingPort), v...))
	})
}

// SortingPortNotIn applies the NotIn predicate on the "sorting_port" field.
func SortingPortNotIn(vs ...int32) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSortingPort), v...))
	})
}

// SortingPortGT applies the GT predicate on the "sorting_port" field.
func SortingPortGT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSortingPort), v))
	})
}

// SortingPortGTE applies the GTE predicate on the "sorting_port" field.
func SortingPortGTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSortingPort), v))
	})
}

// SortingPortLT applies the LT predicate on the "sorting_port" field.
func SortingPortLT(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSortingPort), v))
	})
}

// SortingPortLTE applies the LTE predicate on the "sorting_port" field.
func SortingPortLTE(v int32) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSortingPort), v))
	})
}

// PrepayTariffEQ applies the EQ predicate on the "prepay_tariff" field.
func PrepayTariffEQ(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepayTariff), v))
	})
}

// PrepayTariffNEQ applies the NEQ predicate on the "prepay_tariff" field.
func PrepayTariffNEQ(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepayTariff), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v bool) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTest), v))
	})
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	})
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOptions), v))
	})
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOptions), v...))
	})
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOptions), v...))
	})
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOptions), v))
	})
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOptions), v))
	})
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOptions), v))
	})
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOptions), v))
	})
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOptions), v))
	})
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOptions), v))
	})
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOptions), v))
	})
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	})
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	})
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOptions), v))
	})
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOptions), v))
	})
}

// ExcludeAttributesEQ applies the EQ predicate on the "exclude_attributes" field.
func ExcludeAttributesEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesNEQ applies the NEQ predicate on the "exclude_attributes" field.
func ExcludeAttributesNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesIn applies the In predicate on the "exclude_attributes" field.
func ExcludeAttributesIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExcludeAttributes), v...))
	})
}

// ExcludeAttributesNotIn applies the NotIn predicate on the "exclude_attributes" field.
func ExcludeAttributesNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExcludeAttributes), v...))
	})
}

// ExcludeAttributesGT applies the GT predicate on the "exclude_attributes" field.
func ExcludeAttributesGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesGTE applies the GTE predicate on the "exclude_attributes" field.
func ExcludeAttributesGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesLT applies the LT predicate on the "exclude_attributes" field.
func ExcludeAttributesLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesLTE applies the LTE predicate on the "exclude_attributes" field.
func ExcludeAttributesLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesContains applies the Contains predicate on the "exclude_attributes" field.
func ExcludeAttributesContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesHasPrefix applies the HasPrefix predicate on the "exclude_attributes" field.
func ExcludeAttributesHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesHasSuffix applies the HasSuffix predicate on the "exclude_attributes" field.
func ExcludeAttributesHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesIsNil applies the IsNil predicate on the "exclude_attributes" field.
func ExcludeAttributesIsNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExcludeAttributes)))
	})
}

// ExcludeAttributesNotNil applies the NotNil predicate on the "exclude_attributes" field.
func ExcludeAttributesNotNil() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExcludeAttributes)))
	})
}

// ExcludeAttributesEqualFold applies the EqualFold predicate on the "exclude_attributes" field.
func ExcludeAttributesEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExcludeAttributes), v))
	})
}

// ExcludeAttributesContainsFold applies the ContainsFold predicate on the "exclude_attributes" field.
func ExcludeAttributesContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExcludeAttributes), v))
	})
}

// BatteryEQ applies the EQ predicate on the "battery" field.
func BatteryEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBattery), v))
	})
}

// BatteryNEQ applies the NEQ predicate on the "battery" field.
func BatteryNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBattery), v))
	})
}

// BatteryIn applies the In predicate on the "battery" field.
func BatteryIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBattery), v...))
	})
}

// BatteryNotIn applies the NotIn predicate on the "battery" field.
func BatteryNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBattery), v...))
	})
}

// BatteryGT applies the GT predicate on the "battery" field.
func BatteryGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBattery), v))
	})
}

// BatteryGTE applies the GTE predicate on the "battery" field.
func BatteryGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBattery), v))
	})
}

// BatteryLT applies the LT predicate on the "battery" field.
func BatteryLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBattery), v))
	})
}

// BatteryLTE applies the LTE predicate on the "battery" field.
func BatteryLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBattery), v))
	})
}

// VirtualEQ applies the EQ predicate on the "virtual" field.
func VirtualEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtual), v))
	})
}

// VirtualNEQ applies the NEQ predicate on the "virtual" field.
func VirtualNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVirtual), v))
	})
}

// VirtualIn applies the In predicate on the "virtual" field.
func VirtualIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVirtual), v...))
	})
}

// VirtualNotIn applies the NotIn predicate on the "virtual" field.
func VirtualNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVirtual), v...))
	})
}

// VirtualGT applies the GT predicate on the "virtual" field.
func VirtualGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVirtual), v))
	})
}

// VirtualGTE applies the GTE predicate on the "virtual" field.
func VirtualGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVirtual), v))
	})
}

// VirtualLT applies the LT predicate on the "virtual" field.
func VirtualLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVirtual), v))
	})
}

// VirtualLTE applies the LTE predicate on the "virtual" field.
func VirtualLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVirtual), v))
	})
}

// ChannelTypeEQ applies the EQ predicate on the "channel_type" field.
func ChannelTypeEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelType), v))
	})
}

// ChannelTypeNEQ applies the NEQ predicate on the "channel_type" field.
func ChannelTypeNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelType), v))
	})
}

// ChannelTypeIn applies the In predicate on the "channel_type" field.
func ChannelTypeIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannelType), v...))
	})
}

// ChannelTypeNotIn applies the NotIn predicate on the "channel_type" field.
func ChannelTypeNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannelType), v...))
	})
}

// ChannelTypeGT applies the GT predicate on the "channel_type" field.
func ChannelTypeGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelType), v))
	})
}

// ChannelTypeGTE applies the GTE predicate on the "channel_type" field.
func ChannelTypeGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelType), v))
	})
}

// ChannelTypeLT applies the LT predicate on the "channel_type" field.
func ChannelTypeLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelType), v))
	})
}

// ChannelTypeLTE applies the LTE predicate on the "channel_type" field.
func ChannelTypeLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelType), v))
	})
}

// DeliverDutyEQ applies the EQ predicate on the "deliver_duty" field.
func DeliverDutyEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyNEQ applies the NEQ predicate on the "deliver_duty" field.
func DeliverDutyNEQ(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyIn applies the In predicate on the "deliver_duty" field.
func DeliverDutyIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliverDuty), v...))
	})
}

// DeliverDutyNotIn applies the NotIn predicate on the "deliver_duty" field.
func DeliverDutyNotIn(vs ...string) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliverDuty), v...))
	})
}

// DeliverDutyGT applies the GT predicate on the "deliver_duty" field.
func DeliverDutyGT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyGTE applies the GTE predicate on the "deliver_duty" field.
func DeliverDutyGTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyLT applies the LT predicate on the "deliver_duty" field.
func DeliverDutyLT(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyLTE applies the LTE predicate on the "deliver_duty" field.
func DeliverDutyLTE(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyContains applies the Contains predicate on the "deliver_duty" field.
func DeliverDutyContains(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyHasPrefix applies the HasPrefix predicate on the "deliver_duty" field.
func DeliverDutyHasPrefix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyHasSuffix applies the HasSuffix predicate on the "deliver_duty" field.
func DeliverDutyHasSuffix(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyEqualFold applies the EqualFold predicate on the "deliver_duty" field.
func DeliverDutyEqualFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeliverDuty), v))
	})
}

// DeliverDutyContainsFold applies the ContainsFold predicate on the "deliver_duty" field.
func DeliverDutyContainsFold(v string) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeliverDuty), v))
	})
}

// SpecialEQ applies the EQ predicate on the "special" field.
func SpecialEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecial), v))
	})
}

// SpecialNEQ applies the NEQ predicate on the "special" field.
func SpecialNEQ(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecial), v))
	})
}

// SpecialIn applies the In predicate on the "special" field.
func SpecialIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpecial), v...))
	})
}

// SpecialNotIn applies the NotIn predicate on the "special" field.
func SpecialNotIn(vs ...int8) predicate.Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpecial), v...))
	})
}

// SpecialGT applies the GT predicate on the "special" field.
func SpecialGT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecial), v))
	})
}

// SpecialGTE applies the GTE predicate on the "special" field.
func SpecialGTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecial), v))
	})
}

// SpecialLT applies the LT predicate on the "special" field.
func SpecialLT(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecial), v))
	})
}

// SpecialLTE applies the LTE predicate on the "special" field.
func SpecialLTE(v int8) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecial), v))
	})
}

// HasChannelCosts applies the HasEdge predicate on the "channel_costs" edge.
func HasChannelCosts() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelCostsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChannelCostsTable, ChannelCostsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChannelCost
		step.Edge.Schema = schemaConfig.ChannelCost
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelCostsWith applies the HasEdge predicate on the "channel_costs" edge with a given conditions (other predicates).
func HasChannelCostsWith(preds ...predicate.ChannelCost) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelCostsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChannelCostsTable, ChannelCostsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ChannelCost
		step.Edge.Schema = schemaConfig.ChannelCost
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Channel) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		p(s.Not())
	})
}
