// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InboundItemCreate is the builder for creating a InboundItem entity.
type InboundItemCreate struct {
	config
	mutation *InboundItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (iic *InboundItemCreate) SetCreatedAt(t time.Time) *InboundItemCreate {
	iic.mutation.SetCreatedAt(t)
	return iic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iic *InboundItemCreate) SetNillableCreatedAt(t *time.Time) *InboundItemCreate {
	if t != nil {
		iic.SetCreatedAt(*t)
	}
	return iic
}

// SetUpdatedAt sets the "updated_at" field.
func (iic *InboundItemCreate) SetUpdatedAt(t time.Time) *InboundItemCreate {
	iic.mutation.SetUpdatedAt(t)
	return iic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iic *InboundItemCreate) SetNillableUpdatedAt(t *time.Time) *InboundItemCreate {
	if t != nil {
		iic.SetUpdatedAt(*t)
	}
	return iic
}

// SetDeletedAt sets the "deleted_at" field.
func (iic *InboundItemCreate) SetDeletedAt(t time.Time) *InboundItemCreate {
	iic.mutation.SetDeletedAt(t)
	return iic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iic *InboundItemCreate) SetNillableDeletedAt(t *time.Time) *InboundItemCreate {
	if t != nil {
		iic.SetDeletedAt(*t)
	}
	return iic
}

// SetInboundID sets the "inbound_id" field.
func (iic *InboundItemCreate) SetInboundID(i int64) *InboundItemCreate {
	iic.mutation.SetInboundID(i)
	return iic
}

// SetNillableInboundID sets the "inbound_id" field if the given value is not nil.
func (iic *InboundItemCreate) SetNillableInboundID(i *int64) *InboundItemCreate {
	if i != nil {
		iic.SetInboundID(*i)
	}
	return iic
}

// SetProductID sets the "product_id" field.
func (iic *InboundItemCreate) SetProductID(i int64) *InboundItemCreate {
	iic.mutation.SetProductID(i)
	return iic
}

// SetProductName sets the "product_name" field.
func (iic *InboundItemCreate) SetProductName(s string) *InboundItemCreate {
	iic.mutation.SetProductName(s)
	return iic
}

// SetSku sets the "sku" field.
func (iic *InboundItemCreate) SetSku(s string) *InboundItemCreate {
	iic.mutation.SetSku(s)
	return iic
}

// SetBarcode sets the "barcode" field.
func (iic *InboundItemCreate) SetBarcode(s string) *InboundItemCreate {
	iic.mutation.SetBarcode(s)
	return iic
}

// SetQty sets the "qty" field.
func (iic *InboundItemCreate) SetQty(i int) *InboundItemCreate {
	iic.mutation.SetQty(i)
	return iic
}

// SetStatus sets the "status" field.
func (iic *InboundItemCreate) SetStatus(i int8) *InboundItemCreate {
	iic.mutation.SetStatus(i)
	return iic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iic *InboundItemCreate) SetNillableStatus(i *int8) *InboundItemCreate {
	if i != nil {
		iic.SetStatus(*i)
	}
	return iic
}

// SetCustomerCode sets the "customer_code" field.
func (iic *InboundItemCreate) SetCustomerCode(s string) *InboundItemCreate {
	iic.mutation.SetCustomerCode(s)
	return iic
}

// SetID sets the "id" field.
func (iic *InboundItemCreate) SetID(i int64) *InboundItemCreate {
	iic.mutation.SetID(i)
	return iic
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iic *InboundItemCreate) SetTenantID(id int64) *InboundItemCreate {
	iic.mutation.SetTenantID(id)
	return iic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iic *InboundItemCreate) SetTenant(t *Tenant) *InboundItemCreate {
	return iic.SetTenantID(t.ID)
}

// SetInboundsID sets the "inbounds" edge to the Inbound entity by ID.
func (iic *InboundItemCreate) SetInboundsID(id int64) *InboundItemCreate {
	iic.mutation.SetInboundsID(id)
	return iic
}

// SetNillableInboundsID sets the "inbounds" edge to the Inbound entity by ID if the given value is not nil.
func (iic *InboundItemCreate) SetNillableInboundsID(id *int64) *InboundItemCreate {
	if id != nil {
		iic = iic.SetInboundsID(*id)
	}
	return iic
}

// SetInbounds sets the "inbounds" edge to the Inbound entity.
func (iic *InboundItemCreate) SetInbounds(i *Inbound) *InboundItemCreate {
	return iic.SetInboundsID(i.ID)
}

// Mutation returns the InboundItemMutation object of the builder.
func (iic *InboundItemCreate) Mutation() *InboundItemMutation {
	return iic.mutation
}

// Save creates the InboundItem in the database.
func (iic *InboundItemCreate) Save(ctx context.Context) (*InboundItem, error) {
	var (
		err  error
		node *InboundItem
	)
	if err := iic.defaults(); err != nil {
		return nil, err
	}
	if len(iic.hooks) == 0 {
		if err = iic.check(); err != nil {
			return nil, err
		}
		node, err = iic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iic.check(); err != nil {
				return nil, err
			}
			iic.mutation = mutation
			if node, err = iic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iic.hooks) - 1; i >= 0; i-- {
			if iic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InboundItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InboundItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iic *InboundItemCreate) SaveX(ctx context.Context) *InboundItem {
	v, err := iic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iic *InboundItemCreate) Exec(ctx context.Context) error {
	_, err := iic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iic *InboundItemCreate) ExecX(ctx context.Context) {
	if err := iic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iic *InboundItemCreate) defaults() error {
	if _, ok := iic.mutation.CreatedAt(); !ok {
		if inbounditem.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbounditem.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := inbounditem.DefaultCreatedAt()
		iic.mutation.SetCreatedAt(v)
	}
	if _, ok := iic.mutation.UpdatedAt(); !ok {
		if inbounditem.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbounditem.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbounditem.DefaultUpdatedAt()
		iic.mutation.SetUpdatedAt(v)
	}
	if _, ok := iic.mutation.Status(); !ok {
		v := inbounditem.DefaultStatus
		iic.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iic *InboundItemCreate) check() error {
	if _, ok := iic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "InboundItem.created_at"`)}
	}
	if _, ok := iic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "InboundItem.updated_at"`)}
	}
	if _, ok := iic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`gen: missing required field "InboundItem.product_id"`)}
	}
	if _, ok := iic.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`gen: missing required field "InboundItem.product_name"`)}
	}
	if _, ok := iic.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`gen: missing required field "InboundItem.sku"`)}
	}
	if _, ok := iic.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`gen: missing required field "InboundItem.barcode"`)}
	}
	if _, ok := iic.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`gen: missing required field "InboundItem.qty"`)}
	}
	if _, ok := iic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "InboundItem.status"`)}
	}
	if _, ok := iic.mutation.CustomerCode(); !ok {
		return &ValidationError{Name: "customer_code", err: errors.New(`gen: missing required field "InboundItem.customer_code"`)}
	}
	if _, ok := iic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "InboundItem.tenant"`)}
	}
	return nil
}

func (iic *InboundItemCreate) sqlSave(ctx context.Context) (*InboundItem, error) {
	_node, _spec := iic.createSpec()
	if err := sqlgraph.CreateNode(ctx, iic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (iic *InboundItemCreate) createSpec() (*InboundItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InboundItem{config: iic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inbounditem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbounditem.FieldID,
			},
		}
	)
	_spec.Schema = iic.schemaConfig.InboundItem
	_spec.OnConflict = iic.conflict
	if id, ok := iic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iic.mutation.CreatedAt(); ok {
		_spec.SetField(inbounditem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iic.mutation.UpdatedAt(); ok {
		_spec.SetField(inbounditem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iic.mutation.DeletedAt(); ok {
		_spec.SetField(inbounditem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := iic.mutation.ProductID(); ok {
		_spec.SetField(inbounditem.FieldProductID, field.TypeInt64, value)
		_node.ProductID = value
	}
	if value, ok := iic.mutation.ProductName(); ok {
		_spec.SetField(inbounditem.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := iic.mutation.Sku(); ok {
		_spec.SetField(inbounditem.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := iic.mutation.Barcode(); ok {
		_spec.SetField(inbounditem.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := iic.mutation.Qty(); ok {
		_spec.SetField(inbounditem.FieldQty, field.TypeInt, value)
		_node.Qty = value
	}
	if value, ok := iic.mutation.Status(); ok {
		_spec.SetField(inbounditem.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := iic.mutation.CustomerCode(); ok {
		_spec.SetField(inbounditem.FieldCustomerCode, field.TypeString, value)
		_node.CustomerCode = value
	}
	if nodes := iic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iic.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inbound_item_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.InboundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbound.FieldID,
				},
			},
		}
		edge.Schema = iic.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InboundID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InboundItem.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InboundItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iic *InboundItemCreate) OnConflict(opts ...sql.ConflictOption) *InboundItemUpsertOne {
	iic.conflict = opts
	return &InboundItemUpsertOne{
		create: iic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iic *InboundItemCreate) OnConflictColumns(columns ...string) *InboundItemUpsertOne {
	iic.conflict = append(iic.conflict, sql.ConflictColumns(columns...))
	return &InboundItemUpsertOne{
		create: iic,
	}
}

type (
	// InboundItemUpsertOne is the builder for "upsert"-ing
	//  one InboundItem node.
	InboundItemUpsertOne struct {
		create *InboundItemCreate
	}

	// InboundItemUpsert is the "OnConflict" setter.
	InboundItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundItemUpsert) SetUpdatedAt(v time.Time) *InboundItemUpsert {
	u.Set(inbounditem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateUpdatedAt() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundItemUpsert) SetDeletedAt(v time.Time) *InboundItemUpsert {
	u.Set(inbounditem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateDeletedAt() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundItemUpsert) ClearDeletedAt() *InboundItemUpsert {
	u.SetNull(inbounditem.FieldDeletedAt)
	return u
}

// SetInboundID sets the "inbound_id" field.
func (u *InboundItemUpsert) SetInboundID(v int64) *InboundItemUpsert {
	u.Set(inbounditem.FieldInboundID, v)
	return u
}

// UpdateInboundID sets the "inbound_id" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateInboundID() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldInboundID)
	return u
}

// ClearInboundID clears the value of the "inbound_id" field.
func (u *InboundItemUpsert) ClearInboundID() *InboundItemUpsert {
	u.SetNull(inbounditem.FieldInboundID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *InboundItemUpsert) SetProductID(v int64) *InboundItemUpsert {
	u.Set(inbounditem.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateProductID() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *InboundItemUpsert) AddProductID(v int64) *InboundItemUpsert {
	u.Add(inbounditem.FieldProductID, v)
	return u
}

// SetProductName sets the "product_name" field.
func (u *InboundItemUpsert) SetProductName(v string) *InboundItemUpsert {
	u.Set(inbounditem.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateProductName() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldProductName)
	return u
}

// SetSku sets the "sku" field.
func (u *InboundItemUpsert) SetSku(v string) *InboundItemUpsert {
	u.Set(inbounditem.FieldSku, v)
	return u
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateSku() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldSku)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *InboundItemUpsert) SetBarcode(v string) *InboundItemUpsert {
	u.Set(inbounditem.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateBarcode() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldBarcode)
	return u
}

// SetQty sets the "qty" field.
func (u *InboundItemUpsert) SetQty(v int) *InboundItemUpsert {
	u.Set(inbounditem.FieldQty, v)
	return u
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateQty() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldQty)
	return u
}

// AddQty adds v to the "qty" field.
func (u *InboundItemUpsert) AddQty(v int) *InboundItemUpsert {
	u.Add(inbounditem.FieldQty, v)
	return u
}

// SetStatus sets the "status" field.
func (u *InboundItemUpsert) SetStatus(v int8) *InboundItemUpsert {
	u.Set(inbounditem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateStatus() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *InboundItemUpsert) AddStatus(v int8) *InboundItemUpsert {
	u.Add(inbounditem.FieldStatus, v)
	return u
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundItemUpsert) SetCustomerCode(v string) *InboundItemUpsert {
	u.Set(inbounditem.FieldCustomerCode, v)
	return u
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundItemUpsert) UpdateCustomerCode() *InboundItemUpsert {
	u.SetExcluded(inbounditem.FieldCustomerCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inbounditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InboundItemUpsertOne) UpdateNewValues() *InboundItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inbounditem.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inbounditem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InboundItemUpsertOne) Ignore() *InboundItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InboundItemUpsertOne) DoNothing() *InboundItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InboundItemCreate.OnConflict
// documentation for more info.
func (u *InboundItemUpsertOne) Update(set func(*InboundItemUpsert)) *InboundItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InboundItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundItemUpsertOne) SetUpdatedAt(v time.Time) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateUpdatedAt() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundItemUpsertOne) SetDeletedAt(v time.Time) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateDeletedAt() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundItemUpsertOne) ClearDeletedAt() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetInboundID sets the "inbound_id" field.
func (u *InboundItemUpsertOne) SetInboundID(v int64) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetInboundID(v)
	})
}

// UpdateInboundID sets the "inbound_id" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateInboundID() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateInboundID()
	})
}

// ClearInboundID clears the value of the "inbound_id" field.
func (u *InboundItemUpsertOne) ClearInboundID() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.ClearInboundID()
	})
}

// SetProductID sets the "product_id" field.
func (u *InboundItemUpsertOne) SetProductID(v int64) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *InboundItemUpsertOne) AddProductID(v int64) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateProductID() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *InboundItemUpsertOne) SetProductName(v string) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateProductName() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateProductName()
	})
}

// SetSku sets the "sku" field.
func (u *InboundItemUpsertOne) SetSku(v string) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateSku() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *InboundItemUpsertOne) SetBarcode(v string) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateBarcode() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetQty sets the "qty" field.
func (u *InboundItemUpsertOne) SetQty(v int) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *InboundItemUpsertOne) AddQty(v int) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateQty() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateQty()
	})
}

// SetStatus sets the "status" field.
func (u *InboundItemUpsertOne) SetStatus(v int8) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InboundItemUpsertOne) AddStatus(v int8) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateStatus() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateStatus()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundItemUpsertOne) SetCustomerCode(v string) *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundItemUpsertOne) UpdateCustomerCode() *InboundItemUpsertOne {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *InboundItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InboundItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InboundItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InboundItemUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InboundItemUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InboundItemCreateBulk is the builder for creating many InboundItem entities in bulk.
type InboundItemCreateBulk struct {
	config
	builders []*InboundItemCreate
	conflict []sql.ConflictOption
}

// Save creates the InboundItem entities in the database.
func (iicb *InboundItemCreateBulk) Save(ctx context.Context) ([]*InboundItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iicb.builders))
	nodes := make([]*InboundItem, len(iicb.builders))
	mutators := make([]Mutator, len(iicb.builders))
	for i := range iicb.builders {
		func(i int, root context.Context) {
			builder := iicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InboundItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iicb *InboundItemCreateBulk) SaveX(ctx context.Context) []*InboundItem {
	v, err := iicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iicb *InboundItemCreateBulk) Exec(ctx context.Context) error {
	_, err := iicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicb *InboundItemCreateBulk) ExecX(ctx context.Context) {
	if err := iicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InboundItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InboundItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iicb *InboundItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *InboundItemUpsertBulk {
	iicb.conflict = opts
	return &InboundItemUpsertBulk{
		create: iicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iicb *InboundItemCreateBulk) OnConflictColumns(columns ...string) *InboundItemUpsertBulk {
	iicb.conflict = append(iicb.conflict, sql.ConflictColumns(columns...))
	return &InboundItemUpsertBulk{
		create: iicb,
	}
}

// InboundItemUpsertBulk is the builder for "upsert"-ing
// a bulk of InboundItem nodes.
type InboundItemUpsertBulk struct {
	create *InboundItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inbounditem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InboundItemUpsertBulk) UpdateNewValues() *InboundItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inbounditem.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inbounditem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InboundItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InboundItemUpsertBulk) Ignore() *InboundItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InboundItemUpsertBulk) DoNothing() *InboundItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InboundItemCreateBulk.OnConflict
// documentation for more info.
func (u *InboundItemUpsertBulk) Update(set func(*InboundItemUpsert)) *InboundItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InboundItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InboundItemUpsertBulk) SetUpdatedAt(v time.Time) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateUpdatedAt() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InboundItemUpsertBulk) SetDeletedAt(v time.Time) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateDeletedAt() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InboundItemUpsertBulk) ClearDeletedAt() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetInboundID sets the "inbound_id" field.
func (u *InboundItemUpsertBulk) SetInboundID(v int64) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetInboundID(v)
	})
}

// UpdateInboundID sets the "inbound_id" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateInboundID() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateInboundID()
	})
}

// ClearInboundID clears the value of the "inbound_id" field.
func (u *InboundItemUpsertBulk) ClearInboundID() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.ClearInboundID()
	})
}

// SetProductID sets the "product_id" field.
func (u *InboundItemUpsertBulk) SetProductID(v int64) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *InboundItemUpsertBulk) AddProductID(v int64) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateProductID() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *InboundItemUpsertBulk) SetProductName(v string) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateProductName() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateProductName()
	})
}

// SetSku sets the "sku" field.
func (u *InboundItemUpsertBulk) SetSku(v string) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateSku() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateSku()
	})
}

// SetBarcode sets the "barcode" field.
func (u *InboundItemUpsertBulk) SetBarcode(v string) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateBarcode() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateBarcode()
	})
}

// SetQty sets the "qty" field.
func (u *InboundItemUpsertBulk) SetQty(v int) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetQty(v)
	})
}

// AddQty adds v to the "qty" field.
func (u *InboundItemUpsertBulk) AddQty(v int) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddQty(v)
	})
}

// UpdateQty sets the "qty" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateQty() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateQty()
	})
}

// SetStatus sets the "status" field.
func (u *InboundItemUpsertBulk) SetStatus(v int8) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *InboundItemUpsertBulk) AddStatus(v int8) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateStatus() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateStatus()
	})
}

// SetCustomerCode sets the "customer_code" field.
func (u *InboundItemUpsertBulk) SetCustomerCode(v string) *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.SetCustomerCode(v)
	})
}

// UpdateCustomerCode sets the "customer_code" field to the value that was provided on create.
func (u *InboundItemUpsertBulk) UpdateCustomerCode() *InboundItemUpsertBulk {
	return u.Update(func(s *InboundItemUpsert) {
		s.UpdateCustomerCode()
	})
}

// Exec executes the query.
func (u *InboundItemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the InboundItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for InboundItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InboundItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
