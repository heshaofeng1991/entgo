// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// PickupOrderItemUpdate is the builder for updating PickupOrderItem entities.
type PickupOrderItemUpdate struct {
	config
	hooks     []Hook
	mutation  *PickupOrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PickupOrderItemUpdate builder.
func (poiu *PickupOrderItemUpdate) Where(ps ...predicate.PickupOrderItem) *PickupOrderItemUpdate {
	poiu.mutation.Where(ps...)
	return poiu
}

// SetUpdatedAt sets the "updated_at" field.
func (poiu *PickupOrderItemUpdate) SetUpdatedAt(t time.Time) *PickupOrderItemUpdate {
	poiu.mutation.SetUpdatedAt(t)
	return poiu
}

// SetDeletedAt sets the "deleted_at" field.
func (poiu *PickupOrderItemUpdate) SetDeletedAt(t time.Time) *PickupOrderItemUpdate {
	poiu.mutation.SetDeletedAt(t)
	return poiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (poiu *PickupOrderItemUpdate) SetNillableDeletedAt(t *time.Time) *PickupOrderItemUpdate {
	if t != nil {
		poiu.SetDeletedAt(*t)
	}
	return poiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (poiu *PickupOrderItemUpdate) ClearDeletedAt() *PickupOrderItemUpdate {
	poiu.mutation.ClearDeletedAt()
	return poiu
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (poiu *PickupOrderItemUpdate) SetPickupOrderID(i int64) *PickupOrderItemUpdate {
	poiu.mutation.ResetPickupOrderID()
	poiu.mutation.SetPickupOrderID(i)
	return poiu
}

// AddPickupOrderID adds i to the "pickup_order_id" field.
func (poiu *PickupOrderItemUpdate) AddPickupOrderID(i int64) *PickupOrderItemUpdate {
	poiu.mutation.AddPickupOrderID(i)
	return poiu
}

// SetProductID sets the "product_id" field.
func (poiu *PickupOrderItemUpdate) SetProductID(i int64) *PickupOrderItemUpdate {
	poiu.mutation.ResetProductID()
	poiu.mutation.SetProductID(i)
	return poiu
}

// AddProductID adds i to the "product_id" field.
func (poiu *PickupOrderItemUpdate) AddProductID(i int64) *PickupOrderItemUpdate {
	poiu.mutation.AddProductID(i)
	return poiu
}

// SetProductName sets the "product_name" field.
func (poiu *PickupOrderItemUpdate) SetProductName(s string) *PickupOrderItemUpdate {
	poiu.mutation.SetProductName(s)
	return poiu
}

// SetSku sets the "sku" field.
func (poiu *PickupOrderItemUpdate) SetSku(s string) *PickupOrderItemUpdate {
	poiu.mutation.SetSku(s)
	return poiu
}

// SetBarcode sets the "barcode" field.
func (poiu *PickupOrderItemUpdate) SetBarcode(s string) *PickupOrderItemUpdate {
	poiu.mutation.SetBarcode(s)
	return poiu
}

// SetQty sets the "qty" field.
func (poiu *PickupOrderItemUpdate) SetQty(i int32) *PickupOrderItemUpdate {
	poiu.mutation.ResetQty()
	poiu.mutation.SetQty(i)
	return poiu
}

// AddQty adds i to the "qty" field.
func (poiu *PickupOrderItemUpdate) AddQty(i int32) *PickupOrderItemUpdate {
	poiu.mutation.AddQty(i)
	return poiu
}

// SetCustomerCode sets the "customer_code" field.
func (poiu *PickupOrderItemUpdate) SetCustomerCode(s string) *PickupOrderItemUpdate {
	poiu.mutation.SetCustomerCode(s)
	return poiu
}

// Mutation returns the PickupOrderItemMutation object of the builder.
func (poiu *PickupOrderItemUpdate) Mutation() *PickupOrderItemMutation {
	return poiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (poiu *PickupOrderItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	poiu.defaults()
	if len(poiu.hooks) == 0 {
		affected, err = poiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			poiu.mutation = mutation
			affected, err = poiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(poiu.hooks) - 1; i >= 0; i-- {
			if poiu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = poiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, poiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (poiu *PickupOrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := poiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (poiu *PickupOrderItemUpdate) Exec(ctx context.Context) error {
	_, err := poiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poiu *PickupOrderItemUpdate) ExecX(ctx context.Context) {
	if err := poiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poiu *PickupOrderItemUpdate) defaults() {
	if _, ok := poiu.mutation.UpdatedAt(); !ok {
		v := pickuporderitem.UpdateDefaultUpdatedAt()
		poiu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (poiu *PickupOrderItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PickupOrderItemUpdate {
	poiu.modifiers = append(poiu.modifiers, modifiers...)
	return poiu
}

func (poiu *PickupOrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pickuporderitem.Table,
			Columns: pickuporderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporderitem.FieldID,
			},
		},
	}
	if ps := poiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poiu.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := poiu.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporderitem.FieldDeletedAt, field.TypeTime, value)
	}
	if poiu.mutation.DeletedAtCleared() {
		_spec.ClearField(pickuporderitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := poiu.mutation.PickupOrderID(); ok {
		_spec.SetField(pickuporderitem.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := poiu.mutation.AddedPickupOrderID(); ok {
		_spec.AddField(pickuporderitem.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := poiu.mutation.ProductID(); ok {
		_spec.SetField(pickuporderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := poiu.mutation.AddedProductID(); ok {
		_spec.AddField(pickuporderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := poiu.mutation.ProductName(); ok {
		_spec.SetField(pickuporderitem.FieldProductName, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Sku(); ok {
		_spec.SetField(pickuporderitem.FieldSku, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Barcode(); ok {
		_spec.SetField(pickuporderitem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Qty(); ok {
		_spec.SetField(pickuporderitem.FieldQty, field.TypeInt32, value)
	}
	if value, ok := poiu.mutation.AddedQty(); ok {
		_spec.AddField(pickuporderitem.FieldQty, field.TypeInt32, value)
	}
	if value, ok := poiu.mutation.CustomerCode(); ok {
		_spec.SetField(pickuporderitem.FieldCustomerCode, field.TypeString, value)
	}
	_spec.Node.Schema = poiu.schemaConfig.PickupOrderItem
	ctx = internal.NewSchemaConfigContext(ctx, poiu.schemaConfig)
	_spec.AddModifiers(poiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, poiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pickuporderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PickupOrderItemUpdateOne is the builder for updating a single PickupOrderItem entity.
type PickupOrderItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PickupOrderItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (poiuo *PickupOrderItemUpdateOne) SetUpdatedAt(t time.Time) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetUpdatedAt(t)
	return poiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (poiuo *PickupOrderItemUpdateOne) SetDeletedAt(t time.Time) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetDeletedAt(t)
	return poiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (poiuo *PickupOrderItemUpdateOne) SetNillableDeletedAt(t *time.Time) *PickupOrderItemUpdateOne {
	if t != nil {
		poiuo.SetDeletedAt(*t)
	}
	return poiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (poiuo *PickupOrderItemUpdateOne) ClearDeletedAt() *PickupOrderItemUpdateOne {
	poiuo.mutation.ClearDeletedAt()
	return poiuo
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (poiuo *PickupOrderItemUpdateOne) SetPickupOrderID(i int64) *PickupOrderItemUpdateOne {
	poiuo.mutation.ResetPickupOrderID()
	poiuo.mutation.SetPickupOrderID(i)
	return poiuo
}

// AddPickupOrderID adds i to the "pickup_order_id" field.
func (poiuo *PickupOrderItemUpdateOne) AddPickupOrderID(i int64) *PickupOrderItemUpdateOne {
	poiuo.mutation.AddPickupOrderID(i)
	return poiuo
}

// SetProductID sets the "product_id" field.
func (poiuo *PickupOrderItemUpdateOne) SetProductID(i int64) *PickupOrderItemUpdateOne {
	poiuo.mutation.ResetProductID()
	poiuo.mutation.SetProductID(i)
	return poiuo
}

// AddProductID adds i to the "product_id" field.
func (poiuo *PickupOrderItemUpdateOne) AddProductID(i int64) *PickupOrderItemUpdateOne {
	poiuo.mutation.AddProductID(i)
	return poiuo
}

// SetProductName sets the "product_name" field.
func (poiuo *PickupOrderItemUpdateOne) SetProductName(s string) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetProductName(s)
	return poiuo
}

// SetSku sets the "sku" field.
func (poiuo *PickupOrderItemUpdateOne) SetSku(s string) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetSku(s)
	return poiuo
}

// SetBarcode sets the "barcode" field.
func (poiuo *PickupOrderItemUpdateOne) SetBarcode(s string) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetBarcode(s)
	return poiuo
}

// SetQty sets the "qty" field.
func (poiuo *PickupOrderItemUpdateOne) SetQty(i int32) *PickupOrderItemUpdateOne {
	poiuo.mutation.ResetQty()
	poiuo.mutation.SetQty(i)
	return poiuo
}

// AddQty adds i to the "qty" field.
func (poiuo *PickupOrderItemUpdateOne) AddQty(i int32) *PickupOrderItemUpdateOne {
	poiuo.mutation.AddQty(i)
	return poiuo
}

// SetCustomerCode sets the "customer_code" field.
func (poiuo *PickupOrderItemUpdateOne) SetCustomerCode(s string) *PickupOrderItemUpdateOne {
	poiuo.mutation.SetCustomerCode(s)
	return poiuo
}

// Mutation returns the PickupOrderItemMutation object of the builder.
func (poiuo *PickupOrderItemUpdateOne) Mutation() *PickupOrderItemMutation {
	return poiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (poiuo *PickupOrderItemUpdateOne) Select(field string, fields ...string) *PickupOrderItemUpdateOne {
	poiuo.fields = append([]string{field}, fields...)
	return poiuo
}

// Save executes the query and returns the updated PickupOrderItem entity.
func (poiuo *PickupOrderItemUpdateOne) Save(ctx context.Context) (*PickupOrderItem, error) {
	var (
		err  error
		node *PickupOrderItem
	)
	poiuo.defaults()
	if len(poiuo.hooks) == 0 {
		node, err = poiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PickupOrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			poiuo.mutation = mutation
			node, err = poiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(poiuo.hooks) - 1; i >= 0; i-- {
			if poiuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = poiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, poiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PickupOrderItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PickupOrderItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (poiuo *PickupOrderItemUpdateOne) SaveX(ctx context.Context) *PickupOrderItem {
	node, err := poiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (poiuo *PickupOrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := poiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poiuo *PickupOrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := poiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poiuo *PickupOrderItemUpdateOne) defaults() {
	if _, ok := poiuo.mutation.UpdatedAt(); !ok {
		v := pickuporderitem.UpdateDefaultUpdatedAt()
		poiuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (poiuo *PickupOrderItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PickupOrderItemUpdateOne {
	poiuo.modifiers = append(poiuo.modifiers, modifiers...)
	return poiuo
}

func (poiuo *PickupOrderItemUpdateOne) sqlSave(ctx context.Context) (_node *PickupOrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pickuporderitem.Table,
			Columns: pickuporderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporderitem.FieldID,
			},
		},
	}
	id, ok := poiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "PickupOrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := poiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pickuporderitem.FieldID)
		for _, f := range fields {
			if !pickuporderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != pickuporderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := poiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pickuporderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := poiuo.mutation.DeletedAt(); ok {
		_spec.SetField(pickuporderitem.FieldDeletedAt, field.TypeTime, value)
	}
	if poiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(pickuporderitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := poiuo.mutation.PickupOrderID(); ok {
		_spec.SetField(pickuporderitem.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := poiuo.mutation.AddedPickupOrderID(); ok {
		_spec.AddField(pickuporderitem.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := poiuo.mutation.ProductID(); ok {
		_spec.SetField(pickuporderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := poiuo.mutation.AddedProductID(); ok {
		_spec.AddField(pickuporderitem.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := poiuo.mutation.ProductName(); ok {
		_spec.SetField(pickuporderitem.FieldProductName, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Sku(); ok {
		_spec.SetField(pickuporderitem.FieldSku, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Barcode(); ok {
		_spec.SetField(pickuporderitem.FieldBarcode, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Qty(); ok {
		_spec.SetField(pickuporderitem.FieldQty, field.TypeInt32, value)
	}
	if value, ok := poiuo.mutation.AddedQty(); ok {
		_spec.AddField(pickuporderitem.FieldQty, field.TypeInt32, value)
	}
	if value, ok := poiuo.mutation.CustomerCode(); ok {
		_spec.SetField(pickuporderitem.FieldCustomerCode, field.TypeString, value)
	}
	_spec.Node.Schema = poiuo.schemaConfig.PickupOrderItem
	ctx = internal.NewSchemaConfigContext(ctx, poiuo.schemaConfig)
	_spec.AddModifiers(poiuo.modifiers...)
	_node = &PickupOrderItem{config: poiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, poiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pickuporderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
