// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
)

// ProductMapping is the model entity for the ProductMapping schema.
type ProductMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// PlatformProductID holds the value of the "platform_product_id" field.
	PlatformProductID int64 `json:"platform_product_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int64 `json:"product_id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int `json:"qty,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductMappingQuery when eager-loading is set.
	Edges ProductMappingEdges `json:"edges"`
}

// ProductMappingEdges holds the relations/edges for other nodes in the graph.
type ProductMappingEdges struct {
	// PlatformProducts holds the value of the platform_products edge.
	PlatformProducts *PlatformProduct `json:"platform_products,omitempty"`
	// Products holds the value of the products edge.
	Products *Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlatformProductsOrErr returns the PlatformProducts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductMappingEdges) PlatformProductsOrErr() (*PlatformProduct, error) {
	if e.loadedTypes[0] {
		if e.PlatformProducts == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: platformproduct.Label}
		}
		return e.PlatformProducts, nil
	}
	return nil, &NotLoadedError{edge: "platform_products"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductMappingEdges) ProductsOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Products == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productmapping.FieldID, productmapping.FieldPlatformProductID, productmapping.FieldProductID, productmapping.FieldQty, productmapping.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case productmapping.FieldCreatedAt, productmapping.FieldUpdatedAt, productmapping.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductMapping", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductMapping fields.
func (pm *ProductMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productmapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int64(value.Int64)
		case productmapping.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case productmapping.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case productmapping.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = value.Time
			}
		case productmapping.FieldPlatformProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform_product_id", values[i])
			} else if value.Valid {
				pm.PlatformProductID = value.Int64
			}
		case productmapping.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pm.ProductID = value.Int64
			}
		case productmapping.FieldQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				pm.Qty = int(value.Int64)
			}
		case productmapping.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pm.CreatedBy = value.Int64
			}
		}
	}
	return nil
}

// QueryPlatformProducts queries the "platform_products" edge of the ProductMapping entity.
func (pm *ProductMapping) QueryPlatformProducts() *PlatformProductQuery {
	return (&ProductMappingClient{config: pm.config}).QueryPlatformProducts(pm)
}

// QueryProducts queries the "products" edge of the ProductMapping entity.
func (pm *ProductMapping) QueryProducts() *ProductQuery {
	return (&ProductMappingClient{config: pm.config}).QueryProducts(pm)
}

// Update returns a builder for updating this ProductMapping.
// Note that you need to call ProductMapping.Unwrap() before calling this method if this ProductMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProductMapping) Update() *ProductMappingUpdateOne {
	return (&ProductMappingClient{config: pm.config}).UpdateOne(pm)
}

// Unwrap unwraps the ProductMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProductMapping) Unwrap() *ProductMapping {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("gen: ProductMapping is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProductMapping) String() string {
	var builder strings.Builder
	builder.WriteString("ProductMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("platform_product_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.PlatformProductID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.ProductID))
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", pm.Qty))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pm.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// ProductMappings is a parsable slice of ProductMapping.
type ProductMappings []*ProductMapping

func (pm ProductMappings) config(cfg config) {
	for _i := range pm {
		pm[_i].config = cfg
	}
}
