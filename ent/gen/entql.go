// Code generated by ent, DO NOT EDIT.

package gen

import (
	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/attribute"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcostbatche"
	"github.com/heshaofeng1991/entgo/ent/gen/channeloption"
	"github.com/heshaofeng1991/entgo/ent/gen/channelrecommend"
	"github.com/heshaofeng1991/entgo/ent/gen/channelvolumefactor"
	"github.com/heshaofeng1991/entgo/ent/gen/country"
	"github.com/heshaofeng1991/entgo/ent/gen/countryzone"
	"github.com/heshaofeng1991/entgo/ent/gen/courierorder"
	"github.com/heshaofeng1991/entgo/ent/gen/customerconfig"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/inventory"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/orderholdreason"
	"github.com/heshaofeng1991/entgo/ent/gen/orderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporder"
	"github.com/heshaofeng1991/entgo/ent/gen/pickuporderitem"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/productmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/sequence"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/taskschedule"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/token"
	"github.com/heshaofeng1991/entgo/ent/gen/trackmapping"
	"github.com/heshaofeng1991/entgo/ent/gen/transaction"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
	"github.com/heshaofeng1991/entgo/ent/gen/userreferral"
	"github.com/heshaofeng1991/entgo/ent/gen/valueaddedtax"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 36)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   announcements.Table,
			Columns: announcements.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: announcements.FieldID,
			},
		},
		Type: "Announcements",
		Fields: map[string]*sqlgraph.FieldSpec{
			announcements.FieldCreatedAt:     {Type: field.TypeTime, Column: announcements.FieldCreatedAt},
			announcements.FieldUpdatedAt:     {Type: field.TypeTime, Column: announcements.FieldUpdatedAt},
			announcements.FieldDeletedAt:     {Type: field.TypeTime, Column: announcements.FieldDeletedAt},
			announcements.FieldTitle:         {Type: field.TypeString, Column: announcements.FieldTitle},
			announcements.FieldContent:       {Type: field.TypeString, Column: announcements.FieldContent},
			announcements.FieldStatus:        {Type: field.TypeInt, Column: announcements.FieldStatus},
			announcements.FieldIndex:         {Type: field.TypeInt, Column: announcements.FieldIndex},
			announcements.FieldCreateBy:      {Type: field.TypeInt64, Column: announcements.FieldCreateBy},
			announcements.FieldExpiration:    {Type: field.TypeTime, Column: announcements.FieldExpiration},
			announcements.FieldEffectiveTime: {Type: field.TypeTime, Column: announcements.FieldEffectiveTime},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   attribute.Table,
			Columns: attribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: attribute.FieldID,
			},
		},
		Type: "Attribute",
		Fields: map[string]*sqlgraph.FieldSpec{
			attribute.FieldType:        {Type: field.TypeInt8, Column: attribute.FieldType},
			attribute.FieldValue:       {Type: field.TypeString, Column: attribute.FieldValue},
			attribute.FieldDescription: {Type: field.TypeString, Column: attribute.FieldDescription},
			attribute.FieldStatus:      {Type: field.TypeInt8, Column: attribute.FieldStatus},
			attribute.FieldCreatedAt:   {Type: field.TypeTime, Column: attribute.FieldCreatedAt},
			attribute.FieldUpdatedAt:   {Type: field.TypeTime, Column: attribute.FieldUpdatedAt},
			attribute.FieldDeletedAt:   {Type: field.TypeTime, Column: attribute.FieldDeletedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channel.Table,
			Columns: channel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channel.FieldID,
			},
		},
		Type: "Channel",
		Fields: map[string]*sqlgraph.FieldSpec{
			channel.FieldCreatedAt:         {Type: field.TypeTime, Column: channel.FieldCreatedAt},
			channel.FieldUpdatedAt:         {Type: field.TypeTime, Column: channel.FieldUpdatedAt},
			channel.FieldDeletedAt:         {Type: field.TypeTime, Column: channel.FieldDeletedAt},
			channel.FieldWarehouseID:       {Type: field.TypeInt64, Column: channel.FieldWarehouseID},
			channel.FieldCourierPlatform:   {Type: field.TypeString, Column: channel.FieldCourierPlatform},
			channel.FieldName:              {Type: field.TypeString, Column: channel.FieldName},
			channel.FieldCode:              {Type: field.TypeString, Column: channel.FieldCode},
			channel.FieldType:              {Type: field.TypeInt8, Column: channel.FieldType},
			channel.FieldQuotationCurrency: {Type: field.TypeString, Column: channel.FieldQuotationCurrency},
			channel.FieldVolumeFactor:      {Type: field.TypeInt32, Column: channel.FieldVolumeFactor},
			channel.FieldEnName:            {Type: field.TypeString, Column: channel.FieldEnName},
			channel.FieldDisplayName:       {Type: field.TypeString, Column: channel.FieldDisplayName},
			channel.FieldHasTrackingNumber: {Type: field.TypeInt8, Column: channel.FieldHasTrackingNumber},
			channel.FieldMinNormalDays:     {Type: field.TypeInt32, Column: channel.FieldMinNormalDays},
			channel.FieldMaxNormalDays:     {Type: field.TypeInt32, Column: channel.FieldMaxNormalDays},
			channel.FieldMaxWeight:         {Type: field.TypeInt, Column: channel.FieldMaxWeight},
			channel.FieldMaxLength:         {Type: field.TypeInt, Column: channel.FieldMaxLength},
			channel.FieldMinLength:         {Type: field.TypeInt, Column: channel.FieldMinLength},
			channel.FieldMaxThreeSideSum:   {Type: field.TypeInt, Column: channel.FieldMaxThreeSideSum},
			channel.FieldDescription:       {Type: field.TypeString, Column: channel.FieldDescription},
			channel.FieldSortingPort:       {Type: field.TypeInt32, Column: channel.FieldSortingPort},
			channel.FieldPrepayTariff:      {Type: field.TypeBool, Column: channel.FieldPrepayTariff},
			channel.FieldStatus:            {Type: field.TypeInt8, Column: channel.FieldStatus},
			channel.FieldTest:              {Type: field.TypeBool, Column: channel.FieldTest},
			channel.FieldOptions:           {Type: field.TypeString, Column: channel.FieldOptions},
			channel.FieldExcludeAttributes: {Type: field.TypeString, Column: channel.FieldExcludeAttributes},
			channel.FieldBattery:           {Type: field.TypeInt8, Column: channel.FieldBattery},
			channel.FieldVirtual:           {Type: field.TypeInt8, Column: channel.FieldVirtual},
			channel.FieldChannelType:       {Type: field.TypeInt8, Column: channel.FieldChannelType},
			channel.FieldDeliverDuty:       {Type: field.TypeString, Column: channel.FieldDeliverDuty},
			channel.FieldSpecial:           {Type: field.TypeInt8, Column: channel.FieldSpecial},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channelcost.Table,
			Columns: channelcost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcost.FieldID,
			},
		},
		Type: "ChannelCost",
		Fields: map[string]*sqlgraph.FieldSpec{
			channelcost.FieldCreatedAt:          {Type: field.TypeTime, Column: channelcost.FieldCreatedAt},
			channelcost.FieldUpdatedAt:          {Type: field.TypeTime, Column: channelcost.FieldUpdatedAt},
			channelcost.FieldDeletedAt:          {Type: field.TypeTime, Column: channelcost.FieldDeletedAt},
			channelcost.FieldChannelCostBatchID: {Type: field.TypeInt64, Column: channelcost.FieldChannelCostBatchID},
			channelcost.FieldChannelID:          {Type: field.TypeInt64, Column: channelcost.FieldChannelID},
			channelcost.FieldMode:               {Type: field.TypeInt8, Column: channelcost.FieldMode},
			channelcost.FieldCountryCode:        {Type: field.TypeString, Column: channelcost.FieldCountryCode},
			channelcost.FieldZone:               {Type: field.TypeString, Column: channelcost.FieldZone},
			channelcost.FieldStartWeight:        {Type: field.TypeInt, Column: channelcost.FieldStartWeight},
			channelcost.FieldEndWeight:          {Type: field.TypeInt, Column: channelcost.FieldEndWeight},
			channelcost.FieldFirstWeight:        {Type: field.TypeInt, Column: channelcost.FieldFirstWeight},
			channelcost.FieldFirstWeightFee:     {Type: field.TypeFloat64, Column: channelcost.FieldFirstWeightFee},
			channelcost.FieldUnitWeight:         {Type: field.TypeInt, Column: channelcost.FieldUnitWeight},
			channelcost.FieldUnitWeightFee:      {Type: field.TypeFloat64, Column: channelcost.FieldUnitWeightFee},
			channelcost.FieldFuelFee:            {Type: field.TypeFloat64, Column: channelcost.FieldFuelFee},
			channelcost.FieldProcessingFee:      {Type: field.TypeFloat64, Column: channelcost.FieldProcessingFee},
			channelcost.FieldRegistrationFee:    {Type: field.TypeFloat64, Column: channelcost.FieldRegistrationFee},
			channelcost.FieldMiscFee:            {Type: field.TypeFloat64, Column: channelcost.FieldMiscFee},
			channelcost.FieldMinNormalDays:      {Type: field.TypeInt, Column: channelcost.FieldMinNormalDays},
			channelcost.FieldMaxNormalDays:      {Type: field.TypeInt, Column: channelcost.FieldMaxNormalDays},
			channelcost.FieldStatus:             {Type: field.TypeInt8, Column: channelcost.FieldStatus},
			channelcost.FieldAverageDays:        {Type: field.TypeInt, Column: channelcost.FieldAverageDays},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channelcostbatche.Table,
			Columns: channelcostbatche.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcostbatche.FieldID,
			},
		},
		Type: "ChannelCostBatche",
		Fields: map[string]*sqlgraph.FieldSpec{
			channelcostbatche.FieldCreatedAt:     {Type: field.TypeTime, Column: channelcostbatche.FieldCreatedAt},
			channelcostbatche.FieldUpdatedAt:     {Type: field.TypeTime, Column: channelcostbatche.FieldUpdatedAt},
			channelcostbatche.FieldChannelID:     {Type: field.TypeInt64, Column: channelcostbatche.FieldChannelID},
			channelcostbatche.FieldEffectiveDate: {Type: field.TypeTime, Column: channelcostbatche.FieldEffectiveDate},
			channelcostbatche.FieldExpiryDate:    {Type: field.TypeTime, Column: channelcostbatche.FieldExpiryDate},
			channelcostbatche.FieldStatus:        {Type: field.TypeBool, Column: channelcostbatche.FieldStatus},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channeloption.Table,
			Columns: channeloption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channeloption.FieldID,
			},
		},
		Type: "ChannelOption",
		Fields: map[string]*sqlgraph.FieldSpec{
			channeloption.FieldOrderID:     {Type: field.TypeInt64, Column: channeloption.FieldOrderID},
			channeloption.FieldChannelID:   {Type: field.TypeInt64, Column: channeloption.FieldChannelID},
			channeloption.FieldCountryCode: {Type: field.TypeString, Column: channeloption.FieldCountryCode},
			channeloption.FieldCreatedAt:   {Type: field.TypeTime, Column: channeloption.FieldCreatedAt},
			channeloption.FieldUpdatedAt:   {Type: field.TypeTime, Column: channeloption.FieldUpdatedAt},
			channeloption.FieldDeletedAt:   {Type: field.TypeTime, Column: channeloption.FieldDeletedAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channelrecommend.Table,
			Columns: channelrecommend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelrecommend.FieldID,
			},
		},
		Type: "ChannelRecommend",
		Fields: map[string]*sqlgraph.FieldSpec{
			channelrecommend.FieldCreatedAt:     {Type: field.TypeTime, Column: channelrecommend.FieldCreatedAt},
			channelrecommend.FieldUpdatedAt:     {Type: field.TypeTime, Column: channelrecommend.FieldUpdatedAt},
			channelrecommend.FieldDeletedAt:     {Type: field.TypeTime, Column: channelrecommend.FieldDeletedAt},
			channelrecommend.FieldCountryCode:   {Type: field.TypeString, Column: channelrecommend.FieldCountryCode},
			channelrecommend.FieldChannelID:     {Type: field.TypeInt64, Column: channelrecommend.FieldChannelID},
			channelrecommend.FieldIsRecommended: {Type: field.TypeInt8, Column: channelrecommend.FieldIsRecommended},
			channelrecommend.FieldStatus:        {Type: field.TypeInt8, Column: channelrecommend.FieldStatus},
			channelrecommend.FieldValue:         {Type: field.TypeString, Column: channelrecommend.FieldValue},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channelvolumefactor.Table,
			Columns: channelvolumefactor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelvolumefactor.FieldID,
			},
		},
		Type: "ChannelVolumeFactor",
		Fields: map[string]*sqlgraph.FieldSpec{
			channelvolumefactor.FieldCreatedAt:    {Type: field.TypeTime, Column: channelvolumefactor.FieldCreatedAt},
			channelvolumefactor.FieldUpdatedAt:    {Type: field.TypeTime, Column: channelvolumefactor.FieldUpdatedAt},
			channelvolumefactor.FieldDeletedAt:    {Type: field.TypeTime, Column: channelvolumefactor.FieldDeletedAt},
			channelvolumefactor.FieldCountryCode:  {Type: field.TypeString, Column: channelvolumefactor.FieldCountryCode},
			channelvolumefactor.FieldChannelID:    {Type: field.TypeInt64, Column: channelvolumefactor.FieldChannelID},
			channelvolumefactor.FieldVolumeFactor: {Type: field.TypeInt, Column: channelvolumefactor.FieldVolumeFactor},
			channelvolumefactor.FieldStatus:       {Type: field.TypeInt8, Column: channelvolumefactor.FieldStatus},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: country.FieldID,
			},
		},
		Type: "Country",
		Fields: map[string]*sqlgraph.FieldSpec{
			country.FieldCode:   {Type: field.TypeString, Column: country.FieldCode},
			country.FieldCnName: {Type: field.TypeString, Column: country.FieldCnName},
			country.FieldEnName: {Type: field.TypeString, Column: country.FieldEnName},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   countryzone.Table,
			Columns: countryzone.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: countryzone.FieldID,
			},
		},
		Type: "CountryZone",
		Fields: map[string]*sqlgraph.FieldSpec{
			countryzone.FieldChannelID:    {Type: field.TypeInt64, Column: countryzone.FieldChannelID},
			countryzone.FieldCountryCode:  {Type: field.TypeString, Column: countryzone.FieldCountryCode},
			countryzone.FieldZipCode:      {Type: field.TypeString, Column: countryzone.FieldZipCode},
			countryzone.FieldStartZipCode: {Type: field.TypeString, Column: countryzone.FieldStartZipCode},
			countryzone.FieldEndZipCode:   {Type: field.TypeString, Column: countryzone.FieldEndZipCode},
			countryzone.FieldZone:         {Type: field.TypeString, Column: countryzone.FieldZone},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   courierorder.Table,
			Columns: courierorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: courierorder.FieldID,
			},
		},
		Type: "CourierOrder",
		Fields: map[string]*sqlgraph.FieldSpec{
			courierorder.FieldCreatedAt:          {Type: field.TypeTime, Column: courierorder.FieldCreatedAt},
			courierorder.FieldUpdatedAt:          {Type: field.TypeTime, Column: courierorder.FieldUpdatedAt},
			courierorder.FieldDeletedAt:          {Type: field.TypeTime, Column: courierorder.FieldDeletedAt},
			courierorder.FieldOrderID:            {Type: field.TypeInt64, Column: courierorder.FieldOrderID},
			courierorder.FieldOrderNumber:        {Type: field.TypeString, Column: courierorder.FieldOrderNumber},
			courierorder.FieldCourierPlatform:    {Type: field.TypeString, Column: courierorder.FieldCourierPlatform},
			courierorder.FieldShippingMethodCode: {Type: field.TypeString, Column: courierorder.FieldShippingMethodCode},
			courierorder.FieldShippingMethodName: {Type: field.TypeString, Column: courierorder.FieldShippingMethodName},
			courierorder.FieldTrackingURL:        {Type: field.TypeString, Column: courierorder.FieldTrackingURL},
			courierorder.FieldTrackingNumber:     {Type: field.TypeString, Column: courierorder.FieldTrackingNumber},
			courierorder.FieldWaybillNumber:      {Type: field.TypeString, Column: courierorder.FieldWaybillNumber},
			courierorder.FieldCourierOrderNumber: {Type: field.TypeString, Column: courierorder.FieldCourierOrderNumber},
			courierorder.FieldShippingLabelURL:   {Type: field.TypeString, Column: courierorder.FieldShippingLabelURL},
			courierorder.FieldTotalItemsPrice:    {Type: field.TypeFloat64, Column: courierorder.FieldTotalItemsPrice},
			courierorder.FieldCurrency:           {Type: field.TypeString, Column: courierorder.FieldCurrency},
			courierorder.FieldPackageCount:       {Type: field.TypeInt, Column: courierorder.FieldPackageCount},
			courierorder.FieldWeight:             {Type: field.TypeInt, Column: courierorder.FieldWeight},
			courierorder.FieldReceiverAddress:    {Type: field.TypeString, Column: courierorder.FieldReceiverAddress},
			courierorder.FieldSenderAddress:      {Type: field.TypeString, Column: courierorder.FieldSenderAddress},
			courierorder.FieldItems:              {Type: field.TypeString, Column: courierorder.FieldItems},
			courierorder.FieldRequestData:        {Type: field.TypeString, Column: courierorder.FieldRequestData},
			courierorder.FieldResponseData:       {Type: field.TypeString, Column: courierorder.FieldResponseData},
			courierorder.FieldResultCode:         {Type: field.TypeString, Column: courierorder.FieldResultCode},
			courierorder.FieldMessage:            {Type: field.TypeString, Column: courierorder.FieldMessage},
			courierorder.FieldEnMessage:          {Type: field.TypeString, Column: courierorder.FieldEnMessage},
			courierorder.FieldStatus:             {Type: field.TypeString, Column: courierorder.FieldStatus},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customerconfig.Table,
			Columns: customerconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customerconfig.FieldID,
			},
		},
		Type: "CustomerConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			customerconfig.FieldCreatedAt:          {Type: field.TypeTime, Column: customerconfig.FieldCreatedAt},
			customerconfig.FieldUpdatedAt:          {Type: field.TypeTime, Column: customerconfig.FieldUpdatedAt},
			customerconfig.FieldDeletedAt:          {Type: field.TypeTime, Column: customerconfig.FieldDeletedAt},
			customerconfig.FieldChannelID:          {Type: field.TypeInt64, Column: customerconfig.FieldChannelID},
			customerconfig.FieldExcludeCountryCode: {Type: field.TypeString, Column: customerconfig.FieldExcludeCountryCode},
			customerconfig.FieldStatus:             {Type: field.TypeInt8, Column: customerconfig.FieldStatus},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inbound.Table,
			Columns: inbound.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbound.FieldID,
			},
		},
		Type: "Inbound",
		Fields: map[string]*sqlgraph.FieldSpec{
			inbound.FieldCreatedAt:          {Type: field.TypeTime, Column: inbound.FieldCreatedAt},
			inbound.FieldUpdatedAt:          {Type: field.TypeTime, Column: inbound.FieldUpdatedAt},
			inbound.FieldDeletedAt:          {Type: field.TypeTime, Column: inbound.FieldDeletedAt},
			inbound.FieldCustomerOrderID:    {Type: field.TypeString, Column: inbound.FieldCustomerOrderID},
			inbound.FieldCustomerCode:       {Type: field.TypeString, Column: inbound.FieldCustomerCode},
			inbound.FieldTrackingNumber:     {Type: field.TypeString, Column: inbound.FieldTrackingNumber},
			inbound.FieldWarehouseID:        {Type: field.TypeInt64, Column: inbound.FieldWarehouseID},
			inbound.FieldDescription:        {Type: field.TypeString, Column: inbound.FieldDescription},
			inbound.FieldEstimatedArrivalAt: {Type: field.TypeTime, Column: inbound.FieldEstimatedArrivalAt},
			inbound.FieldShippedAt:          {Type: field.TypeTime, Column: inbound.FieldShippedAt},
			inbound.FieldStatus:             {Type: field.TypeInt8, Column: inbound.FieldStatus},
			inbound.FieldType:               {Type: field.TypeInt8, Column: inbound.FieldType},
			inbound.FieldIsPickup:           {Type: field.TypeInt8, Column: inbound.FieldIsPickup},
			inbound.FieldShippingMarkURL:    {Type: field.TypeString, Column: inbound.FieldShippingMarkURL},
			inbound.FieldPickupOrderID:      {Type: field.TypeInt64, Column: inbound.FieldPickupOrderID},
			inbound.FieldCarrierName:        {Type: field.TypeString, Column: inbound.FieldCarrierName},
			inbound.FieldOrderNumber:        {Type: field.TypeString, Column: inbound.FieldOrderNumber},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inbounditem.Table,
			Columns: inbounditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbounditem.FieldID,
			},
		},
		Type: "InboundItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			inbounditem.FieldCreatedAt:    {Type: field.TypeTime, Column: inbounditem.FieldCreatedAt},
			inbounditem.FieldUpdatedAt:    {Type: field.TypeTime, Column: inbounditem.FieldUpdatedAt},
			inbounditem.FieldDeletedAt:    {Type: field.TypeTime, Column: inbounditem.FieldDeletedAt},
			inbounditem.FieldInboundID:    {Type: field.TypeInt64, Column: inbounditem.FieldInboundID},
			inbounditem.FieldProductID:    {Type: field.TypeInt64, Column: inbounditem.FieldProductID},
			inbounditem.FieldProductName:  {Type: field.TypeString, Column: inbounditem.FieldProductName},
			inbounditem.FieldSku:          {Type: field.TypeString, Column: inbounditem.FieldSku},
			inbounditem.FieldBarcode:      {Type: field.TypeString, Column: inbounditem.FieldBarcode},
			inbounditem.FieldQty:          {Type: field.TypeInt, Column: inbounditem.FieldQty},
			inbounditem.FieldStatus:       {Type: field.TypeInt8, Column: inbounditem.FieldStatus},
			inbounditem.FieldCustomerCode: {Type: field.TypeString, Column: inbounditem.FieldCustomerCode},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inventory.Table,
			Columns: inventory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inventory.FieldID,
			},
		},
		Type: "Inventory",
		Fields: map[string]*sqlgraph.FieldSpec{
			inventory.FieldCreatedAt:                   {Type: field.TypeTime, Column: inventory.FieldCreatedAt},
			inventory.FieldUpdatedAt:                   {Type: field.TypeTime, Column: inventory.FieldUpdatedAt},
			inventory.FieldDeletedAt:                   {Type: field.TypeTime, Column: inventory.FieldDeletedAt},
			inventory.FieldProductID:                   {Type: field.TypeInt64, Column: inventory.FieldProductID},
			inventory.FieldWarehouseID:                 {Type: field.TypeInt64, Column: inventory.FieldWarehouseID},
			inventory.FieldStorageQty:                  {Type: field.TypeInt32, Column: inventory.FieldStorageQty},
			inventory.FieldAvailableQty:                {Type: field.TypeInt32, Column: inventory.FieldAvailableQty},
			inventory.FieldPrepareShipQty:              {Type: field.TypeInt32, Column: inventory.FieldPrepareShipQty},
			inventory.FieldPrepareShelveQty:            {Type: field.TypeInt32, Column: inventory.FieldPrepareShelveQty},
			inventory.FieldQuicktronStorageQty:         {Type: field.TypeInt32, Column: inventory.FieldQuicktronStorageQty},
			inventory.FieldQuicktronAvailableQty:       {Type: field.TypeInt32, Column: inventory.FieldQuicktronAvailableQty},
			inventory.FieldQuicktronPrepareOutboundQty: {Type: field.TypeInt32, Column: inventory.FieldQuicktronPrepareOutboundQty},
			inventory.FieldQuicktronPrepareShelveQty:   {Type: field.TypeInt32, Column: inventory.FieldQuicktronPrepareShelveQty},
			inventory.FieldNormalStorageQty:            {Type: field.TypeInt32, Column: inventory.FieldNormalStorageQty},
			inventory.FieldNormalAvailableQty:          {Type: field.TypeInt32, Column: inventory.FieldNormalAvailableQty},
			inventory.FieldNormalPrepareOutboundQty:    {Type: field.TypeInt32, Column: inventory.FieldNormalPrepareOutboundQty},
			inventory.FieldNormalPrepareShelveQty:      {Type: field.TypeInt32, Column: inventory.FieldNormalPrepareShelveQty},
			inventory.FieldStatus:                      {Type: field.TypeInt8, Column: inventory.FieldStatus},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:                   {Type: field.TypeTime, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:                   {Type: field.TypeTime, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:                   {Type: field.TypeTime, Column: order.FieldDeletedAt},
			order.FieldOrderNumber:                 {Type: field.TypeString, Column: order.FieldOrderNumber},
			order.FieldMode:                        {Type: field.TypeInt8, Column: order.FieldMode},
			order.FieldType:                        {Type: field.TypeInt8, Column: order.FieldType},
			order.FieldOffline:                     {Type: field.TypeBool, Column: order.FieldOffline},
			order.FieldStoreID:                     {Type: field.TypeInt64, Column: order.FieldStoreID},
			order.FieldWarehouseID:                 {Type: field.TypeInt64, Column: order.FieldWarehouseID},
			order.FieldCustomerCode:                {Type: field.TypeString, Column: order.FieldCustomerCode},
			order.FieldPrepayTariff:                {Type: field.TypeBool, Column: order.FieldPrepayTariff},
			order.FieldIossNumber:                  {Type: field.TypeString, Column: order.FieldIossNumber},
			order.FieldIossCountryCode:             {Type: field.TypeString, Column: order.FieldIossCountryCode},
			order.FieldIossNumberType:              {Type: field.TypeInt8, Column: order.FieldIossNumberType},
			order.FieldUkVatNumber:                 {Type: field.TypeString, Column: order.FieldUkVatNumber},
			order.FieldInboundOrderNumber:          {Type: field.TypeString, Column: order.FieldInboundOrderNumber},
			order.FieldStatus:                      {Type: field.TypeInt8, Column: order.FieldStatus},
			order.FieldSqsStatus:                   {Type: field.TypeBool, Column: order.FieldSqsStatus},
			order.FieldHoldStatus:                  {Type: field.TypeBool, Column: order.FieldHoldStatus},
			order.FieldPaymentStatus:               {Type: field.TypeInt8, Column: order.FieldPaymentStatus},
			order.FieldCancelRequest:               {Type: field.TypeInt8, Column: order.FieldCancelRequest},
			order.FieldPlatform:                    {Type: field.TypeString, Column: order.FieldPlatform},
			order.FieldPlatformOrderID:             {Type: field.TypeString, Column: order.FieldPlatformOrderID},
			order.FieldPlatformOrderNo:             {Type: field.TypeString, Column: order.FieldPlatformOrderNo},
			order.FieldPlatformOrderStatusURL:      {Type: field.TypeString, Column: order.FieldPlatformOrderStatusURL},
			order.FieldPlatformStatus:              {Type: field.TypeString, Column: order.FieldPlatformStatus},
			order.FieldPaidStatus:                  {Type: field.TypeString, Column: order.FieldPaidStatus},
			order.FieldFulfillmentPushed:           {Type: field.TypeBool, Column: order.FieldFulfillmentPushed},
			order.FieldFulfillmentStatus:           {Type: field.TypeString, Column: order.FieldFulfillmentStatus},
			order.FieldPlatformCreatedAt:           {Type: field.TypeTime, Column: order.FieldPlatformCreatedAt},
			order.FieldLocationID:                  {Type: field.TypeString, Column: order.FieldLocationID},
			order.FieldTags:                        {Type: field.TypeString, Column: order.FieldTags},
			order.FieldNote:                        {Type: field.TypeString, Column: order.FieldNote},
			order.FieldCancelReason:                {Type: field.TypeString, Column: order.FieldCancelReason},
			order.FieldCancelledAt:                 {Type: field.TypeTime, Column: order.FieldCancelledAt},
			order.FieldClosedAt:                    {Type: field.TypeTime, Column: order.FieldClosedAt},
			order.FieldContactEmail:                {Type: field.TypeString, Column: order.FieldContactEmail},
			order.FieldContactPhone:                {Type: field.TypeString, Column: order.FieldContactPhone},
			order.FieldShippingName:                {Type: field.TypeString, Column: order.FieldShippingName},
			order.FieldShippingFirstName:           {Type: field.TypeString, Column: order.FieldShippingFirstName},
			order.FieldShippingLastName:            {Type: field.TypeString, Column: order.FieldShippingLastName},
			order.FieldShippingCompany:             {Type: field.TypeString, Column: order.FieldShippingCompany},
			order.FieldShippingCountry:             {Type: field.TypeString, Column: order.FieldShippingCountry},
			order.FieldShippingCountryCode:         {Type: field.TypeString, Column: order.FieldShippingCountryCode},
			order.FieldShippingProvince:            {Type: field.TypeString, Column: order.FieldShippingProvince},
			order.FieldShippingProvinceCode:        {Type: field.TypeString, Column: order.FieldShippingProvinceCode},
			order.FieldShippingCity:                {Type: field.TypeString, Column: order.FieldShippingCity},
			order.FieldShippingAddress1:            {Type: field.TypeString, Column: order.FieldShippingAddress1},
			order.FieldShippingAddress2:            {Type: field.TypeString, Column: order.FieldShippingAddress2},
			order.FieldShippingZipCode:             {Type: field.TypeString, Column: order.FieldShippingZipCode},
			order.FieldShippingPhone:               {Type: field.TypeString, Column: order.FieldShippingPhone},
			order.FieldShippingCertificateType:     {Type: field.TypeString, Column: order.FieldShippingCertificateType},
			order.FieldShippingCertificateCode:     {Type: field.TypeString, Column: order.FieldShippingCertificateCode},
			order.FieldShippingCredentialsPeriod:   {Type: field.TypeString, Column: order.FieldShippingCredentialsPeriod},
			order.FieldRemark:                      {Type: field.TypeString, Column: order.FieldRemark},
			order.FieldPreferShippedType:           {Type: field.TypeInt8, Column: order.FieldPreferShippedType},
			order.FieldPreferChannelID:             {Type: field.TypeInt64, Column: order.FieldPreferChannelID},
			order.FieldChannelOptions:              {Type: field.TypeString, Column: order.FieldChannelOptions},
			order.FieldChannelID:                   {Type: field.TypeInt64, Column: order.FieldChannelID},
			order.FieldChannelCostID:               {Type: field.TypeInt64, Column: order.FieldChannelCostID},
			order.FieldShipType:                    {Type: field.TypeInt8, Column: order.FieldShipType},
			order.FieldTrackingCompany:             {Type: field.TypeString, Column: order.FieldTrackingCompany},
			order.FieldTrackingNumber:              {Type: field.TypeString, Column: order.FieldTrackingNumber},
			order.FieldTrackingURL:                 {Type: field.TypeString, Column: order.FieldTrackingURL},
			order.FieldWaybillNumber:               {Type: field.TypeString, Column: order.FieldWaybillNumber},
			order.FieldCourierOrderNumber:          {Type: field.TypeString, Column: order.FieldCourierOrderNumber},
			order.FieldNssCourierOrderNumber:       {Type: field.TypeString, Column: order.FieldNssCourierOrderNumber},
			order.FieldNssTrackingNumber:           {Type: field.TypeString, Column: order.FieldNssTrackingNumber},
			order.FieldNssTrackingURL:              {Type: field.TypeString, Column: order.FieldNssTrackingURL},
			order.FieldShippingLabelURL:            {Type: field.TypeString, Column: order.FieldShippingLabelURL},
			order.FieldShippingLabelPath:           {Type: field.TypeString, Column: order.FieldShippingLabelPath},
			order.FieldLabelDataPath:               {Type: field.TypeString, Column: order.FieldLabelDataPath},
			order.FieldPackageID:                   {Type: field.TypeString, Column: order.FieldPackageID},
			order.FieldShipDate:                    {Type: field.TypeTime, Column: order.FieldShipDate},
			order.FieldRequestShippingAt:           {Type: field.TypeTime, Column: order.FieldRequestShippingAt},
			order.FieldUnshelfRequestedTime:        {Type: field.TypeTime, Column: order.FieldUnshelfRequestedTime},
			order.FieldContainerCode:               {Type: field.TypeString, Column: order.FieldContainerCode},
			order.FieldBasketNumber:                {Type: field.TypeString, Column: order.FieldBasketNumber},
			order.FieldPrintTimes:                  {Type: field.TypeInt, Column: order.FieldPrintTimes},
			order.FieldSortingTrackingNumber:       {Type: field.TypeString, Column: order.FieldSortingTrackingNumber},
			order.FieldSortingPort:                 {Type: field.TypeInt32, Column: order.FieldSortingPort},
			order.FieldSortingLength:               {Type: field.TypeInt, Column: order.FieldSortingLength},
			order.FieldSortingWidth:                {Type: field.TypeInt, Column: order.FieldSortingWidth},
			order.FieldSortingHeight:               {Type: field.TypeInt, Column: order.FieldSortingHeight},
			order.FieldSortingWeight:               {Type: field.TypeInt, Column: order.FieldSortingWeight},
			order.FieldEstimatedWeight:             {Type: field.TypeInt, Column: order.FieldEstimatedWeight},
			order.FieldCheckoutActualWeight:        {Type: field.TypeInt, Column: order.FieldCheckoutActualWeight},
			order.FieldVolumeWeight:                {Type: field.TypeInt, Column: order.FieldVolumeWeight},
			order.FieldCourierWeight:               {Type: field.TypeInt, Column: order.FieldCourierWeight},
			order.FieldDeclaredValueInUsd:          {Type: field.TypeFloat64, Column: order.FieldDeclaredValueInUsd},
			order.FieldDeclaredValueInEur:          {Type: field.TypeFloat64, Column: order.FieldDeclaredValueInEur},
			order.FieldTotalItemsPrice:             {Type: field.TypeFloat64, Column: order.FieldTotalItemsPrice},
			order.FieldCurrency:                    {Type: field.TypeString, Column: order.FieldCurrency},
			order.FieldDeliveryCost:                {Type: field.TypeFloat64, Column: order.FieldDeliveryCost},
			order.FieldMiscFee:                     {Type: field.TypeFloat64, Column: order.FieldMiscFee},
			order.FieldFuelFee:                     {Type: field.TypeFloat64, Column: order.FieldFuelFee},
			order.FieldRegistrationFee:             {Type: field.TypeFloat64, Column: order.FieldRegistrationFee},
			order.FieldProcessingFee:               {Type: field.TypeFloat64, Column: order.FieldProcessingFee},
			order.FieldPackageFee:                  {Type: field.TypeFloat64, Column: order.FieldPackageFee},
			order.FieldHandlingFee:                 {Type: field.TypeFloat64, Column: order.FieldHandlingFee},
			order.FieldVat:                         {Type: field.TypeFloat64, Column: order.FieldVat},
			order.FieldEstimatedCost:               {Type: field.TypeFloat64, Column: order.FieldEstimatedCost},
			order.FieldEstimatedCurrency:           {Type: field.TypeString, Column: order.FieldEstimatedCurrency},
			order.FieldReceivablesAmount:           {Type: field.TypeFloat64, Column: order.FieldReceivablesAmount},
			order.FieldReceivablesCurrency:         {Type: field.TypeString, Column: order.FieldReceivablesCurrency},
			order.FieldNotAcceptPlatformUpdate:     {Type: field.TypeBool, Column: order.FieldNotAcceptPlatformUpdate},
			order.FieldNotAcceptPlatformUpdateItem: {Type: field.TypeBool, Column: order.FieldNotAcceptPlatformUpdateItem},
			order.FieldJdPushedStatus:              {Type: field.TypeString, Column: order.FieldJdPushedStatus},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderholdreason.Table,
			Columns: orderholdreason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderholdreason.FieldID,
			},
		},
		Type: "OrderHoldReason",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderholdreason.FieldOrderID:   {Type: field.TypeInt64, Column: orderholdreason.FieldOrderID},
			orderholdreason.FieldProductID: {Type: field.TypeInt64, Column: orderholdreason.FieldProductID},
			orderholdreason.FieldType:      {Type: field.TypeString, Column: orderholdreason.FieldType},
			orderholdreason.FieldCode:      {Type: field.TypeInt32, Column: orderholdreason.FieldCode},
			orderholdreason.FieldReason:    {Type: field.TypeString, Column: orderholdreason.FieldReason},
			orderholdreason.FieldEnReason:  {Type: field.TypeString, Column: orderholdreason.FieldEnReason},
			orderholdreason.FieldCreatedAt: {Type: field.TypeTime, Column: orderholdreason.FieldCreatedAt},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: orderitem.FieldID,
			},
		},
		Type: "OrderItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderitem.FieldCreatedAt:          {Type: field.TypeTime, Column: orderitem.FieldCreatedAt},
			orderitem.FieldUpdatedAt:          {Type: field.TypeTime, Column: orderitem.FieldUpdatedAt},
			orderitem.FieldDeletedAt:          {Type: field.TypeTime, Column: orderitem.FieldDeletedAt},
			orderitem.FieldOrderID:            {Type: field.TypeInt64, Column: orderitem.FieldOrderID},
			orderitem.FieldProductID:          {Type: field.TypeInt64, Column: orderitem.FieldProductID},
			orderitem.FieldPlatformProductID:  {Type: field.TypeInt64, Column: orderitem.FieldPlatformProductID},
			orderitem.FieldBarcode:            {Type: field.TypeString, Column: orderitem.FieldBarcode},
			orderitem.FieldFulfillmentService: {Type: field.TypeString, Column: orderitem.FieldFulfillmentService},
			orderitem.FieldExtOrderItemID:     {Type: field.TypeString, Column: orderitem.FieldExtOrderItemID},
			orderitem.FieldExtProductID:       {Type: field.TypeString, Column: orderitem.FieldExtProductID},
			orderitem.FieldIsCustomItem:       {Type: field.TypeBool, Column: orderitem.FieldIsCustomItem},
			orderitem.FieldName:               {Type: field.TypeString, Column: orderitem.FieldName},
			orderitem.FieldDeclaredCnName:     {Type: field.TypeString, Column: orderitem.FieldDeclaredCnName},
			orderitem.FieldHsCode:             {Type: field.TypeString, Column: orderitem.FieldHsCode},
			orderitem.FieldMaterial:           {Type: field.TypeString, Column: orderitem.FieldMaterial},
			orderitem.FieldPurpose:            {Type: field.TypeString, Column: orderitem.FieldPurpose},
			orderitem.FieldImages:             {Type: field.TypeString, Column: orderitem.FieldImages},
			orderitem.FieldAttributes:         {Type: field.TypeString, Column: orderitem.FieldAttributes},
			orderitem.FieldGrams:              {Type: field.TypeInt, Column: orderitem.FieldGrams},
			orderitem.FieldLength:             {Type: field.TypeInt, Column: orderitem.FieldLength},
			orderitem.FieldWidth:              {Type: field.TypeInt, Column: orderitem.FieldWidth},
			orderitem.FieldHeight:             {Type: field.TypeInt, Column: orderitem.FieldHeight},
			orderitem.FieldQty:                {Type: field.TypeInt, Column: orderitem.FieldQty},
			orderitem.FieldUnitPrice:          {Type: field.TypeFloat64, Column: orderitem.FieldUnitPrice},
			orderitem.FieldDeclaredValueInUsd: {Type: field.TypeFloat64, Column: orderitem.FieldDeclaredValueInUsd},
			orderitem.FieldDeclaredValueInEur: {Type: field.TypeFloat64, Column: orderitem.FieldDeclaredValueInEur},
			orderitem.FieldCurrency:           {Type: field.TypeString, Column: orderitem.FieldCurrency},
			orderitem.FieldFulfillQty:         {Type: field.TypeInt, Column: orderitem.FieldFulfillQty},
			orderitem.FieldRequiresShipping:   {Type: field.TypeBool, Column: orderitem.FieldRequiresShipping},
			orderitem.FieldGiftCard:           {Type: field.TypeBool, Column: orderitem.FieldGiftCard},
			orderitem.FieldTaxable:            {Type: field.TypeBool, Column: orderitem.FieldTaxable},
			orderitem.FieldStatus:             {Type: field.TypeInt8, Column: orderitem.FieldStatus},
			orderitem.FieldSku:                {Type: field.TypeString, Column: orderitem.FieldSku},
			orderitem.FieldListingSku:         {Type: field.TypeString, Column: orderitem.FieldListingSku},
			orderitem.FieldDeclaredEnName:     {Type: field.TypeString, Column: orderitem.FieldDeclaredEnName},
			orderitem.FieldProductName:        {Type: field.TypeString, Column: orderitem.FieldProductName},
			orderitem.FieldCustomerCode:       {Type: field.TypeString, Column: orderitem.FieldCustomerCode},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ordertaxation.Table,
			Columns: ordertaxation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordertaxation.FieldID,
			},
		},
		Type: "OrderTaxation",
		Fields: map[string]*sqlgraph.FieldSpec{
			ordertaxation.FieldCreatedAt:   {Type: field.TypeTime, Column: ordertaxation.FieldCreatedAt},
			ordertaxation.FieldUpdatedAt:   {Type: field.TypeTime, Column: ordertaxation.FieldUpdatedAt},
			ordertaxation.FieldDeletedAt:   {Type: field.TypeTime, Column: ordertaxation.FieldDeletedAt},
			ordertaxation.FieldOrderID:     {Type: field.TypeInt64, Column: ordertaxation.FieldOrderID},
			ordertaxation.FieldType:        {Type: field.TypeString, Column: ordertaxation.FieldType},
			ordertaxation.FieldCountryCode: {Type: field.TypeString, Column: ordertaxation.FieldCountryCode},
			ordertaxation.FieldNumber:      {Type: field.TypeString, Column: ordertaxation.FieldNumber},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pickuporder.Table,
			Columns: pickuporder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporder.FieldID,
			},
		},
		Type: "PickupOrder",
		Fields: map[string]*sqlgraph.FieldSpec{
			pickuporder.FieldCreatedAt:         {Type: field.TypeTime, Column: pickuporder.FieldCreatedAt},
			pickuporder.FieldUpdatedAt:         {Type: field.TypeTime, Column: pickuporder.FieldUpdatedAt},
			pickuporder.FieldDeletedAt:         {Type: field.TypeTime, Column: pickuporder.FieldDeletedAt},
			pickuporder.FieldRequestedPickupAt: {Type: field.TypeTime, Column: pickuporder.FieldRequestedPickupAt},
			pickuporder.FieldStatus:            {Type: field.TypeInt8, Column: pickuporder.FieldStatus},
			pickuporder.FieldSenderAddressInfo: {Type: field.TypeString, Column: pickuporder.FieldSenderAddressInfo},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pickuporderitem.Table,
			Columns: pickuporderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pickuporderitem.FieldID,
			},
		},
		Type: "PickupOrderItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			pickuporderitem.FieldCreatedAt:     {Type: field.TypeTime, Column: pickuporderitem.FieldCreatedAt},
			pickuporderitem.FieldUpdatedAt:     {Type: field.TypeTime, Column: pickuporderitem.FieldUpdatedAt},
			pickuporderitem.FieldDeletedAt:     {Type: field.TypeTime, Column: pickuporderitem.FieldDeletedAt},
			pickuporderitem.FieldPickupOrderID: {Type: field.TypeInt64, Column: pickuporderitem.FieldPickupOrderID},
			pickuporderitem.FieldProductID:     {Type: field.TypeInt64, Column: pickuporderitem.FieldProductID},
			pickuporderitem.FieldProductName:   {Type: field.TypeString, Column: pickuporderitem.FieldProductName},
			pickuporderitem.FieldSku:           {Type: field.TypeString, Column: pickuporderitem.FieldSku},
			pickuporderitem.FieldBarcode:       {Type: field.TypeString, Column: pickuporderitem.FieldBarcode},
			pickuporderitem.FieldQty:           {Type: field.TypeInt32, Column: pickuporderitem.FieldQty},
			pickuporderitem.FieldCustomerCode:  {Type: field.TypeString, Column: pickuporderitem.FieldCustomerCode},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   platformproduct.Table,
			Columns: platformproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: platformproduct.FieldID,
			},
		},
		Type: "PlatformProduct",
		Fields: map[string]*sqlgraph.FieldSpec{
			platformproduct.FieldCreatedAt:      {Type: field.TypeTime, Column: platformproduct.FieldCreatedAt},
			platformproduct.FieldUpdatedAt:      {Type: field.TypeTime, Column: platformproduct.FieldUpdatedAt},
			platformproduct.FieldDeletedAt:      {Type: field.TypeTime, Column: platformproduct.FieldDeletedAt},
			platformproduct.FieldStoreID:        {Type: field.TypeInt64, Column: platformproduct.FieldStoreID},
			platformproduct.FieldListingID:      {Type: field.TypeString, Column: platformproduct.FieldListingID},
			platformproduct.FieldCollectionID:   {Type: field.TypeString, Column: platformproduct.FieldCollectionID},
			platformproduct.FieldListingSku:     {Type: field.TypeString, Column: platformproduct.FieldListingSku},
			platformproduct.FieldBarcode:        {Type: field.TypeString, Column: platformproduct.FieldBarcode},
			platformproduct.FieldName:           {Type: field.TypeString, Column: platformproduct.FieldName},
			platformproduct.FieldImages:         {Type: field.TypeString, Column: platformproduct.FieldImages},
			platformproduct.FieldVendor:         {Type: field.TypeString, Column: platformproduct.FieldVendor},
			platformproduct.FieldSellingPrice:   {Type: field.TypeFloat64, Column: platformproduct.FieldSellingPrice},
			platformproduct.FieldCurrency:       {Type: field.TypeString, Column: platformproduct.FieldCurrency},
			platformproduct.FieldGrams:          {Type: field.TypeInt, Column: platformproduct.FieldGrams},
			platformproduct.FieldPlatformStatus: {Type: field.TypeInt8, Column: platformproduct.FieldPlatformStatus},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		},
		Type: "Product",
		Fields: map[string]*sqlgraph.FieldSpec{
			product.FieldCreatedAt:           {Type: field.TypeTime, Column: product.FieldCreatedAt},
			product.FieldUpdatedAt:           {Type: field.TypeTime, Column: product.FieldUpdatedAt},
			product.FieldDeletedAt:           {Type: field.TypeTime, Column: product.FieldDeletedAt},
			product.FieldName:                {Type: field.TypeString, Column: product.FieldName},
			product.FieldSku:                 {Type: field.TypeString, Column: product.FieldSku},
			product.FieldBarcode:             {Type: field.TypeString, Column: product.FieldBarcode},
			product.FieldCustomerCode:        {Type: field.TypeString, Column: product.FieldCustomerCode},
			product.FieldDeclaredName:        {Type: field.TypeString, Column: product.FieldDeclaredName},
			product.FieldDeclaredCnName:      {Type: field.TypeString, Column: product.FieldDeclaredCnName},
			product.FieldDeclaredValueInUsd:  {Type: field.TypeFloat64, Column: product.FieldDeclaredValueInUsd},
			product.FieldDeclaredValueInEur:  {Type: field.TypeFloat64, Column: product.FieldDeclaredValueInEur},
			product.FieldCurrency:            {Type: field.TypeString, Column: product.FieldCurrency},
			product.FieldHsCode:              {Type: field.TypeString, Column: product.FieldHsCode},
			product.FieldMaterial:            {Type: field.TypeString, Column: product.FieldMaterial},
			product.FieldPurpose:             {Type: field.TypeString, Column: product.FieldPurpose},
			product.FieldWithBarcode:         {Type: field.TypeInt8, Column: product.FieldWithBarcode},
			product.FieldBarcodeService:      {Type: field.TypeInt8, Column: product.FieldBarcodeService},
			product.FieldBarcodeTemplate:     {Type: field.TypeString, Column: product.FieldBarcodeTemplate},
			product.FieldImages:              {Type: field.TypeString, Column: product.FieldImages},
			product.FieldAttributes:          {Type: field.TypeString, Column: product.FieldAttributes},
			product.FieldConfirmedAttributes: {Type: field.TypeString, Column: product.FieldConfirmedAttributes},
			product.FieldGrams:               {Type: field.TypeInt, Column: product.FieldGrams},
			product.FieldInboundGrams:        {Type: field.TypeInt, Column: product.FieldInboundGrams},
			product.FieldLength:              {Type: field.TypeInt, Column: product.FieldLength},
			product.FieldWidth:               {Type: field.TypeInt, Column: product.FieldWidth},
			product.FieldHeight:              {Type: field.TypeInt, Column: product.FieldHeight},
			product.FieldMaxAgvQty:           {Type: field.TypeInt, Column: product.FieldMaxAgvQty},
			product.FieldStatus:              {Type: field.TypeInt8, Column: product.FieldStatus},
			product.FieldCreatedBy:           {Type: field.TypeInt64, Column: product.FieldCreatedBy},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   productmapping.Table,
			Columns: productmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: productmapping.FieldID,
			},
		},
		Type: "ProductMapping",
		Fields: map[string]*sqlgraph.FieldSpec{
			productmapping.FieldCreatedAt:         {Type: field.TypeTime, Column: productmapping.FieldCreatedAt},
			productmapping.FieldUpdatedAt:         {Type: field.TypeTime, Column: productmapping.FieldUpdatedAt},
			productmapping.FieldDeletedAt:         {Type: field.TypeTime, Column: productmapping.FieldDeletedAt},
			productmapping.FieldPlatformProductID: {Type: field.TypeInt64, Column: productmapping.FieldPlatformProductID},
			productmapping.FieldProductID:         {Type: field.TypeInt64, Column: productmapping.FieldProductID},
			productmapping.FieldQty:               {Type: field.TypeInt, Column: productmapping.FieldQty},
			productmapping.FieldCreatedBy:         {Type: field.TypeInt64, Column: productmapping.FieldCreatedBy},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sequence.Table,
			Columns: sequence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sequence.FieldID,
			},
		},
		Type: "Sequence",
		Fields: map[string]*sqlgraph.FieldSpec{
			sequence.FieldCreatedAt:    {Type: field.TypeTime, Column: sequence.FieldCreatedAt},
			sequence.FieldUpdatedAt:    {Type: field.TypeTime, Column: sequence.FieldUpdatedAt},
			sequence.FieldDeletedAt:    {Type: field.TypeTime, Column: sequence.FieldDeletedAt},
			sequence.FieldName:         {Type: field.TypeString, Column: sequence.FieldName},
			sequence.FieldPrefix:       {Type: field.TypeString, Column: sequence.FieldPrefix},
			sequence.FieldValue:        {Type: field.TypeInt64, Column: sequence.FieldValue},
			sequence.FieldDisplayValue: {Type: field.TypeString, Column: sequence.FieldDisplayValue},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: store.FieldID,
			},
		},
		Type: "Store",
		Fields: map[string]*sqlgraph.FieldSpec{
			store.FieldCreatedAt:        {Type: field.TypeTime, Column: store.FieldCreatedAt},
			store.FieldUpdatedAt:        {Type: field.TypeTime, Column: store.FieldUpdatedAt},
			store.FieldDeletedAt:        {Type: field.TypeTime, Column: store.FieldDeletedAt},
			store.FieldStoreURL:         {Type: field.TypeString, Column: store.FieldStoreURL},
			store.FieldPlatform:         {Type: field.TypeString, Column: store.FieldPlatform},
			store.FieldName:             {Type: field.TypeString, Column: store.FieldName},
			store.FieldCode:             {Type: field.TypeString, Column: store.FieldCode},
			store.FieldEmail:            {Type: field.TypeString, Column: store.FieldEmail},
			store.FieldAccessToken:      {Type: field.TypeString, Column: store.FieldAccessToken},
			store.FieldTimezoneOffset:   {Type: field.TypeInt8, Column: store.FieldTimezoneOffset},
			store.FieldScope:            {Type: field.TypeString, Column: store.FieldScope},
			store.FieldLocationID:       {Type: field.TypeString, Column: store.FieldLocationID},
			store.FieldLocations:        {Type: field.TypeString, Column: store.FieldLocations},
			store.FieldStoreCurrency:    {Type: field.TypeString, Column: store.FieldStoreCurrency},
			store.FieldInitialStatus:    {Type: field.TypeInt8, Column: store.FieldInitialStatus},
			store.FieldState:            {Type: field.TypeString, Column: store.FieldState},
			store.FieldTimestamp:        {Type: field.TypeInt32, Column: store.FieldTimestamp},
			store.FieldNonce:            {Type: field.TypeString, Column: store.FieldNonce},
			store.FieldBalance:          {Type: field.TypeFloat64, Column: store.FieldBalance},
			store.FieldCurrency:         {Type: field.TypeString, Column: store.FieldCurrency},
			store.FieldHandlingFee:      {Type: field.TypeFloat64, Column: store.FieldHandlingFee},
			store.FieldShippingOption:   {Type: field.TypeInt8, Column: store.FieldShippingOption},
			store.FieldDefaultWarehouse: {Type: field.TypeInt64, Column: store.FieldDefaultWarehouse},
			store.FieldPrepayTariff:     {Type: field.TypeInt8, Column: store.FieldPrepayTariff},
			store.FieldIossNumber:       {Type: field.TypeString, Column: store.FieldIossNumber},
			store.FieldIossCountryCode:  {Type: field.TypeString, Column: store.FieldIossCountryCode},
			store.FieldUkVatNumber:      {Type: field.TypeString, Column: store.FieldUkVatNumber},
			store.FieldStoreCode:        {Type: field.TypeString, Column: store.FieldStoreCode},
			store.FieldPresetChannelIds: {Type: field.TypeString, Column: store.FieldPresetChannelIds},
			store.FieldTestChannelIds:   {Type: field.TypeString, Column: store.FieldTestChannelIds},
			store.FieldFirstInboundAt:   {Type: field.TypeTime, Column: store.FieldFirstInboundAt},
			store.FieldStorageUnitPrice: {Type: field.TypeFloat64, Column: store.FieldStorageUnitPrice},
			store.FieldIntegrationAt:    {Type: field.TypeTime, Column: store.FieldIntegrationAt},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   taskschedule.Table,
			Columns: taskschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: taskschedule.FieldID,
			},
		},
		Type: "TaskSchedule",
		Fields: map[string]*sqlgraph.FieldSpec{
			taskschedule.FieldCreatedAt:    {Type: field.TypeTime, Column: taskschedule.FieldCreatedAt},
			taskschedule.FieldUpdatedAt:    {Type: field.TypeTime, Column: taskschedule.FieldUpdatedAt},
			taskschedule.FieldDeletedAt:    {Type: field.TypeTime, Column: taskschedule.FieldDeletedAt},
			taskschedule.FieldPlatform:     {Type: field.TypeString, Column: taskschedule.FieldPlatform},
			taskschedule.FieldStoreID:      {Type: field.TypeInt64, Column: taskschedule.FieldStoreID},
			taskschedule.FieldFuncName:     {Type: field.TypeString, Column: taskschedule.FieldFuncName},
			taskschedule.FieldDescription:  {Type: field.TypeString, Column: taskschedule.FieldDescription},
			taskschedule.FieldLocked:       {Type: field.TypeBool, Column: taskschedule.FieldLocked},
			taskschedule.FieldLockedTimes:  {Type: field.TypeInt64, Column: taskschedule.FieldLockedTimes},
			taskschedule.FieldRemark:       {Type: field.TypeString, Column: taskschedule.FieldRemark},
			taskschedule.FieldLastAccessAt: {Type: field.TypeTime, Column: taskschedule.FieldLastAccessAt},
			taskschedule.FieldStatus:       {Type: field.TypeInt8, Column: taskschedule.FieldStatus},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		},
		Type: "Tenant",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenant.FieldCreatedAt:        {Type: field.TypeTime, Column: tenant.FieldCreatedAt},
			tenant.FieldUpdatedAt:        {Type: field.TypeTime, Column: tenant.FieldUpdatedAt},
			tenant.FieldDeletedAt:        {Type: field.TypeTime, Column: tenant.FieldDeletedAt},
			tenant.FieldCode:             {Type: field.TypeString, Column: tenant.FieldCode},
			tenant.FieldBalance:          {Type: field.TypeFloat64, Column: tenant.FieldBalance},
			tenant.FieldCurrency:         {Type: field.TypeString, Column: tenant.FieldCurrency},
			tenant.FieldHandlingFee:      {Type: field.TypeFloat64, Column: tenant.FieldHandlingFee},
			tenant.FieldShippingOption:   {Type: field.TypeInt8, Column: tenant.FieldShippingOption},
			tenant.FieldPrepayTariff:     {Type: field.TypeInt8, Column: tenant.FieldPrepayTariff},
			tenant.FieldIossNumber:       {Type: field.TypeString, Column: tenant.FieldIossNumber},
			tenant.FieldIossCountryCode:  {Type: field.TypeString, Column: tenant.FieldIossCountryCode},
			tenant.FieldUkVatNumber:      {Type: field.TypeString, Column: tenant.FieldUkVatNumber},
			tenant.FieldDefaultWarehouse: {Type: field.TypeInt64, Column: tenant.FieldDefaultWarehouse},
			tenant.FieldPresetChannelIds: {Type: field.TypeString, Column: tenant.FieldPresetChannelIds},
			tenant.FieldTestChannelIds:   {Type: field.TypeString, Column: tenant.FieldTestChannelIds},
			tenant.FieldFirstInboundAt:   {Type: field.TypeTime, Column: tenant.FieldFirstInboundAt},
			tenant.FieldStorageUnitPrice: {Type: field.TypeFloat64, Column: tenant.FieldStorageUnitPrice},
			tenant.FieldCsUserID:         {Type: field.TypeInt64, Column: tenant.FieldCsUserID},
			tenant.FieldSalesUserID:      {Type: field.TypeInt64, Column: tenant.FieldSalesUserID},
			tenant.FieldInviterUserID:    {Type: field.TypeInt64, Column: tenant.FieldInviterUserID},
			tenant.FieldPlatform:         {Type: field.TypeString, Column: tenant.FieldPlatform},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: token.FieldID,
			},
		},
		Type: "Token",
		Fields: map[string]*sqlgraph.FieldSpec{
			token.FieldCreatedAt:        {Type: field.TypeTime, Column: token.FieldCreatedAt},
			token.FieldUpdatedAt:        {Type: field.TypeTime, Column: token.FieldUpdatedAt},
			token.FieldDeletedAt:        {Type: field.TypeTime, Column: token.FieldDeletedAt},
			token.FieldPlatform:         {Type: field.TypeString, Column: token.FieldPlatform},
			token.FieldToken:            {Type: field.TypeString, Column: token.FieldToken},
			token.FieldRefreshToken:     {Type: field.TypeString, Column: token.FieldRefreshToken},
			token.FieldPin:              {Type: field.TypeString, Column: token.FieldPin},
			token.FieldTraceID:          {Type: field.TypeString, Column: token.FieldTraceID},
			token.FieldTokenType:        {Type: field.TypeString, Column: token.FieldTokenType},
			token.FieldStatus:           {Type: field.TypeInt8, Column: token.FieldStatus},
			token.FieldExpiredAt:        {Type: field.TypeString, Column: token.FieldExpiredAt},
			token.FieldRefreshExpiredAt: {Type: field.TypeString, Column: token.FieldRefreshExpiredAt},
			token.FieldResponseAt:       {Type: field.TypeString, Column: token.FieldResponseAt},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trackmapping.Table,
			Columns: trackmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: trackmapping.FieldID,
			},
		},
		Type: "TrackMapping",
		Fields: map[string]*sqlgraph.FieldSpec{
			trackmapping.FieldCreatedAt:         {Type: field.TypeTime, Column: trackmapping.FieldCreatedAt},
			trackmapping.FieldUpdatedAt:         {Type: field.TypeTime, Column: trackmapping.FieldUpdatedAt},
			trackmapping.FieldDeletedAt:         {Type: field.TypeTime, Column: trackmapping.FieldDeletedAt},
			trackmapping.FieldOrderID:           {Type: field.TypeInt64, Column: trackmapping.FieldOrderID},
			trackmapping.FieldTrackingNumber:    {Type: field.TypeString, Column: trackmapping.FieldTrackingNumber},
			trackmapping.FieldTrackingURL:       {Type: field.TypeString, Column: trackmapping.FieldTrackingURL},
			trackmapping.FieldExtTrackingNumber: {Type: field.TypeString, Column: trackmapping.FieldExtTrackingNumber},
			trackmapping.FieldTrackDetails:      {Type: field.TypeString, Column: trackmapping.FieldTrackDetails},
			trackmapping.FieldLastUpdatedAt:     {Type: field.TypeTime, Column: trackmapping.FieldLastUpdatedAt},
			trackmapping.FieldCourierPlatform:   {Type: field.TypeString, Column: trackmapping.FieldCourierPlatform},
			trackmapping.FieldStatus:            {Type: field.TypeInt32, Column: trackmapping.FieldStatus},
			trackmapping.FieldFlag:              {Type: field.TypeInt8, Column: trackmapping.FieldFlag},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transaction.FieldID,
			},
		},
		Type: "Transaction",
		Fields: map[string]*sqlgraph.FieldSpec{
			transaction.FieldCreatedAt:         {Type: field.TypeTime, Column: transaction.FieldCreatedAt},
			transaction.FieldUpdatedAt:         {Type: field.TypeTime, Column: transaction.FieldUpdatedAt},
			transaction.FieldDeletedAt:         {Type: field.TypeTime, Column: transaction.FieldDeletedAt},
			transaction.FieldOrderID:           {Type: field.TypeInt64, Column: transaction.FieldOrderID},
			transaction.FieldTransactionType:   {Type: field.TypeString, Column: transaction.FieldTransactionType},
			transaction.FieldTransactionAmount: {Type: field.TypeFloat64, Column: transaction.FieldTransactionAmount},
			transaction.FieldBalance:           {Type: field.TypeFloat64, Column: transaction.FieldBalance},
			transaction.FieldRemark:            {Type: field.TypeString, Column: transaction.FieldRemark},
			transaction.FieldStatus:            {Type: field.TypeInt8, Column: transaction.FieldStatus},
			transaction.FieldCreatedBy:         {Type: field.TypeInt8, Column: transaction.FieldCreatedBy},
			transaction.FieldUpdatedBy:         {Type: field.TypeInt8, Column: transaction.FieldUpdatedBy},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   transactiondetail.Table,
			Columns: transactiondetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transactiondetail.FieldID,
			},
		},
		Type: "TransactionDetail",
		Fields: map[string]*sqlgraph.FieldSpec{
			transactiondetail.FieldCreatedAt:       {Type: field.TypeTime, Column: transactiondetail.FieldCreatedAt},
			transactiondetail.FieldUpdatedAt:       {Type: field.TypeTime, Column: transactiondetail.FieldUpdatedAt},
			transactiondetail.FieldDeletedAt:       {Type: field.TypeTime, Column: transactiondetail.FieldDeletedAt},
			transactiondetail.FieldOrderID:         {Type: field.TypeInt64, Column: transactiondetail.FieldOrderID},
			transactiondetail.FieldTransactionID:   {Type: field.TypeInt64, Column: transactiondetail.FieldTransactionID},
			transactiondetail.FieldTransactionType: {Type: field.TypeString, Column: transactiondetail.FieldTransactionType},
			transactiondetail.FieldDeliveryCost:    {Type: field.TypeFloat64, Column: transactiondetail.FieldDeliveryCost},
			transactiondetail.FieldMiscFee:         {Type: field.TypeFloat64, Column: transactiondetail.FieldMiscFee},
			transactiondetail.FieldFuelFee:         {Type: field.TypeFloat64, Column: transactiondetail.FieldFuelFee},
			transactiondetail.FieldRegistrationFee: {Type: field.TypeFloat64, Column: transactiondetail.FieldRegistrationFee},
			transactiondetail.FieldProcessingFee:   {Type: field.TypeFloat64, Column: transactiondetail.FieldProcessingFee},
			transactiondetail.FieldPackageFee:      {Type: field.TypeFloat64, Column: transactiondetail.FieldPackageFee},
			transactiondetail.FieldHandlingFee:     {Type: field.TypeFloat64, Column: transactiondetail.FieldHandlingFee},
			transactiondetail.FieldVat:             {Type: field.TypeFloat64, Column: transactiondetail.FieldVat},
			transactiondetail.FieldAmount:          {Type: field.TypeFloat64, Column: transactiondetail.FieldAmount},
			transactiondetail.FieldWeight:          {Type: field.TypeInt, Column: transactiondetail.FieldWeight},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:           {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:           {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldDeletedAt:           {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldName:                {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:               {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldType:                {Type: field.TypeString, Column: user.FieldType},
			user.FieldPassword:            {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldSelectedWarehouseID: {Type: field.TypeInt64, Column: user.FieldSelectedWarehouseID},
			user.FieldAvatar:              {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldCode:                {Type: field.TypeString, Column: user.FieldCode},
			user.FieldStatus:              {Type: field.TypeInt8, Column: user.FieldStatus},
			user.FieldGuideFinished:       {Type: field.TypeBool, Column: user.FieldGuideFinished},
			user.FieldGuideStatus:         {Type: field.TypeInt, Column: user.FieldGuideStatus},
			user.FieldHsObjectID:          {Type: field.TypeString, Column: user.FieldHsObjectID},
			user.FieldQuestions:           {Type: field.TypeString, Column: user.FieldQuestions},
			user.FieldLastLoggedTime:      {Type: field.TypeTime, Column: user.FieldLastLoggedTime},
			user.FieldWebsite:             {Type: field.TypeString, Column: user.FieldWebsite},
			user.FieldPlatform:            {Type: field.TypeString, Column: user.FieldPlatform},
			user.FieldConcerns:            {Type: field.TypeString, Column: user.FieldConcerns},
			user.FieldStoreCode:           {Type: field.TypeString, Column: user.FieldStoreCode},
			user.FieldPhone:               {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldSource:              {Type: field.TypeString, Column: user.FieldSource},
			user.FieldSourceTag:           {Type: field.TypeString, Column: user.FieldSourceTag},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userreferral.Table,
			Columns: userreferral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userreferral.FieldID,
			},
		},
		Type: "UserReferral",
		Fields: map[string]*sqlgraph.FieldSpec{
			userreferral.FieldCreatedAt:         {Type: field.TypeTime, Column: userreferral.FieldCreatedAt},
			userreferral.FieldUpdatedAt:         {Type: field.TypeTime, Column: userreferral.FieldUpdatedAt},
			userreferral.FieldDeletedAt:         {Type: field.TypeTime, Column: userreferral.FieldDeletedAt},
			userreferral.FieldUserID:            {Type: field.TypeInt64, Column: userreferral.FieldUserID},
			userreferral.FieldFirstShipmentDate: {Type: field.TypeTime, Column: userreferral.FieldFirstShipmentDate},
			userreferral.FieldTotalCommission:   {Type: field.TypeFloat64, Column: userreferral.FieldTotalCommission},
			userreferral.FieldInvitedByUserID:   {Type: field.TypeInt64, Column: userreferral.FieldInvitedByUserID},
			userreferral.FieldStatus:            {Type: field.TypeInt8, Column: userreferral.FieldStatus},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   valueaddedtax.Table,
			Columns: valueaddedtax.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: valueaddedtax.FieldID,
			},
		},
		Type: "ValueAddedTax",
		Fields: map[string]*sqlgraph.FieldSpec{
			valueaddedtax.FieldCreatedAt:       {Type: field.TypeTime, Column: valueaddedtax.FieldCreatedAt},
			valueaddedtax.FieldUpdatedAt:       {Type: field.TypeTime, Column: valueaddedtax.FieldUpdatedAt},
			valueaddedtax.FieldDeletedAt:       {Type: field.TypeTime, Column: valueaddedtax.FieldDeletedAt},
			valueaddedtax.FieldCountryCode:     {Type: field.TypeString, Column: valueaddedtax.FieldCountryCode},
			valueaddedtax.FieldStandardRate:    {Type: field.TypeFloat64, Column: valueaddedtax.FieldStandardRate},
			valueaddedtax.FieldWithoutIossRate: {Type: field.TypeFloat64, Column: valueaddedtax.FieldWithoutIossRate},
			valueaddedtax.FieldExemptionInUsd:  {Type: field.TypeFloat64, Column: valueaddedtax.FieldExemptionInUsd},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   warehouse.Table,
			Columns: warehouse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: warehouse.FieldID,
			},
		},
		Type: "Warehouse",
		Fields: map[string]*sqlgraph.FieldSpec{
			warehouse.FieldCreatedAt:       {Type: field.TypeTime, Column: warehouse.FieldCreatedAt},
			warehouse.FieldUpdatedAt:       {Type: field.TypeTime, Column: warehouse.FieldUpdatedAt},
			warehouse.FieldDeletedAt:       {Type: field.TypeTime, Column: warehouse.FieldDeletedAt},
			warehouse.FieldCode:            {Type: field.TypeString, Column: warehouse.FieldCode},
			warehouse.FieldQuicktronCode:   {Type: field.TypeString, Column: warehouse.FieldQuicktronCode},
			warehouse.FieldEnableQuicktron: {Type: field.TypeInt, Column: warehouse.FieldEnableQuicktron},
			warehouse.FieldName:            {Type: field.TypeString, Column: warehouse.FieldName},
			warehouse.FieldCompany:         {Type: field.TypeString, Column: warehouse.FieldCompany},
			warehouse.FieldFirstName:       {Type: field.TypeString, Column: warehouse.FieldFirstName},
			warehouse.FieldLastName:        {Type: field.TypeString, Column: warehouse.FieldLastName},
			warehouse.FieldAddress1:        {Type: field.TypeString, Column: warehouse.FieldAddress1},
			warehouse.FieldAddress2:        {Type: field.TypeString, Column: warehouse.FieldAddress2},
			warehouse.FieldCountryCode:     {Type: field.TypeString, Column: warehouse.FieldCountryCode},
			warehouse.FieldCountryName:     {Type: field.TypeString, Column: warehouse.FieldCountryName},
			warehouse.FieldProvince:        {Type: field.TypeString, Column: warehouse.FieldProvince},
			warehouse.FieldCity:            {Type: field.TypeString, Column: warehouse.FieldCity},
			warehouse.FieldZipCode:         {Type: field.TypeString, Column: warehouse.FieldZipCode},
			warehouse.FieldPhone:           {Type: field.TypeString, Column: warehouse.FieldPhone},
			warehouse.FieldStatus:          {Type: field.TypeInt, Column: warehouse.FieldStatus},
		},
	}
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
		},
		"Announcements",
		"User",
	)
	graph.MustAddE(
		"channel_costs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ChannelCostsTable,
			Columns: []string{channel.ChannelCostsColumn},
			Bidi:    false,
		},
		"Channel",
		"ChannelCost",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.OrdersTable,
			Columns: []string{channel.OrdersColumn},
			Bidi:    false,
		},
		"Channel",
		"Order",
	)
	graph.MustAddE(
		"channels",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
		},
		"ChannelCost",
		"Channel",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
		},
		"CustomerConfig",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
		},
		"Inbound",
		"Tenant",
	)
	graph.MustAddE(
		"inbound_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
		},
		"Inbound",
		"InboundItem",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbounditem.TenantTable,
			Columns: []string{inbounditem.TenantColumn},
			Bidi:    false,
		},
		"InboundItem",
		"Tenant",
	)
	graph.MustAddE(
		"inbounds",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inbounditem.InboundsTable,
			Columns: []string{inbounditem.InboundsColumn},
			Bidi:    false,
		},
		"InboundItem",
		"Inbound",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventory.TenantTable,
			Columns: []string{inventory.TenantColumn},
			Bidi:    false,
		},
		"Inventory",
		"Tenant",
	)
	graph.MustAddE(
		"products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventory.ProductsTable,
			Columns: []string{inventory.ProductsColumn},
			Bidi:    false,
		},
		"Inventory",
		"Product",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
		},
		"Order",
		"Tenant",
	)
	graph.MustAddE(
		"order_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
		},
		"Order",
		"OrderItem",
	)
	graph.MustAddE(
		"order_hold_reasons",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHoldReasonsTable,
			Columns: []string{order.OrderHoldReasonsColumn},
			Bidi:    false,
		},
		"Order",
		"OrderHoldReason",
	)
	graph.MustAddE(
		"order_taxations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTaxationsTable,
			Columns: []string{order.OrderTaxationsColumn},
			Bidi:    false,
		},
		"Order",
		"OrderTaxation",
	)
	graph.MustAddE(
		"stores",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.StoresTable,
			Columns: []string{order.StoresColumn},
			Bidi:    false,
		},
		"Order",
		"Store",
	)
	graph.MustAddE(
		"warehouses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.WarehousesTable,
			Columns: []string{order.WarehousesColumn},
			Bidi:    false,
		},
		"Order",
		"Warehouse",
	)
	graph.MustAddE(
		"channels",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ChannelsTable,
			Columns: []string{order.ChannelsColumn},
			Bidi:    false,
		},
		"Order",
		"Channel",
	)
	graph.MustAddE(
		"track_mappings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TrackMappingsTable,
			Columns: []string{order.TrackMappingsColumn},
			Bidi:    false,
		},
		"Order",
		"TrackMapping",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderholdreason.OrdersTable,
			Columns: []string{orderholdreason.OrdersColumn},
			Bidi:    false,
		},
		"OrderHoldReason",
		"Order",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.TenantTable,
			Columns: []string{orderitem.TenantColumn},
			Bidi:    false,
		},
		"OrderItem",
		"Tenant",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
		},
		"OrderItem",
		"Order",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
		},
		"OrderTaxation",
		"Order",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   platformproduct.TenantTable,
			Columns: []string{platformproduct.TenantColumn},
			Bidi:    false,
		},
		"PlatformProduct",
		"Tenant",
	)
	graph.MustAddE(
		"product_mappings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platformproduct.ProductMappingsTable,
			Columns: []string{platformproduct.ProductMappingsColumn},
			Bidi:    false,
		},
		"PlatformProduct",
		"ProductMapping",
	)
	graph.MustAddE(
		"stores",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   platformproduct.StoresTable,
			Columns: []string{platformproduct.StoresColumn},
			Bidi:    false,
		},
		"PlatformProduct",
		"Store",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
		},
		"Product",
		"Tenant",
	)
	graph.MustAddE(
		"inventories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.InventoriesTable,
			Columns: []string{product.InventoriesColumn},
			Bidi:    false,
		},
		"Product",
		"Inventory",
	)
	graph.MustAddE(
		"product_mappings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductMappingsTable,
			Columns: []string{product.ProductMappingsColumn},
			Bidi:    false,
		},
		"Product",
		"ProductMapping",
	)
	graph.MustAddE(
		"platform_products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmapping.PlatformProductsTable,
			Columns: []string{productmapping.PlatformProductsColumn},
			Bidi:    false,
		},
		"ProductMapping",
		"PlatformProduct",
	)
	graph.MustAddE(
		"products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmapping.ProductsTable,
			Columns: []string{productmapping.ProductsColumn},
			Bidi:    false,
		},
		"ProductMapping",
		"Product",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sequence.TenantTable,
			Columns: []string{sequence.TenantColumn},
			Bidi:    false,
		},
		"Sequence",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.TenantTable,
			Columns: []string{store.TenantColumn},
			Bidi:    false,
		},
		"Store",
		"Tenant",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.OrdersTable,
			Columns: []string{store.OrdersColumn},
			Bidi:    false,
		},
		"Store",
		"Order",
	)
	graph.MustAddE(
		"platform_products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.PlatformProductsTable,
			Columns: []string{store.PlatformProductsColumn},
			Bidi:    false,
		},
		"Store",
		"PlatformProduct",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trackmapping.OrdersTable,
			Columns: []string{trackmapping.OrdersColumn},
			Bidi:    false,
		},
		"TrackMapping",
		"Order",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
		},
		"Transaction",
		"Tenant",
	)
	graph.MustAddE(
		"details",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
		},
		"Transaction",
		"TransactionDetail",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
		},
		"User",
		"Tenant",
	)
	graph.MustAddE(
		"announcements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnnouncementsTable,
			Columns: []string{user.AnnouncementsColumn},
			Bidi:    false,
		},
		"User",
		"Announcements",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userreferral.TenantTable,
			Columns: []string{userreferral.TenantColumn},
			Bidi:    false,
		},
		"UserReferral",
		"Tenant",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
		},
		"Warehouse",
		"Order",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AnnouncementsQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AnnouncementsQuery builder.
func (aq *AnnouncementsQuery) Filter() *AnnouncementsFilter {
	return &AnnouncementsFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AnnouncementsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AnnouncementsMutation builder.
func (m *AnnouncementsMutation) Filter() *AnnouncementsFilter {
	return &AnnouncementsFilter{config: m.config, predicateAdder: m}
}

// AnnouncementsFilter provides a generic filtering capability at runtime for AnnouncementsQuery.
type AnnouncementsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AnnouncementsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *AnnouncementsFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(announcements.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AnnouncementsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(announcements.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AnnouncementsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(announcements.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AnnouncementsFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(announcements.FieldDeletedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AnnouncementsFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(announcements.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *AnnouncementsFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(announcements.FieldContent))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *AnnouncementsFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(announcements.FieldStatus))
}

// WhereIndex applies the entql int predicate on the index field.
func (f *AnnouncementsFilter) WhereIndex(p entql.IntP) {
	f.Where(p.Field(announcements.FieldIndex))
}

// WhereCreateBy applies the entql int64 predicate on the create_by field.
func (f *AnnouncementsFilter) WhereCreateBy(p entql.Int64P) {
	f.Where(p.Field(announcements.FieldCreateBy))
}

// WhereExpiration applies the entql time.Time predicate on the expiration field.
func (f *AnnouncementsFilter) WhereExpiration(p entql.TimeP) {
	f.Where(p.Field(announcements.FieldExpiration))
}

// WhereEffectiveTime applies the entql time.Time predicate on the effective_time field.
func (f *AnnouncementsFilter) WhereEffectiveTime(p entql.TimeP) {
	f.Where(p.Field(announcements.FieldEffectiveTime))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *AnnouncementsFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *AnnouncementsFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AttributeQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AttributeQuery builder.
func (aq *AttributeQuery) Filter() *AttributeFilter {
	return &AttributeFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AttributeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AttributeMutation builder.
func (m *AttributeMutation) Filter() *AttributeFilter {
	return &AttributeFilter{config: m.config, predicateAdder: m}
}

// AttributeFilter provides a generic filtering capability at runtime for AttributeQuery.
type AttributeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AttributeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *AttributeFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(attribute.FieldID))
}

// WhereType applies the entql int8 predicate on the type field.
func (f *AttributeFilter) WhereType(p entql.Int8P) {
	f.Where(p.Field(attribute.FieldType))
}

// WhereValue applies the entql string predicate on the value field.
func (f *AttributeFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(attribute.FieldValue))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AttributeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(attribute.FieldDescription))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *AttributeFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(attribute.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AttributeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(attribute.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AttributeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(attribute.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AttributeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(attribute.FieldDeletedAt))
}

// addPredicate implements the predicateAdder interface.
func (cq *ChannelQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelQuery builder.
func (cq *ChannelQuery) Filter() *ChannelFilter {
	return &ChannelFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelMutation builder.
func (m *ChannelMutation) Filter() *ChannelFilter {
	return &ChannelFilter{config: m.config, predicateAdder: m}
}

// ChannelFilter provides a generic filtering capability at runtime for ChannelQuery.
type ChannelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ChannelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(channel.FieldDeletedAt))
}

// WhereWarehouseID applies the entql int64 predicate on the warehouse_id field.
func (f *ChannelFilter) WhereWarehouseID(p entql.Int64P) {
	f.Where(p.Field(channel.FieldWarehouseID))
}

// WhereCourierPlatform applies the entql string predicate on the courier_platform field.
func (f *ChannelFilter) WhereCourierPlatform(p entql.StringP) {
	f.Where(p.Field(channel.FieldCourierPlatform))
}

// WhereName applies the entql string predicate on the name field.
func (f *ChannelFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(channel.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ChannelFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(channel.FieldCode))
}

// WhereType applies the entql int8 predicate on the type field.
func (f *ChannelFilter) WhereType(p entql.Int8P) {
	f.Where(p.Field(channel.FieldType))
}

// WhereQuotationCurrency applies the entql string predicate on the quotation_currency field.
func (f *ChannelFilter) WhereQuotationCurrency(p entql.StringP) {
	f.Where(p.Field(channel.FieldQuotationCurrency))
}

// WhereVolumeFactor applies the entql int32 predicate on the volume_factor field.
func (f *ChannelFilter) WhereVolumeFactor(p entql.Int32P) {
	f.Where(p.Field(channel.FieldVolumeFactor))
}

// WhereEnName applies the entql string predicate on the en_name field.
func (f *ChannelFilter) WhereEnName(p entql.StringP) {
	f.Where(p.Field(channel.FieldEnName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *ChannelFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(channel.FieldDisplayName))
}

// WhereHasTrackingNumber applies the entql int8 predicate on the has_tracking_number field.
func (f *ChannelFilter) WhereHasTrackingNumber(p entql.Int8P) {
	f.Where(p.Field(channel.FieldHasTrackingNumber))
}

// WhereMinNormalDays applies the entql int32 predicate on the min_normal_days field.
func (f *ChannelFilter) WhereMinNormalDays(p entql.Int32P) {
	f.Where(p.Field(channel.FieldMinNormalDays))
}

// WhereMaxNormalDays applies the entql int32 predicate on the max_normal_days field.
func (f *ChannelFilter) WhereMaxNormalDays(p entql.Int32P) {
	f.Where(p.Field(channel.FieldMaxNormalDays))
}

// WhereMaxWeight applies the entql int predicate on the max_weight field.
func (f *ChannelFilter) WhereMaxWeight(p entql.IntP) {
	f.Where(p.Field(channel.FieldMaxWeight))
}

// WhereMaxLength applies the entql int predicate on the max_length field.
func (f *ChannelFilter) WhereMaxLength(p entql.IntP) {
	f.Where(p.Field(channel.FieldMaxLength))
}

// WhereMinLength applies the entql int predicate on the min_length field.
func (f *ChannelFilter) WhereMinLength(p entql.IntP) {
	f.Where(p.Field(channel.FieldMinLength))
}

// WhereMaxThreeSideSum applies the entql int predicate on the max_three_side_sum field.
func (f *ChannelFilter) WhereMaxThreeSideSum(p entql.IntP) {
	f.Where(p.Field(channel.FieldMaxThreeSideSum))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ChannelFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(channel.FieldDescription))
}

// WhereSortingPort applies the entql int32 predicate on the sorting_port field.
func (f *ChannelFilter) WhereSortingPort(p entql.Int32P) {
	f.Where(p.Field(channel.FieldSortingPort))
}

// WherePrepayTariff applies the entql bool predicate on the prepay_tariff field.
func (f *ChannelFilter) WherePrepayTariff(p entql.BoolP) {
	f.Where(p.Field(channel.FieldPrepayTariff))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *ChannelFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(channel.FieldStatus))
}

// WhereTest applies the entql bool predicate on the test field.
func (f *ChannelFilter) WhereTest(p entql.BoolP) {
	f.Where(p.Field(channel.FieldTest))
}

// WhereOptions applies the entql string predicate on the options field.
func (f *ChannelFilter) WhereOptions(p entql.StringP) {
	f.Where(p.Field(channel.FieldOptions))
}

// WhereExcludeAttributes applies the entql string predicate on the exclude_attributes field.
func (f *ChannelFilter) WhereExcludeAttributes(p entql.StringP) {
	f.Where(p.Field(channel.FieldExcludeAttributes))
}

// WhereBattery applies the entql int8 predicate on the battery field.
func (f *ChannelFilter) WhereBattery(p entql.Int8P) {
	f.Where(p.Field(channel.FieldBattery))
}

// WhereVirtual applies the entql int8 predicate on the virtual field.
func (f *ChannelFilter) WhereVirtual(p entql.Int8P) {
	f.Where(p.Field(channel.FieldVirtual))
}

// WhereChannelType applies the entql int8 predicate on the channel_type field.
func (f *ChannelFilter) WhereChannelType(p entql.Int8P) {
	f.Where(p.Field(channel.FieldChannelType))
}

// WhereDeliverDuty applies the entql string predicate on the deliver_duty field.
func (f *ChannelFilter) WhereDeliverDuty(p entql.StringP) {
	f.Where(p.Field(channel.FieldDeliverDuty))
}

// WhereSpecial applies the entql int8 predicate on the special field.
func (f *ChannelFilter) WhereSpecial(p entql.Int8P) {
	f.Where(p.Field(channel.FieldSpecial))
}

// WhereHasChannelCosts applies a predicate to check if query has an edge channel_costs.
func (f *ChannelFilter) WhereHasChannelCosts() {
	f.Where(entql.HasEdge("channel_costs"))
}

// WhereHasChannelCostsWith applies a predicate to check if query has an edge channel_costs with a given conditions (other predicates).
func (f *ChannelFilter) WhereHasChannelCostsWith(preds ...predicate.ChannelCost) {
	f.Where(entql.HasEdgeWith("channel_costs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *ChannelFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *ChannelFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ccq *ChannelCostQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelCostQuery builder.
func (ccq *ChannelCostQuery) Filter() *ChannelCostFilter {
	return &ChannelCostFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelCostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelCostMutation builder.
func (m *ChannelCostMutation) Filter() *ChannelCostFilter {
	return &ChannelCostFilter{config: m.config, predicateAdder: m}
}

// ChannelCostFilter provides a generic filtering capability at runtime for ChannelCostQuery.
type ChannelCostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelCostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelCostFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channelcost.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelCostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channelcost.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelCostFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channelcost.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ChannelCostFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(channelcost.FieldDeletedAt))
}

// WhereChannelCostBatchID applies the entql int64 predicate on the channel_cost_batch_id field.
func (f *ChannelCostFilter) WhereChannelCostBatchID(p entql.Int64P) {
	f.Where(p.Field(channelcost.FieldChannelCostBatchID))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *ChannelCostFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(channelcost.FieldChannelID))
}

// WhereMode applies the entql int8 predicate on the mode field.
func (f *ChannelCostFilter) WhereMode(p entql.Int8P) {
	f.Where(p.Field(channelcost.FieldMode))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *ChannelCostFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(channelcost.FieldCountryCode))
}

// WhereZone applies the entql string predicate on the zone field.
func (f *ChannelCostFilter) WhereZone(p entql.StringP) {
	f.Where(p.Field(channelcost.FieldZone))
}

// WhereStartWeight applies the entql int predicate on the start_weight field.
func (f *ChannelCostFilter) WhereStartWeight(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldStartWeight))
}

// WhereEndWeight applies the entql int predicate on the end_weight field.
func (f *ChannelCostFilter) WhereEndWeight(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldEndWeight))
}

// WhereFirstWeight applies the entql int predicate on the first_weight field.
func (f *ChannelCostFilter) WhereFirstWeight(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldFirstWeight))
}

// WhereFirstWeightFee applies the entql float64 predicate on the first_weight_fee field.
func (f *ChannelCostFilter) WhereFirstWeightFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldFirstWeightFee))
}

// WhereUnitWeight applies the entql int predicate on the unit_weight field.
func (f *ChannelCostFilter) WhereUnitWeight(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldUnitWeight))
}

// WhereUnitWeightFee applies the entql float64 predicate on the unit_weight_fee field.
func (f *ChannelCostFilter) WhereUnitWeightFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldUnitWeightFee))
}

// WhereFuelFee applies the entql float64 predicate on the fuel_fee field.
func (f *ChannelCostFilter) WhereFuelFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldFuelFee))
}

// WhereProcessingFee applies the entql float64 predicate on the processing_fee field.
func (f *ChannelCostFilter) WhereProcessingFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldProcessingFee))
}

// WhereRegistrationFee applies the entql float64 predicate on the registration_fee field.
func (f *ChannelCostFilter) WhereRegistrationFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldRegistrationFee))
}

// WhereMiscFee applies the entql float64 predicate on the misc_fee field.
func (f *ChannelCostFilter) WhereMiscFee(p entql.Float64P) {
	f.Where(p.Field(channelcost.FieldMiscFee))
}

// WhereMinNormalDays applies the entql int predicate on the min_normal_days field.
func (f *ChannelCostFilter) WhereMinNormalDays(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldMinNormalDays))
}

// WhereMaxNormalDays applies the entql int predicate on the max_normal_days field.
func (f *ChannelCostFilter) WhereMaxNormalDays(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldMaxNormalDays))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *ChannelCostFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(channelcost.FieldStatus))
}

// WhereAverageDays applies the entql int predicate on the average_days field.
func (f *ChannelCostFilter) WhereAverageDays(p entql.IntP) {
	f.Where(p.Field(channelcost.FieldAverageDays))
}

// WhereHasChannels applies a predicate to check if query has an edge channels.
func (f *ChannelCostFilter) WhereHasChannels() {
	f.Where(entql.HasEdge("channels"))
}

// WhereHasChannelsWith applies a predicate to check if query has an edge channels with a given conditions (other predicates).
func (f *ChannelCostFilter) WhereHasChannelsWith(preds ...predicate.Channel) {
	f.Where(entql.HasEdgeWith("channels", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ccbq *ChannelCostBatcheQuery) addPredicate(pred func(s *sql.Selector)) {
	ccbq.predicates = append(ccbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelCostBatcheQuery builder.
func (ccbq *ChannelCostBatcheQuery) Filter() *ChannelCostBatcheFilter {
	return &ChannelCostBatcheFilter{config: ccbq.config, predicateAdder: ccbq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelCostBatcheMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelCostBatcheMutation builder.
func (m *ChannelCostBatcheMutation) Filter() *ChannelCostBatcheFilter {
	return &ChannelCostBatcheFilter{config: m.config, predicateAdder: m}
}

// ChannelCostBatcheFilter provides a generic filtering capability at runtime for ChannelCostBatcheQuery.
type ChannelCostBatcheFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelCostBatcheFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelCostBatcheFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channelcostbatche.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelCostBatcheFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channelcostbatche.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelCostBatcheFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channelcostbatche.FieldUpdatedAt))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *ChannelCostBatcheFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(channelcostbatche.FieldChannelID))
}

// WhereEffectiveDate applies the entql time.Time predicate on the effective_date field.
func (f *ChannelCostBatcheFilter) WhereEffectiveDate(p entql.TimeP) {
	f.Where(p.Field(channelcostbatche.FieldEffectiveDate))
}

// WhereExpiryDate applies the entql time.Time predicate on the expiry_date field.
func (f *ChannelCostBatcheFilter) WhereExpiryDate(p entql.TimeP) {
	f.Where(p.Field(channelcostbatche.FieldExpiryDate))
}

// WhereStatus applies the entql bool predicate on the status field.
func (f *ChannelCostBatcheFilter) WhereStatus(p entql.BoolP) {
	f.Where(p.Field(channelcostbatche.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (coq *ChannelOptionQuery) addPredicate(pred func(s *sql.Selector)) {
	coq.predicates = append(coq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelOptionQuery builder.
func (coq *ChannelOptionQuery) Filter() *ChannelOptionFilter {
	return &ChannelOptionFilter{config: coq.config, predicateAdder: coq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelOptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelOptionMutation builder.
func (m *ChannelOptionMutation) Filter() *ChannelOptionFilter {
	return &ChannelOptionFilter{config: m.config, predicateAdder: m}
}

// ChannelOptionFilter provides a generic filtering capability at runtime for ChannelOptionQuery.
type ChannelOptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelOptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelOptionFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channeloption.FieldID))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *ChannelOptionFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(channeloption.FieldOrderID))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *ChannelOptionFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(channeloption.FieldChannelID))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *ChannelOptionFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(channeloption.FieldCountryCode))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelOptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channeloption.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelOptionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channeloption.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ChannelOptionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(channeloption.FieldDeletedAt))
}

// addPredicate implements the predicateAdder interface.
func (crq *ChannelRecommendQuery) addPredicate(pred func(s *sql.Selector)) {
	crq.predicates = append(crq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelRecommendQuery builder.
func (crq *ChannelRecommendQuery) Filter() *ChannelRecommendFilter {
	return &ChannelRecommendFilter{config: crq.config, predicateAdder: crq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelRecommendMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelRecommendMutation builder.
func (m *ChannelRecommendMutation) Filter() *ChannelRecommendFilter {
	return &ChannelRecommendFilter{config: m.config, predicateAdder: m}
}

// ChannelRecommendFilter provides a generic filtering capability at runtime for ChannelRecommendQuery.
type ChannelRecommendFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelRecommendFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelRecommendFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channelrecommend.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelRecommendFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channelrecommend.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelRecommendFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channelrecommend.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ChannelRecommendFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(channelrecommend.FieldDeletedAt))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *ChannelRecommendFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(channelrecommend.FieldCountryCode))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *ChannelRecommendFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(channelrecommend.FieldChannelID))
}

// WhereIsRecommended applies the entql int8 predicate on the is_recommended field.
func (f *ChannelRecommendFilter) WhereIsRecommended(p entql.Int8P) {
	f.Where(p.Field(channelrecommend.FieldIsRecommended))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *ChannelRecommendFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(channelrecommend.FieldStatus))
}

// WhereValue applies the entql string predicate on the value field.
func (f *ChannelRecommendFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(channelrecommend.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (cvfq *ChannelVolumeFactorQuery) addPredicate(pred func(s *sql.Selector)) {
	cvfq.predicates = append(cvfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelVolumeFactorQuery builder.
func (cvfq *ChannelVolumeFactorQuery) Filter() *ChannelVolumeFactorFilter {
	return &ChannelVolumeFactorFilter{config: cvfq.config, predicateAdder: cvfq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelVolumeFactorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelVolumeFactorMutation builder.
func (m *ChannelVolumeFactorMutation) Filter() *ChannelVolumeFactorFilter {
	return &ChannelVolumeFactorFilter{config: m.config, predicateAdder: m}
}

// ChannelVolumeFactorFilter provides a generic filtering capability at runtime for ChannelVolumeFactorQuery.
type ChannelVolumeFactorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelVolumeFactorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ChannelVolumeFactorFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(channelvolumefactor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelVolumeFactorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channelvolumefactor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelVolumeFactorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channelvolumefactor.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ChannelVolumeFactorFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(channelvolumefactor.FieldDeletedAt))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *ChannelVolumeFactorFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(channelvolumefactor.FieldCountryCode))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *ChannelVolumeFactorFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(channelvolumefactor.FieldChannelID))
}

// WhereVolumeFactor applies the entql int predicate on the volume_factor field.
func (f *ChannelVolumeFactorFilter) WhereVolumeFactor(p entql.IntP) {
	f.Where(p.Field(channelvolumefactor.FieldVolumeFactor))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *ChannelVolumeFactorFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(channelvolumefactor.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (cq *CountryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryQuery builder.
func (cq *CountryQuery) Filter() *CountryFilter {
	return &CountryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryMutation builder.
func (m *CountryMutation) Filter() *CountryFilter {
	return &CountryFilter{config: m.config, predicateAdder: m}
}

// CountryFilter provides a generic filtering capability at runtime for CountryQuery.
type CountryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CountryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(country.FieldID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CountryFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(country.FieldCode))
}

// WhereCnName applies the entql string predicate on the cn_name field.
func (f *CountryFilter) WhereCnName(p entql.StringP) {
	f.Where(p.Field(country.FieldCnName))
}

// WhereEnName applies the entql string predicate on the en_name field.
func (f *CountryFilter) WhereEnName(p entql.StringP) {
	f.Where(p.Field(country.FieldEnName))
}

// addPredicate implements the predicateAdder interface.
func (czq *CountryZoneQuery) addPredicate(pred func(s *sql.Selector)) {
	czq.predicates = append(czq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryZoneQuery builder.
func (czq *CountryZoneQuery) Filter() *CountryZoneFilter {
	return &CountryZoneFilter{config: czq.config, predicateAdder: czq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryZoneMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryZoneMutation builder.
func (m *CountryZoneMutation) Filter() *CountryZoneFilter {
	return &CountryZoneFilter{config: m.config, predicateAdder: m}
}

// CountryZoneFilter provides a generic filtering capability at runtime for CountryZoneQuery.
type CountryZoneFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryZoneFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CountryZoneFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(countryzone.FieldID))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *CountryZoneFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(countryzone.FieldChannelID))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *CountryZoneFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(countryzone.FieldCountryCode))
}

// WhereZipCode applies the entql string predicate on the zip_code field.
func (f *CountryZoneFilter) WhereZipCode(p entql.StringP) {
	f.Where(p.Field(countryzone.FieldZipCode))
}

// WhereStartZipCode applies the entql string predicate on the start_zip_code field.
func (f *CountryZoneFilter) WhereStartZipCode(p entql.StringP) {
	f.Where(p.Field(countryzone.FieldStartZipCode))
}

// WhereEndZipCode applies the entql string predicate on the end_zip_code field.
func (f *CountryZoneFilter) WhereEndZipCode(p entql.StringP) {
	f.Where(p.Field(countryzone.FieldEndZipCode))
}

// WhereZone applies the entql string predicate on the zone field.
func (f *CountryZoneFilter) WhereZone(p entql.StringP) {
	f.Where(p.Field(countryzone.FieldZone))
}

// addPredicate implements the predicateAdder interface.
func (coq *CourierOrderQuery) addPredicate(pred func(s *sql.Selector)) {
	coq.predicates = append(coq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CourierOrderQuery builder.
func (coq *CourierOrderQuery) Filter() *CourierOrderFilter {
	return &CourierOrderFilter{config: coq.config, predicateAdder: coq}
}

// addPredicate implements the predicateAdder interface.
func (m *CourierOrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CourierOrderMutation builder.
func (m *CourierOrderMutation) Filter() *CourierOrderFilter {
	return &CourierOrderFilter{config: m.config, predicateAdder: m}
}

// CourierOrderFilter provides a generic filtering capability at runtime for CourierOrderQuery.
type CourierOrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CourierOrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CourierOrderFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(courierorder.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CourierOrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(courierorder.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CourierOrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(courierorder.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CourierOrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(courierorder.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *CourierOrderFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(courierorder.FieldOrderID))
}

// WhereOrderNumber applies the entql string predicate on the order_number field.
func (f *CourierOrderFilter) WhereOrderNumber(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldOrderNumber))
}

// WhereCourierPlatform applies the entql string predicate on the courier_platform field.
func (f *CourierOrderFilter) WhereCourierPlatform(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldCourierPlatform))
}

// WhereShippingMethodCode applies the entql string predicate on the shipping_method_code field.
func (f *CourierOrderFilter) WhereShippingMethodCode(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldShippingMethodCode))
}

// WhereShippingMethodName applies the entql string predicate on the shipping_method_name field.
func (f *CourierOrderFilter) WhereShippingMethodName(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldShippingMethodName))
}

// WhereTrackingURL applies the entql string predicate on the tracking_url field.
func (f *CourierOrderFilter) WhereTrackingURL(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldTrackingURL))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *CourierOrderFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldTrackingNumber))
}

// WhereWaybillNumber applies the entql string predicate on the waybill_number field.
func (f *CourierOrderFilter) WhereWaybillNumber(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldWaybillNumber))
}

// WhereCourierOrderNumber applies the entql string predicate on the courier_order_number field.
func (f *CourierOrderFilter) WhereCourierOrderNumber(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldCourierOrderNumber))
}

// WhereShippingLabelURL applies the entql string predicate on the shipping_label_url field.
func (f *CourierOrderFilter) WhereShippingLabelURL(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldShippingLabelURL))
}

// WhereTotalItemsPrice applies the entql float64 predicate on the total_items_price field.
func (f *CourierOrderFilter) WhereTotalItemsPrice(p entql.Float64P) {
	f.Where(p.Field(courierorder.FieldTotalItemsPrice))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *CourierOrderFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldCurrency))
}

// WherePackageCount applies the entql int predicate on the package_count field.
func (f *CourierOrderFilter) WherePackageCount(p entql.IntP) {
	f.Where(p.Field(courierorder.FieldPackageCount))
}

// WhereWeight applies the entql int predicate on the weight field.
func (f *CourierOrderFilter) WhereWeight(p entql.IntP) {
	f.Where(p.Field(courierorder.FieldWeight))
}

// WhereReceiverAddress applies the entql string predicate on the receiver_address field.
func (f *CourierOrderFilter) WhereReceiverAddress(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldReceiverAddress))
}

// WhereSenderAddress applies the entql string predicate on the sender_address field.
func (f *CourierOrderFilter) WhereSenderAddress(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldSenderAddress))
}

// WhereItems applies the entql string predicate on the items field.
func (f *CourierOrderFilter) WhereItems(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldItems))
}

// WhereRequestData applies the entql string predicate on the request_data field.
func (f *CourierOrderFilter) WhereRequestData(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldRequestData))
}

// WhereResponseData applies the entql string predicate on the response_data field.
func (f *CourierOrderFilter) WhereResponseData(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldResponseData))
}

// WhereResultCode applies the entql string predicate on the result_code field.
func (f *CourierOrderFilter) WhereResultCode(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldResultCode))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CourierOrderFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldMessage))
}

// WhereEnMessage applies the entql string predicate on the en_message field.
func (f *CourierOrderFilter) WhereEnMessage(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldEnMessage))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CourierOrderFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(courierorder.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (ccq *CustomerConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	ccq.predicates = append(ccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerConfigQuery builder.
func (ccq *CustomerConfigQuery) Filter() *CustomerConfigFilter {
	return &CustomerConfigFilter{config: ccq.config, predicateAdder: ccq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerConfigMutation builder.
func (m *CustomerConfigMutation) Filter() *CustomerConfigFilter {
	return &CustomerConfigFilter{config: m.config, predicateAdder: m}
}

// CustomerConfigFilter provides a generic filtering capability at runtime for CustomerConfigQuery.
type CustomerConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CustomerConfigFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(customerconfig.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerConfigFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customerconfig.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomerConfigFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customerconfig.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CustomerConfigFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(customerconfig.FieldDeletedAt))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *CustomerConfigFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(customerconfig.FieldChannelID))
}

// WhereExcludeCountryCode applies the entql string predicate on the exclude_country_code field.
func (f *CustomerConfigFilter) WhereExcludeCountryCode(p entql.StringP) {
	f.Where(p.Field(customerconfig.FieldExcludeCountryCode))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *CustomerConfigFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(customerconfig.FieldStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CustomerConfigFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CustomerConfigFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *InboundQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InboundQuery builder.
func (iq *InboundQuery) Filter() *InboundFilter {
	return &InboundFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InboundMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InboundMutation builder.
func (m *InboundMutation) Filter() *InboundFilter {
	return &InboundFilter{config: m.config, predicateAdder: m}
}

// InboundFilter provides a generic filtering capability at runtime for InboundQuery.
type InboundFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InboundFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *InboundFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(inbound.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InboundFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(inbound.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InboundFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(inbound.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InboundFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(inbound.FieldDeletedAt))
}

// WhereCustomerOrderID applies the entql string predicate on the customer_order_id field.
func (f *InboundFilter) WhereCustomerOrderID(p entql.StringP) {
	f.Where(p.Field(inbound.FieldCustomerOrderID))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *InboundFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(inbound.FieldCustomerCode))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *InboundFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(inbound.FieldTrackingNumber))
}

// WhereWarehouseID applies the entql int64 predicate on the warehouse_id field.
func (f *InboundFilter) WhereWarehouseID(p entql.Int64P) {
	f.Where(p.Field(inbound.FieldWarehouseID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *InboundFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(inbound.FieldDescription))
}

// WhereEstimatedArrivalAt applies the entql time.Time predicate on the estimated_arrival_at field.
func (f *InboundFilter) WhereEstimatedArrivalAt(p entql.TimeP) {
	f.Where(p.Field(inbound.FieldEstimatedArrivalAt))
}

// WhereShippedAt applies the entql time.Time predicate on the shipped_at field.
func (f *InboundFilter) WhereShippedAt(p entql.TimeP) {
	f.Where(p.Field(inbound.FieldShippedAt))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *InboundFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(inbound.FieldStatus))
}

// WhereType applies the entql int8 predicate on the type field.
func (f *InboundFilter) WhereType(p entql.Int8P) {
	f.Where(p.Field(inbound.FieldType))
}

// WhereIsPickup applies the entql int8 predicate on the is_pickup field.
func (f *InboundFilter) WhereIsPickup(p entql.Int8P) {
	f.Where(p.Field(inbound.FieldIsPickup))
}

// WhereShippingMarkURL applies the entql string predicate on the shipping_mark_url field.
func (f *InboundFilter) WhereShippingMarkURL(p entql.StringP) {
	f.Where(p.Field(inbound.FieldShippingMarkURL))
}

// WherePickupOrderID applies the entql int64 predicate on the pickup_order_id field.
func (f *InboundFilter) WherePickupOrderID(p entql.Int64P) {
	f.Where(p.Field(inbound.FieldPickupOrderID))
}

// WhereCarrierName applies the entql string predicate on the carrier_name field.
func (f *InboundFilter) WhereCarrierName(p entql.StringP) {
	f.Where(p.Field(inbound.FieldCarrierName))
}

// WhereOrderNumber applies the entql string predicate on the order_number field.
func (f *InboundFilter) WhereOrderNumber(p entql.StringP) {
	f.Where(p.Field(inbound.FieldOrderNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *InboundFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *InboundFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInboundItems applies a predicate to check if query has an edge inbound_items.
func (f *InboundFilter) WhereHasInboundItems() {
	f.Where(entql.HasEdge("inbound_items"))
}

// WhereHasInboundItemsWith applies a predicate to check if query has an edge inbound_items with a given conditions (other predicates).
func (f *InboundFilter) WhereHasInboundItemsWith(preds ...predicate.InboundItem) {
	f.Where(entql.HasEdgeWith("inbound_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iiq *InboundItemQuery) addPredicate(pred func(s *sql.Selector)) {
	iiq.predicates = append(iiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InboundItemQuery builder.
func (iiq *InboundItemQuery) Filter() *InboundItemFilter {
	return &InboundItemFilter{config: iiq.config, predicateAdder: iiq}
}

// addPredicate implements the predicateAdder interface.
func (m *InboundItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InboundItemMutation builder.
func (m *InboundItemMutation) Filter() *InboundItemFilter {
	return &InboundItemFilter{config: m.config, predicateAdder: m}
}

// InboundItemFilter provides a generic filtering capability at runtime for InboundItemQuery.
type InboundItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InboundItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *InboundItemFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(inbounditem.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InboundItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(inbounditem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InboundItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(inbounditem.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InboundItemFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(inbounditem.FieldDeletedAt))
}

// WhereInboundID applies the entql int64 predicate on the inbound_id field.
func (f *InboundItemFilter) WhereInboundID(p entql.Int64P) {
	f.Where(p.Field(inbounditem.FieldInboundID))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *InboundItemFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(inbounditem.FieldProductID))
}

// WhereProductName applies the entql string predicate on the product_name field.
func (f *InboundItemFilter) WhereProductName(p entql.StringP) {
	f.Where(p.Field(inbounditem.FieldProductName))
}

// WhereSku applies the entql string predicate on the sku field.
func (f *InboundItemFilter) WhereSku(p entql.StringP) {
	f.Where(p.Field(inbounditem.FieldSku))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *InboundItemFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(inbounditem.FieldBarcode))
}

// WhereQty applies the entql int predicate on the qty field.
func (f *InboundItemFilter) WhereQty(p entql.IntP) {
	f.Where(p.Field(inbounditem.FieldQty))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *InboundItemFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(inbounditem.FieldStatus))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *InboundItemFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(inbounditem.FieldCustomerCode))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *InboundItemFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *InboundItemFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInbounds applies a predicate to check if query has an edge inbounds.
func (f *InboundItemFilter) WhereHasInbounds() {
	f.Where(entql.HasEdge("inbounds"))
}

// WhereHasInboundsWith applies a predicate to check if query has an edge inbounds with a given conditions (other predicates).
func (f *InboundItemFilter) WhereHasInboundsWith(preds ...predicate.Inbound) {
	f.Where(entql.HasEdgeWith("inbounds", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *InventoryQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InventoryQuery builder.
func (iq *InventoryQuery) Filter() *InventoryFilter {
	return &InventoryFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InventoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InventoryMutation builder.
func (m *InventoryMutation) Filter() *InventoryFilter {
	return &InventoryFilter{config: m.config, predicateAdder: m}
}

// InventoryFilter provides a generic filtering capability at runtime for InventoryQuery.
type InventoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InventoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *InventoryFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(inventory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InventoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InventoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InventoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldDeletedAt))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *InventoryFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(inventory.FieldProductID))
}

// WhereWarehouseID applies the entql int64 predicate on the warehouse_id field.
func (f *InventoryFilter) WhereWarehouseID(p entql.Int64P) {
	f.Where(p.Field(inventory.FieldWarehouseID))
}

// WhereStorageQty applies the entql int32 predicate on the storage_qty field.
func (f *InventoryFilter) WhereStorageQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldStorageQty))
}

// WhereAvailableQty applies the entql int32 predicate on the available_qty field.
func (f *InventoryFilter) WhereAvailableQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldAvailableQty))
}

// WherePrepareShipQty applies the entql int32 predicate on the prepare_ship_qty field.
func (f *InventoryFilter) WherePrepareShipQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldPrepareShipQty))
}

// WherePrepareShelveQty applies the entql int32 predicate on the prepare_shelve_qty field.
func (f *InventoryFilter) WherePrepareShelveQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldPrepareShelveQty))
}

// WhereQuicktronStorageQty applies the entql int32 predicate on the quicktron_storage_qty field.
func (f *InventoryFilter) WhereQuicktronStorageQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldQuicktronStorageQty))
}

// WhereQuicktronAvailableQty applies the entql int32 predicate on the quicktron_available_qty field.
func (f *InventoryFilter) WhereQuicktronAvailableQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldQuicktronAvailableQty))
}

// WhereQuicktronPrepareOutboundQty applies the entql int32 predicate on the quicktron_prepare_outbound_qty field.
func (f *InventoryFilter) WhereQuicktronPrepareOutboundQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldQuicktronPrepareOutboundQty))
}

// WhereQuicktronPrepareShelveQty applies the entql int32 predicate on the quicktron_prepare_shelve_qty field.
func (f *InventoryFilter) WhereQuicktronPrepareShelveQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldQuicktronPrepareShelveQty))
}

// WhereNormalStorageQty applies the entql int32 predicate on the normal_storage_qty field.
func (f *InventoryFilter) WhereNormalStorageQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldNormalStorageQty))
}

// WhereNormalAvailableQty applies the entql int32 predicate on the normal_available_qty field.
func (f *InventoryFilter) WhereNormalAvailableQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldNormalAvailableQty))
}

// WhereNormalPrepareOutboundQty applies the entql int32 predicate on the normal_prepare_outbound_qty field.
func (f *InventoryFilter) WhereNormalPrepareOutboundQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldNormalPrepareOutboundQty))
}

// WhereNormalPrepareShelveQty applies the entql int32 predicate on the normal_prepare_shelve_qty field.
func (f *InventoryFilter) WhereNormalPrepareShelveQty(p entql.Int32P) {
	f.Where(p.Field(inventory.FieldNormalPrepareShelveQty))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *InventoryFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(inventory.FieldStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *InventoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *InventoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProducts applies a predicate to check if query has an edge products.
func (f *InventoryFilter) WhereHasProducts() {
	f.Where(entql.HasEdge("products"))
}

// WhereHasProductsWith applies a predicate to check if query has an edge products with a given conditions (other predicates).
func (f *InventoryFilter) WhereHasProductsWith(preds ...predicate.Product) {
	f.Where(entql.HasEdgeWith("products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereOrderNumber applies the entql string predicate on the order_number field.
func (f *OrderFilter) WhereOrderNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldOrderNumber))
}

// WhereMode applies the entql int8 predicate on the mode field.
func (f *OrderFilter) WhereMode(p entql.Int8P) {
	f.Where(p.Field(order.FieldMode))
}

// WhereType applies the entql int8 predicate on the type field.
func (f *OrderFilter) WhereType(p entql.Int8P) {
	f.Where(p.Field(order.FieldType))
}

// WhereOffline applies the entql bool predicate on the offline field.
func (f *OrderFilter) WhereOffline(p entql.BoolP) {
	f.Where(p.Field(order.FieldOffline))
}

// WhereStoreID applies the entql int64 predicate on the store_id field.
func (f *OrderFilter) WhereStoreID(p entql.Int64P) {
	f.Where(p.Field(order.FieldStoreID))
}

// WhereWarehouseID applies the entql int64 predicate on the warehouse_id field.
func (f *OrderFilter) WhereWarehouseID(p entql.Int64P) {
	f.Where(p.Field(order.FieldWarehouseID))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *OrderFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(order.FieldCustomerCode))
}

// WherePrepayTariff applies the entql bool predicate on the prepay_tariff field.
func (f *OrderFilter) WherePrepayTariff(p entql.BoolP) {
	f.Where(p.Field(order.FieldPrepayTariff))
}

// WhereIossNumber applies the entql string predicate on the ioss_number field.
func (f *OrderFilter) WhereIossNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldIossNumber))
}

// WhereIossCountryCode applies the entql string predicate on the ioss_country_code field.
func (f *OrderFilter) WhereIossCountryCode(p entql.StringP) {
	f.Where(p.Field(order.FieldIossCountryCode))
}

// WhereIossNumberType applies the entql int8 predicate on the ioss_number_type field.
func (f *OrderFilter) WhereIossNumberType(p entql.Int8P) {
	f.Where(p.Field(order.FieldIossNumberType))
}

// WhereUkVatNumber applies the entql string predicate on the uk_vat_number field.
func (f *OrderFilter) WhereUkVatNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldUkVatNumber))
}

// WhereInboundOrderNumber applies the entql string predicate on the inbound_order_number field.
func (f *OrderFilter) WhereInboundOrderNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldInboundOrderNumber))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *OrderFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(order.FieldStatus))
}

// WhereSqsStatus applies the entql bool predicate on the sqs_status field.
func (f *OrderFilter) WhereSqsStatus(p entql.BoolP) {
	f.Where(p.Field(order.FieldSqsStatus))
}

// WhereHoldStatus applies the entql bool predicate on the hold_status field.
func (f *OrderFilter) WhereHoldStatus(p entql.BoolP) {
	f.Where(p.Field(order.FieldHoldStatus))
}

// WherePaymentStatus applies the entql int8 predicate on the payment_status field.
func (f *OrderFilter) WherePaymentStatus(p entql.Int8P) {
	f.Where(p.Field(order.FieldPaymentStatus))
}

// WhereCancelRequest applies the entql int8 predicate on the cancel_request field.
func (f *OrderFilter) WhereCancelRequest(p entql.Int8P) {
	f.Where(p.Field(order.FieldCancelRequest))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *OrderFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(order.FieldPlatform))
}

// WherePlatformOrderID applies the entql string predicate on the platform_order_id field.
func (f *OrderFilter) WherePlatformOrderID(p entql.StringP) {
	f.Where(p.Field(order.FieldPlatformOrderID))
}

// WherePlatformOrderNo applies the entql string predicate on the platform_order_no field.
func (f *OrderFilter) WherePlatformOrderNo(p entql.StringP) {
	f.Where(p.Field(order.FieldPlatformOrderNo))
}

// WherePlatformOrderStatusURL applies the entql string predicate on the platform_order_status_url field.
func (f *OrderFilter) WherePlatformOrderStatusURL(p entql.StringP) {
	f.Where(p.Field(order.FieldPlatformOrderStatusURL))
}

// WherePlatformStatus applies the entql string predicate on the platform_status field.
func (f *OrderFilter) WherePlatformStatus(p entql.StringP) {
	f.Where(p.Field(order.FieldPlatformStatus))
}

// WherePaidStatus applies the entql string predicate on the paid_status field.
func (f *OrderFilter) WherePaidStatus(p entql.StringP) {
	f.Where(p.Field(order.FieldPaidStatus))
}

// WhereFulfillmentPushed applies the entql bool predicate on the fulfillment_pushed field.
func (f *OrderFilter) WhereFulfillmentPushed(p entql.BoolP) {
	f.Where(p.Field(order.FieldFulfillmentPushed))
}

// WhereFulfillmentStatus applies the entql string predicate on the fulfillment_status field.
func (f *OrderFilter) WhereFulfillmentStatus(p entql.StringP) {
	f.Where(p.Field(order.FieldFulfillmentStatus))
}

// WherePlatformCreatedAt applies the entql time.Time predicate on the platform_created_at field.
func (f *OrderFilter) WherePlatformCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldPlatformCreatedAt))
}

// WhereLocationID applies the entql string predicate on the location_id field.
func (f *OrderFilter) WhereLocationID(p entql.StringP) {
	f.Where(p.Field(order.FieldLocationID))
}

// WhereTags applies the entql string predicate on the tags field.
func (f *OrderFilter) WhereTags(p entql.StringP) {
	f.Where(p.Field(order.FieldTags))
}

// WhereNote applies the entql string predicate on the note field.
func (f *OrderFilter) WhereNote(p entql.StringP) {
	f.Where(p.Field(order.FieldNote))
}

// WhereCancelReason applies the entql string predicate on the cancel_reason field.
func (f *OrderFilter) WhereCancelReason(p entql.StringP) {
	f.Where(p.Field(order.FieldCancelReason))
}

// WhereCancelledAt applies the entql time.Time predicate on the cancelled_at field.
func (f *OrderFilter) WhereCancelledAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCancelledAt))
}

// WhereClosedAt applies the entql time.Time predicate on the closed_at field.
func (f *OrderFilter) WhereClosedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldClosedAt))
}

// WhereContactEmail applies the entql string predicate on the contact_email field.
func (f *OrderFilter) WhereContactEmail(p entql.StringP) {
	f.Where(p.Field(order.FieldContactEmail))
}

// WhereContactPhone applies the entql string predicate on the contact_phone field.
func (f *OrderFilter) WhereContactPhone(p entql.StringP) {
	f.Where(p.Field(order.FieldContactPhone))
}

// WhereShippingName applies the entql string predicate on the shipping_name field.
func (f *OrderFilter) WhereShippingName(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingName))
}

// WhereShippingFirstName applies the entql string predicate on the shipping_first_name field.
func (f *OrderFilter) WhereShippingFirstName(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingFirstName))
}

// WhereShippingLastName applies the entql string predicate on the shipping_last_name field.
func (f *OrderFilter) WhereShippingLastName(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingLastName))
}

// WhereShippingCompany applies the entql string predicate on the shipping_company field.
func (f *OrderFilter) WhereShippingCompany(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCompany))
}

// WhereShippingCountry applies the entql string predicate on the shipping_country field.
func (f *OrderFilter) WhereShippingCountry(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCountry))
}

// WhereShippingCountryCode applies the entql string predicate on the shipping_country_code field.
func (f *OrderFilter) WhereShippingCountryCode(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCountryCode))
}

// WhereShippingProvince applies the entql string predicate on the shipping_province field.
func (f *OrderFilter) WhereShippingProvince(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingProvince))
}

// WhereShippingProvinceCode applies the entql string predicate on the shipping_province_code field.
func (f *OrderFilter) WhereShippingProvinceCode(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingProvinceCode))
}

// WhereShippingCity applies the entql string predicate on the shipping_city field.
func (f *OrderFilter) WhereShippingCity(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCity))
}

// WhereShippingAddress1 applies the entql string predicate on the shipping_address1 field.
func (f *OrderFilter) WhereShippingAddress1(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingAddress1))
}

// WhereShippingAddress2 applies the entql string predicate on the shipping_address2 field.
func (f *OrderFilter) WhereShippingAddress2(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingAddress2))
}

// WhereShippingZipCode applies the entql string predicate on the shipping_zip_code field.
func (f *OrderFilter) WhereShippingZipCode(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingZipCode))
}

// WhereShippingPhone applies the entql string predicate on the shipping_phone field.
func (f *OrderFilter) WhereShippingPhone(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingPhone))
}

// WhereShippingCertificateType applies the entql string predicate on the shipping_certificate_type field.
func (f *OrderFilter) WhereShippingCertificateType(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCertificateType))
}

// WhereShippingCertificateCode applies the entql string predicate on the shipping_certificate_code field.
func (f *OrderFilter) WhereShippingCertificateCode(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCertificateCode))
}

// WhereShippingCredentialsPeriod applies the entql string predicate on the shipping_credentials_period field.
func (f *OrderFilter) WhereShippingCredentialsPeriod(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingCredentialsPeriod))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(order.FieldRemark))
}

// WherePreferShippedType applies the entql int8 predicate on the prefer_shipped_type field.
func (f *OrderFilter) WherePreferShippedType(p entql.Int8P) {
	f.Where(p.Field(order.FieldPreferShippedType))
}

// WherePreferChannelID applies the entql int64 predicate on the prefer_channel_id field.
func (f *OrderFilter) WherePreferChannelID(p entql.Int64P) {
	f.Where(p.Field(order.FieldPreferChannelID))
}

// WhereChannelOptions applies the entql string predicate on the channel_options field.
func (f *OrderFilter) WhereChannelOptions(p entql.StringP) {
	f.Where(p.Field(order.FieldChannelOptions))
}

// WhereChannelID applies the entql int64 predicate on the channel_id field.
func (f *OrderFilter) WhereChannelID(p entql.Int64P) {
	f.Where(p.Field(order.FieldChannelID))
}

// WhereChannelCostID applies the entql int64 predicate on the channel_cost_id field.
func (f *OrderFilter) WhereChannelCostID(p entql.Int64P) {
	f.Where(p.Field(order.FieldChannelCostID))
}

// WhereShipType applies the entql int8 predicate on the ship_type field.
func (f *OrderFilter) WhereShipType(p entql.Int8P) {
	f.Where(p.Field(order.FieldShipType))
}

// WhereTrackingCompany applies the entql string predicate on the tracking_company field.
func (f *OrderFilter) WhereTrackingCompany(p entql.StringP) {
	f.Where(p.Field(order.FieldTrackingCompany))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *OrderFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldTrackingNumber))
}

// WhereTrackingURL applies the entql string predicate on the tracking_url field.
func (f *OrderFilter) WhereTrackingURL(p entql.StringP) {
	f.Where(p.Field(order.FieldTrackingURL))
}

// WhereWaybillNumber applies the entql string predicate on the waybill_number field.
func (f *OrderFilter) WhereWaybillNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldWaybillNumber))
}

// WhereCourierOrderNumber applies the entql string predicate on the courier_order_number field.
func (f *OrderFilter) WhereCourierOrderNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldCourierOrderNumber))
}

// WhereNssCourierOrderNumber applies the entql string predicate on the nss_courier_order_number field.
func (f *OrderFilter) WhereNssCourierOrderNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldNssCourierOrderNumber))
}

// WhereNssTrackingNumber applies the entql string predicate on the nss_tracking_number field.
func (f *OrderFilter) WhereNssTrackingNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldNssTrackingNumber))
}

// WhereNssTrackingURL applies the entql string predicate on the nss_tracking_url field.
func (f *OrderFilter) WhereNssTrackingURL(p entql.StringP) {
	f.Where(p.Field(order.FieldNssTrackingURL))
}

// WhereShippingLabelURL applies the entql string predicate on the shipping_label_url field.
func (f *OrderFilter) WhereShippingLabelURL(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingLabelURL))
}

// WhereShippingLabelPath applies the entql string predicate on the shipping_label_path field.
func (f *OrderFilter) WhereShippingLabelPath(p entql.StringP) {
	f.Where(p.Field(order.FieldShippingLabelPath))
}

// WhereLabelDataPath applies the entql string predicate on the label_data_path field.
func (f *OrderFilter) WhereLabelDataPath(p entql.StringP) {
	f.Where(p.Field(order.FieldLabelDataPath))
}

// WherePackageID applies the entql string predicate on the package_id field.
func (f *OrderFilter) WherePackageID(p entql.StringP) {
	f.Where(p.Field(order.FieldPackageID))
}

// WhereShipDate applies the entql time.Time predicate on the ship_date field.
func (f *OrderFilter) WhereShipDate(p entql.TimeP) {
	f.Where(p.Field(order.FieldShipDate))
}

// WhereRequestShippingAt applies the entql time.Time predicate on the request_shipping_at field.
func (f *OrderFilter) WhereRequestShippingAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldRequestShippingAt))
}

// WhereUnshelfRequestedTime applies the entql time.Time predicate on the unshelf_requested_time field.
func (f *OrderFilter) WhereUnshelfRequestedTime(p entql.TimeP) {
	f.Where(p.Field(order.FieldUnshelfRequestedTime))
}

// WhereContainerCode applies the entql string predicate on the container_code field.
func (f *OrderFilter) WhereContainerCode(p entql.StringP) {
	f.Where(p.Field(order.FieldContainerCode))
}

// WhereBasketNumber applies the entql string predicate on the basket_number field.
func (f *OrderFilter) WhereBasketNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldBasketNumber))
}

// WherePrintTimes applies the entql int predicate on the print_times field.
func (f *OrderFilter) WherePrintTimes(p entql.IntP) {
	f.Where(p.Field(order.FieldPrintTimes))
}

// WhereSortingTrackingNumber applies the entql string predicate on the sorting_tracking_number field.
func (f *OrderFilter) WhereSortingTrackingNumber(p entql.StringP) {
	f.Where(p.Field(order.FieldSortingTrackingNumber))
}

// WhereSortingPort applies the entql int32 predicate on the sorting_port field.
func (f *OrderFilter) WhereSortingPort(p entql.Int32P) {
	f.Where(p.Field(order.FieldSortingPort))
}

// WhereSortingLength applies the entql int predicate on the sorting_length field.
func (f *OrderFilter) WhereSortingLength(p entql.IntP) {
	f.Where(p.Field(order.FieldSortingLength))
}

// WhereSortingWidth applies the entql int predicate on the sorting_width field.
func (f *OrderFilter) WhereSortingWidth(p entql.IntP) {
	f.Where(p.Field(order.FieldSortingWidth))
}

// WhereSortingHeight applies the entql int predicate on the sorting_height field.
func (f *OrderFilter) WhereSortingHeight(p entql.IntP) {
	f.Where(p.Field(order.FieldSortingHeight))
}

// WhereSortingWeight applies the entql int predicate on the sorting_weight field.
func (f *OrderFilter) WhereSortingWeight(p entql.IntP) {
	f.Where(p.Field(order.FieldSortingWeight))
}

// WhereEstimatedWeight applies the entql int predicate on the estimated_weight field.
func (f *OrderFilter) WhereEstimatedWeight(p entql.IntP) {
	f.Where(p.Field(order.FieldEstimatedWeight))
}

// WhereCheckoutActualWeight applies the entql int predicate on the checkout_actual_weight field.
func (f *OrderFilter) WhereCheckoutActualWeight(p entql.IntP) {
	f.Where(p.Field(order.FieldCheckoutActualWeight))
}

// WhereVolumeWeight applies the entql int predicate on the volume_weight field.
func (f *OrderFilter) WhereVolumeWeight(p entql.IntP) {
	f.Where(p.Field(order.FieldVolumeWeight))
}

// WhereCourierWeight applies the entql int predicate on the courier_weight field.
func (f *OrderFilter) WhereCourierWeight(p entql.IntP) {
	f.Where(p.Field(order.FieldCourierWeight))
}

// WhereDeclaredValueInUsd applies the entql float64 predicate on the declared_value_in_usd field.
func (f *OrderFilter) WhereDeclaredValueInUsd(p entql.Float64P) {
	f.Where(p.Field(order.FieldDeclaredValueInUsd))
}

// WhereDeclaredValueInEur applies the entql float64 predicate on the declared_value_in_eur field.
func (f *OrderFilter) WhereDeclaredValueInEur(p entql.Float64P) {
	f.Where(p.Field(order.FieldDeclaredValueInEur))
}

// WhereTotalItemsPrice applies the entql float64 predicate on the total_items_price field.
func (f *OrderFilter) WhereTotalItemsPrice(p entql.Float64P) {
	f.Where(p.Field(order.FieldTotalItemsPrice))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *OrderFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(order.FieldCurrency))
}

// WhereDeliveryCost applies the entql float64 predicate on the delivery_cost field.
func (f *OrderFilter) WhereDeliveryCost(p entql.Float64P) {
	f.Where(p.Field(order.FieldDeliveryCost))
}

// WhereMiscFee applies the entql float64 predicate on the misc_fee field.
func (f *OrderFilter) WhereMiscFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldMiscFee))
}

// WhereFuelFee applies the entql float64 predicate on the fuel_fee field.
func (f *OrderFilter) WhereFuelFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldFuelFee))
}

// WhereRegistrationFee applies the entql float64 predicate on the registration_fee field.
func (f *OrderFilter) WhereRegistrationFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldRegistrationFee))
}

// WhereProcessingFee applies the entql float64 predicate on the processing_fee field.
func (f *OrderFilter) WhereProcessingFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldProcessingFee))
}

// WherePackageFee applies the entql float64 predicate on the package_fee field.
func (f *OrderFilter) WherePackageFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldPackageFee))
}

// WhereHandlingFee applies the entql float64 predicate on the handling_fee field.
func (f *OrderFilter) WhereHandlingFee(p entql.Float64P) {
	f.Where(p.Field(order.FieldHandlingFee))
}

// WhereVat applies the entql float64 predicate on the vat field.
func (f *OrderFilter) WhereVat(p entql.Float64P) {
	f.Where(p.Field(order.FieldVat))
}

// WhereEstimatedCost applies the entql float64 predicate on the estimated_cost field.
func (f *OrderFilter) WhereEstimatedCost(p entql.Float64P) {
	f.Where(p.Field(order.FieldEstimatedCost))
}

// WhereEstimatedCurrency applies the entql string predicate on the estimated_currency field.
func (f *OrderFilter) WhereEstimatedCurrency(p entql.StringP) {
	f.Where(p.Field(order.FieldEstimatedCurrency))
}

// WhereReceivablesAmount applies the entql float64 predicate on the receivables_amount field.
func (f *OrderFilter) WhereReceivablesAmount(p entql.Float64P) {
	f.Where(p.Field(order.FieldReceivablesAmount))
}

// WhereReceivablesCurrency applies the entql string predicate on the receivables_currency field.
func (f *OrderFilter) WhereReceivablesCurrency(p entql.StringP) {
	f.Where(p.Field(order.FieldReceivablesCurrency))
}

// WhereNotAcceptPlatformUpdate applies the entql bool predicate on the not_accept_platform_update field.
func (f *OrderFilter) WhereNotAcceptPlatformUpdate(p entql.BoolP) {
	f.Where(p.Field(order.FieldNotAcceptPlatformUpdate))
}

// WhereNotAcceptPlatformUpdateItem applies the entql bool predicate on the not_accept_platform_update_item field.
func (f *OrderFilter) WhereNotAcceptPlatformUpdateItem(p entql.BoolP) {
	f.Where(p.Field(order.FieldNotAcceptPlatformUpdateItem))
}

// WhereJdPushedStatus applies the entql string predicate on the jd_pushed_status field.
func (f *OrderFilter) WhereJdPushedStatus(p entql.StringP) {
	f.Where(p.Field(order.FieldJdPushedStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderItems applies a predicate to check if query has an edge order_items.
func (f *OrderFilter) WhereHasOrderItems() {
	f.Where(entql.HasEdge("order_items"))
}

// WhereHasOrderItemsWith applies a predicate to check if query has an edge order_items with a given conditions (other predicates).
func (f *OrderFilter) WhereHasOrderItemsWith(preds ...predicate.OrderItem) {
	f.Where(entql.HasEdgeWith("order_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderHoldReasons applies a predicate to check if query has an edge order_hold_reasons.
func (f *OrderFilter) WhereHasOrderHoldReasons() {
	f.Where(entql.HasEdge("order_hold_reasons"))
}

// WhereHasOrderHoldReasonsWith applies a predicate to check if query has an edge order_hold_reasons with a given conditions (other predicates).
func (f *OrderFilter) WhereHasOrderHoldReasonsWith(preds ...predicate.OrderHoldReason) {
	f.Where(entql.HasEdgeWith("order_hold_reasons", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderTaxations applies a predicate to check if query has an edge order_taxations.
func (f *OrderFilter) WhereHasOrderTaxations() {
	f.Where(entql.HasEdge("order_taxations"))
}

// WhereHasOrderTaxationsWith applies a predicate to check if query has an edge order_taxations with a given conditions (other predicates).
func (f *OrderFilter) WhereHasOrderTaxationsWith(preds ...predicate.OrderTaxation) {
	f.Where(entql.HasEdgeWith("order_taxations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStores applies a predicate to check if query has an edge stores.
func (f *OrderFilter) WhereHasStores() {
	f.Where(entql.HasEdge("stores"))
}

// WhereHasStoresWith applies a predicate to check if query has an edge stores with a given conditions (other predicates).
func (f *OrderFilter) WhereHasStoresWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("stores", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWarehouses applies a predicate to check if query has an edge warehouses.
func (f *OrderFilter) WhereHasWarehouses() {
	f.Where(entql.HasEdge("warehouses"))
}

// WhereHasWarehousesWith applies a predicate to check if query has an edge warehouses with a given conditions (other predicates).
func (f *OrderFilter) WhereHasWarehousesWith(preds ...predicate.Warehouse) {
	f.Where(entql.HasEdgeWith("warehouses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChannels applies a predicate to check if query has an edge channels.
func (f *OrderFilter) WhereHasChannels() {
	f.Where(entql.HasEdge("channels"))
}

// WhereHasChannelsWith applies a predicate to check if query has an edge channels with a given conditions (other predicates).
func (f *OrderFilter) WhereHasChannelsWith(preds ...predicate.Channel) {
	f.Where(entql.HasEdgeWith("channels", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrackMappings applies a predicate to check if query has an edge track_mappings.
func (f *OrderFilter) WhereHasTrackMappings() {
	f.Where(entql.HasEdge("track_mappings"))
}

// WhereHasTrackMappingsWith applies a predicate to check if query has an edge track_mappings with a given conditions (other predicates).
func (f *OrderFilter) WhereHasTrackMappingsWith(preds ...predicate.TrackMapping) {
	f.Where(entql.HasEdgeWith("track_mappings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ohrq *OrderHoldReasonQuery) addPredicate(pred func(s *sql.Selector)) {
	ohrq.predicates = append(ohrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderHoldReasonQuery builder.
func (ohrq *OrderHoldReasonQuery) Filter() *OrderHoldReasonFilter {
	return &OrderHoldReasonFilter{config: ohrq.config, predicateAdder: ohrq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderHoldReasonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderHoldReasonMutation builder.
func (m *OrderHoldReasonMutation) Filter() *OrderHoldReasonFilter {
	return &OrderHoldReasonFilter{config: m.config, predicateAdder: m}
}

// OrderHoldReasonFilter provides a generic filtering capability at runtime for OrderHoldReasonQuery.
type OrderHoldReasonFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderHoldReasonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *OrderHoldReasonFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(orderholdreason.FieldID))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *OrderHoldReasonFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(orderholdreason.FieldOrderID))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *OrderHoldReasonFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(orderholdreason.FieldProductID))
}

// WhereType applies the entql string predicate on the type field.
func (f *OrderHoldReasonFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(orderholdreason.FieldType))
}

// WhereCode applies the entql int32 predicate on the code field.
func (f *OrderHoldReasonFilter) WhereCode(p entql.Int32P) {
	f.Where(p.Field(orderholdreason.FieldCode))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *OrderHoldReasonFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(orderholdreason.FieldReason))
}

// WhereEnReason applies the entql string predicate on the en_reason field.
func (f *OrderHoldReasonFilter) WhereEnReason(p entql.StringP) {
	f.Where(p.Field(orderholdreason.FieldEnReason))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderHoldReasonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderholdreason.FieldCreatedAt))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *OrderHoldReasonFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *OrderHoldReasonFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oiq *OrderItemQuery) addPredicate(pred func(s *sql.Selector)) {
	oiq.predicates = append(oiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderItemQuery builder.
func (oiq *OrderItemQuery) Filter() *OrderItemFilter {
	return &OrderItemFilter{config: oiq.config, predicateAdder: oiq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderItemMutation builder.
func (m *OrderItemMutation) Filter() *OrderItemFilter {
	return &OrderItemFilter{config: m.config, predicateAdder: m}
}

// OrderItemFilter provides a generic filtering capability at runtime for OrderItemQuery.
type OrderItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *OrderItemFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(orderitem.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orderitem.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderItemFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orderitem.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *OrderItemFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(orderitem.FieldOrderID))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *OrderItemFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(orderitem.FieldProductID))
}

// WherePlatformProductID applies the entql int64 predicate on the platform_product_id field.
func (f *OrderItemFilter) WherePlatformProductID(p entql.Int64P) {
	f.Where(p.Field(orderitem.FieldPlatformProductID))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *OrderItemFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldBarcode))
}

// WhereFulfillmentService applies the entql string predicate on the fulfillment_service field.
func (f *OrderItemFilter) WhereFulfillmentService(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldFulfillmentService))
}

// WhereExtOrderItemID applies the entql string predicate on the ext_order_item_id field.
func (f *OrderItemFilter) WhereExtOrderItemID(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldExtOrderItemID))
}

// WhereExtProductID applies the entql string predicate on the ext_product_id field.
func (f *OrderItemFilter) WhereExtProductID(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldExtProductID))
}

// WhereIsCustomItem applies the entql bool predicate on the is_custom_item field.
func (f *OrderItemFilter) WhereIsCustomItem(p entql.BoolP) {
	f.Where(p.Field(orderitem.FieldIsCustomItem))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrderItemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldName))
}

// WhereDeclaredCnName applies the entql string predicate on the declared_cn_name field.
func (f *OrderItemFilter) WhereDeclaredCnName(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldDeclaredCnName))
}

// WhereHsCode applies the entql string predicate on the hs_code field.
func (f *OrderItemFilter) WhereHsCode(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldHsCode))
}

// WhereMaterial applies the entql string predicate on the material field.
func (f *OrderItemFilter) WhereMaterial(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldMaterial))
}

// WherePurpose applies the entql string predicate on the purpose field.
func (f *OrderItemFilter) WherePurpose(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldPurpose))
}

// WhereImages applies the entql string predicate on the images field.
func (f *OrderItemFilter) WhereImages(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldImages))
}

// WhereAttributes applies the entql string predicate on the attributes field.
func (f *OrderItemFilter) WhereAttributes(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldAttributes))
}

// WhereGrams applies the entql int predicate on the grams field.
func (f *OrderItemFilter) WhereGrams(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldGrams))
}

// WhereLength applies the entql int predicate on the length field.
func (f *OrderItemFilter) WhereLength(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldLength))
}

// WhereWidth applies the entql int predicate on the width field.
func (f *OrderItemFilter) WhereWidth(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldWidth))
}

// WhereHeight applies the entql int predicate on the height field.
func (f *OrderItemFilter) WhereHeight(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldHeight))
}

// WhereQty applies the entql int predicate on the qty field.
func (f *OrderItemFilter) WhereQty(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldQty))
}

// WhereUnitPrice applies the entql float64 predicate on the unit_price field.
func (f *OrderItemFilter) WhereUnitPrice(p entql.Float64P) {
	f.Where(p.Field(orderitem.FieldUnitPrice))
}

// WhereDeclaredValueInUsd applies the entql float64 predicate on the declared_value_in_usd field.
func (f *OrderItemFilter) WhereDeclaredValueInUsd(p entql.Float64P) {
	f.Where(p.Field(orderitem.FieldDeclaredValueInUsd))
}

// WhereDeclaredValueInEur applies the entql float64 predicate on the declared_value_in_eur field.
func (f *OrderItemFilter) WhereDeclaredValueInEur(p entql.Float64P) {
	f.Where(p.Field(orderitem.FieldDeclaredValueInEur))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *OrderItemFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldCurrency))
}

// WhereFulfillQty applies the entql int predicate on the fulfill_qty field.
func (f *OrderItemFilter) WhereFulfillQty(p entql.IntP) {
	f.Where(p.Field(orderitem.FieldFulfillQty))
}

// WhereRequiresShipping applies the entql bool predicate on the requires_shipping field.
func (f *OrderItemFilter) WhereRequiresShipping(p entql.BoolP) {
	f.Where(p.Field(orderitem.FieldRequiresShipping))
}

// WhereGiftCard applies the entql bool predicate on the gift_card field.
func (f *OrderItemFilter) WhereGiftCard(p entql.BoolP) {
	f.Where(p.Field(orderitem.FieldGiftCard))
}

// WhereTaxable applies the entql bool predicate on the taxable field.
func (f *OrderItemFilter) WhereTaxable(p entql.BoolP) {
	f.Where(p.Field(orderitem.FieldTaxable))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *OrderItemFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(orderitem.FieldStatus))
}

// WhereSku applies the entql string predicate on the sku field.
func (f *OrderItemFilter) WhereSku(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldSku))
}

// WhereListingSku applies the entql string predicate on the listing_sku field.
func (f *OrderItemFilter) WhereListingSku(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldListingSku))
}

// WhereDeclaredEnName applies the entql string predicate on the declared_en_name field.
func (f *OrderItemFilter) WhereDeclaredEnName(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldDeclaredEnName))
}

// WhereProductName applies the entql string predicate on the product_name field.
func (f *OrderItemFilter) WhereProductName(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldProductName))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *OrderItemFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(orderitem.FieldCustomerCode))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderItemFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderItemFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *OrderItemFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *OrderItemFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (otq *OrderTaxationQuery) addPredicate(pred func(s *sql.Selector)) {
	otq.predicates = append(otq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderTaxationQuery builder.
func (otq *OrderTaxationQuery) Filter() *OrderTaxationFilter {
	return &OrderTaxationFilter{config: otq.config, predicateAdder: otq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderTaxationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderTaxationMutation builder.
func (m *OrderTaxationMutation) Filter() *OrderTaxationFilter {
	return &OrderTaxationFilter{config: m.config, predicateAdder: m}
}

// OrderTaxationFilter provides a generic filtering capability at runtime for OrderTaxationQuery.
type OrderTaxationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderTaxationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *OrderTaxationFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(ordertaxation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderTaxationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ordertaxation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderTaxationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ordertaxation.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderTaxationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(ordertaxation.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *OrderTaxationFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(ordertaxation.FieldOrderID))
}

// WhereType applies the entql string predicate on the type field.
func (f *OrderTaxationFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(ordertaxation.FieldType))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *OrderTaxationFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(ordertaxation.FieldCountryCode))
}

// WhereNumber applies the entql string predicate on the number field.
func (f *OrderTaxationFilter) WhereNumber(p entql.StringP) {
	f.Where(p.Field(ordertaxation.FieldNumber))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *OrderTaxationFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *OrderTaxationFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (poq *PickupOrderQuery) addPredicate(pred func(s *sql.Selector)) {
	poq.predicates = append(poq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PickupOrderQuery builder.
func (poq *PickupOrderQuery) Filter() *PickupOrderFilter {
	return &PickupOrderFilter{config: poq.config, predicateAdder: poq}
}

// addPredicate implements the predicateAdder interface.
func (m *PickupOrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PickupOrderMutation builder.
func (m *PickupOrderMutation) Filter() *PickupOrderFilter {
	return &PickupOrderFilter{config: m.config, predicateAdder: m}
}

// PickupOrderFilter provides a generic filtering capability at runtime for PickupOrderQuery.
type PickupOrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PickupOrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *PickupOrderFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(pickuporder.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PickupOrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporder.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PickupOrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporder.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PickupOrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporder.FieldDeletedAt))
}

// WhereRequestedPickupAt applies the entql time.Time predicate on the requested_pickup_at field.
func (f *PickupOrderFilter) WhereRequestedPickupAt(p entql.TimeP) {
	f.Where(p.Field(pickuporder.FieldRequestedPickupAt))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *PickupOrderFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(pickuporder.FieldStatus))
}

// WhereSenderAddressInfo applies the entql string predicate on the sender_address_info field.
func (f *PickupOrderFilter) WhereSenderAddressInfo(p entql.StringP) {
	f.Where(p.Field(pickuporder.FieldSenderAddressInfo))
}

// addPredicate implements the predicateAdder interface.
func (poiq *PickupOrderItemQuery) addPredicate(pred func(s *sql.Selector)) {
	poiq.predicates = append(poiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PickupOrderItemQuery builder.
func (poiq *PickupOrderItemQuery) Filter() *PickupOrderItemFilter {
	return &PickupOrderItemFilter{config: poiq.config, predicateAdder: poiq}
}

// addPredicate implements the predicateAdder interface.
func (m *PickupOrderItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PickupOrderItemMutation builder.
func (m *PickupOrderItemMutation) Filter() *PickupOrderItemFilter {
	return &PickupOrderItemFilter{config: m.config, predicateAdder: m}
}

// PickupOrderItemFilter provides a generic filtering capability at runtime for PickupOrderItemQuery.
type PickupOrderItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PickupOrderItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *PickupOrderItemFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(pickuporderitem.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PickupOrderItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporderitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PickupOrderItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporderitem.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PickupOrderItemFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(pickuporderitem.FieldDeletedAt))
}

// WherePickupOrderID applies the entql int64 predicate on the pickup_order_id field.
func (f *PickupOrderItemFilter) WherePickupOrderID(p entql.Int64P) {
	f.Where(p.Field(pickuporderitem.FieldPickupOrderID))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *PickupOrderItemFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(pickuporderitem.FieldProductID))
}

// WhereProductName applies the entql string predicate on the product_name field.
func (f *PickupOrderItemFilter) WhereProductName(p entql.StringP) {
	f.Where(p.Field(pickuporderitem.FieldProductName))
}

// WhereSku applies the entql string predicate on the sku field.
func (f *PickupOrderItemFilter) WhereSku(p entql.StringP) {
	f.Where(p.Field(pickuporderitem.FieldSku))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *PickupOrderItemFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(pickuporderitem.FieldBarcode))
}

// WhereQty applies the entql int32 predicate on the qty field.
func (f *PickupOrderItemFilter) WhereQty(p entql.Int32P) {
	f.Where(p.Field(pickuporderitem.FieldQty))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *PickupOrderItemFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(pickuporderitem.FieldCustomerCode))
}

// addPredicate implements the predicateAdder interface.
func (ppq *PlatformProductQuery) addPredicate(pred func(s *sql.Selector)) {
	ppq.predicates = append(ppq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlatformProductQuery builder.
func (ppq *PlatformProductQuery) Filter() *PlatformProductFilter {
	return &PlatformProductFilter{config: ppq.config, predicateAdder: ppq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlatformProductMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlatformProductMutation builder.
func (m *PlatformProductMutation) Filter() *PlatformProductFilter {
	return &PlatformProductFilter{config: m.config, predicateAdder: m}
}

// PlatformProductFilter provides a generic filtering capability at runtime for PlatformProductQuery.
type PlatformProductFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlatformProductFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *PlatformProductFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(platformproduct.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlatformProductFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(platformproduct.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlatformProductFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(platformproduct.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PlatformProductFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(platformproduct.FieldDeletedAt))
}

// WhereStoreID applies the entql int64 predicate on the store_id field.
func (f *PlatformProductFilter) WhereStoreID(p entql.Int64P) {
	f.Where(p.Field(platformproduct.FieldStoreID))
}

// WhereListingID applies the entql string predicate on the listing_id field.
func (f *PlatformProductFilter) WhereListingID(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldListingID))
}

// WhereCollectionID applies the entql string predicate on the collection_id field.
func (f *PlatformProductFilter) WhereCollectionID(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldCollectionID))
}

// WhereListingSku applies the entql string predicate on the listing_sku field.
func (f *PlatformProductFilter) WhereListingSku(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldListingSku))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *PlatformProductFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldBarcode))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlatformProductFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldName))
}

// WhereImages applies the entql string predicate on the images field.
func (f *PlatformProductFilter) WhereImages(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldImages))
}

// WhereVendor applies the entql string predicate on the vendor field.
func (f *PlatformProductFilter) WhereVendor(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldVendor))
}

// WhereSellingPrice applies the entql float64 predicate on the selling_price field.
func (f *PlatformProductFilter) WhereSellingPrice(p entql.Float64P) {
	f.Where(p.Field(platformproduct.FieldSellingPrice))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *PlatformProductFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(platformproduct.FieldCurrency))
}

// WhereGrams applies the entql int predicate on the grams field.
func (f *PlatformProductFilter) WhereGrams(p entql.IntP) {
	f.Where(p.Field(platformproduct.FieldGrams))
}

// WherePlatformStatus applies the entql int8 predicate on the platform_status field.
func (f *PlatformProductFilter) WherePlatformStatus(p entql.Int8P) {
	f.Where(p.Field(platformproduct.FieldPlatformStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PlatformProductFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PlatformProductFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductMappings applies a predicate to check if query has an edge product_mappings.
func (f *PlatformProductFilter) WhereHasProductMappings() {
	f.Where(entql.HasEdge("product_mappings"))
}

// WhereHasProductMappingsWith applies a predicate to check if query has an edge product_mappings with a given conditions (other predicates).
func (f *PlatformProductFilter) WhereHasProductMappingsWith(preds ...predicate.ProductMapping) {
	f.Where(entql.HasEdgeWith("product_mappings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStores applies a predicate to check if query has an edge stores.
func (f *PlatformProductFilter) WhereHasStores() {
	f.Where(entql.HasEdge("stores"))
}

// WhereHasStoresWith applies a predicate to check if query has an edge stores with a given conditions (other predicates).
func (f *PlatformProductFilter) WhereHasStoresWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("stores", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProductQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductQuery builder.
func (pq *ProductQuery) Filter() *ProductFilter {
	return &ProductFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductMutation builder.
func (m *ProductMutation) Filter() *ProductFilter {
	return &ProductFilter{config: m.config, predicateAdder: m}
}

// ProductFilter provides a generic filtering capability at runtime for ProductQuery.
type ProductFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ProductFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(product.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProductFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(product.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProductFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(product.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProductFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(product.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProductFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(product.FieldName))
}

// WhereSku applies the entql string predicate on the sku field.
func (f *ProductFilter) WhereSku(p entql.StringP) {
	f.Where(p.Field(product.FieldSku))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *ProductFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(product.FieldBarcode))
}

// WhereCustomerCode applies the entql string predicate on the customer_code field.
func (f *ProductFilter) WhereCustomerCode(p entql.StringP) {
	f.Where(p.Field(product.FieldCustomerCode))
}

// WhereDeclaredName applies the entql string predicate on the declared_name field.
func (f *ProductFilter) WhereDeclaredName(p entql.StringP) {
	f.Where(p.Field(product.FieldDeclaredName))
}

// WhereDeclaredCnName applies the entql string predicate on the declared_cn_name field.
func (f *ProductFilter) WhereDeclaredCnName(p entql.StringP) {
	f.Where(p.Field(product.FieldDeclaredCnName))
}

// WhereDeclaredValueInUsd applies the entql float64 predicate on the declared_value_in_usd field.
func (f *ProductFilter) WhereDeclaredValueInUsd(p entql.Float64P) {
	f.Where(p.Field(product.FieldDeclaredValueInUsd))
}

// WhereDeclaredValueInEur applies the entql float64 predicate on the declared_value_in_eur field.
func (f *ProductFilter) WhereDeclaredValueInEur(p entql.Float64P) {
	f.Where(p.Field(product.FieldDeclaredValueInEur))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *ProductFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(product.FieldCurrency))
}

// WhereHsCode applies the entql string predicate on the hs_code field.
func (f *ProductFilter) WhereHsCode(p entql.StringP) {
	f.Where(p.Field(product.FieldHsCode))
}

// WhereMaterial applies the entql string predicate on the material field.
func (f *ProductFilter) WhereMaterial(p entql.StringP) {
	f.Where(p.Field(product.FieldMaterial))
}

// WherePurpose applies the entql string predicate on the purpose field.
func (f *ProductFilter) WherePurpose(p entql.StringP) {
	f.Where(p.Field(product.FieldPurpose))
}

// WhereWithBarcode applies the entql int8 predicate on the with_barcode field.
func (f *ProductFilter) WhereWithBarcode(p entql.Int8P) {
	f.Where(p.Field(product.FieldWithBarcode))
}

// WhereBarcodeService applies the entql int8 predicate on the barcode_service field.
func (f *ProductFilter) WhereBarcodeService(p entql.Int8P) {
	f.Where(p.Field(product.FieldBarcodeService))
}

// WhereBarcodeTemplate applies the entql string predicate on the barcode_template field.
func (f *ProductFilter) WhereBarcodeTemplate(p entql.StringP) {
	f.Where(p.Field(product.FieldBarcodeTemplate))
}

// WhereImages applies the entql string predicate on the images field.
func (f *ProductFilter) WhereImages(p entql.StringP) {
	f.Where(p.Field(product.FieldImages))
}

// WhereAttributes applies the entql string predicate on the attributes field.
func (f *ProductFilter) WhereAttributes(p entql.StringP) {
	f.Where(p.Field(product.FieldAttributes))
}

// WhereConfirmedAttributes applies the entql string predicate on the confirmed_attributes field.
func (f *ProductFilter) WhereConfirmedAttributes(p entql.StringP) {
	f.Where(p.Field(product.FieldConfirmedAttributes))
}

// WhereGrams applies the entql int predicate on the grams field.
func (f *ProductFilter) WhereGrams(p entql.IntP) {
	f.Where(p.Field(product.FieldGrams))
}

// WhereInboundGrams applies the entql int predicate on the inbound_grams field.
func (f *ProductFilter) WhereInboundGrams(p entql.IntP) {
	f.Where(p.Field(product.FieldInboundGrams))
}

// WhereLength applies the entql int predicate on the length field.
func (f *ProductFilter) WhereLength(p entql.IntP) {
	f.Where(p.Field(product.FieldLength))
}

// WhereWidth applies the entql int predicate on the width field.
func (f *ProductFilter) WhereWidth(p entql.IntP) {
	f.Where(p.Field(product.FieldWidth))
}

// WhereHeight applies the entql int predicate on the height field.
func (f *ProductFilter) WhereHeight(p entql.IntP) {
	f.Where(p.Field(product.FieldHeight))
}

// WhereMaxAgvQty applies the entql int predicate on the max_agv_qty field.
func (f *ProductFilter) WhereMaxAgvQty(p entql.IntP) {
	f.Where(p.Field(product.FieldMaxAgvQty))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *ProductFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(product.FieldStatus))
}

// WhereCreatedBy applies the entql int64 predicate on the created_by field.
func (f *ProductFilter) WhereCreatedBy(p entql.Int64P) {
	f.Where(p.Field(product.FieldCreatedBy))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ProductFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ProductFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInventories applies a predicate to check if query has an edge inventories.
func (f *ProductFilter) WhereHasInventories() {
	f.Where(entql.HasEdge("inventories"))
}

// WhereHasInventoriesWith applies a predicate to check if query has an edge inventories with a given conditions (other predicates).
func (f *ProductFilter) WhereHasInventoriesWith(preds ...predicate.Inventory) {
	f.Where(entql.HasEdgeWith("inventories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductMappings applies a predicate to check if query has an edge product_mappings.
func (f *ProductFilter) WhereHasProductMappings() {
	f.Where(entql.HasEdge("product_mappings"))
}

// WhereHasProductMappingsWith applies a predicate to check if query has an edge product_mappings with a given conditions (other predicates).
func (f *ProductFilter) WhereHasProductMappingsWith(preds ...predicate.ProductMapping) {
	f.Where(entql.HasEdgeWith("product_mappings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pmq *ProductMappingQuery) addPredicate(pred func(s *sql.Selector)) {
	pmq.predicates = append(pmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductMappingQuery builder.
func (pmq *ProductMappingQuery) Filter() *ProductMappingFilter {
	return &ProductMappingFilter{config: pmq.config, predicateAdder: pmq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductMappingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductMappingMutation builder.
func (m *ProductMappingMutation) Filter() *ProductMappingFilter {
	return &ProductMappingFilter{config: m.config, predicateAdder: m}
}

// ProductMappingFilter provides a generic filtering capability at runtime for ProductMappingQuery.
type ProductMappingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductMappingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ProductMappingFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(productmapping.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProductMappingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(productmapping.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProductMappingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(productmapping.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProductMappingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(productmapping.FieldDeletedAt))
}

// WherePlatformProductID applies the entql int64 predicate on the platform_product_id field.
func (f *ProductMappingFilter) WherePlatformProductID(p entql.Int64P) {
	f.Where(p.Field(productmapping.FieldPlatformProductID))
}

// WhereProductID applies the entql int64 predicate on the product_id field.
func (f *ProductMappingFilter) WhereProductID(p entql.Int64P) {
	f.Where(p.Field(productmapping.FieldProductID))
}

// WhereQty applies the entql int predicate on the qty field.
func (f *ProductMappingFilter) WhereQty(p entql.IntP) {
	f.Where(p.Field(productmapping.FieldQty))
}

// WhereCreatedBy applies the entql int64 predicate on the created_by field.
func (f *ProductMappingFilter) WhereCreatedBy(p entql.Int64P) {
	f.Where(p.Field(productmapping.FieldCreatedBy))
}

// WhereHasPlatformProducts applies a predicate to check if query has an edge platform_products.
func (f *ProductMappingFilter) WhereHasPlatformProducts() {
	f.Where(entql.HasEdge("platform_products"))
}

// WhereHasPlatformProductsWith applies a predicate to check if query has an edge platform_products with a given conditions (other predicates).
func (f *ProductMappingFilter) WhereHasPlatformProductsWith(preds ...predicate.PlatformProduct) {
	f.Where(entql.HasEdgeWith("platform_products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProducts applies a predicate to check if query has an edge products.
func (f *ProductMappingFilter) WhereHasProducts() {
	f.Where(entql.HasEdge("products"))
}

// WhereHasProductsWith applies a predicate to check if query has an edge products with a given conditions (other predicates).
func (f *ProductMappingFilter) WhereHasProductsWith(preds ...predicate.Product) {
	f.Where(entql.HasEdgeWith("products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SequenceQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SequenceQuery builder.
func (sq *SequenceQuery) Filter() *SequenceFilter {
	return &SequenceFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SequenceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SequenceMutation builder.
func (m *SequenceMutation) Filter() *SequenceFilter {
	return &SequenceFilter{config: m.config, predicateAdder: m}
}

// SequenceFilter provides a generic filtering capability at runtime for SequenceQuery.
type SequenceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SequenceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *SequenceFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(sequence.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SequenceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(sequence.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SequenceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(sequence.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SequenceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(sequence.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *SequenceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(sequence.FieldName))
}

// WherePrefix applies the entql string predicate on the prefix field.
func (f *SequenceFilter) WherePrefix(p entql.StringP) {
	f.Where(p.Field(sequence.FieldPrefix))
}

// WhereValue applies the entql int64 predicate on the value field.
func (f *SequenceFilter) WhereValue(p entql.Int64P) {
	f.Where(p.Field(sequence.FieldValue))
}

// WhereDisplayValue applies the entql string predicate on the display_value field.
func (f *SequenceFilter) WhereDisplayValue(p entql.StringP) {
	f.Where(p.Field(sequence.FieldDisplayValue))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *SequenceFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *SequenceFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *StoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StoreQuery builder.
func (sq *StoreQuery) Filter() *StoreFilter {
	return &StoreFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StoreMutation builder.
func (m *StoreMutation) Filter() *StoreFilter {
	return &StoreFilter{config: m.config, predicateAdder: m}
}

// StoreFilter provides a generic filtering capability at runtime for StoreQuery.
type StoreFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *StoreFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(store.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StoreFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StoreFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StoreFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldDeletedAt))
}

// WhereStoreURL applies the entql string predicate on the store_url field.
func (f *StoreFilter) WhereStoreURL(p entql.StringP) {
	f.Where(p.Field(store.FieldStoreURL))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *StoreFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(store.FieldPlatform))
}

// WhereName applies the entql string predicate on the name field.
func (f *StoreFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(store.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *StoreFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(store.FieldCode))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *StoreFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(store.FieldEmail))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *StoreFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(store.FieldAccessToken))
}

// WhereTimezoneOffset applies the entql int8 predicate on the timezone_offset field.
func (f *StoreFilter) WhereTimezoneOffset(p entql.Int8P) {
	f.Where(p.Field(store.FieldTimezoneOffset))
}

// WhereScope applies the entql string predicate on the scope field.
func (f *StoreFilter) WhereScope(p entql.StringP) {
	f.Where(p.Field(store.FieldScope))
}

// WhereLocationID applies the entql string predicate on the location_id field.
func (f *StoreFilter) WhereLocationID(p entql.StringP) {
	f.Where(p.Field(store.FieldLocationID))
}

// WhereLocations applies the entql string predicate on the locations field.
func (f *StoreFilter) WhereLocations(p entql.StringP) {
	f.Where(p.Field(store.FieldLocations))
}

// WhereStoreCurrency applies the entql string predicate on the store_currency field.
func (f *StoreFilter) WhereStoreCurrency(p entql.StringP) {
	f.Where(p.Field(store.FieldStoreCurrency))
}

// WhereInitialStatus applies the entql int8 predicate on the initial_status field.
func (f *StoreFilter) WhereInitialStatus(p entql.Int8P) {
	f.Where(p.Field(store.FieldInitialStatus))
}

// WhereState applies the entql string predicate on the state field.
func (f *StoreFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(store.FieldState))
}

// WhereTimestamp applies the entql int32 predicate on the timestamp field.
func (f *StoreFilter) WhereTimestamp(p entql.Int32P) {
	f.Where(p.Field(store.FieldTimestamp))
}

// WhereNonce applies the entql string predicate on the nonce field.
func (f *StoreFilter) WhereNonce(p entql.StringP) {
	f.Where(p.Field(store.FieldNonce))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *StoreFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(store.FieldBalance))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *StoreFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(store.FieldCurrency))
}

// WhereHandlingFee applies the entql float64 predicate on the handling_fee field.
func (f *StoreFilter) WhereHandlingFee(p entql.Float64P) {
	f.Where(p.Field(store.FieldHandlingFee))
}

// WhereShippingOption applies the entql int8 predicate on the shipping_option field.
func (f *StoreFilter) WhereShippingOption(p entql.Int8P) {
	f.Where(p.Field(store.FieldShippingOption))
}

// WhereDefaultWarehouse applies the entql int64 predicate on the default_warehouse field.
func (f *StoreFilter) WhereDefaultWarehouse(p entql.Int64P) {
	f.Where(p.Field(store.FieldDefaultWarehouse))
}

// WherePrepayTariff applies the entql int8 predicate on the prepay_tariff field.
func (f *StoreFilter) WherePrepayTariff(p entql.Int8P) {
	f.Where(p.Field(store.FieldPrepayTariff))
}

// WhereIossNumber applies the entql string predicate on the ioss_number field.
func (f *StoreFilter) WhereIossNumber(p entql.StringP) {
	f.Where(p.Field(store.FieldIossNumber))
}

// WhereIossCountryCode applies the entql string predicate on the ioss_country_code field.
func (f *StoreFilter) WhereIossCountryCode(p entql.StringP) {
	f.Where(p.Field(store.FieldIossCountryCode))
}

// WhereUkVatNumber applies the entql string predicate on the uk_vat_number field.
func (f *StoreFilter) WhereUkVatNumber(p entql.StringP) {
	f.Where(p.Field(store.FieldUkVatNumber))
}

// WhereStoreCode applies the entql string predicate on the store_code field.
func (f *StoreFilter) WhereStoreCode(p entql.StringP) {
	f.Where(p.Field(store.FieldStoreCode))
}

// WherePresetChannelIds applies the entql string predicate on the preset_channel_ids field.
func (f *StoreFilter) WherePresetChannelIds(p entql.StringP) {
	f.Where(p.Field(store.FieldPresetChannelIds))
}

// WhereTestChannelIds applies the entql string predicate on the test_channel_ids field.
func (f *StoreFilter) WhereTestChannelIds(p entql.StringP) {
	f.Where(p.Field(store.FieldTestChannelIds))
}

// WhereFirstInboundAt applies the entql time.Time predicate on the first_inbound_at field.
func (f *StoreFilter) WhereFirstInboundAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldFirstInboundAt))
}

// WhereStorageUnitPrice applies the entql float64 predicate on the storage_unit_price field.
func (f *StoreFilter) WhereStorageUnitPrice(p entql.Float64P) {
	f.Where(p.Field(store.FieldStorageUnitPrice))
}

// WhereIntegrationAt applies the entql time.Time predicate on the integration_at field.
func (f *StoreFilter) WhereIntegrationAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldIntegrationAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *StoreFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *StoreFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *StoreFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *StoreFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlatformProducts applies a predicate to check if query has an edge platform_products.
func (f *StoreFilter) WhereHasPlatformProducts() {
	f.Where(entql.HasEdge("platform_products"))
}

// WhereHasPlatformProductsWith applies a predicate to check if query has an edge platform_products with a given conditions (other predicates).
func (f *StoreFilter) WhereHasPlatformProductsWith(preds ...predicate.PlatformProduct) {
	f.Where(entql.HasEdgeWith("platform_products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tsq *TaskScheduleQuery) addPredicate(pred func(s *sql.Selector)) {
	tsq.predicates = append(tsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskScheduleQuery builder.
func (tsq *TaskScheduleQuery) Filter() *TaskScheduleFilter {
	return &TaskScheduleFilter{config: tsq.config, predicateAdder: tsq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskScheduleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskScheduleMutation builder.
func (m *TaskScheduleMutation) Filter() *TaskScheduleFilter {
	return &TaskScheduleFilter{config: m.config, predicateAdder: m}
}

// TaskScheduleFilter provides a generic filtering capability at runtime for TaskScheduleQuery.
type TaskScheduleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskScheduleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TaskScheduleFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(taskschedule.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TaskScheduleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(taskschedule.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TaskScheduleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(taskschedule.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TaskScheduleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(taskschedule.FieldDeletedAt))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *TaskScheduleFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(taskschedule.FieldPlatform))
}

// WhereStoreID applies the entql int64 predicate on the store_id field.
func (f *TaskScheduleFilter) WhereStoreID(p entql.Int64P) {
	f.Where(p.Field(taskschedule.FieldStoreID))
}

// WhereFuncName applies the entql string predicate on the func_name field.
func (f *TaskScheduleFilter) WhereFuncName(p entql.StringP) {
	f.Where(p.Field(taskschedule.FieldFuncName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *TaskScheduleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(taskschedule.FieldDescription))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *TaskScheduleFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(taskschedule.FieldLocked))
}

// WhereLockedTimes applies the entql int64 predicate on the locked_times field.
func (f *TaskScheduleFilter) WhereLockedTimes(p entql.Int64P) {
	f.Where(p.Field(taskschedule.FieldLockedTimes))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TaskScheduleFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(taskschedule.FieldRemark))
}

// WhereLastAccessAt applies the entql time.Time predicate on the last_access_at field.
func (f *TaskScheduleFilter) WhereLastAccessAt(p entql.TimeP) {
	f.Where(p.Field(taskschedule.FieldLastAccessAt))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *TaskScheduleFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(taskschedule.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (tq *TenantQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenantQuery builder.
func (tq *TenantQuery) Filter() *TenantFilter {
	return &TenantFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenantMutation builder.
func (m *TenantMutation) Filter() *TenantFilter {
	return &TenantFilter{config: m.config, predicateAdder: m}
}

// TenantFilter provides a generic filtering capability at runtime for TenantQuery.
type TenantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TenantFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(tenant.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TenantFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TenantFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TenantFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldDeletedAt))
}

// WhereCode applies the entql string predicate on the code field.
func (f *TenantFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(tenant.FieldCode))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *TenantFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(tenant.FieldBalance))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *TenantFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(tenant.FieldCurrency))
}

// WhereHandlingFee applies the entql float64 predicate on the handling_fee field.
func (f *TenantFilter) WhereHandlingFee(p entql.Float64P) {
	f.Where(p.Field(tenant.FieldHandlingFee))
}

// WhereShippingOption applies the entql int8 predicate on the shipping_option field.
func (f *TenantFilter) WhereShippingOption(p entql.Int8P) {
	f.Where(p.Field(tenant.FieldShippingOption))
}

// WherePrepayTariff applies the entql int8 predicate on the prepay_tariff field.
func (f *TenantFilter) WherePrepayTariff(p entql.Int8P) {
	f.Where(p.Field(tenant.FieldPrepayTariff))
}

// WhereIossNumber applies the entql string predicate on the ioss_number field.
func (f *TenantFilter) WhereIossNumber(p entql.StringP) {
	f.Where(p.Field(tenant.FieldIossNumber))
}

// WhereIossCountryCode applies the entql string predicate on the ioss_country_code field.
func (f *TenantFilter) WhereIossCountryCode(p entql.StringP) {
	f.Where(p.Field(tenant.FieldIossCountryCode))
}

// WhereUkVatNumber applies the entql string predicate on the uk_vat_number field.
func (f *TenantFilter) WhereUkVatNumber(p entql.StringP) {
	f.Where(p.Field(tenant.FieldUkVatNumber))
}

// WhereDefaultWarehouse applies the entql int64 predicate on the default_warehouse field.
func (f *TenantFilter) WhereDefaultWarehouse(p entql.Int64P) {
	f.Where(p.Field(tenant.FieldDefaultWarehouse))
}

// WherePresetChannelIds applies the entql string predicate on the preset_channel_ids field.
func (f *TenantFilter) WherePresetChannelIds(p entql.StringP) {
	f.Where(p.Field(tenant.FieldPresetChannelIds))
}

// WhereTestChannelIds applies the entql string predicate on the test_channel_ids field.
func (f *TenantFilter) WhereTestChannelIds(p entql.StringP) {
	f.Where(p.Field(tenant.FieldTestChannelIds))
}

// WhereFirstInboundAt applies the entql time.Time predicate on the first_inbound_at field.
func (f *TenantFilter) WhereFirstInboundAt(p entql.TimeP) {
	f.Where(p.Field(tenant.FieldFirstInboundAt))
}

// WhereStorageUnitPrice applies the entql float64 predicate on the storage_unit_price field.
func (f *TenantFilter) WhereStorageUnitPrice(p entql.Float64P) {
	f.Where(p.Field(tenant.FieldStorageUnitPrice))
}

// WhereCsUserID applies the entql int64 predicate on the cs_user_id field.
func (f *TenantFilter) WhereCsUserID(p entql.Int64P) {
	f.Where(p.Field(tenant.FieldCsUserID))
}

// WhereSalesUserID applies the entql int64 predicate on the sales_user_id field.
func (f *TenantFilter) WhereSalesUserID(p entql.Int64P) {
	f.Where(p.Field(tenant.FieldSalesUserID))
}

// WhereInviterUserID applies the entql int64 predicate on the inviter_user_id field.
func (f *TenantFilter) WhereInviterUserID(p entql.Int64P) {
	f.Where(p.Field(tenant.FieldInviterUserID))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *TenantFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(tenant.FieldPlatform))
}

// addPredicate implements the predicateAdder interface.
func (tq *TokenQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenQuery builder.
func (tq *TokenQuery) Filter() *TokenFilter {
	return &TokenFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenMutation builder.
func (m *TokenMutation) Filter() *TokenFilter {
	return &TokenFilter{config: m.config, predicateAdder: m}
}

// TokenFilter provides a generic filtering capability at runtime for TokenQuery.
type TokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TokenFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(token.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldDeletedAt))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *TokenFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(token.FieldPlatform))
}

// WhereToken applies the entql string predicate on the token field.
func (f *TokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(token.FieldToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *TokenFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(token.FieldRefreshToken))
}

// WherePin applies the entql string predicate on the pin field.
func (f *TokenFilter) WherePin(p entql.StringP) {
	f.Where(p.Field(token.FieldPin))
}

// WhereTraceID applies the entql string predicate on the trace_id field.
func (f *TokenFilter) WhereTraceID(p entql.StringP) {
	f.Where(p.Field(token.FieldTraceID))
}

// WhereTokenType applies the entql string predicate on the token_type field.
func (f *TokenFilter) WhereTokenType(p entql.StringP) {
	f.Where(p.Field(token.FieldTokenType))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *TokenFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(token.FieldStatus))
}

// WhereExpiredAt applies the entql string predicate on the expired_at field.
func (f *TokenFilter) WhereExpiredAt(p entql.StringP) {
	f.Where(p.Field(token.FieldExpiredAt))
}

// WhereRefreshExpiredAt applies the entql string predicate on the refresh_expired_at field.
func (f *TokenFilter) WhereRefreshExpiredAt(p entql.StringP) {
	f.Where(p.Field(token.FieldRefreshExpiredAt))
}

// WhereResponseAt applies the entql string predicate on the response_at field.
func (f *TokenFilter) WhereResponseAt(p entql.StringP) {
	f.Where(p.Field(token.FieldResponseAt))
}

// addPredicate implements the predicateAdder interface.
func (tmq *TrackMappingQuery) addPredicate(pred func(s *sql.Selector)) {
	tmq.predicates = append(tmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrackMappingQuery builder.
func (tmq *TrackMappingQuery) Filter() *TrackMappingFilter {
	return &TrackMappingFilter{config: tmq.config, predicateAdder: tmq}
}

// addPredicate implements the predicateAdder interface.
func (m *TrackMappingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrackMappingMutation builder.
func (m *TrackMappingMutation) Filter() *TrackMappingFilter {
	return &TrackMappingFilter{config: m.config, predicateAdder: m}
}

// TrackMappingFilter provides a generic filtering capability at runtime for TrackMappingQuery.
type TrackMappingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrackMappingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TrackMappingFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(trackmapping.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrackMappingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trackmapping.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TrackMappingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trackmapping.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TrackMappingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(trackmapping.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *TrackMappingFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(trackmapping.FieldOrderID))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *TrackMappingFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(trackmapping.FieldTrackingNumber))
}

// WhereTrackingURL applies the entql string predicate on the tracking_url field.
func (f *TrackMappingFilter) WhereTrackingURL(p entql.StringP) {
	f.Where(p.Field(trackmapping.FieldTrackingURL))
}

// WhereExtTrackingNumber applies the entql string predicate on the ext_tracking_number field.
func (f *TrackMappingFilter) WhereExtTrackingNumber(p entql.StringP) {
	f.Where(p.Field(trackmapping.FieldExtTrackingNumber))
}

// WhereTrackDetails applies the entql string predicate on the track_details field.
func (f *TrackMappingFilter) WhereTrackDetails(p entql.StringP) {
	f.Where(p.Field(trackmapping.FieldTrackDetails))
}

// WhereLastUpdatedAt applies the entql time.Time predicate on the last_updated_at field.
func (f *TrackMappingFilter) WhereLastUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(trackmapping.FieldLastUpdatedAt))
}

// WhereCourierPlatform applies the entql string predicate on the courier_platform field.
func (f *TrackMappingFilter) WhereCourierPlatform(p entql.StringP) {
	f.Where(p.Field(trackmapping.FieldCourierPlatform))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *TrackMappingFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(trackmapping.FieldStatus))
}

// WhereFlag applies the entql int8 predicate on the flag field.
func (f *TrackMappingFilter) WhereFlag(p entql.Int8P) {
	f.Where(p.Field(trackmapping.FieldFlag))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *TrackMappingFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *TrackMappingFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TransactionQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TransactionQuery builder.
func (tq *TransactionQuery) Filter() *TransactionFilter {
	return &TransactionFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TransactionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TransactionMutation builder.
func (m *TransactionMutation) Filter() *TransactionFilter {
	return &TransactionFilter{config: m.config, predicateAdder: m}
}

// TransactionFilter provides a generic filtering capability at runtime for TransactionQuery.
type TransactionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TransactionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TransactionFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(transaction.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TransactionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(transaction.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TransactionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(transaction.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TransactionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(transaction.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *TransactionFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(transaction.FieldOrderID))
}

// WhereTransactionType applies the entql string predicate on the transaction_type field.
func (f *TransactionFilter) WhereTransactionType(p entql.StringP) {
	f.Where(p.Field(transaction.FieldTransactionType))
}

// WhereTransactionAmount applies the entql float64 predicate on the transaction_amount field.
func (f *TransactionFilter) WhereTransactionAmount(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldTransactionAmount))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *TransactionFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldBalance))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TransactionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(transaction.FieldRemark))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *TransactionFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(transaction.FieldStatus))
}

// WhereCreatedBy applies the entql int8 predicate on the created_by field.
func (f *TransactionFilter) WhereCreatedBy(p entql.Int8P) {
	f.Where(p.Field(transaction.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int8 predicate on the updated_by field.
func (f *TransactionFilter) WhereUpdatedBy(p entql.Int8P) {
	f.Where(p.Field(transaction.FieldUpdatedBy))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *TransactionFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *TransactionFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDetails applies a predicate to check if query has an edge details.
func (f *TransactionFilter) WhereHasDetails() {
	f.Where(entql.HasEdge("details"))
}

// WhereHasDetailsWith applies a predicate to check if query has an edge details with a given conditions (other predicates).
func (f *TransactionFilter) WhereHasDetailsWith(preds ...predicate.TransactionDetail) {
	f.Where(entql.HasEdgeWith("details", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tdq *TransactionDetailQuery) addPredicate(pred func(s *sql.Selector)) {
	tdq.predicates = append(tdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TransactionDetailQuery builder.
func (tdq *TransactionDetailQuery) Filter() *TransactionDetailFilter {
	return &TransactionDetailFilter{config: tdq.config, predicateAdder: tdq}
}

// addPredicate implements the predicateAdder interface.
func (m *TransactionDetailMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TransactionDetailMutation builder.
func (m *TransactionDetailMutation) Filter() *TransactionDetailFilter {
	return &TransactionDetailFilter{config: m.config, predicateAdder: m}
}

// TransactionDetailFilter provides a generic filtering capability at runtime for TransactionDetailQuery.
type TransactionDetailFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TransactionDetailFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *TransactionDetailFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(transactiondetail.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TransactionDetailFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(transactiondetail.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TransactionDetailFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(transactiondetail.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TransactionDetailFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(transactiondetail.FieldDeletedAt))
}

// WhereOrderID applies the entql int64 predicate on the order_id field.
func (f *TransactionDetailFilter) WhereOrderID(p entql.Int64P) {
	f.Where(p.Field(transactiondetail.FieldOrderID))
}

// WhereTransactionID applies the entql int64 predicate on the transaction_id field.
func (f *TransactionDetailFilter) WhereTransactionID(p entql.Int64P) {
	f.Where(p.Field(transactiondetail.FieldTransactionID))
}

// WhereTransactionType applies the entql string predicate on the transaction_type field.
func (f *TransactionDetailFilter) WhereTransactionType(p entql.StringP) {
	f.Where(p.Field(transactiondetail.FieldTransactionType))
}

// WhereDeliveryCost applies the entql float64 predicate on the delivery_cost field.
func (f *TransactionDetailFilter) WhereDeliveryCost(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldDeliveryCost))
}

// WhereMiscFee applies the entql float64 predicate on the misc_fee field.
func (f *TransactionDetailFilter) WhereMiscFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldMiscFee))
}

// WhereFuelFee applies the entql float64 predicate on the fuel_fee field.
func (f *TransactionDetailFilter) WhereFuelFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldFuelFee))
}

// WhereRegistrationFee applies the entql float64 predicate on the registration_fee field.
func (f *TransactionDetailFilter) WhereRegistrationFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldRegistrationFee))
}

// WhereProcessingFee applies the entql float64 predicate on the processing_fee field.
func (f *TransactionDetailFilter) WhereProcessingFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldProcessingFee))
}

// WherePackageFee applies the entql float64 predicate on the package_fee field.
func (f *TransactionDetailFilter) WherePackageFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldPackageFee))
}

// WhereHandlingFee applies the entql float64 predicate on the handling_fee field.
func (f *TransactionDetailFilter) WhereHandlingFee(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldHandlingFee))
}

// WhereVat applies the entql float64 predicate on the vat field.
func (f *TransactionDetailFilter) WhereVat(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldVat))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *TransactionDetailFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(transactiondetail.FieldAmount))
}

// WhereWeight applies the entql int predicate on the weight field.
func (f *TransactionDetailFilter) WhereWeight(p entql.IntP) {
	f.Where(p.Field(transactiondetail.FieldWeight))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereType applies the entql string predicate on the type field.
func (f *UserFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(user.FieldType))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereSelectedWarehouseID applies the entql int64 predicate on the selected_warehouse_id field.
func (f *UserFilter) WhereSelectedWarehouseID(p entql.Int64P) {
	f.Where(p.Field(user.FieldSelectedWarehouseID))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereCode applies the entql string predicate on the code field.
func (f *UserFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(user.FieldCode))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereGuideFinished applies the entql bool predicate on the guide_finished field.
func (f *UserFilter) WhereGuideFinished(p entql.BoolP) {
	f.Where(p.Field(user.FieldGuideFinished))
}

// WhereGuideStatus applies the entql int predicate on the guide_status field.
func (f *UserFilter) WhereGuideStatus(p entql.IntP) {
	f.Where(p.Field(user.FieldGuideStatus))
}

// WhereHsObjectID applies the entql string predicate on the hs_object_id field.
func (f *UserFilter) WhereHsObjectID(p entql.StringP) {
	f.Where(p.Field(user.FieldHsObjectID))
}

// WhereQuestions applies the entql string predicate on the questions field.
func (f *UserFilter) WhereQuestions(p entql.StringP) {
	f.Where(p.Field(user.FieldQuestions))
}

// WhereLastLoggedTime applies the entql time.Time predicate on the last_logged_time field.
func (f *UserFilter) WhereLastLoggedTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLoggedTime))
}

// WhereWebsite applies the entql string predicate on the website field.
func (f *UserFilter) WhereWebsite(p entql.StringP) {
	f.Where(p.Field(user.FieldWebsite))
}

// WherePlatform applies the entql string predicate on the platform field.
func (f *UserFilter) WherePlatform(p entql.StringP) {
	f.Where(p.Field(user.FieldPlatform))
}

// WhereConcerns applies the entql string predicate on the concerns field.
func (f *UserFilter) WhereConcerns(p entql.StringP) {
	f.Where(p.Field(user.FieldConcerns))
}

// WhereStoreCode applies the entql string predicate on the store_code field.
func (f *UserFilter) WhereStoreCode(p entql.StringP) {
	f.Where(p.Field(user.FieldStoreCode))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WhereSource applies the entql string predicate on the source field.
func (f *UserFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(user.FieldSource))
}

// WhereSourceTag applies the entql string predicate on the source_tag field.
func (f *UserFilter) WhereSourceTag(p entql.StringP) {
	f.Where(p.Field(user.FieldSourceTag))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *UserFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *UserFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAnnouncements applies a predicate to check if query has an edge announcements.
func (f *UserFilter) WhereHasAnnouncements() {
	f.Where(entql.HasEdge("announcements"))
}

// WhereHasAnnouncementsWith applies a predicate to check if query has an edge announcements with a given conditions (other predicates).
func (f *UserFilter) WhereHasAnnouncementsWith(preds ...predicate.Announcements) {
	f.Where(entql.HasEdgeWith("announcements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (urq *UserReferralQuery) addPredicate(pred func(s *sql.Selector)) {
	urq.predicates = append(urq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserReferralQuery builder.
func (urq *UserReferralQuery) Filter() *UserReferralFilter {
	return &UserReferralFilter{config: urq.config, predicateAdder: urq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserReferralMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserReferralMutation builder.
func (m *UserReferralMutation) Filter() *UserReferralFilter {
	return &UserReferralFilter{config: m.config, predicateAdder: m}
}

// UserReferralFilter provides a generic filtering capability at runtime for UserReferralQuery.
type UserReferralFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserReferralFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserReferralFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(userreferral.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserReferralFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userreferral.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserReferralFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userreferral.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserReferralFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userreferral.FieldDeletedAt))
}

// WhereUserID applies the entql int64 predicate on the user_id field.
func (f *UserReferralFilter) WhereUserID(p entql.Int64P) {
	f.Where(p.Field(userreferral.FieldUserID))
}

// WhereFirstShipmentDate applies the entql time.Time predicate on the first_shipment_date field.
func (f *UserReferralFilter) WhereFirstShipmentDate(p entql.TimeP) {
	f.Where(p.Field(userreferral.FieldFirstShipmentDate))
}

// WhereTotalCommission applies the entql float64 predicate on the total_commission field.
func (f *UserReferralFilter) WhereTotalCommission(p entql.Float64P) {
	f.Where(p.Field(userreferral.FieldTotalCommission))
}

// WhereInvitedByUserID applies the entql int64 predicate on the invited_by_user_id field.
func (f *UserReferralFilter) WhereInvitedByUserID(p entql.Int64P) {
	f.Where(p.Field(userreferral.FieldInvitedByUserID))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *UserReferralFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(userreferral.FieldStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *UserReferralFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *UserReferralFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vatq *ValueAddedTaxQuery) addPredicate(pred func(s *sql.Selector)) {
	vatq.predicates = append(vatq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ValueAddedTaxQuery builder.
func (vatq *ValueAddedTaxQuery) Filter() *ValueAddedTaxFilter {
	return &ValueAddedTaxFilter{config: vatq.config, predicateAdder: vatq}
}

// addPredicate implements the predicateAdder interface.
func (m *ValueAddedTaxMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ValueAddedTaxMutation builder.
func (m *ValueAddedTaxMutation) Filter() *ValueAddedTaxFilter {
	return &ValueAddedTaxFilter{config: m.config, predicateAdder: m}
}

// ValueAddedTaxFilter provides a generic filtering capability at runtime for ValueAddedTaxQuery.
type ValueAddedTaxFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ValueAddedTaxFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ValueAddedTaxFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(valueaddedtax.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ValueAddedTaxFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(valueaddedtax.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ValueAddedTaxFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(valueaddedtax.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ValueAddedTaxFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(valueaddedtax.FieldDeletedAt))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *ValueAddedTaxFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(valueaddedtax.FieldCountryCode))
}

// WhereStandardRate applies the entql float64 predicate on the standard_rate field.
func (f *ValueAddedTaxFilter) WhereStandardRate(p entql.Float64P) {
	f.Where(p.Field(valueaddedtax.FieldStandardRate))
}

// WhereWithoutIossRate applies the entql float64 predicate on the without_ioss_rate field.
func (f *ValueAddedTaxFilter) WhereWithoutIossRate(p entql.Float64P) {
	f.Where(p.Field(valueaddedtax.FieldWithoutIossRate))
}

// WhereExemptionInUsd applies the entql float64 predicate on the exemption_in_usd field.
func (f *ValueAddedTaxFilter) WhereExemptionInUsd(p entql.Float64P) {
	f.Where(p.Field(valueaddedtax.FieldExemptionInUsd))
}

// addPredicate implements the predicateAdder interface.
func (wq *WarehouseQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WarehouseQuery builder.
func (wq *WarehouseQuery) Filter() *WarehouseFilter {
	return &WarehouseFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WarehouseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WarehouseMutation builder.
func (m *WarehouseMutation) Filter() *WarehouseFilter {
	return &WarehouseFilter{config: m.config, predicateAdder: m}
}

// WarehouseFilter provides a generic filtering capability at runtime for WarehouseQuery.
type WarehouseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WarehouseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *WarehouseFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(warehouse.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WarehouseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(warehouse.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WarehouseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(warehouse.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WarehouseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(warehouse.FieldDeletedAt))
}

// WhereCode applies the entql string predicate on the code field.
func (f *WarehouseFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldCode))
}

// WhereQuicktronCode applies the entql string predicate on the quicktron_code field.
func (f *WarehouseFilter) WhereQuicktronCode(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldQuicktronCode))
}

// WhereEnableQuicktron applies the entql int predicate on the enable_quicktron field.
func (f *WarehouseFilter) WhereEnableQuicktron(p entql.IntP) {
	f.Where(p.Field(warehouse.FieldEnableQuicktron))
}

// WhereName applies the entql string predicate on the name field.
func (f *WarehouseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldName))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *WarehouseFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldCompany))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *WarehouseFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *WarehouseFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldLastName))
}

// WhereAddress1 applies the entql string predicate on the address1 field.
func (f *WarehouseFilter) WhereAddress1(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldAddress1))
}

// WhereAddress2 applies the entql string predicate on the address2 field.
func (f *WarehouseFilter) WhereAddress2(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldAddress2))
}

// WhereCountryCode applies the entql string predicate on the country_code field.
func (f *WarehouseFilter) WhereCountryCode(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldCountryCode))
}

// WhereCountryName applies the entql string predicate on the country_name field.
func (f *WarehouseFilter) WhereCountryName(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldCountryName))
}

// WhereProvince applies the entql string predicate on the province field.
func (f *WarehouseFilter) WhereProvince(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldProvince))
}

// WhereCity applies the entql string predicate on the city field.
func (f *WarehouseFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldCity))
}

// WhereZipCode applies the entql string predicate on the zip_code field.
func (f *WarehouseFilter) WhereZipCode(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldZipCode))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *WarehouseFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(warehouse.FieldPhone))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *WarehouseFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(warehouse.FieldStatus))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *WarehouseFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *WarehouseFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
