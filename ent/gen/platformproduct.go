// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/platformproduct"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// PlatformProduct is the model entity for the PlatformProduct schema.
type PlatformProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID int64 `json:"store_id,omitempty"`
	// ListingID holds the value of the "listing_id" field.
	ListingID string `json:"listing_id,omitempty"`
	// CollectionID holds the value of the "collection_id" field.
	CollectionID string `json:"collection_id,omitempty"`
	// ListingSku holds the value of the "listing_sku" field.
	ListingSku string `json:"listing_sku,omitempty"`
	// Barcode holds the value of the "barcode" field.
	Barcode string `json:"barcode,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Images holds the value of the "images" field.
	Images string `json:"images,omitempty"`
	// Vendor holds the value of the "vendor" field.
	Vendor string `json:"vendor,omitempty"`
	// 售卖价 货币单位跟随store_currency
	SellingPrice float64 `json:"selling_price,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Grams holds the value of the "grams" field.
	Grams int `json:"grams,omitempty"`
	// 1=>使用中；0=>删除
	PlatformStatus int8 `json:"platform_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlatformProductQuery when eager-loading is set.
	Edges                   PlatformProductEdges `json:"edges"`
	platform_product_tenant *int64
}

// PlatformProductEdges holds the relations/edges for other nodes in the graph.
type PlatformProductEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ProductMappings holds the value of the product_mappings edge.
	ProductMappings []*ProductMapping `json:"product_mappings,omitempty"`
	// Stores holds the value of the stores edge.
	Stores *Store `json:"stores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformProductEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ProductMappingsOrErr returns the ProductMappings value or an error if the edge
// was not loaded in eager-loading.
func (e PlatformProductEdges) ProductMappingsOrErr() ([]*ProductMapping, error) {
	if e.loadedTypes[1] {
		return e.ProductMappings, nil
	}
	return nil, &NotLoadedError{edge: "product_mappings"}
}

// StoresOrErr returns the Stores value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlatformProductEdges) StoresOrErr() (*Store, error) {
	if e.loadedTypes[2] {
		if e.Stores == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Stores, nil
	}
	return nil, &NotLoadedError{edge: "stores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformproduct.FieldSellingPrice:
			values[i] = new(sql.NullFloat64)
		case platformproduct.FieldID, platformproduct.FieldStoreID, platformproduct.FieldGrams, platformproduct.FieldPlatformStatus:
			values[i] = new(sql.NullInt64)
		case platformproduct.FieldListingID, platformproduct.FieldCollectionID, platformproduct.FieldListingSku, platformproduct.FieldBarcode, platformproduct.FieldName, platformproduct.FieldImages, platformproduct.FieldVendor, platformproduct.FieldCurrency:
			values[i] = new(sql.NullString)
		case platformproduct.FieldCreatedAt, platformproduct.FieldUpdatedAt, platformproduct.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case platformproduct.ForeignKeys[0]: // platform_product_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlatformProduct", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformProduct fields.
func (pp *PlatformProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int64(value.Int64)
		case platformproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Time
			}
		case platformproduct.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Time
			}
		case platformproduct.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pp.DeletedAt = value.Time
			}
		case platformproduct.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				pp.StoreID = value.Int64
			}
		case platformproduct.FieldListingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_id", values[i])
			} else if value.Valid {
				pp.ListingID = value.String
			}
		case platformproduct.FieldCollectionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collection_id", values[i])
			} else if value.Valid {
				pp.CollectionID = value.String
			}
		case platformproduct.FieldListingSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listing_sku", values[i])
			} else if value.Valid {
				pp.ListingSku = value.String
			}
		case platformproduct.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				pp.Barcode = value.String
			}
		case platformproduct.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pp.Name = value.String
			}
		case platformproduct.FieldImages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value.Valid {
				pp.Images = value.String
			}
		case platformproduct.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				pp.Vendor = value.String
			}
		case platformproduct.FieldSellingPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field selling_price", values[i])
			} else if value.Valid {
				pp.SellingPrice = value.Float64
			}
		case platformproduct.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pp.Currency = value.String
			}
		case platformproduct.FieldGrams:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grams", values[i])
			} else if value.Valid {
				pp.Grams = int(value.Int64)
			}
		case platformproduct.FieldPlatformStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform_status", values[i])
			} else if value.Valid {
				pp.PlatformStatus = int8(value.Int64)
			}
		case platformproduct.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_product_tenant", value)
			} else if value.Valid {
				pp.platform_product_tenant = new(int64)
				*pp.platform_product_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the PlatformProduct entity.
func (pp *PlatformProduct) QueryTenant() *TenantQuery {
	return (&PlatformProductClient{config: pp.config}).QueryTenant(pp)
}

// QueryProductMappings queries the "product_mappings" edge of the PlatformProduct entity.
func (pp *PlatformProduct) QueryProductMappings() *ProductMappingQuery {
	return (&PlatformProductClient{config: pp.config}).QueryProductMappings(pp)
}

// QueryStores queries the "stores" edge of the PlatformProduct entity.
func (pp *PlatformProduct) QueryStores() *StoreQuery {
	return (&PlatformProductClient{config: pp.config}).QueryStores(pp)
}

// Update returns a builder for updating this PlatformProduct.
// Note that you need to call PlatformProduct.Unwrap() before calling this method if this PlatformProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PlatformProduct) Update() *PlatformProductUpdateOne {
	return (&PlatformProductClient{config: pp.config}).UpdateOne(pp)
}

// Unwrap unwraps the PlatformProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PlatformProduct) Unwrap() *PlatformProduct {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("gen: PlatformProduct is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PlatformProduct) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformProduct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.StoreID))
	builder.WriteString(", ")
	builder.WriteString("listing_id=")
	builder.WriteString(pp.ListingID)
	builder.WriteString(", ")
	builder.WriteString("collection_id=")
	builder.WriteString(pp.CollectionID)
	builder.WriteString(", ")
	builder.WriteString("listing_sku=")
	builder.WriteString(pp.ListingSku)
	builder.WriteString(", ")
	builder.WriteString("barcode=")
	builder.WriteString(pp.Barcode)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pp.Name)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(pp.Images)
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(pp.Vendor)
	builder.WriteString(", ")
	builder.WriteString("selling_price=")
	builder.WriteString(fmt.Sprintf("%v", pp.SellingPrice))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pp.Currency)
	builder.WriteString(", ")
	builder.WriteString("grams=")
	builder.WriteString(fmt.Sprintf("%v", pp.Grams))
	builder.WriteString(", ")
	builder.WriteString("platform_status=")
	builder.WriteString(fmt.Sprintf("%v", pp.PlatformStatus))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformProducts is a parsable slice of PlatformProduct.
type PlatformProducts []*PlatformProduct

func (pp PlatformProducts) config(cfg config) {
	for _i := range pp {
		pp[_i].config = cfg
	}
}
