// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/announcements"
	"github.com/heshaofeng1991/entgo/ent/gen/user"
)

// AnnouncementsCreate is the builder for creating a Announcements entity.
type AnnouncementsCreate struct {
	config
	mutation *AnnouncementsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AnnouncementsCreate) SetCreatedAt(t time.Time) *AnnouncementsCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableCreatedAt(t *time.Time) *AnnouncementsCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AnnouncementsCreate) SetUpdatedAt(t time.Time) *AnnouncementsCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableUpdatedAt(t *time.Time) *AnnouncementsCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AnnouncementsCreate) SetDeletedAt(t time.Time) *AnnouncementsCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableDeletedAt(t *time.Time) *AnnouncementsCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AnnouncementsCreate) SetTitle(s string) *AnnouncementsCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableTitle(s *string) *AnnouncementsCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetContent sets the "content" field.
func (ac *AnnouncementsCreate) SetContent(s string) *AnnouncementsCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableContent(s *string) *AnnouncementsCreate {
	if s != nil {
		ac.SetContent(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AnnouncementsCreate) SetStatus(i int) *AnnouncementsCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableStatus(i *int) *AnnouncementsCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetIndex sets the "index" field.
func (ac *AnnouncementsCreate) SetIndex(i int) *AnnouncementsCreate {
	ac.mutation.SetIndex(i)
	return ac
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableIndex(i *int) *AnnouncementsCreate {
	if i != nil {
		ac.SetIndex(*i)
	}
	return ac
}

// SetCreateBy sets the "create_by" field.
func (ac *AnnouncementsCreate) SetCreateBy(i int64) *AnnouncementsCreate {
	ac.mutation.SetCreateBy(i)
	return ac
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableCreateBy(i *int64) *AnnouncementsCreate {
	if i != nil {
		ac.SetCreateBy(*i)
	}
	return ac
}

// SetExpiration sets the "expiration" field.
func (ac *AnnouncementsCreate) SetExpiration(t time.Time) *AnnouncementsCreate {
	ac.mutation.SetExpiration(t)
	return ac
}

// SetEffectiveTime sets the "effective_time" field.
func (ac *AnnouncementsCreate) SetEffectiveTime(t time.Time) *AnnouncementsCreate {
	ac.mutation.SetEffectiveTime(t)
	return ac
}

// SetID sets the "id" field.
func (ac *AnnouncementsCreate) SetID(i int64) *AnnouncementsCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ac *AnnouncementsCreate) SetUsersID(id int64) *AnnouncementsCreate {
	ac.mutation.SetUsersID(id)
	return ac
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (ac *AnnouncementsCreate) SetNillableUsersID(id *int64) *AnnouncementsCreate {
	if id != nil {
		ac = ac.SetUsersID(*id)
	}
	return ac
}

// SetUsers sets the "users" edge to the User entity.
func (ac *AnnouncementsCreate) SetUsers(u *User) *AnnouncementsCreate {
	return ac.SetUsersID(u.ID)
}

// Mutation returns the AnnouncementsMutation object of the builder.
func (ac *AnnouncementsCreate) Mutation() *AnnouncementsMutation {
	return ac.mutation
}

// Save creates the Announcements in the database.
func (ac *AnnouncementsCreate) Save(ctx context.Context) (*Announcements, error) {
	var (
		err  error
		node *Announcements
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Announcements)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AnnouncementsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnouncementsCreate) SaveX(ctx context.Context) *Announcements {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnnouncementsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnnouncementsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AnnouncementsCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := announcements.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := announcements.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Title(); !ok {
		v := announcements.DefaultTitle
		ac.mutation.SetTitle(v)
	}
	if _, ok := ac.mutation.Content(); !ok {
		v := announcements.DefaultContent
		ac.mutation.SetContent(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := announcements.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Index(); !ok {
		v := announcements.DefaultIndex
		ac.mutation.SetIndex(v)
	}
	if _, ok := ac.mutation.CreateBy(); !ok {
		v := announcements.DefaultCreateBy
		ac.mutation.SetCreateBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnnouncementsCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Announcements.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Announcements.updated_at"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`gen: missing required field "Announcements.title"`)}
	}
	if _, ok := ac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`gen: missing required field "Announcements.content"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Announcements.status"`)}
	}
	if _, ok := ac.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`gen: missing required field "Announcements.index"`)}
	}
	if v, ok := ac.mutation.CreateBy(); ok {
		if err := announcements.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`gen: validator failed for field "Announcements.create_by": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`gen: missing required field "Announcements.expiration"`)}
	}
	if _, ok := ac.mutation.EffectiveTime(); !ok {
		return &ValidationError{Name: "effective_time", err: errors.New(`gen: missing required field "Announcements.effective_time"`)}
	}
	return nil
}

func (ac *AnnouncementsCreate) sqlSave(ctx context.Context) (*Announcements, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ac *AnnouncementsCreate) createSpec() (*Announcements, *sqlgraph.CreateSpec) {
	var (
		_node = &Announcements{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: announcements.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: announcements.FieldID,
			},
		}
	)
	_spec.Schema = ac.schemaConfig.Announcements
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(announcements.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(announcements.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(announcements.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.SetField(announcements.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.SetField(announcements.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(announcements.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Index(); ok {
		_spec.SetField(announcements.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := ac.mutation.Expiration(); ok {
		_spec.SetField(announcements.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if value, ok := ac.mutation.EffectiveTime(); ok {
		_spec.SetField(announcements.FieldEffectiveTime, field.TypeTime, value)
		_node.EffectiveTime = value
	}
	if nodes := ac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcements.UsersTable,
			Columns: []string{announcements.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		edge.Schema = ac.schemaConfig.Announcements
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreateBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcements.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AnnouncementsCreate) OnConflict(opts ...sql.ConflictOption) *AnnouncementsUpsertOne {
	ac.conflict = opts
	return &AnnouncementsUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcements.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AnnouncementsCreate) OnConflictColumns(columns ...string) *AnnouncementsUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementsUpsertOne{
		create: ac,
	}
}

type (
	// AnnouncementsUpsertOne is the builder for "upsert"-ing
	//  one Announcements node.
	AnnouncementsUpsertOne struct {
		create *AnnouncementsCreate
	}

	// AnnouncementsUpsert is the "OnConflict" setter.
	AnnouncementsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementsUpsert) SetUpdatedAt(v time.Time) *AnnouncementsUpsert {
	u.Set(announcements.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateUpdatedAt() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementsUpsert) SetDeletedAt(v time.Time) *AnnouncementsUpsert {
	u.Set(announcements.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateDeletedAt() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AnnouncementsUpsert) ClearDeletedAt() *AnnouncementsUpsert {
	u.SetNull(announcements.FieldDeletedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *AnnouncementsUpsert) SetTitle(v string) *AnnouncementsUpsert {
	u.Set(announcements.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateTitle() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *AnnouncementsUpsert) SetContent(v string) *AnnouncementsUpsert {
	u.Set(announcements.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateContent() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldContent)
	return u
}

// SetStatus sets the "status" field.
func (u *AnnouncementsUpsert) SetStatus(v int) *AnnouncementsUpsert {
	u.Set(announcements.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateStatus() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AnnouncementsUpsert) AddStatus(v int) *AnnouncementsUpsert {
	u.Add(announcements.FieldStatus, v)
	return u
}

// SetIndex sets the "index" field.
func (u *AnnouncementsUpsert) SetIndex(v int) *AnnouncementsUpsert {
	u.Set(announcements.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateIndex() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *AnnouncementsUpsert) AddIndex(v int) *AnnouncementsUpsert {
	u.Add(announcements.FieldIndex, v)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *AnnouncementsUpsert) SetCreateBy(v int64) *AnnouncementsUpsert {
	u.Set(announcements.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateCreateBy() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldCreateBy)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *AnnouncementsUpsert) ClearCreateBy() *AnnouncementsUpsert {
	u.SetNull(announcements.FieldCreateBy)
	return u
}

// SetExpiration sets the "expiration" field.
func (u *AnnouncementsUpsert) SetExpiration(v time.Time) *AnnouncementsUpsert {
	u.Set(announcements.FieldExpiration, v)
	return u
}

// UpdateExpiration sets the "expiration" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateExpiration() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldExpiration)
	return u
}

// SetEffectiveTime sets the "effective_time" field.
func (u *AnnouncementsUpsert) SetEffectiveTime(v time.Time) *AnnouncementsUpsert {
	u.Set(announcements.FieldEffectiveTime, v)
	return u
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *AnnouncementsUpsert) UpdateEffectiveTime() *AnnouncementsUpsert {
	u.SetExcluded(announcements.FieldEffectiveTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Announcements.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcements.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AnnouncementsUpsertOne) UpdateNewValues() *AnnouncementsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(announcements.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(announcements.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Announcements.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AnnouncementsUpsertOne) Ignore() *AnnouncementsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementsUpsertOne) DoNothing() *AnnouncementsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementsCreate.OnConflict
// documentation for more info.
func (u *AnnouncementsUpsertOne) Update(set func(*AnnouncementsUpsert)) *AnnouncementsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementsUpsertOne) SetUpdatedAt(v time.Time) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateUpdatedAt() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementsUpsertOne) SetDeletedAt(v time.Time) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateDeletedAt() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AnnouncementsUpsertOne) ClearDeletedAt() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementsUpsertOne) SetTitle(v string) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateTitle() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementsUpsertOne) SetContent(v string) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateContent() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *AnnouncementsUpsertOne) SetStatus(v int) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AnnouncementsUpsertOne) AddStatus(v int) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateStatus() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateStatus()
	})
}

// SetIndex sets the "index" field.
func (u *AnnouncementsUpsertOne) SetIndex(v int) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AnnouncementsUpsertOne) AddIndex(v int) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateIndex() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateIndex()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *AnnouncementsUpsertOne) SetCreateBy(v int64) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateCreateBy() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *AnnouncementsUpsertOne) ClearCreateBy() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.ClearCreateBy()
	})
}

// SetExpiration sets the "expiration" field.
func (u *AnnouncementsUpsertOne) SetExpiration(v time.Time) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetExpiration(v)
	})
}

// UpdateExpiration sets the "expiration" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateExpiration() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateExpiration()
	})
}

// SetEffectiveTime sets the "effective_time" field.
func (u *AnnouncementsUpsertOne) SetEffectiveTime(v time.Time) *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetEffectiveTime(v)
	})
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *AnnouncementsUpsertOne) UpdateEffectiveTime() *AnnouncementsUpsertOne {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateEffectiveTime()
	})
}

// Exec executes the query.
func (u *AnnouncementsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for AnnouncementsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnnouncementsUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnnouncementsUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnnouncementsCreateBulk is the builder for creating many Announcements entities in bulk.
type AnnouncementsCreateBulk struct {
	config
	builders []*AnnouncementsCreate
	conflict []sql.ConflictOption
}

// Save creates the Announcements entities in the database.
func (acb *AnnouncementsCreateBulk) Save(ctx context.Context) ([]*Announcements, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Announcements, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnnouncementsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnnouncementsCreateBulk) SaveX(ctx context.Context) []*Announcements {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnnouncementsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnnouncementsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Announcements.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnnouncementsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AnnouncementsCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnnouncementsUpsertBulk {
	acb.conflict = opts
	return &AnnouncementsUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Announcements.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AnnouncementsCreateBulk) OnConflictColumns(columns ...string) *AnnouncementsUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AnnouncementsUpsertBulk{
		create: acb,
	}
}

// AnnouncementsUpsertBulk is the builder for "upsert"-ing
// a bulk of Announcements nodes.
type AnnouncementsUpsertBulk struct {
	create *AnnouncementsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Announcements.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(announcements.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AnnouncementsUpsertBulk) UpdateNewValues() *AnnouncementsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(announcements.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(announcements.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Announcements.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AnnouncementsUpsertBulk) Ignore() *AnnouncementsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnnouncementsUpsertBulk) DoNothing() *AnnouncementsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnnouncementsCreateBulk.OnConflict
// documentation for more info.
func (u *AnnouncementsUpsertBulk) Update(set func(*AnnouncementsUpsert)) *AnnouncementsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnnouncementsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnnouncementsUpsertBulk) SetUpdatedAt(v time.Time) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateUpdatedAt() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AnnouncementsUpsertBulk) SetDeletedAt(v time.Time) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateDeletedAt() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AnnouncementsUpsertBulk) ClearDeletedAt() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTitle sets the "title" field.
func (u *AnnouncementsUpsertBulk) SetTitle(v string) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateTitle() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *AnnouncementsUpsertBulk) SetContent(v string) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateContent() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateContent()
	})
}

// SetStatus sets the "status" field.
func (u *AnnouncementsUpsertBulk) SetStatus(v int) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AnnouncementsUpsertBulk) AddStatus(v int) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateStatus() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateStatus()
	})
}

// SetIndex sets the "index" field.
func (u *AnnouncementsUpsertBulk) SetIndex(v int) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *AnnouncementsUpsertBulk) AddIndex(v int) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateIndex() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateIndex()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *AnnouncementsUpsertBulk) SetCreateBy(v int64) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateCreateBy() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *AnnouncementsUpsertBulk) ClearCreateBy() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.ClearCreateBy()
	})
}

// SetExpiration sets the "expiration" field.
func (u *AnnouncementsUpsertBulk) SetExpiration(v time.Time) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetExpiration(v)
	})
}

// UpdateExpiration sets the "expiration" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateExpiration() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateExpiration()
	})
}

// SetEffectiveTime sets the "effective_time" field.
func (u *AnnouncementsUpsertBulk) SetEffectiveTime(v time.Time) *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.SetEffectiveTime(v)
	})
}

// UpdateEffectiveTime sets the "effective_time" field to the value that was provided on create.
func (u *AnnouncementsUpsertBulk) UpdateEffectiveTime() *AnnouncementsUpsertBulk {
	return u.Update(func(s *AnnouncementsUpsert) {
		s.UpdateEffectiveTime()
	})
}

// Exec executes the query.
func (u *AnnouncementsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the AnnouncementsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for AnnouncementsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnnouncementsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
