// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/trackmapping"
)

// TrackMappingCreate is the builder for creating a TrackMapping entity.
type TrackMappingCreate struct {
	config
	mutation *TrackMappingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TrackMappingCreate) SetCreatedAt(t time.Time) *TrackMappingCreate {
	tmc.mutation.SetCreatedAt(t)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableCreatedAt(t *time.Time) *TrackMappingCreate {
	if t != nil {
		tmc.SetCreatedAt(*t)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TrackMappingCreate) SetUpdatedAt(t time.Time) *TrackMappingCreate {
	tmc.mutation.SetUpdatedAt(t)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableUpdatedAt(t *time.Time) *TrackMappingCreate {
	if t != nil {
		tmc.SetUpdatedAt(*t)
	}
	return tmc
}

// SetDeletedAt sets the "deleted_at" field.
func (tmc *TrackMappingCreate) SetDeletedAt(t time.Time) *TrackMappingCreate {
	tmc.mutation.SetDeletedAt(t)
	return tmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableDeletedAt(t *time.Time) *TrackMappingCreate {
	if t != nil {
		tmc.SetDeletedAt(*t)
	}
	return tmc
}

// SetOrderID sets the "order_id" field.
func (tmc *TrackMappingCreate) SetOrderID(i int64) *TrackMappingCreate {
	tmc.mutation.SetOrderID(i)
	return tmc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableOrderID(i *int64) *TrackMappingCreate {
	if i != nil {
		tmc.SetOrderID(*i)
	}
	return tmc
}

// SetTrackingNumber sets the "tracking_number" field.
func (tmc *TrackMappingCreate) SetTrackingNumber(s string) *TrackMappingCreate {
	tmc.mutation.SetTrackingNumber(s)
	return tmc
}

// SetTrackingURL sets the "tracking_url" field.
func (tmc *TrackMappingCreate) SetTrackingURL(s string) *TrackMappingCreate {
	tmc.mutation.SetTrackingURL(s)
	return tmc
}

// SetNillableTrackingURL sets the "tracking_url" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableTrackingURL(s *string) *TrackMappingCreate {
	if s != nil {
		tmc.SetTrackingURL(*s)
	}
	return tmc
}

// SetExtTrackingNumber sets the "ext_tracking_number" field.
func (tmc *TrackMappingCreate) SetExtTrackingNumber(s string) *TrackMappingCreate {
	tmc.mutation.SetExtTrackingNumber(s)
	return tmc
}

// SetTrackDetails sets the "track_details" field.
func (tmc *TrackMappingCreate) SetTrackDetails(s string) *TrackMappingCreate {
	tmc.mutation.SetTrackDetails(s)
	return tmc
}

// SetNillableTrackDetails sets the "track_details" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableTrackDetails(s *string) *TrackMappingCreate {
	if s != nil {
		tmc.SetTrackDetails(*s)
	}
	return tmc
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (tmc *TrackMappingCreate) SetLastUpdatedAt(t time.Time) *TrackMappingCreate {
	tmc.mutation.SetLastUpdatedAt(t)
	return tmc
}

// SetNillableLastUpdatedAt sets the "last_updated_at" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableLastUpdatedAt(t *time.Time) *TrackMappingCreate {
	if t != nil {
		tmc.SetLastUpdatedAt(*t)
	}
	return tmc
}

// SetCourierPlatform sets the "courier_platform" field.
func (tmc *TrackMappingCreate) SetCourierPlatform(s string) *TrackMappingCreate {
	tmc.mutation.SetCourierPlatform(s)
	return tmc
}

// SetNillableCourierPlatform sets the "courier_platform" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableCourierPlatform(s *string) *TrackMappingCreate {
	if s != nil {
		tmc.SetCourierPlatform(*s)
	}
	return tmc
}

// SetStatus sets the "status" field.
func (tmc *TrackMappingCreate) SetStatus(i int32) *TrackMappingCreate {
	tmc.mutation.SetStatus(i)
	return tmc
}

// SetFlag sets the "flag" field.
func (tmc *TrackMappingCreate) SetFlag(i int8) *TrackMappingCreate {
	tmc.mutation.SetFlag(i)
	return tmc
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableFlag(i *int8) *TrackMappingCreate {
	if i != nil {
		tmc.SetFlag(*i)
	}
	return tmc
}

// SetID sets the "id" field.
func (tmc *TrackMappingCreate) SetID(i int64) *TrackMappingCreate {
	tmc.mutation.SetID(i)
	return tmc
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (tmc *TrackMappingCreate) SetOrdersID(id int64) *TrackMappingCreate {
	tmc.mutation.SetOrdersID(id)
	return tmc
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (tmc *TrackMappingCreate) SetNillableOrdersID(id *int64) *TrackMappingCreate {
	if id != nil {
		tmc = tmc.SetOrdersID(*id)
	}
	return tmc
}

// SetOrders sets the "orders" edge to the Order entity.
func (tmc *TrackMappingCreate) SetOrders(o *Order) *TrackMappingCreate {
	return tmc.SetOrdersID(o.ID)
}

// Mutation returns the TrackMappingMutation object of the builder.
func (tmc *TrackMappingCreate) Mutation() *TrackMappingMutation {
	return tmc.mutation
}

// Save creates the TrackMapping in the database.
func (tmc *TrackMappingCreate) Save(ctx context.Context) (*TrackMapping, error) {
	var (
		err  error
		node *TrackMapping
	)
	tmc.defaults()
	if len(tmc.hooks) == 0 {
		if err = tmc.check(); err != nil {
			return nil, err
		}
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrackMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmc.check(); err != nil {
				return nil, err
			}
			tmc.mutation = mutation
			if node, err = tmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			if tmc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TrackMapping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TrackMappingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TrackMappingCreate) SaveX(ctx context.Context) *TrackMapping {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TrackMappingCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TrackMappingCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TrackMappingCreate) defaults() {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := trackmapping.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := trackmapping.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmc.mutation.TrackingURL(); !ok {
		v := trackmapping.DefaultTrackingURL
		tmc.mutation.SetTrackingURL(v)
	}
	if _, ok := tmc.mutation.CourierPlatform(); !ok {
		v := trackmapping.DefaultCourierPlatform
		tmc.mutation.SetCourierPlatform(v)
	}
	if _, ok := tmc.mutation.Flag(); !ok {
		v := trackmapping.DefaultFlag
		tmc.mutation.SetFlag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TrackMappingCreate) check() error {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "TrackMapping.created_at"`)}
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "TrackMapping.updated_at"`)}
	}
	if _, ok := tmc.mutation.TrackingNumber(); !ok {
		return &ValidationError{Name: "tracking_number", err: errors.New(`gen: missing required field "TrackMapping.tracking_number"`)}
	}
	if _, ok := tmc.mutation.TrackingURL(); !ok {
		return &ValidationError{Name: "tracking_url", err: errors.New(`gen: missing required field "TrackMapping.tracking_url"`)}
	}
	if _, ok := tmc.mutation.ExtTrackingNumber(); !ok {
		return &ValidationError{Name: "ext_tracking_number", err: errors.New(`gen: missing required field "TrackMapping.ext_tracking_number"`)}
	}
	if _, ok := tmc.mutation.CourierPlatform(); !ok {
		return &ValidationError{Name: "courier_platform", err: errors.New(`gen: missing required field "TrackMapping.courier_platform"`)}
	}
	if _, ok := tmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "TrackMapping.status"`)}
	}
	if _, ok := tmc.mutation.Flag(); !ok {
		return &ValidationError{Name: "flag", err: errors.New(`gen: missing required field "TrackMapping.flag"`)}
	}
	return nil
}

func (tmc *TrackMappingCreate) sqlSave(ctx context.Context) (*TrackMapping, error) {
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tmc *TrackMappingCreate) createSpec() (*TrackMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &TrackMapping{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: trackmapping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: trackmapping.FieldID,
			},
		}
	)
	_spec.Schema = tmc.schemaConfig.TrackMapping
	_spec.OnConflict = tmc.conflict
	if id, ok := tmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.SetField(trackmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.SetField(trackmapping.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tmc.mutation.DeletedAt(); ok {
		_spec.SetField(trackmapping.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tmc.mutation.TrackingNumber(); ok {
		_spec.SetField(trackmapping.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := tmc.mutation.TrackingURL(); ok {
		_spec.SetField(trackmapping.FieldTrackingURL, field.TypeString, value)
		_node.TrackingURL = value
	}
	if value, ok := tmc.mutation.ExtTrackingNumber(); ok {
		_spec.SetField(trackmapping.FieldExtTrackingNumber, field.TypeString, value)
		_node.ExtTrackingNumber = value
	}
	if value, ok := tmc.mutation.TrackDetails(); ok {
		_spec.SetField(trackmapping.FieldTrackDetails, field.TypeString, value)
		_node.TrackDetails = value
	}
	if value, ok := tmc.mutation.LastUpdatedAt(); ok {
		_spec.SetField(trackmapping.FieldLastUpdatedAt, field.TypeTime, value)
		_node.LastUpdatedAt = value
	}
	if value, ok := tmc.mutation.CourierPlatform(); ok {
		_spec.SetField(trackmapping.FieldCourierPlatform, field.TypeString, value)
		_node.CourierPlatform = value
	}
	if value, ok := tmc.mutation.Status(); ok {
		_spec.SetField(trackmapping.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := tmc.mutation.Flag(); ok {
		_spec.SetField(trackmapping.FieldFlag, field.TypeInt8, value)
		_node.Flag = value
	}
	if nodes := tmc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trackmapping.OrdersTable,
			Columns: []string{trackmapping.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = tmc.schemaConfig.TrackMapping
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrackMapping.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackMappingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tmc *TrackMappingCreate) OnConflict(opts ...sql.ConflictOption) *TrackMappingUpsertOne {
	tmc.conflict = opts
	return &TrackMappingUpsertOne{
		create: tmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmc *TrackMappingCreate) OnConflictColumns(columns ...string) *TrackMappingUpsertOne {
	tmc.conflict = append(tmc.conflict, sql.ConflictColumns(columns...))
	return &TrackMappingUpsertOne{
		create: tmc,
	}
}

type (
	// TrackMappingUpsertOne is the builder for "upsert"-ing
	//  one TrackMapping node.
	TrackMappingUpsertOne struct {
		create *TrackMappingCreate
	}

	// TrackMappingUpsert is the "OnConflict" setter.
	TrackMappingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackMappingUpsert) SetUpdatedAt(v time.Time) *TrackMappingUpsert {
	u.Set(trackmapping.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateUpdatedAt() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackMappingUpsert) SetDeletedAt(v time.Time) *TrackMappingUpsert {
	u.Set(trackmapping.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateDeletedAt() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackMappingUpsert) ClearDeletedAt() *TrackMappingUpsert {
	u.SetNull(trackmapping.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *TrackMappingUpsert) SetOrderID(v int64) *TrackMappingUpsert {
	u.Set(trackmapping.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateOrderID() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *TrackMappingUpsert) ClearOrderID() *TrackMappingUpsert {
	u.SetNull(trackmapping.FieldOrderID)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *TrackMappingUpsert) SetTrackingNumber(v string) *TrackMappingUpsert {
	u.Set(trackmapping.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateTrackingNumber() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldTrackingNumber)
	return u
}

// SetTrackingURL sets the "tracking_url" field.
func (u *TrackMappingUpsert) SetTrackingURL(v string) *TrackMappingUpsert {
	u.Set(trackmapping.FieldTrackingURL, v)
	return u
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateTrackingURL() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldTrackingURL)
	return u
}

// SetExtTrackingNumber sets the "ext_tracking_number" field.
func (u *TrackMappingUpsert) SetExtTrackingNumber(v string) *TrackMappingUpsert {
	u.Set(trackmapping.FieldExtTrackingNumber, v)
	return u
}

// UpdateExtTrackingNumber sets the "ext_tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateExtTrackingNumber() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldExtTrackingNumber)
	return u
}

// SetTrackDetails sets the "track_details" field.
func (u *TrackMappingUpsert) SetTrackDetails(v string) *TrackMappingUpsert {
	u.Set(trackmapping.FieldTrackDetails, v)
	return u
}

// UpdateTrackDetails sets the "track_details" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateTrackDetails() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldTrackDetails)
	return u
}

// ClearTrackDetails clears the value of the "track_details" field.
func (u *TrackMappingUpsert) ClearTrackDetails() *TrackMappingUpsert {
	u.SetNull(trackmapping.FieldTrackDetails)
	return u
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TrackMappingUpsert) SetLastUpdatedAt(v time.Time) *TrackMappingUpsert {
	u.Set(trackmapping.FieldLastUpdatedAt, v)
	return u
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateLastUpdatedAt() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldLastUpdatedAt)
	return u
}

// ClearLastUpdatedAt clears the value of the "last_updated_at" field.
func (u *TrackMappingUpsert) ClearLastUpdatedAt() *TrackMappingUpsert {
	u.SetNull(trackmapping.FieldLastUpdatedAt)
	return u
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *TrackMappingUpsert) SetCourierPlatform(v string) *TrackMappingUpsert {
	u.Set(trackmapping.FieldCourierPlatform, v)
	return u
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateCourierPlatform() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldCourierPlatform)
	return u
}

// SetStatus sets the "status" field.
func (u *TrackMappingUpsert) SetStatus(v int32) *TrackMappingUpsert {
	u.Set(trackmapping.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateStatus() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TrackMappingUpsert) AddStatus(v int32) *TrackMappingUpsert {
	u.Add(trackmapping.FieldStatus, v)
	return u
}

// SetFlag sets the "flag" field.
func (u *TrackMappingUpsert) SetFlag(v int8) *TrackMappingUpsert {
	u.Set(trackmapping.FieldFlag, v)
	return u
}

// UpdateFlag sets the "flag" field to the value that was provided on create.
func (u *TrackMappingUpsert) UpdateFlag() *TrackMappingUpsert {
	u.SetExcluded(trackmapping.FieldFlag)
	return u
}

// AddFlag adds v to the "flag" field.
func (u *TrackMappingUpsert) AddFlag(v int8) *TrackMappingUpsert {
	u.Add(trackmapping.FieldFlag, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trackmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrackMappingUpsertOne) UpdateNewValues() *TrackMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trackmapping.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trackmapping.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrackMappingUpsertOne) Ignore() *TrackMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackMappingUpsertOne) DoNothing() *TrackMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackMappingCreate.OnConflict
// documentation for more info.
func (u *TrackMappingUpsertOne) Update(set func(*TrackMappingUpsert)) *TrackMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackMappingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackMappingUpsertOne) SetUpdatedAt(v time.Time) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateUpdatedAt() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackMappingUpsertOne) SetDeletedAt(v time.Time) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateDeletedAt() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackMappingUpsertOne) ClearDeletedAt() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TrackMappingUpsertOne) SetOrderID(v int64) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateOrderID() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *TrackMappingUpsertOne) ClearOrderID() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearOrderID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *TrackMappingUpsertOne) SetTrackingNumber(v string) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateTrackingNumber() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetTrackingURL sets the "tracking_url" field.
func (u *TrackMappingUpsertOne) SetTrackingURL(v string) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackingURL(v)
	})
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateTrackingURL() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackingURL()
	})
}

// SetExtTrackingNumber sets the "ext_tracking_number" field.
func (u *TrackMappingUpsertOne) SetExtTrackingNumber(v string) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetExtTrackingNumber(v)
	})
}

// UpdateExtTrackingNumber sets the "ext_tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateExtTrackingNumber() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateExtTrackingNumber()
	})
}

// SetTrackDetails sets the "track_details" field.
func (u *TrackMappingUpsertOne) SetTrackDetails(v string) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackDetails(v)
	})
}

// UpdateTrackDetails sets the "track_details" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateTrackDetails() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackDetails()
	})
}

// ClearTrackDetails clears the value of the "track_details" field.
func (u *TrackMappingUpsertOne) ClearTrackDetails() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearTrackDetails()
	})
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TrackMappingUpsertOne) SetLastUpdatedAt(v time.Time) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetLastUpdatedAt(v)
	})
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateLastUpdatedAt() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateLastUpdatedAt()
	})
}

// ClearLastUpdatedAt clears the value of the "last_updated_at" field.
func (u *TrackMappingUpsertOne) ClearLastUpdatedAt() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearLastUpdatedAt()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *TrackMappingUpsertOne) SetCourierPlatform(v string) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateCourierPlatform() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetStatus sets the "status" field.
func (u *TrackMappingUpsertOne) SetStatus(v int32) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TrackMappingUpsertOne) AddStatus(v int32) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateStatus() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateStatus()
	})
}

// SetFlag sets the "flag" field.
func (u *TrackMappingUpsertOne) SetFlag(v int8) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetFlag(v)
	})
}

// AddFlag adds v to the "flag" field.
func (u *TrackMappingUpsertOne) AddFlag(v int8) *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.AddFlag(v)
	})
}

// UpdateFlag sets the "flag" field to the value that was provided on create.
func (u *TrackMappingUpsertOne) UpdateFlag() *TrackMappingUpsertOne {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateFlag()
	})
}

// Exec executes the query.
func (u *TrackMappingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TrackMappingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackMappingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrackMappingUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrackMappingUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrackMappingCreateBulk is the builder for creating many TrackMapping entities in bulk.
type TrackMappingCreateBulk struct {
	config
	builders []*TrackMappingCreate
	conflict []sql.ConflictOption
}

// Save creates the TrackMapping entities in the database.
func (tmcb *TrackMappingCreateBulk) Save(ctx context.Context) ([]*TrackMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TrackMapping, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrackMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TrackMappingCreateBulk) SaveX(ctx context.Context) []*TrackMapping {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TrackMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TrackMappingCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrackMapping.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackMappingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tmcb *TrackMappingCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrackMappingUpsertBulk {
	tmcb.conflict = opts
	return &TrackMappingUpsertBulk{
		create: tmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tmcb *TrackMappingCreateBulk) OnConflictColumns(columns ...string) *TrackMappingUpsertBulk {
	tmcb.conflict = append(tmcb.conflict, sql.ConflictColumns(columns...))
	return &TrackMappingUpsertBulk{
		create: tmcb,
	}
}

// TrackMappingUpsertBulk is the builder for "upsert"-ing
// a bulk of TrackMapping nodes.
type TrackMappingUpsertBulk struct {
	create *TrackMappingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trackmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrackMappingUpsertBulk) UpdateNewValues() *TrackMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trackmapping.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trackmapping.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrackMapping.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrackMappingUpsertBulk) Ignore() *TrackMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackMappingUpsertBulk) DoNothing() *TrackMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackMappingCreateBulk.OnConflict
// documentation for more info.
func (u *TrackMappingUpsertBulk) Update(set func(*TrackMappingUpsert)) *TrackMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackMappingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackMappingUpsertBulk) SetUpdatedAt(v time.Time) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateUpdatedAt() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackMappingUpsertBulk) SetDeletedAt(v time.Time) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateDeletedAt() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackMappingUpsertBulk) ClearDeletedAt() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TrackMappingUpsertBulk) SetOrderID(v int64) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateOrderID() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *TrackMappingUpsertBulk) ClearOrderID() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearOrderID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *TrackMappingUpsertBulk) SetTrackingNumber(v string) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateTrackingNumber() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackingNumber()
	})
}

// SetTrackingURL sets the "tracking_url" field.
func (u *TrackMappingUpsertBulk) SetTrackingURL(v string) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackingURL(v)
	})
}

// UpdateTrackingURL sets the "tracking_url" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateTrackingURL() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackingURL()
	})
}

// SetExtTrackingNumber sets the "ext_tracking_number" field.
func (u *TrackMappingUpsertBulk) SetExtTrackingNumber(v string) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetExtTrackingNumber(v)
	})
}

// UpdateExtTrackingNumber sets the "ext_tracking_number" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateExtTrackingNumber() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateExtTrackingNumber()
	})
}

// SetTrackDetails sets the "track_details" field.
func (u *TrackMappingUpsertBulk) SetTrackDetails(v string) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetTrackDetails(v)
	})
}

// UpdateTrackDetails sets the "track_details" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateTrackDetails() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateTrackDetails()
	})
}

// ClearTrackDetails clears the value of the "track_details" field.
func (u *TrackMappingUpsertBulk) ClearTrackDetails() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearTrackDetails()
	})
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TrackMappingUpsertBulk) SetLastUpdatedAt(v time.Time) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetLastUpdatedAt(v)
	})
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateLastUpdatedAt() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateLastUpdatedAt()
	})
}

// ClearLastUpdatedAt clears the value of the "last_updated_at" field.
func (u *TrackMappingUpsertBulk) ClearLastUpdatedAt() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.ClearLastUpdatedAt()
	})
}

// SetCourierPlatform sets the "courier_platform" field.
func (u *TrackMappingUpsertBulk) SetCourierPlatform(v string) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetCourierPlatform(v)
	})
}

// UpdateCourierPlatform sets the "courier_platform" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateCourierPlatform() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateCourierPlatform()
	})
}

// SetStatus sets the "status" field.
func (u *TrackMappingUpsertBulk) SetStatus(v int32) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TrackMappingUpsertBulk) AddStatus(v int32) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateStatus() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateStatus()
	})
}

// SetFlag sets the "flag" field.
func (u *TrackMappingUpsertBulk) SetFlag(v int8) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.SetFlag(v)
	})
}

// AddFlag adds v to the "flag" field.
func (u *TrackMappingUpsertBulk) AddFlag(v int8) *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.AddFlag(v)
	})
}

// UpdateFlag sets the "flag" field to the value that was provided on create.
func (u *TrackMappingUpsertBulk) UpdateFlag() *TrackMappingUpsertBulk {
	return u.Update(func(s *TrackMappingUpsert) {
		s.UpdateFlag()
	})
}

// Exec executes the query.
func (u *TrackMappingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the TrackMappingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TrackMappingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackMappingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
