// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/sequence"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// SequenceUpdate is the builder for updating Sequence entities.
type SequenceUpdate struct {
	config
	hooks     []Hook
	mutation  *SequenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SequenceUpdate builder.
func (su *SequenceUpdate) Where(ps ...predicate.Sequence) *SequenceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SequenceUpdate) SetUpdatedAt(t time.Time) *SequenceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SequenceUpdate) SetDeletedAt(t time.Time) *SequenceUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SequenceUpdate) SetNillableDeletedAt(t *time.Time) *SequenceUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SequenceUpdate) ClearDeletedAt() *SequenceUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetName sets the "name" field.
func (su *SequenceUpdate) SetName(s string) *SequenceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetPrefix sets the "prefix" field.
func (su *SequenceUpdate) SetPrefix(s string) *SequenceUpdate {
	su.mutation.SetPrefix(s)
	return su
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (su *SequenceUpdate) SetNillablePrefix(s *string) *SequenceUpdate {
	if s != nil {
		su.SetPrefix(*s)
	}
	return su
}

// SetValue sets the "value" field.
func (su *SequenceUpdate) SetValue(i int64) *SequenceUpdate {
	su.mutation.ResetValue()
	su.mutation.SetValue(i)
	return su
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (su *SequenceUpdate) SetNillableValue(i *int64) *SequenceUpdate {
	if i != nil {
		su.SetValue(*i)
	}
	return su
}

// AddValue adds i to the "value" field.
func (su *SequenceUpdate) AddValue(i int64) *SequenceUpdate {
	su.mutation.AddValue(i)
	return su
}

// SetDisplayValue sets the "display_value" field.
func (su *SequenceUpdate) SetDisplayValue(s string) *SequenceUpdate {
	su.mutation.SetDisplayValue(s)
	return su
}

// SetNillableDisplayValue sets the "display_value" field if the given value is not nil.
func (su *SequenceUpdate) SetNillableDisplayValue(s *string) *SequenceUpdate {
	if s != nil {
		su.SetDisplayValue(*s)
	}
	return su
}

// ClearDisplayValue clears the value of the "display_value" field.
func (su *SequenceUpdate) ClearDisplayValue() *SequenceUpdate {
	su.mutation.ClearDisplayValue()
	return su
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (su *SequenceUpdate) SetTenantID(id int64) *SequenceUpdate {
	su.mutation.SetTenantID(id)
	return su
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (su *SequenceUpdate) SetTenant(t *Tenant) *SequenceUpdate {
	return su.SetTenantID(t.ID)
}

// Mutation returns the SequenceMutation object of the builder.
func (su *SequenceUpdate) Mutation() *SequenceMutation {
	return su.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (su *SequenceUpdate) ClearTenant() *SequenceUpdate {
	su.mutation.ClearTenant()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SequenceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SequenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SequenceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SequenceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SequenceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SequenceUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if sequence.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized sequence.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := sequence.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SequenceUpdate) check() error {
	if _, ok := su.mutation.TenantID(); su.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Sequence.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SequenceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SequenceUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SequenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sequence.Table,
			Columns: sequence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sequence.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sequence.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(sequence.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(sequence.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sequence.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Prefix(); ok {
		_spec.SetField(sequence.FieldPrefix, field.TypeString, value)
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.SetField(sequence.FieldValue, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedValue(); ok {
		_spec.AddField(sequence.FieldValue, field.TypeInt64, value)
	}
	if value, ok := su.mutation.DisplayValue(); ok {
		_spec.SetField(sequence.FieldDisplayValue, field.TypeString, value)
	}
	if su.mutation.DisplayValueCleared() {
		_spec.ClearField(sequence.FieldDisplayValue, field.TypeString)
	}
	if su.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sequence.TenantTable,
			Columns: []string{sequence.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Sequence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sequence.TenantTable,
			Columns: []string{sequence.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = su.schemaConfig.Sequence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Sequence
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SequenceUpdateOne is the builder for updating a single Sequence entity.
type SequenceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SequenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SequenceUpdateOne) SetUpdatedAt(t time.Time) *SequenceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SequenceUpdateOne) SetDeletedAt(t time.Time) *SequenceUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SequenceUpdateOne) SetNillableDeletedAt(t *time.Time) *SequenceUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SequenceUpdateOne) ClearDeletedAt() *SequenceUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetName sets the "name" field.
func (suo *SequenceUpdateOne) SetName(s string) *SequenceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetPrefix sets the "prefix" field.
func (suo *SequenceUpdateOne) SetPrefix(s string) *SequenceUpdateOne {
	suo.mutation.SetPrefix(s)
	return suo
}

// SetNillablePrefix sets the "prefix" field if the given value is not nil.
func (suo *SequenceUpdateOne) SetNillablePrefix(s *string) *SequenceUpdateOne {
	if s != nil {
		suo.SetPrefix(*s)
	}
	return suo
}

// SetValue sets the "value" field.
func (suo *SequenceUpdateOne) SetValue(i int64) *SequenceUpdateOne {
	suo.mutation.ResetValue()
	suo.mutation.SetValue(i)
	return suo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (suo *SequenceUpdateOne) SetNillableValue(i *int64) *SequenceUpdateOne {
	if i != nil {
		suo.SetValue(*i)
	}
	return suo
}

// AddValue adds i to the "value" field.
func (suo *SequenceUpdateOne) AddValue(i int64) *SequenceUpdateOne {
	suo.mutation.AddValue(i)
	return suo
}

// SetDisplayValue sets the "display_value" field.
func (suo *SequenceUpdateOne) SetDisplayValue(s string) *SequenceUpdateOne {
	suo.mutation.SetDisplayValue(s)
	return suo
}

// SetNillableDisplayValue sets the "display_value" field if the given value is not nil.
func (suo *SequenceUpdateOne) SetNillableDisplayValue(s *string) *SequenceUpdateOne {
	if s != nil {
		suo.SetDisplayValue(*s)
	}
	return suo
}

// ClearDisplayValue clears the value of the "display_value" field.
func (suo *SequenceUpdateOne) ClearDisplayValue() *SequenceUpdateOne {
	suo.mutation.ClearDisplayValue()
	return suo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (suo *SequenceUpdateOne) SetTenantID(id int64) *SequenceUpdateOne {
	suo.mutation.SetTenantID(id)
	return suo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suo *SequenceUpdateOne) SetTenant(t *Tenant) *SequenceUpdateOne {
	return suo.SetTenantID(t.ID)
}

// Mutation returns the SequenceMutation object of the builder.
func (suo *SequenceUpdateOne) Mutation() *SequenceMutation {
	return suo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suo *SequenceUpdateOne) ClearTenant() *SequenceUpdateOne {
	suo.mutation.ClearTenant()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SequenceUpdateOne) Select(field string, fields ...string) *SequenceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sequence entity.
func (suo *SequenceUpdateOne) Save(ctx context.Context) (*Sequence, error) {
	var (
		err  error
		node *Sequence
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SequenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Sequence)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SequenceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SequenceUpdateOne) SaveX(ctx context.Context) *Sequence {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SequenceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SequenceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SequenceUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if sequence.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized sequence.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := sequence.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SequenceUpdateOne) check() error {
	if _, ok := suo.mutation.TenantID(); suo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Sequence.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SequenceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SequenceUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SequenceUpdateOne) sqlSave(ctx context.Context) (_node *Sequence, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sequence.Table,
			Columns: sequence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sequence.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Sequence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sequence.FieldID)
		for _, f := range fields {
			if !sequence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != sequence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sequence.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(sequence.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(sequence.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sequence.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Prefix(); ok {
		_spec.SetField(sequence.FieldPrefix, field.TypeString, value)
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.SetField(sequence.FieldValue, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedValue(); ok {
		_spec.AddField(sequence.FieldValue, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.DisplayValue(); ok {
		_spec.SetField(sequence.FieldDisplayValue, field.TypeString, value)
	}
	if suo.mutation.DisplayValueCleared() {
		_spec.ClearField(sequence.FieldDisplayValue, field.TypeString)
	}
	if suo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sequence.TenantTable,
			Columns: []string{sequence.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Sequence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sequence.TenantTable,
			Columns: []string{sequence.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = suo.schemaConfig.Sequence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Sequence
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Sequence{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
