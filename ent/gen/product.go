// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/product"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku string `json:"sku,omitempty"`
	// Barcode holds the value of the "barcode" field.
	Barcode string `json:"barcode,omitempty"`
	// CustomerCode holds the value of the "customer_code" field.
	CustomerCode string `json:"customer_code,omitempty"`
	// DeclaredName holds the value of the "declared_name" field.
	DeclaredName string `json:"declared_name,omitempty"`
	// DeclaredCnName holds the value of the "declared_cn_name" field.
	DeclaredCnName string `json:"declared_cn_name,omitempty"`
	// DeclaredValueInUsd holds the value of the "declared_value_in_usd" field.
	DeclaredValueInUsd float64 `json:"declared_value_in_usd,omitempty"`
	// DeclaredValueInEur holds the value of the "declared_value_in_eur" field.
	DeclaredValueInEur float64 `json:"declared_value_in_eur,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// HsCode holds the value of the "hs_code" field.
	HsCode string `json:"hs_code,omitempty"`
	// Material holds the value of the "material" field.
	Material string `json:"material,omitempty"`
	// Purpose holds the value of the "purpose" field.
	Purpose string `json:"purpose,omitempty"`
	// 产品自带barcode
	WithBarcode int8 `json:"with_barcode,omitempty"`
	// 是否代贴barcode服务
	BarcodeService int8 `json:"barcode_service,omitempty"`
	// 打印barcode选项
	BarcodeTemplate string `json:"barcode_template,omitempty"`
	// Images holds the value of the "images" field.
	Images string `json:"images,omitempty"`
	// 产品属性
	Attributes string `json:"attributes,omitempty"`
	// 已审核的产品属性
	ConfirmedAttributes string `json:"confirmed_attributes,omitempty"`
	// 来源客户
	Grams int `json:"grams,omitempty"`
	// 入库实重
	InboundGrams int `json:"inbound_grams,omitempty"`
	// Length holds the value of the "length" field.
	Length int `json:"length,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// AGV最大上架数量
	MaxAgvQty int `json:"max_agv_qty,omitempty"`
	// 1=>New, 10=>Normal
	Status int8 `json:"status,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges          ProductEdges `json:"edges"`
	product_tenant *int64
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Inventories holds the value of the inventories edge.
	Inventories []*Inventory `json:"inventories,omitempty"`
	// ProductMappings holds the value of the product_mappings edge.
	ProductMappings []*ProductMapping `json:"product_mappings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// InventoriesOrErr returns the Inventories value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) InventoriesOrErr() ([]*Inventory, error) {
	if e.loadedTypes[1] {
		return e.Inventories, nil
	}
	return nil, &NotLoadedError{edge: "inventories"}
}

// ProductMappingsOrErr returns the ProductMappings value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductMappingsOrErr() ([]*ProductMapping, error) {
	if e.loadedTypes[2] {
		return e.ProductMappings, nil
	}
	return nil, &NotLoadedError{edge: "product_mappings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldDeclaredValueInUsd, product.FieldDeclaredValueInEur:
			values[i] = new(sql.NullFloat64)
		case product.FieldID, product.FieldWithBarcode, product.FieldBarcodeService, product.FieldGrams, product.FieldInboundGrams, product.FieldLength, product.FieldWidth, product.FieldHeight, product.FieldMaxAgvQty, product.FieldStatus, product.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldSku, product.FieldBarcode, product.FieldCustomerCode, product.FieldDeclaredName, product.FieldDeclaredCnName, product.FieldCurrency, product.FieldHsCode, product.FieldMaterial, product.FieldPurpose, product.FieldBarcodeTemplate, product.FieldImages, product.FieldAttributes, product.FieldConfirmedAttributes:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt, product.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case product.ForeignKeys[0]: // product_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = value.Time
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				pr.Sku = value.String
			}
		case product.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				pr.Barcode = value.String
			}
		case product.FieldCustomerCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_code", values[i])
			} else if value.Valid {
				pr.CustomerCode = value.String
			}
		case product.FieldDeclaredName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field declared_name", values[i])
			} else if value.Valid {
				pr.DeclaredName = value.String
			}
		case product.FieldDeclaredCnName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field declared_cn_name", values[i])
			} else if value.Valid {
				pr.DeclaredCnName = value.String
			}
		case product.FieldDeclaredValueInUsd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field declared_value_in_usd", values[i])
			} else if value.Valid {
				pr.DeclaredValueInUsd = value.Float64
			}
		case product.FieldDeclaredValueInEur:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field declared_value_in_eur", values[i])
			} else if value.Valid {
				pr.DeclaredValueInEur = value.Float64
			}
		case product.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pr.Currency = value.String
			}
		case product.FieldHsCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hs_code", values[i])
			} else if value.Valid {
				pr.HsCode = value.String
			}
		case product.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				pr.Material = value.String
			}
		case product.FieldPurpose:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose", values[i])
			} else if value.Valid {
				pr.Purpose = value.String
			}
		case product.FieldWithBarcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field with_barcode", values[i])
			} else if value.Valid {
				pr.WithBarcode = int8(value.Int64)
			}
		case product.FieldBarcodeService:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field barcode_service", values[i])
			} else if value.Valid {
				pr.BarcodeService = int8(value.Int64)
			}
		case product.FieldBarcodeTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode_template", values[i])
			} else if value.Valid {
				pr.BarcodeTemplate = value.String
			}
		case product.FieldImages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value.Valid {
				pr.Images = value.String
			}
		case product.FieldAttributes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value.Valid {
				pr.Attributes = value.String
			}
		case product.FieldConfirmedAttributes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field confirmed_attributes", values[i])
			} else if value.Valid {
				pr.ConfirmedAttributes = value.String
			}
		case product.FieldGrams:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grams", values[i])
			} else if value.Valid {
				pr.Grams = int(value.Int64)
			}
		case product.FieldInboundGrams:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inbound_grams", values[i])
			} else if value.Valid {
				pr.InboundGrams = int(value.Int64)
			}
		case product.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				pr.Length = int(value.Int64)
			}
		case product.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				pr.Width = int(value.Int64)
			}
		case product.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pr.Height = int(value.Int64)
			}
		case product.FieldMaxAgvQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_agv_qty", values[i])
			} else if value.Valid {
				pr.MaxAgvQty = int(value.Int64)
			}
		case product.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = int8(value.Int64)
			}
		case product.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pr.CreatedBy = value.Int64
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_tenant", value)
			} else if value.Valid {
				pr.product_tenant = new(int64)
				*pr.product_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Product entity.
func (pr *Product) QueryTenant() *TenantQuery {
	return (&ProductClient{config: pr.config}).QueryTenant(pr)
}

// QueryInventories queries the "inventories" edge of the Product entity.
func (pr *Product) QueryInventories() *InventoryQuery {
	return (&ProductClient{config: pr.config}).QueryInventories(pr)
}

// QueryProductMappings queries the "product_mappings" edge of the Product entity.
func (pr *Product) QueryProductMappings() *ProductMappingQuery {
	return (&ProductClient{config: pr.config}).QueryProductMappings(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("gen: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(pr.Sku)
	builder.WriteString(", ")
	builder.WriteString("barcode=")
	builder.WriteString(pr.Barcode)
	builder.WriteString(", ")
	builder.WriteString("customer_code=")
	builder.WriteString(pr.CustomerCode)
	builder.WriteString(", ")
	builder.WriteString("declared_name=")
	builder.WriteString(pr.DeclaredName)
	builder.WriteString(", ")
	builder.WriteString("declared_cn_name=")
	builder.WriteString(pr.DeclaredCnName)
	builder.WriteString(", ")
	builder.WriteString("declared_value_in_usd=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeclaredValueInUsd))
	builder.WriteString(", ")
	builder.WriteString("declared_value_in_eur=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeclaredValueInEur))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pr.Currency)
	builder.WriteString(", ")
	builder.WriteString("hs_code=")
	builder.WriteString(pr.HsCode)
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(pr.Material)
	builder.WriteString(", ")
	builder.WriteString("purpose=")
	builder.WriteString(pr.Purpose)
	builder.WriteString(", ")
	builder.WriteString("with_barcode=")
	builder.WriteString(fmt.Sprintf("%v", pr.WithBarcode))
	builder.WriteString(", ")
	builder.WriteString("barcode_service=")
	builder.WriteString(fmt.Sprintf("%v", pr.BarcodeService))
	builder.WriteString(", ")
	builder.WriteString("barcode_template=")
	builder.WriteString(pr.BarcodeTemplate)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(pr.Images)
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(pr.Attributes)
	builder.WriteString(", ")
	builder.WriteString("confirmed_attributes=")
	builder.WriteString(pr.ConfirmedAttributes)
	builder.WriteString(", ")
	builder.WriteString("grams=")
	builder.WriteString(fmt.Sprintf("%v", pr.Grams))
	builder.WriteString(", ")
	builder.WriteString("inbound_grams=")
	builder.WriteString(fmt.Sprintf("%v", pr.InboundGrams))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", pr.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", pr.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", pr.Height))
	builder.WriteString(", ")
	builder.WriteString("max_agv_qty=")
	builder.WriteString(fmt.Sprintf("%v", pr.MaxAgvQty))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
