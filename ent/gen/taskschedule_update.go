// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/taskschedule"
)

// TaskScheduleUpdate is the builder for updating TaskSchedule entities.
type TaskScheduleUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskScheduleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskScheduleUpdate builder.
func (tsu *TaskScheduleUpdate) Where(ps ...predicate.TaskSchedule) *TaskScheduleUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TaskScheduleUpdate) SetUpdatedAt(t time.Time) *TaskScheduleUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tsu *TaskScheduleUpdate) SetDeletedAt(t time.Time) *TaskScheduleUpdate {
	tsu.mutation.SetDeletedAt(t)
	return tsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableDeletedAt(t *time.Time) *TaskScheduleUpdate {
	if t != nil {
		tsu.SetDeletedAt(*t)
	}
	return tsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsu *TaskScheduleUpdate) ClearDeletedAt() *TaskScheduleUpdate {
	tsu.mutation.ClearDeletedAt()
	return tsu
}

// SetPlatform sets the "platform" field.
func (tsu *TaskScheduleUpdate) SetPlatform(s string) *TaskScheduleUpdate {
	tsu.mutation.SetPlatform(s)
	return tsu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillablePlatform(s *string) *TaskScheduleUpdate {
	if s != nil {
		tsu.SetPlatform(*s)
	}
	return tsu
}

// SetStoreID sets the "store_id" field.
func (tsu *TaskScheduleUpdate) SetStoreID(i int64) *TaskScheduleUpdate {
	tsu.mutation.ResetStoreID()
	tsu.mutation.SetStoreID(i)
	return tsu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableStoreID(i *int64) *TaskScheduleUpdate {
	if i != nil {
		tsu.SetStoreID(*i)
	}
	return tsu
}

// AddStoreID adds i to the "store_id" field.
func (tsu *TaskScheduleUpdate) AddStoreID(i int64) *TaskScheduleUpdate {
	tsu.mutation.AddStoreID(i)
	return tsu
}

// ClearStoreID clears the value of the "store_id" field.
func (tsu *TaskScheduleUpdate) ClearStoreID() *TaskScheduleUpdate {
	tsu.mutation.ClearStoreID()
	return tsu
}

// SetFuncName sets the "func_name" field.
func (tsu *TaskScheduleUpdate) SetFuncName(s string) *TaskScheduleUpdate {
	tsu.mutation.SetFuncName(s)
	return tsu
}

// SetDescription sets the "description" field.
func (tsu *TaskScheduleUpdate) SetDescription(s string) *TaskScheduleUpdate {
	tsu.mutation.SetDescription(s)
	return tsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableDescription(s *string) *TaskScheduleUpdate {
	if s != nil {
		tsu.SetDescription(*s)
	}
	return tsu
}

// ClearDescription clears the value of the "description" field.
func (tsu *TaskScheduleUpdate) ClearDescription() *TaskScheduleUpdate {
	tsu.mutation.ClearDescription()
	return tsu
}

// SetLocked sets the "locked" field.
func (tsu *TaskScheduleUpdate) SetLocked(b bool) *TaskScheduleUpdate {
	tsu.mutation.SetLocked(b)
	return tsu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableLocked(b *bool) *TaskScheduleUpdate {
	if b != nil {
		tsu.SetLocked(*b)
	}
	return tsu
}

// SetLockedTimes sets the "locked_times" field.
func (tsu *TaskScheduleUpdate) SetLockedTimes(i int64) *TaskScheduleUpdate {
	tsu.mutation.ResetLockedTimes()
	tsu.mutation.SetLockedTimes(i)
	return tsu
}

// SetNillableLockedTimes sets the "locked_times" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableLockedTimes(i *int64) *TaskScheduleUpdate {
	if i != nil {
		tsu.SetLockedTimes(*i)
	}
	return tsu
}

// AddLockedTimes adds i to the "locked_times" field.
func (tsu *TaskScheduleUpdate) AddLockedTimes(i int64) *TaskScheduleUpdate {
	tsu.mutation.AddLockedTimes(i)
	return tsu
}

// SetRemark sets the "remark" field.
func (tsu *TaskScheduleUpdate) SetRemark(s string) *TaskScheduleUpdate {
	tsu.mutation.SetRemark(s)
	return tsu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableRemark(s *string) *TaskScheduleUpdate {
	if s != nil {
		tsu.SetRemark(*s)
	}
	return tsu
}

// ClearRemark clears the value of the "remark" field.
func (tsu *TaskScheduleUpdate) ClearRemark() *TaskScheduleUpdate {
	tsu.mutation.ClearRemark()
	return tsu
}

// SetLastAccessAt sets the "last_access_at" field.
func (tsu *TaskScheduleUpdate) SetLastAccessAt(t time.Time) *TaskScheduleUpdate {
	tsu.mutation.SetLastAccessAt(t)
	return tsu
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableLastAccessAt(t *time.Time) *TaskScheduleUpdate {
	if t != nil {
		tsu.SetLastAccessAt(*t)
	}
	return tsu
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (tsu *TaskScheduleUpdate) ClearLastAccessAt() *TaskScheduleUpdate {
	tsu.mutation.ClearLastAccessAt()
	return tsu
}

// SetStatus sets the "status" field.
func (tsu *TaskScheduleUpdate) SetStatus(i int8) *TaskScheduleUpdate {
	tsu.mutation.ResetStatus()
	tsu.mutation.SetStatus(i)
	return tsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsu *TaskScheduleUpdate) SetNillableStatus(i *int8) *TaskScheduleUpdate {
	if i != nil {
		tsu.SetStatus(*i)
	}
	return tsu
}

// AddStatus adds i to the "status" field.
func (tsu *TaskScheduleUpdate) AddStatus(i int8) *TaskScheduleUpdate {
	tsu.mutation.AddStatus(i)
	return tsu
}

// Mutation returns the TaskScheduleMutation object of the builder.
func (tsu *TaskScheduleUpdate) Mutation() *TaskScheduleMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TaskScheduleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tsu.defaults()
	if len(tsu.hooks) == 0 {
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			if tsu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TaskScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TaskScheduleUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TaskScheduleUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TaskScheduleUpdate) defaults() {
	if _, ok := tsu.mutation.UpdatedAt(); !ok {
		v := taskschedule.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsu *TaskScheduleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskScheduleUpdate {
	tsu.modifiers = append(tsu.modifiers, modifiers...)
	return tsu
}

func (tsu *TaskScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskschedule.Table,
			Columns: taskschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: taskschedule.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(taskschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.DeletedAt(); ok {
		_spec.SetField(taskschedule.FieldDeletedAt, field.TypeTime, value)
	}
	if tsu.mutation.DeletedAtCleared() {
		_spec.ClearField(taskschedule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.Platform(); ok {
		_spec.SetField(taskschedule.FieldPlatform, field.TypeString, value)
	}
	if value, ok := tsu.mutation.StoreID(); ok {
		_spec.SetField(taskschedule.FieldStoreID, field.TypeInt64, value)
	}
	if value, ok := tsu.mutation.AddedStoreID(); ok {
		_spec.AddField(taskschedule.FieldStoreID, field.TypeInt64, value)
	}
	if tsu.mutation.StoreIDCleared() {
		_spec.ClearField(taskschedule.FieldStoreID, field.TypeInt64)
	}
	if value, ok := tsu.mutation.FuncName(); ok {
		_spec.SetField(taskschedule.FieldFuncName, field.TypeString, value)
	}
	if value, ok := tsu.mutation.Description(); ok {
		_spec.SetField(taskschedule.FieldDescription, field.TypeString, value)
	}
	if tsu.mutation.DescriptionCleared() {
		_spec.ClearField(taskschedule.FieldDescription, field.TypeString)
	}
	if value, ok := tsu.mutation.Locked(); ok {
		_spec.SetField(taskschedule.FieldLocked, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.LockedTimes(); ok {
		_spec.SetField(taskschedule.FieldLockedTimes, field.TypeInt64, value)
	}
	if value, ok := tsu.mutation.AddedLockedTimes(); ok {
		_spec.AddField(taskschedule.FieldLockedTimes, field.TypeInt64, value)
	}
	if value, ok := tsu.mutation.Remark(); ok {
		_spec.SetField(taskschedule.FieldRemark, field.TypeString, value)
	}
	if tsu.mutation.RemarkCleared() {
		_spec.ClearField(taskschedule.FieldRemark, field.TypeString)
	}
	if value, ok := tsu.mutation.LastAccessAt(); ok {
		_spec.SetField(taskschedule.FieldLastAccessAt, field.TypeTime, value)
	}
	if tsu.mutation.LastAccessAtCleared() {
		_spec.ClearField(taskschedule.FieldLastAccessAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.Status(); ok {
		_spec.SetField(taskschedule.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tsu.mutation.AddedStatus(); ok {
		_spec.AddField(taskschedule.FieldStatus, field.TypeInt8, value)
	}
	_spec.Node.Schema = tsu.schemaConfig.TaskSchedule
	ctx = internal.NewSchemaConfigContext(ctx, tsu.schemaConfig)
	_spec.AddModifiers(tsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TaskScheduleUpdateOne is the builder for updating a single TaskSchedule entity.
type TaskScheduleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskScheduleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TaskScheduleUpdateOne) SetUpdatedAt(t time.Time) *TaskScheduleUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsuo *TaskScheduleUpdateOne) SetDeletedAt(t time.Time) *TaskScheduleUpdateOne {
	tsuo.mutation.SetDeletedAt(t)
	return tsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableDeletedAt(t *time.Time) *TaskScheduleUpdateOne {
	if t != nil {
		tsuo.SetDeletedAt(*t)
	}
	return tsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsuo *TaskScheduleUpdateOne) ClearDeletedAt() *TaskScheduleUpdateOne {
	tsuo.mutation.ClearDeletedAt()
	return tsuo
}

// SetPlatform sets the "platform" field.
func (tsuo *TaskScheduleUpdateOne) SetPlatform(s string) *TaskScheduleUpdateOne {
	tsuo.mutation.SetPlatform(s)
	return tsuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillablePlatform(s *string) *TaskScheduleUpdateOne {
	if s != nil {
		tsuo.SetPlatform(*s)
	}
	return tsuo
}

// SetStoreID sets the "store_id" field.
func (tsuo *TaskScheduleUpdateOne) SetStoreID(i int64) *TaskScheduleUpdateOne {
	tsuo.mutation.ResetStoreID()
	tsuo.mutation.SetStoreID(i)
	return tsuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableStoreID(i *int64) *TaskScheduleUpdateOne {
	if i != nil {
		tsuo.SetStoreID(*i)
	}
	return tsuo
}

// AddStoreID adds i to the "store_id" field.
func (tsuo *TaskScheduleUpdateOne) AddStoreID(i int64) *TaskScheduleUpdateOne {
	tsuo.mutation.AddStoreID(i)
	return tsuo
}

// ClearStoreID clears the value of the "store_id" field.
func (tsuo *TaskScheduleUpdateOne) ClearStoreID() *TaskScheduleUpdateOne {
	tsuo.mutation.ClearStoreID()
	return tsuo
}

// SetFuncName sets the "func_name" field.
func (tsuo *TaskScheduleUpdateOne) SetFuncName(s string) *TaskScheduleUpdateOne {
	tsuo.mutation.SetFuncName(s)
	return tsuo
}

// SetDescription sets the "description" field.
func (tsuo *TaskScheduleUpdateOne) SetDescription(s string) *TaskScheduleUpdateOne {
	tsuo.mutation.SetDescription(s)
	return tsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableDescription(s *string) *TaskScheduleUpdateOne {
	if s != nil {
		tsuo.SetDescription(*s)
	}
	return tsuo
}

// ClearDescription clears the value of the "description" field.
func (tsuo *TaskScheduleUpdateOne) ClearDescription() *TaskScheduleUpdateOne {
	tsuo.mutation.ClearDescription()
	return tsuo
}

// SetLocked sets the "locked" field.
func (tsuo *TaskScheduleUpdateOne) SetLocked(b bool) *TaskScheduleUpdateOne {
	tsuo.mutation.SetLocked(b)
	return tsuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableLocked(b *bool) *TaskScheduleUpdateOne {
	if b != nil {
		tsuo.SetLocked(*b)
	}
	return tsuo
}

// SetLockedTimes sets the "locked_times" field.
func (tsuo *TaskScheduleUpdateOne) SetLockedTimes(i int64) *TaskScheduleUpdateOne {
	tsuo.mutation.ResetLockedTimes()
	tsuo.mutation.SetLockedTimes(i)
	return tsuo
}

// SetNillableLockedTimes sets the "locked_times" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableLockedTimes(i *int64) *TaskScheduleUpdateOne {
	if i != nil {
		tsuo.SetLockedTimes(*i)
	}
	return tsuo
}

// AddLockedTimes adds i to the "locked_times" field.
func (tsuo *TaskScheduleUpdateOne) AddLockedTimes(i int64) *TaskScheduleUpdateOne {
	tsuo.mutation.AddLockedTimes(i)
	return tsuo
}

// SetRemark sets the "remark" field.
func (tsuo *TaskScheduleUpdateOne) SetRemark(s string) *TaskScheduleUpdateOne {
	tsuo.mutation.SetRemark(s)
	return tsuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableRemark(s *string) *TaskScheduleUpdateOne {
	if s != nil {
		tsuo.SetRemark(*s)
	}
	return tsuo
}

// ClearRemark clears the value of the "remark" field.
func (tsuo *TaskScheduleUpdateOne) ClearRemark() *TaskScheduleUpdateOne {
	tsuo.mutation.ClearRemark()
	return tsuo
}

// SetLastAccessAt sets the "last_access_at" field.
func (tsuo *TaskScheduleUpdateOne) SetLastAccessAt(t time.Time) *TaskScheduleUpdateOne {
	tsuo.mutation.SetLastAccessAt(t)
	return tsuo
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableLastAccessAt(t *time.Time) *TaskScheduleUpdateOne {
	if t != nil {
		tsuo.SetLastAccessAt(*t)
	}
	return tsuo
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (tsuo *TaskScheduleUpdateOne) ClearLastAccessAt() *TaskScheduleUpdateOne {
	tsuo.mutation.ClearLastAccessAt()
	return tsuo
}

// SetStatus sets the "status" field.
func (tsuo *TaskScheduleUpdateOne) SetStatus(i int8) *TaskScheduleUpdateOne {
	tsuo.mutation.ResetStatus()
	tsuo.mutation.SetStatus(i)
	return tsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsuo *TaskScheduleUpdateOne) SetNillableStatus(i *int8) *TaskScheduleUpdateOne {
	if i != nil {
		tsuo.SetStatus(*i)
	}
	return tsuo
}

// AddStatus adds i to the "status" field.
func (tsuo *TaskScheduleUpdateOne) AddStatus(i int8) *TaskScheduleUpdateOne {
	tsuo.mutation.AddStatus(i)
	return tsuo
}

// Mutation returns the TaskScheduleMutation object of the builder.
func (tsuo *TaskScheduleUpdateOne) Mutation() *TaskScheduleMutation {
	return tsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TaskScheduleUpdateOne) Select(field string, fields ...string) *TaskScheduleUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TaskSchedule entity.
func (tsuo *TaskScheduleUpdateOne) Save(ctx context.Context) (*TaskSchedule, error) {
	var (
		err  error
		node *TaskSchedule
	)
	tsuo.defaults()
	if len(tsuo.hooks) == 0 {
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			if tsuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TaskSchedule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TaskScheduleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TaskScheduleUpdateOne) SaveX(ctx context.Context) *TaskSchedule {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TaskScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TaskScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TaskScheduleUpdateOne) defaults() {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok {
		v := taskschedule.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsuo *TaskScheduleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskScheduleUpdateOne {
	tsuo.modifiers = append(tsuo.modifiers, modifiers...)
	return tsuo
}

func (tsuo *TaskScheduleUpdateOne) sqlSave(ctx context.Context) (_node *TaskSchedule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskschedule.Table,
			Columns: taskschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: taskschedule.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "TaskSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskschedule.FieldID)
		for _, f := range fields {
			if !taskschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != taskschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.DeletedAt(); ok {
		_spec.SetField(taskschedule.FieldDeletedAt, field.TypeTime, value)
	}
	if tsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(taskschedule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.Platform(); ok {
		_spec.SetField(taskschedule.FieldPlatform, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.StoreID(); ok {
		_spec.SetField(taskschedule.FieldStoreID, field.TypeInt64, value)
	}
	if value, ok := tsuo.mutation.AddedStoreID(); ok {
		_spec.AddField(taskschedule.FieldStoreID, field.TypeInt64, value)
	}
	if tsuo.mutation.StoreIDCleared() {
		_spec.ClearField(taskschedule.FieldStoreID, field.TypeInt64)
	}
	if value, ok := tsuo.mutation.FuncName(); ok {
		_spec.SetField(taskschedule.FieldFuncName, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.Description(); ok {
		_spec.SetField(taskschedule.FieldDescription, field.TypeString, value)
	}
	if tsuo.mutation.DescriptionCleared() {
		_spec.ClearField(taskschedule.FieldDescription, field.TypeString)
	}
	if value, ok := tsuo.mutation.Locked(); ok {
		_spec.SetField(taskschedule.FieldLocked, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.LockedTimes(); ok {
		_spec.SetField(taskschedule.FieldLockedTimes, field.TypeInt64, value)
	}
	if value, ok := tsuo.mutation.AddedLockedTimes(); ok {
		_spec.AddField(taskschedule.FieldLockedTimes, field.TypeInt64, value)
	}
	if value, ok := tsuo.mutation.Remark(); ok {
		_spec.SetField(taskschedule.FieldRemark, field.TypeString, value)
	}
	if tsuo.mutation.RemarkCleared() {
		_spec.ClearField(taskschedule.FieldRemark, field.TypeString)
	}
	if value, ok := tsuo.mutation.LastAccessAt(); ok {
		_spec.SetField(taskschedule.FieldLastAccessAt, field.TypeTime, value)
	}
	if tsuo.mutation.LastAccessAtCleared() {
		_spec.ClearField(taskschedule.FieldLastAccessAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.Status(); ok {
		_spec.SetField(taskschedule.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tsuo.mutation.AddedStatus(); ok {
		_spec.AddField(taskschedule.FieldStatus, field.TypeInt8, value)
	}
	_spec.Node.Schema = tsuo.schemaConfig.TaskSchedule
	ctx = internal.NewSchemaConfigContext(ctx, tsuo.schemaConfig)
	_spec.AddModifiers(tsuo.modifiers...)
	_node = &TaskSchedule{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
