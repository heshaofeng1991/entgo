// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/store"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// OrderNumber holds the value of the "order_number" field.
	OrderNumber string `json:"order_number,omitempty"`
	// Mode holds the value of the "mode" field.
	Mode int8 `json:"mode,omitempty"`
	// Type holds the value of the "type" field.
	Type int8 `json:"type,omitempty"`
	// Offline holds the value of the "offline" field.
	Offline bool `json:"offline,omitempty"`
	// StoreID holds the value of the "store_id" field.
	StoreID int64 `json:"store_id,omitempty"`
	// WarehouseID holds the value of the "warehouse_id" field.
	WarehouseID int64 `json:"warehouse_id,omitempty"`
	// CustomerCode holds the value of the "customer_code" field.
	CustomerCode string `json:"customer_code,omitempty"`
	// PrepayTariff holds the value of the "prepay_tariff" field.
	PrepayTariff bool `json:"prepay_tariff,omitempty"`
	// IossNumber holds the value of the "ioss_number" field.
	IossNumber string `json:"ioss_number,omitempty"`
	// IossCountryCode holds the value of the "ioss_country_code" field.
	IossCountryCode string `json:"ioss_country_code,omitempty"`
	// IossNumberType holds the value of the "ioss_number_type" field.
	IossNumberType int8 `json:"ioss_number_type,omitempty"`
	// UkVatNumber holds the value of the "uk_vat_number" field.
	UkVatNumber string `json:"uk_vat_number,omitempty"`
	// InboundOrderNumber holds the value of the "inbound_order_number" field.
	InboundOrderNumber string `json:"inbound_order_number,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// SqsStatus holds the value of the "sqs_status" field.
	SqsStatus bool `json:"sqs_status,omitempty"`
	// HoldStatus holds the value of the "hold_status" field.
	HoldStatus bool `json:"hold_status,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus int8 `json:"payment_status,omitempty"`
	// CancelRequest holds the value of the "cancel_request" field.
	CancelRequest int8 `json:"cancel_request,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// PlatformOrderID holds the value of the "platform_order_id" field.
	PlatformOrderID string `json:"platform_order_id,omitempty"`
	// PlatformOrderNo holds the value of the "platform_order_no" field.
	PlatformOrderNo string `json:"platform_order_no,omitempty"`
	// PlatformOrderStatusURL holds the value of the "platform_order_status_url" field.
	PlatformOrderStatusURL string `json:"platform_order_status_url,omitempty"`
	// PlatformStatus holds the value of the "platform_status" field.
	PlatformStatus string `json:"platform_status,omitempty"`
	// PaidStatus holds the value of the "paid_status" field.
	PaidStatus string `json:"paid_status,omitempty"`
	// FulfillmentPushed holds the value of the "fulfillment_pushed" field.
	FulfillmentPushed bool `json:"fulfillment_pushed,omitempty"`
	// FulfillmentStatus holds the value of the "fulfillment_status" field.
	FulfillmentStatus string `json:"fulfillment_status,omitempty"`
	// PlatformCreatedAt holds the value of the "platform_created_at" field.
	PlatformCreatedAt *time.Time `json:"platform_created_at,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID string `json:"location_id,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags *string `json:"tags,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// CancelReason holds the value of the "cancel_reason" field.
	CancelReason string `json:"cancel_reason,omitempty"`
	// CancelledAt holds the value of the "cancelled_at" field.
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt *time.Time `json:"closed_at,omitempty"`
	// ContactEmail holds the value of the "contact_email" field.
	ContactEmail string `json:"contact_email,omitempty"`
	// ContactPhone holds the value of the "contact_phone" field.
	ContactPhone string `json:"contact_phone,omitempty"`
	// ShippingName holds the value of the "shipping_name" field.
	ShippingName string `json:"shipping_name,omitempty"`
	// ShippingFirstName holds the value of the "shipping_first_name" field.
	ShippingFirstName string `json:"shipping_first_name,omitempty"`
	// ShippingLastName holds the value of the "shipping_last_name" field.
	ShippingLastName string `json:"shipping_last_name,omitempty"`
	// ShippingCompany holds the value of the "shipping_company" field.
	ShippingCompany string `json:"shipping_company,omitempty"`
	// ShippingCountry holds the value of the "shipping_country" field.
	ShippingCountry string `json:"shipping_country,omitempty"`
	// ShippingCountryCode holds the value of the "shipping_country_code" field.
	ShippingCountryCode string `json:"shipping_country_code,omitempty"`
	// ShippingProvince holds the value of the "shipping_province" field.
	ShippingProvince string `json:"shipping_province,omitempty"`
	// ShippingProvinceCode holds the value of the "shipping_province_code" field.
	ShippingProvinceCode string `json:"shipping_province_code,omitempty"`
	// ShippingCity holds the value of the "shipping_city" field.
	ShippingCity string `json:"shipping_city,omitempty"`
	// ShippingAddress1 holds the value of the "shipping_address1" field.
	ShippingAddress1 string `json:"shipping_address1,omitempty"`
	// ShippingAddress2 holds the value of the "shipping_address2" field.
	ShippingAddress2 string `json:"shipping_address2,omitempty"`
	// ShippingZipCode holds the value of the "shipping_zip_code" field.
	ShippingZipCode string `json:"shipping_zip_code,omitempty"`
	// ShippingPhone holds the value of the "shipping_phone" field.
	ShippingPhone string `json:"shipping_phone,omitempty"`
	// ShippingCertificateType holds the value of the "shipping_certificate_type" field.
	ShippingCertificateType string `json:"shipping_certificate_type,omitempty"`
	// ShippingCertificateCode holds the value of the "shipping_certificate_code" field.
	ShippingCertificateCode string `json:"shipping_certificate_code,omitempty"`
	// ShippingCredentialsPeriod holds the value of the "shipping_credentials_period" field.
	ShippingCredentialsPeriod string `json:"shipping_credentials_period,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// prefer 渠道类型
	PreferShippedType int8 `json:"prefer_shipped_type,omitempty"`
	// prefer 渠道ID
	PreferChannelID int64 `json:"prefer_channel_id,omitempty"`
	// ChannelOptions holds the value of the "channel_options" field.
	ChannelOptions string `json:"channel_options,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int64 `json:"channel_id,omitempty"`
	// ChannelCostID holds the value of the "channel_cost_id" field.
	ChannelCostID int64 `json:"channel_cost_id,omitempty"`
	// 出货类型 1、传统库位出 2、AGV库位
	ShipType int8 `json:"ship_type,omitempty"`
	// TrackingCompany holds the value of the "tracking_company" field.
	TrackingCompany string `json:"tracking_company,omitempty"`
	// TrackingNumber holds the value of the "tracking_number" field.
	TrackingNumber string `json:"tracking_number,omitempty"`
	// TrackingURL holds the value of the "tracking_url" field.
	TrackingURL string `json:"tracking_url,omitempty"`
	// WaybillNumber holds the value of the "waybill_number" field.
	WaybillNumber string `json:"waybill_number,omitempty"`
	// CourierOrderNumber holds the value of the "courier_order_number" field.
	CourierOrderNumber string `json:"courier_order_number,omitempty"`
	// NssCourierOrderNumber holds the value of the "nss_courier_order_number" field.
	NssCourierOrderNumber string `json:"nss_courier_order_number,omitempty"`
	// NssTrackingNumber holds the value of the "nss_tracking_number" field.
	NssTrackingNumber string `json:"nss_tracking_number,omitempty"`
	// NssTrackingURL holds the value of the "nss_tracking_url" field.
	NssTrackingURL string `json:"nss_tracking_url,omitempty"`
	// ShippingLabelURL holds the value of the "shipping_label_url" field.
	ShippingLabelURL string `json:"shipping_label_url,omitempty"`
	// ShippingLabelPath holds the value of the "shipping_label_path" field.
	ShippingLabelPath string `json:"shipping_label_path,omitempty"`
	// LabelDataPath holds the value of the "label_data_path" field.
	LabelDataPath string `json:"label_data_path,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID string `json:"package_id,omitempty"`
	// ShipDate holds the value of the "ship_date" field.
	ShipDate *time.Time `json:"ship_date,omitempty"`
	// RequestShippingAt holds the value of the "request_shipping_at" field.
	RequestShippingAt *time.Time `json:"request_shipping_at,omitempty"`
	// UnshelfRequestedTime holds the value of the "unshelf_requested_time" field.
	UnshelfRequestedTime *time.Time `json:"unshelf_requested_time,omitempty"`
	// ContainerCode holds the value of the "container_code" field.
	ContainerCode string `json:"container_code,omitempty"`
	// BasketNumber holds the value of the "basket_number" field.
	BasketNumber string `json:"basket_number,omitempty"`
	// PrintTimes holds the value of the "print_times" field.
	PrintTimes int `json:"print_times,omitempty"`
	// SortingTrackingNumber holds the value of the "sorting_tracking_number" field.
	SortingTrackingNumber string `json:"sorting_tracking_number,omitempty"`
	// SortingPort holds the value of the "sorting_port" field.
	SortingPort int32 `json:"sorting_port,omitempty"`
	// SortingLength holds the value of the "sorting_length" field.
	SortingLength int `json:"sorting_length,omitempty"`
	// SortingWidth holds the value of the "sorting_width" field.
	SortingWidth int `json:"sorting_width,omitempty"`
	// SortingHeight holds the value of the "sorting_height" field.
	SortingHeight int `json:"sorting_height,omitempty"`
	// 签出计费重量 checkout_actual_weight和volume_weight的最大值
	SortingWeight int `json:"sorting_weight,omitempty"`
	// 预估重量
	EstimatedWeight int `json:"estimated_weight,omitempty"`
	// 签出实际重量
	CheckoutActualWeight int `json:"checkout_actual_weight,omitempty"`
	// 材积重量
	VolumeWeight int `json:"volume_weight,omitempty"`
	// 渠道计费重量
	CourierWeight int `json:"courier_weight,omitempty"`
	// DeclaredValueInUsd holds the value of the "declared_value_in_usd" field.
	DeclaredValueInUsd float64 `json:"declared_value_in_usd,omitempty"`
	// DeclaredValueInEur holds the value of the "declared_value_in_eur" field.
	DeclaredValueInEur float64 `json:"declared_value_in_eur,omitempty"`
	// TotalItemsPrice holds the value of the "total_items_price" field.
	TotalItemsPrice float64 `json:"total_items_price,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// DeliveryCost holds the value of the "delivery_cost" field.
	DeliveryCost float64 `json:"delivery_cost,omitempty"`
	// MiscFee holds the value of the "misc_fee" field.
	MiscFee float64 `json:"misc_fee,omitempty"`
	// FuelFee holds the value of the "fuel_fee" field.
	FuelFee float64 `json:"fuel_fee,omitempty"`
	// RegistrationFee holds the value of the "registration_fee" field.
	RegistrationFee float64 `json:"registration_fee,omitempty"`
	// ProcessingFee holds the value of the "processing_fee" field.
	ProcessingFee float64 `json:"processing_fee,omitempty"`
	// PackageFee holds the value of the "package_fee" field.
	PackageFee float64 `json:"package_fee,omitempty"`
	// HandlingFee holds the value of the "handling_fee" field.
	HandlingFee float64 `json:"handling_fee,omitempty"`
	// Vat holds the value of the "vat" field.
	Vat float64 `json:"vat,omitempty"`
	// EstimatedCost holds the value of the "estimated_cost" field.
	EstimatedCost float64 `json:"estimated_cost,omitempty"`
	// EstimatedCurrency holds the value of the "estimated_currency" field.
	EstimatedCurrency string `json:"estimated_currency,omitempty"`
	// ReceivablesAmount holds the value of the "receivables_amount" field.
	ReceivablesAmount float64 `json:"receivables_amount,omitempty"`
	// ReceivablesCurrency holds the value of the "receivables_currency" field.
	ReceivablesCurrency string `json:"receivables_currency,omitempty"`
	// NotAcceptPlatformUpdate holds the value of the "not_accept_platform_update" field.
	NotAcceptPlatformUpdate bool `json:"not_accept_platform_update,omitempty"`
	// NotAcceptPlatformUpdateItem holds the value of the "not_accept_platform_update_item" field.
	NotAcceptPlatformUpdateItem bool `json:"not_accept_platform_update_item,omitempty"`
	// JdPushedStatus holds the value of the "jd_pushed_status" field.
	JdPushedStatus string `json:"jd_pushed_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	order_tenant *int64
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// OrderHoldReasons holds the value of the order_hold_reasons edge.
	OrderHoldReasons []*OrderHoldReason `json:"order_hold_reasons,omitempty"`
	// OrderTaxations holds the value of the order_taxations edge.
	OrderTaxations []*OrderTaxation `json:"order_taxations,omitempty"`
	// Stores holds the value of the stores edge.
	Stores *Store `json:"stores,omitempty"`
	// Warehouses holds the value of the warehouses edge.
	Warehouses *Warehouse `json:"warehouses,omitempty"`
	// Channels holds the value of the channels edge.
	Channels *Channel `json:"channels,omitempty"`
	// TrackMappings holds the value of the track_mappings edge.
	TrackMappings []*TrackMapping `json:"track_mappings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// OrderHoldReasonsOrErr returns the OrderHoldReasons value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderHoldReasonsOrErr() ([]*OrderHoldReason, error) {
	if e.loadedTypes[2] {
		return e.OrderHoldReasons, nil
	}
	return nil, &NotLoadedError{edge: "order_hold_reasons"}
}

// OrderTaxationsOrErr returns the OrderTaxations value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderTaxationsOrErr() ([]*OrderTaxation, error) {
	if e.loadedTypes[3] {
		return e.OrderTaxations, nil
	}
	return nil, &NotLoadedError{edge: "order_taxations"}
}

// StoresOrErr returns the Stores value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) StoresOrErr() (*Store, error) {
	if e.loadedTypes[4] {
		if e.Stores == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Stores, nil
	}
	return nil, &NotLoadedError{edge: "stores"}
}

// WarehousesOrErr returns the Warehouses value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) WarehousesOrErr() (*Warehouse, error) {
	if e.loadedTypes[5] {
		if e.Warehouses == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: warehouse.Label}
		}
		return e.Warehouses, nil
	}
	return nil, &NotLoadedError{edge: "warehouses"}
}

// ChannelsOrErr returns the Channels value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ChannelsOrErr() (*Channel, error) {
	if e.loadedTypes[6] {
		if e.Channels == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channels, nil
	}
	return nil, &NotLoadedError{edge: "channels"}
}

// TrackMappingsOrErr returns the TrackMappings value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) TrackMappingsOrErr() ([]*TrackMapping, error) {
	if e.loadedTypes[7] {
		return e.TrackMappings, nil
	}
	return nil, &NotLoadedError{edge: "track_mappings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldOffline, order.FieldPrepayTariff, order.FieldSqsStatus, order.FieldHoldStatus, order.FieldFulfillmentPushed, order.FieldNotAcceptPlatformUpdate, order.FieldNotAcceptPlatformUpdateItem:
			values[i] = new(sql.NullBool)
		case order.FieldDeclaredValueInUsd, order.FieldDeclaredValueInEur, order.FieldTotalItemsPrice, order.FieldDeliveryCost, order.FieldMiscFee, order.FieldFuelFee, order.FieldRegistrationFee, order.FieldProcessingFee, order.FieldPackageFee, order.FieldHandlingFee, order.FieldVat, order.FieldEstimatedCost, order.FieldReceivablesAmount:
			values[i] = new(sql.NullFloat64)
		case order.FieldID, order.FieldMode, order.FieldType, order.FieldStoreID, order.FieldWarehouseID, order.FieldIossNumberType, order.FieldStatus, order.FieldPaymentStatus, order.FieldCancelRequest, order.FieldPreferShippedType, order.FieldPreferChannelID, order.FieldChannelID, order.FieldChannelCostID, order.FieldShipType, order.FieldPrintTimes, order.FieldSortingPort, order.FieldSortingLength, order.FieldSortingWidth, order.FieldSortingHeight, order.FieldSortingWeight, order.FieldEstimatedWeight, order.FieldCheckoutActualWeight, order.FieldVolumeWeight, order.FieldCourierWeight:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderNumber, order.FieldCustomerCode, order.FieldIossNumber, order.FieldIossCountryCode, order.FieldUkVatNumber, order.FieldInboundOrderNumber, order.FieldPlatform, order.FieldPlatformOrderID, order.FieldPlatformOrderNo, order.FieldPlatformOrderStatusURL, order.FieldPlatformStatus, order.FieldPaidStatus, order.FieldFulfillmentStatus, order.FieldLocationID, order.FieldTags, order.FieldNote, order.FieldCancelReason, order.FieldContactEmail, order.FieldContactPhone, order.FieldShippingName, order.FieldShippingFirstName, order.FieldShippingLastName, order.FieldShippingCompany, order.FieldShippingCountry, order.FieldShippingCountryCode, order.FieldShippingProvince, order.FieldShippingProvinceCode, order.FieldShippingCity, order.FieldShippingAddress1, order.FieldShippingAddress2, order.FieldShippingZipCode, order.FieldShippingPhone, order.FieldShippingCertificateType, order.FieldShippingCertificateCode, order.FieldShippingCredentialsPeriod, order.FieldRemark, order.FieldChannelOptions, order.FieldTrackingCompany, order.FieldTrackingNumber, order.FieldTrackingURL, order.FieldWaybillNumber, order.FieldCourierOrderNumber, order.FieldNssCourierOrderNumber, order.FieldNssTrackingNumber, order.FieldNssTrackingURL, order.FieldShippingLabelURL, order.FieldShippingLabelPath, order.FieldLabelDataPath, order.FieldPackageID, order.FieldContainerCode, order.FieldBasketNumber, order.FieldSortingTrackingNumber, order.FieldCurrency, order.FieldEstimatedCurrency, order.FieldReceivablesCurrency, order.FieldJdPushedStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldDeletedAt, order.FieldPlatformCreatedAt, order.FieldCancelledAt, order.FieldClosedAt, order.FieldShipDate, order.FieldRequestShippingAt, order.FieldUnshelfRequestedTime:
			values[i] = new(sql.NullTime)
		case order.ForeignKeys[0]: // order_tenant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int64(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = value.Time
			}
		case order.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number", values[i])
			} else if value.Valid {
				o.OrderNumber = value.String
			}
		case order.FieldMode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				o.Mode = int8(value.Int64)
			}
		case order.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = int8(value.Int64)
			}
		case order.FieldOffline:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field offline", values[i])
			} else if value.Valid {
				o.Offline = value.Bool
			}
		case order.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				o.StoreID = value.Int64
			}
		case order.FieldWarehouseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_id", values[i])
			} else if value.Valid {
				o.WarehouseID = value.Int64
			}
		case order.FieldCustomerCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_code", values[i])
			} else if value.Valid {
				o.CustomerCode = value.String
			}
		case order.FieldPrepayTariff:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prepay_tariff", values[i])
			} else if value.Valid {
				o.PrepayTariff = value.Bool
			}
		case order.FieldIossNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_number", values[i])
			} else if value.Valid {
				o.IossNumber = value.String
			}
		case order.FieldIossCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_country_code", values[i])
			} else if value.Valid {
				o.IossCountryCode = value.String
			}
		case order.FieldIossNumberType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_number_type", values[i])
			} else if value.Valid {
				o.IossNumberType = int8(value.Int64)
			}
		case order.FieldUkVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uk_vat_number", values[i])
			} else if value.Valid {
				o.UkVatNumber = value.String
			}
		case order.FieldInboundOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inbound_order_number", values[i])
			} else if value.Valid {
				o.InboundOrderNumber = value.String
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = int8(value.Int64)
			}
		case order.FieldSqsStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sqs_status", values[i])
			} else if value.Valid {
				o.SqsStatus = value.Bool
			}
		case order.FieldHoldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hold_status", values[i])
			} else if value.Valid {
				o.HoldStatus = value.Bool
			}
		case order.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				o.PaymentStatus = int8(value.Int64)
			}
		case order.FieldCancelRequest:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_request", values[i])
			} else if value.Valid {
				o.CancelRequest = int8(value.Int64)
			}
		case order.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				o.Platform = value.String
			}
		case order.FieldPlatformOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_order_id", values[i])
			} else if value.Valid {
				o.PlatformOrderID = value.String
			}
		case order.FieldPlatformOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_order_no", values[i])
			} else if value.Valid {
				o.PlatformOrderNo = value.String
			}
		case order.FieldPlatformOrderStatusURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_order_status_url", values[i])
			} else if value.Valid {
				o.PlatformOrderStatusURL = value.String
			}
		case order.FieldPlatformStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_status", values[i])
			} else if value.Valid {
				o.PlatformStatus = value.String
			}
		case order.FieldPaidStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paid_status", values[i])
			} else if value.Valid {
				o.PaidStatus = value.String
			}
		case order.FieldFulfillmentPushed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fulfillment_pushed", values[i])
			} else if value.Valid {
				o.FulfillmentPushed = value.Bool
			}
		case order.FieldFulfillmentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fulfillment_status", values[i])
			} else if value.Valid {
				o.FulfillmentStatus = value.String
			}
		case order.FieldPlatformCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field platform_created_at", values[i])
			} else if value.Valid {
				o.PlatformCreatedAt = new(time.Time)
				*o.PlatformCreatedAt = value.Time
			}
		case order.FieldLocationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				o.LocationID = value.String
			}
		case order.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				o.Tags = new(string)
				*o.Tags = value.String
			}
		case order.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				o.Note = value.String
			}
		case order.FieldCancelReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_reason", values[i])
			} else if value.Valid {
				o.CancelReason = value.String
			}
		case order.FieldCancelledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled_at", values[i])
			} else if value.Valid {
				o.CancelledAt = new(time.Time)
				*o.CancelledAt = value.Time
			}
		case order.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				o.ClosedAt = new(time.Time)
				*o.ClosedAt = value.Time
			}
		case order.FieldContactEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_email", values[i])
			} else if value.Valid {
				o.ContactEmail = value.String
			}
		case order.FieldContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_phone", values[i])
			} else if value.Valid {
				o.ContactPhone = value.String
			}
		case order.FieldShippingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_name", values[i])
			} else if value.Valid {
				o.ShippingName = value.String
			}
		case order.FieldShippingFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_first_name", values[i])
			} else if value.Valid {
				o.ShippingFirstName = value.String
			}
		case order.FieldShippingLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_last_name", values[i])
			} else if value.Valid {
				o.ShippingLastName = value.String
			}
		case order.FieldShippingCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_company", values[i])
			} else if value.Valid {
				o.ShippingCompany = value.String
			}
		case order.FieldShippingCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_country", values[i])
			} else if value.Valid {
				o.ShippingCountry = value.String
			}
		case order.FieldShippingCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_country_code", values[i])
			} else if value.Valid {
				o.ShippingCountryCode = value.String
			}
		case order.FieldShippingProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_province", values[i])
			} else if value.Valid {
				o.ShippingProvince = value.String
			}
		case order.FieldShippingProvinceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_province_code", values[i])
			} else if value.Valid {
				o.ShippingProvinceCode = value.String
			}
		case order.FieldShippingCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_city", values[i])
			} else if value.Valid {
				o.ShippingCity = value.String
			}
		case order.FieldShippingAddress1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address1", values[i])
			} else if value.Valid {
				o.ShippingAddress1 = value.String
			}
		case order.FieldShippingAddress2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address2", values[i])
			} else if value.Valid {
				o.ShippingAddress2 = value.String
			}
		case order.FieldShippingZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_zip_code", values[i])
			} else if value.Valid {
				o.ShippingZipCode = value.String
			}
		case order.FieldShippingPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_phone", values[i])
			} else if value.Valid {
				o.ShippingPhone = value.String
			}
		case order.FieldShippingCertificateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_certificate_type", values[i])
			} else if value.Valid {
				o.ShippingCertificateType = value.String
			}
		case order.FieldShippingCertificateCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_certificate_code", values[i])
			} else if value.Valid {
				o.ShippingCertificateCode = value.String
			}
		case order.FieldShippingCredentialsPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_credentials_period", values[i])
			} else if value.Valid {
				o.ShippingCredentialsPeriod = value.String
			}
		case order.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				o.Remark = value.String
			}
		case order.FieldPreferShippedType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prefer_shipped_type", values[i])
			} else if value.Valid {
				o.PreferShippedType = int8(value.Int64)
			}
		case order.FieldPreferChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prefer_channel_id", values[i])
			} else if value.Valid {
				o.PreferChannelID = value.Int64
			}
		case order.FieldChannelOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_options", values[i])
			} else if value.Valid {
				o.ChannelOptions = value.String
			}
		case order.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				o.ChannelID = value.Int64
			}
		case order.FieldChannelCostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_cost_id", values[i])
			} else if value.Valid {
				o.ChannelCostID = value.Int64
			}
		case order.FieldShipType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ship_type", values[i])
			} else if value.Valid {
				o.ShipType = int8(value.Int64)
			}
		case order.FieldTrackingCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_company", values[i])
			} else if value.Valid {
				o.TrackingCompany = value.String
			}
		case order.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				o.TrackingNumber = value.String
			}
		case order.FieldTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_url", values[i])
			} else if value.Valid {
				o.TrackingURL = value.String
			}
		case order.FieldWaybillNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field waybill_number", values[i])
			} else if value.Valid {
				o.WaybillNumber = value.String
			}
		case order.FieldCourierOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courier_order_number", values[i])
			} else if value.Valid {
				o.CourierOrderNumber = value.String
			}
		case order.FieldNssCourierOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nss_courier_order_number", values[i])
			} else if value.Valid {
				o.NssCourierOrderNumber = value.String
			}
		case order.FieldNssTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nss_tracking_number", values[i])
			} else if value.Valid {
				o.NssTrackingNumber = value.String
			}
		case order.FieldNssTrackingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nss_tracking_url", values[i])
			} else if value.Valid {
				o.NssTrackingURL = value.String
			}
		case order.FieldShippingLabelURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_label_url", values[i])
			} else if value.Valid {
				o.ShippingLabelURL = value.String
			}
		case order.FieldShippingLabelPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_label_path", values[i])
			} else if value.Valid {
				o.ShippingLabelPath = value.String
			}
		case order.FieldLabelDataPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_data_path", values[i])
			} else if value.Valid {
				o.LabelDataPath = value.String
			}
		case order.FieldPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				o.PackageID = value.String
			}
		case order.FieldShipDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ship_date", values[i])
			} else if value.Valid {
				o.ShipDate = new(time.Time)
				*o.ShipDate = value.Time
			}
		case order.FieldRequestShippingAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field request_shipping_at", values[i])
			} else if value.Valid {
				o.RequestShippingAt = new(time.Time)
				*o.RequestShippingAt = value.Time
			}
		case order.FieldUnshelfRequestedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field unshelf_requested_time", values[i])
			} else if value.Valid {
				o.UnshelfRequestedTime = new(time.Time)
				*o.UnshelfRequestedTime = value.Time
			}
		case order.FieldContainerCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container_code", values[i])
			} else if value.Valid {
				o.ContainerCode = value.String
			}
		case order.FieldBasketNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field basket_number", values[i])
			} else if value.Valid {
				o.BasketNumber = value.String
			}
		case order.FieldPrintTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field print_times", values[i])
			} else if value.Valid {
				o.PrintTimes = int(value.Int64)
			}
		case order.FieldSortingTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_tracking_number", values[i])
			} else if value.Valid {
				o.SortingTrackingNumber = value.String
			}
		case order.FieldSortingPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_port", values[i])
			} else if value.Valid {
				o.SortingPort = int32(value.Int64)
			}
		case order.FieldSortingLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_length", values[i])
			} else if value.Valid {
				o.SortingLength = int(value.Int64)
			}
		case order.FieldSortingWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_width", values[i])
			} else if value.Valid {
				o.SortingWidth = int(value.Int64)
			}
		case order.FieldSortingHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_height", values[i])
			} else if value.Valid {
				o.SortingHeight = int(value.Int64)
			}
		case order.FieldSortingWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_weight", values[i])
			} else if value.Valid {
				o.SortingWeight = int(value.Int64)
			}
		case order.FieldEstimatedWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_weight", values[i])
			} else if value.Valid {
				o.EstimatedWeight = int(value.Int64)
			}
		case order.FieldCheckoutActualWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field checkout_actual_weight", values[i])
			} else if value.Valid {
				o.CheckoutActualWeight = int(value.Int64)
			}
		case order.FieldVolumeWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volume_weight", values[i])
			} else if value.Valid {
				o.VolumeWeight = int(value.Int64)
			}
		case order.FieldCourierWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field courier_weight", values[i])
			} else if value.Valid {
				o.CourierWeight = int(value.Int64)
			}
		case order.FieldDeclaredValueInUsd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field declared_value_in_usd", values[i])
			} else if value.Valid {
				o.DeclaredValueInUsd = value.Float64
			}
		case order.FieldDeclaredValueInEur:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field declared_value_in_eur", values[i])
			} else if value.Valid {
				o.DeclaredValueInEur = value.Float64
			}
		case order.FieldTotalItemsPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_items_price", values[i])
			} else if value.Valid {
				o.TotalItemsPrice = value.Float64
			}
		case order.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				o.Currency = value.String
			}
		case order.FieldDeliveryCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_cost", values[i])
			} else if value.Valid {
				o.DeliveryCost = value.Float64
			}
		case order.FieldMiscFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field misc_fee", values[i])
			} else if value.Valid {
				o.MiscFee = value.Float64
			}
		case order.FieldFuelFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_fee", values[i])
			} else if value.Valid {
				o.FuelFee = value.Float64
			}
		case order.FieldRegistrationFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field registration_fee", values[i])
			} else if value.Valid {
				o.RegistrationFee = value.Float64
			}
		case order.FieldProcessingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field processing_fee", values[i])
			} else if value.Valid {
				o.ProcessingFee = value.Float64
			}
		case order.FieldPackageFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field package_fee", values[i])
			} else if value.Valid {
				o.PackageFee = value.Float64
			}
		case order.FieldHandlingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field handling_fee", values[i])
			} else if value.Valid {
				o.HandlingFee = value.Float64
			}
		case order.FieldVat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vat", values[i])
			} else if value.Valid {
				o.Vat = value.Float64
			}
		case order.FieldEstimatedCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_cost", values[i])
			} else if value.Valid {
				o.EstimatedCost = value.Float64
			}
		case order.FieldEstimatedCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_currency", values[i])
			} else if value.Valid {
				o.EstimatedCurrency = value.String
			}
		case order.FieldReceivablesAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field receivables_amount", values[i])
			} else if value.Valid {
				o.ReceivablesAmount = value.Float64
			}
		case order.FieldReceivablesCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receivables_currency", values[i])
			} else if value.Valid {
				o.ReceivablesCurrency = value.String
			}
		case order.FieldNotAcceptPlatformUpdate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field not_accept_platform_update", values[i])
			} else if value.Valid {
				o.NotAcceptPlatformUpdate = value.Bool
			}
		case order.FieldNotAcceptPlatformUpdateItem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field not_accept_platform_update_item", values[i])
			} else if value.Valid {
				o.NotAcceptPlatformUpdateItem = value.Bool
			}
		case order.FieldJdPushedStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jd_pushed_status", values[i])
			} else if value.Valid {
				o.JdPushedStatus = value.String
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_tenant", value)
			} else if value.Valid {
				o.order_tenant = new(int64)
				*o.order_tenant = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Order entity.
func (o *Order) QueryTenant() *TenantQuery {
	return (&OrderClient{config: o.config}).QueryTenant(o)
}

// QueryOrderItems queries the "order_items" edge of the Order entity.
func (o *Order) QueryOrderItems() *OrderItemQuery {
	return (&OrderClient{config: o.config}).QueryOrderItems(o)
}

// QueryOrderHoldReasons queries the "order_hold_reasons" edge of the Order entity.
func (o *Order) QueryOrderHoldReasons() *OrderHoldReasonQuery {
	return (&OrderClient{config: o.config}).QueryOrderHoldReasons(o)
}

// QueryOrderTaxations queries the "order_taxations" edge of the Order entity.
func (o *Order) QueryOrderTaxations() *OrderTaxationQuery {
	return (&OrderClient{config: o.config}).QueryOrderTaxations(o)
}

// QueryStores queries the "stores" edge of the Order entity.
func (o *Order) QueryStores() *StoreQuery {
	return (&OrderClient{config: o.config}).QueryStores(o)
}

// QueryWarehouses queries the "warehouses" edge of the Order entity.
func (o *Order) QueryWarehouses() *WarehouseQuery {
	return (&OrderClient{config: o.config}).QueryWarehouses(o)
}

// QueryChannels queries the "channels" edge of the Order entity.
func (o *Order) QueryChannels() *ChannelQuery {
	return (&OrderClient{config: o.config}).QueryChannels(o)
}

// QueryTrackMappings queries the "track_mappings" edge of the Order entity.
func (o *Order) QueryTrackMappings() *TrackMappingQuery {
	return (&OrderClient{config: o.config}).QueryTrackMappings(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("gen: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(o.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_number=")
	builder.WriteString(o.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(fmt.Sprintf("%v", o.Mode))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ")
	builder.WriteString("offline=")
	builder.WriteString(fmt.Sprintf("%v", o.Offline))
	builder.WriteString(", ")
	builder.WriteString("store_id=")
	builder.WriteString(fmt.Sprintf("%v", o.StoreID))
	builder.WriteString(", ")
	builder.WriteString("warehouse_id=")
	builder.WriteString(fmt.Sprintf("%v", o.WarehouseID))
	builder.WriteString(", ")
	builder.WriteString("customer_code=")
	builder.WriteString(o.CustomerCode)
	builder.WriteString(", ")
	builder.WriteString("prepay_tariff=")
	builder.WriteString(fmt.Sprintf("%v", o.PrepayTariff))
	builder.WriteString(", ")
	builder.WriteString("ioss_number=")
	builder.WriteString(o.IossNumber)
	builder.WriteString(", ")
	builder.WriteString("ioss_country_code=")
	builder.WriteString(o.IossCountryCode)
	builder.WriteString(", ")
	builder.WriteString("ioss_number_type=")
	builder.WriteString(fmt.Sprintf("%v", o.IossNumberType))
	builder.WriteString(", ")
	builder.WriteString("uk_vat_number=")
	builder.WriteString(o.UkVatNumber)
	builder.WriteString(", ")
	builder.WriteString("inbound_order_number=")
	builder.WriteString(o.InboundOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("sqs_status=")
	builder.WriteString(fmt.Sprintf("%v", o.SqsStatus))
	builder.WriteString(", ")
	builder.WriteString("hold_status=")
	builder.WriteString(fmt.Sprintf("%v", o.HoldStatus))
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(fmt.Sprintf("%v", o.PaymentStatus))
	builder.WriteString(", ")
	builder.WriteString("cancel_request=")
	builder.WriteString(fmt.Sprintf("%v", o.CancelRequest))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(o.Platform)
	builder.WriteString(", ")
	builder.WriteString("platform_order_id=")
	builder.WriteString(o.PlatformOrderID)
	builder.WriteString(", ")
	builder.WriteString("platform_order_no=")
	builder.WriteString(o.PlatformOrderNo)
	builder.WriteString(", ")
	builder.WriteString("platform_order_status_url=")
	builder.WriteString(o.PlatformOrderStatusURL)
	builder.WriteString(", ")
	builder.WriteString("platform_status=")
	builder.WriteString(o.PlatformStatus)
	builder.WriteString(", ")
	builder.WriteString("paid_status=")
	builder.WriteString(o.PaidStatus)
	builder.WriteString(", ")
	builder.WriteString("fulfillment_pushed=")
	builder.WriteString(fmt.Sprintf("%v", o.FulfillmentPushed))
	builder.WriteString(", ")
	builder.WriteString("fulfillment_status=")
	builder.WriteString(o.FulfillmentStatus)
	builder.WriteString(", ")
	if v := o.PlatformCreatedAt; v != nil {
		builder.WriteString("platform_created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(o.LocationID)
	builder.WriteString(", ")
	if v := o.Tags; v != nil {
		builder.WriteString("tags=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(o.Note)
	builder.WriteString(", ")
	builder.WriteString("cancel_reason=")
	builder.WriteString(o.CancelReason)
	builder.WriteString(", ")
	if v := o.CancelledAt; v != nil {
		builder.WriteString("cancelled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := o.ClosedAt; v != nil {
		builder.WriteString("closed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("contact_email=")
	builder.WriteString(o.ContactEmail)
	builder.WriteString(", ")
	builder.WriteString("contact_phone=")
	builder.WriteString(o.ContactPhone)
	builder.WriteString(", ")
	builder.WriteString("shipping_name=")
	builder.WriteString(o.ShippingName)
	builder.WriteString(", ")
	builder.WriteString("shipping_first_name=")
	builder.WriteString(o.ShippingFirstName)
	builder.WriteString(", ")
	builder.WriteString("shipping_last_name=")
	builder.WriteString(o.ShippingLastName)
	builder.WriteString(", ")
	builder.WriteString("shipping_company=")
	builder.WriteString(o.ShippingCompany)
	builder.WriteString(", ")
	builder.WriteString("shipping_country=")
	builder.WriteString(o.ShippingCountry)
	builder.WriteString(", ")
	builder.WriteString("shipping_country_code=")
	builder.WriteString(o.ShippingCountryCode)
	builder.WriteString(", ")
	builder.WriteString("shipping_province=")
	builder.WriteString(o.ShippingProvince)
	builder.WriteString(", ")
	builder.WriteString("shipping_province_code=")
	builder.WriteString(o.ShippingProvinceCode)
	builder.WriteString(", ")
	builder.WriteString("shipping_city=")
	builder.WriteString(o.ShippingCity)
	builder.WriteString(", ")
	builder.WriteString("shipping_address1=")
	builder.WriteString(o.ShippingAddress1)
	builder.WriteString(", ")
	builder.WriteString("shipping_address2=")
	builder.WriteString(o.ShippingAddress2)
	builder.WriteString(", ")
	builder.WriteString("shipping_zip_code=")
	builder.WriteString(o.ShippingZipCode)
	builder.WriteString(", ")
	builder.WriteString("shipping_phone=")
	builder.WriteString(o.ShippingPhone)
	builder.WriteString(", ")
	builder.WriteString("shipping_certificate_type=")
	builder.WriteString(o.ShippingCertificateType)
	builder.WriteString(", ")
	builder.WriteString("shipping_certificate_code=")
	builder.WriteString(o.ShippingCertificateCode)
	builder.WriteString(", ")
	builder.WriteString("shipping_credentials_period=")
	builder.WriteString(o.ShippingCredentialsPeriod)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(o.Remark)
	builder.WriteString(", ")
	builder.WriteString("prefer_shipped_type=")
	builder.WriteString(fmt.Sprintf("%v", o.PreferShippedType))
	builder.WriteString(", ")
	builder.WriteString("prefer_channel_id=")
	builder.WriteString(fmt.Sprintf("%v", o.PreferChannelID))
	builder.WriteString(", ")
	builder.WriteString("channel_options=")
	builder.WriteString(o.ChannelOptions)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("channel_cost_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ChannelCostID))
	builder.WriteString(", ")
	builder.WriteString("ship_type=")
	builder.WriteString(fmt.Sprintf("%v", o.ShipType))
	builder.WriteString(", ")
	builder.WriteString("tracking_company=")
	builder.WriteString(o.TrackingCompany)
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(o.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("tracking_url=")
	builder.WriteString(o.TrackingURL)
	builder.WriteString(", ")
	builder.WriteString("waybill_number=")
	builder.WriteString(o.WaybillNumber)
	builder.WriteString(", ")
	builder.WriteString("courier_order_number=")
	builder.WriteString(o.CourierOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("nss_courier_order_number=")
	builder.WriteString(o.NssCourierOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("nss_tracking_number=")
	builder.WriteString(o.NssTrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("nss_tracking_url=")
	builder.WriteString(o.NssTrackingURL)
	builder.WriteString(", ")
	builder.WriteString("shipping_label_url=")
	builder.WriteString(o.ShippingLabelURL)
	builder.WriteString(", ")
	builder.WriteString("shipping_label_path=")
	builder.WriteString(o.ShippingLabelPath)
	builder.WriteString(", ")
	builder.WriteString("label_data_path=")
	builder.WriteString(o.LabelDataPath)
	builder.WriteString(", ")
	builder.WriteString("package_id=")
	builder.WriteString(o.PackageID)
	builder.WriteString(", ")
	if v := o.ShipDate; v != nil {
		builder.WriteString("ship_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := o.RequestShippingAt; v != nil {
		builder.WriteString("request_shipping_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := o.UnshelfRequestedTime; v != nil {
		builder.WriteString("unshelf_requested_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("container_code=")
	builder.WriteString(o.ContainerCode)
	builder.WriteString(", ")
	builder.WriteString("basket_number=")
	builder.WriteString(o.BasketNumber)
	builder.WriteString(", ")
	builder.WriteString("print_times=")
	builder.WriteString(fmt.Sprintf("%v", o.PrintTimes))
	builder.WriteString(", ")
	builder.WriteString("sorting_tracking_number=")
	builder.WriteString(o.SortingTrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("sorting_port=")
	builder.WriteString(fmt.Sprintf("%v", o.SortingPort))
	builder.WriteString(", ")
	builder.WriteString("sorting_length=")
	builder.WriteString(fmt.Sprintf("%v", o.SortingLength))
	builder.WriteString(", ")
	builder.WriteString("sorting_width=")
	builder.WriteString(fmt.Sprintf("%v", o.SortingWidth))
	builder.WriteString(", ")
	builder.WriteString("sorting_height=")
	builder.WriteString(fmt.Sprintf("%v", o.SortingHeight))
	builder.WriteString(", ")
	builder.WriteString("sorting_weight=")
	builder.WriteString(fmt.Sprintf("%v", o.SortingWeight))
	builder.WriteString(", ")
	builder.WriteString("estimated_weight=")
	builder.WriteString(fmt.Sprintf("%v", o.EstimatedWeight))
	builder.WriteString(", ")
	builder.WriteString("checkout_actual_weight=")
	builder.WriteString(fmt.Sprintf("%v", o.CheckoutActualWeight))
	builder.WriteString(", ")
	builder.WriteString("volume_weight=")
	builder.WriteString(fmt.Sprintf("%v", o.VolumeWeight))
	builder.WriteString(", ")
	builder.WriteString("courier_weight=")
	builder.WriteString(fmt.Sprintf("%v", o.CourierWeight))
	builder.WriteString(", ")
	builder.WriteString("declared_value_in_usd=")
	builder.WriteString(fmt.Sprintf("%v", o.DeclaredValueInUsd))
	builder.WriteString(", ")
	builder.WriteString("declared_value_in_eur=")
	builder.WriteString(fmt.Sprintf("%v", o.DeclaredValueInEur))
	builder.WriteString(", ")
	builder.WriteString("total_items_price=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalItemsPrice))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(o.Currency)
	builder.WriteString(", ")
	builder.WriteString("delivery_cost=")
	builder.WriteString(fmt.Sprintf("%v", o.DeliveryCost))
	builder.WriteString(", ")
	builder.WriteString("misc_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.MiscFee))
	builder.WriteString(", ")
	builder.WriteString("fuel_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.FuelFee))
	builder.WriteString(", ")
	builder.WriteString("registration_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.RegistrationFee))
	builder.WriteString(", ")
	builder.WriteString("processing_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.ProcessingFee))
	builder.WriteString(", ")
	builder.WriteString("package_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.PackageFee))
	builder.WriteString(", ")
	builder.WriteString("handling_fee=")
	builder.WriteString(fmt.Sprintf("%v", o.HandlingFee))
	builder.WriteString(", ")
	builder.WriteString("vat=")
	builder.WriteString(fmt.Sprintf("%v", o.Vat))
	builder.WriteString(", ")
	builder.WriteString("estimated_cost=")
	builder.WriteString(fmt.Sprintf("%v", o.EstimatedCost))
	builder.WriteString(", ")
	builder.WriteString("estimated_currency=")
	builder.WriteString(o.EstimatedCurrency)
	builder.WriteString(", ")
	builder.WriteString("receivables_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.ReceivablesAmount))
	builder.WriteString(", ")
	builder.WriteString("receivables_currency=")
	builder.WriteString(o.ReceivablesCurrency)
	builder.WriteString(", ")
	builder.WriteString("not_accept_platform_update=")
	builder.WriteString(fmt.Sprintf("%v", o.NotAcceptPlatformUpdate))
	builder.WriteString(", ")
	builder.WriteString("not_accept_platform_update_item=")
	builder.WriteString(fmt.Sprintf("%v", o.NotAcceptPlatformUpdateItem))
	builder.WriteString(", ")
	builder.WriteString("jd_pushed_status=")
	builder.WriteString(o.JdPushedStatus)
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
