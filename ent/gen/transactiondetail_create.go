// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
)

// TransactionDetailCreate is the builder for creating a TransactionDetail entity.
type TransactionDetailCreate struct {
	config
	mutation *TransactionDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tdc *TransactionDetailCreate) SetCreatedAt(t time.Time) *TransactionDetailCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableCreatedAt(t *time.Time) *TransactionDetailCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetUpdatedAt sets the "updated_at" field.
func (tdc *TransactionDetailCreate) SetUpdatedAt(t time.Time) *TransactionDetailCreate {
	tdc.mutation.SetUpdatedAt(t)
	return tdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableUpdatedAt(t *time.Time) *TransactionDetailCreate {
	if t != nil {
		tdc.SetUpdatedAt(*t)
	}
	return tdc
}

// SetDeletedAt sets the "deleted_at" field.
func (tdc *TransactionDetailCreate) SetDeletedAt(t time.Time) *TransactionDetailCreate {
	tdc.mutation.SetDeletedAt(t)
	return tdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableDeletedAt(t *time.Time) *TransactionDetailCreate {
	if t != nil {
		tdc.SetDeletedAt(*t)
	}
	return tdc
}

// SetOrderID sets the "order_id" field.
func (tdc *TransactionDetailCreate) SetOrderID(i int64) *TransactionDetailCreate {
	tdc.mutation.SetOrderID(i)
	return tdc
}

// SetTransactionID sets the "transaction_id" field.
func (tdc *TransactionDetailCreate) SetTransactionID(i int64) *TransactionDetailCreate {
	tdc.mutation.SetTransactionID(i)
	return tdc
}

// SetTransactionType sets the "transaction_type" field.
func (tdc *TransactionDetailCreate) SetTransactionType(s string) *TransactionDetailCreate {
	tdc.mutation.SetTransactionType(s)
	return tdc
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableTransactionType(s *string) *TransactionDetailCreate {
	if s != nil {
		tdc.SetTransactionType(*s)
	}
	return tdc
}

// SetDeliveryCost sets the "delivery_cost" field.
func (tdc *TransactionDetailCreate) SetDeliveryCost(f float64) *TransactionDetailCreate {
	tdc.mutation.SetDeliveryCost(f)
	return tdc
}

// SetNillableDeliveryCost sets the "delivery_cost" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableDeliveryCost(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetDeliveryCost(*f)
	}
	return tdc
}

// SetMiscFee sets the "misc_fee" field.
func (tdc *TransactionDetailCreate) SetMiscFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetMiscFee(f)
	return tdc
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableMiscFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetMiscFee(*f)
	}
	return tdc
}

// SetFuelFee sets the "fuel_fee" field.
func (tdc *TransactionDetailCreate) SetFuelFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetFuelFee(f)
	return tdc
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableFuelFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetFuelFee(*f)
	}
	return tdc
}

// SetRegistrationFee sets the "registration_fee" field.
func (tdc *TransactionDetailCreate) SetRegistrationFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetRegistrationFee(f)
	return tdc
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableRegistrationFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetRegistrationFee(*f)
	}
	return tdc
}

// SetProcessingFee sets the "processing_fee" field.
func (tdc *TransactionDetailCreate) SetProcessingFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetProcessingFee(f)
	return tdc
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableProcessingFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetProcessingFee(*f)
	}
	return tdc
}

// SetPackageFee sets the "package_fee" field.
func (tdc *TransactionDetailCreate) SetPackageFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetPackageFee(f)
	return tdc
}

// SetNillablePackageFee sets the "package_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillablePackageFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetPackageFee(*f)
	}
	return tdc
}

// SetHandlingFee sets the "handling_fee" field.
func (tdc *TransactionDetailCreate) SetHandlingFee(f float64) *TransactionDetailCreate {
	tdc.mutation.SetHandlingFee(f)
	return tdc
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableHandlingFee(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetHandlingFee(*f)
	}
	return tdc
}

// SetVat sets the "vat" field.
func (tdc *TransactionDetailCreate) SetVat(f float64) *TransactionDetailCreate {
	tdc.mutation.SetVat(f)
	return tdc
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableVat(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetVat(*f)
	}
	return tdc
}

// SetAmount sets the "amount" field.
func (tdc *TransactionDetailCreate) SetAmount(f float64) *TransactionDetailCreate {
	tdc.mutation.SetAmount(f)
	return tdc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableAmount(f *float64) *TransactionDetailCreate {
	if f != nil {
		tdc.SetAmount(*f)
	}
	return tdc
}

// SetWeight sets the "weight" field.
func (tdc *TransactionDetailCreate) SetWeight(i int) *TransactionDetailCreate {
	tdc.mutation.SetWeight(i)
	return tdc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (tdc *TransactionDetailCreate) SetNillableWeight(i *int) *TransactionDetailCreate {
	if i != nil {
		tdc.SetWeight(*i)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TransactionDetailCreate) SetID(i int64) *TransactionDetailCreate {
	tdc.mutation.SetID(i)
	return tdc
}

// Mutation returns the TransactionDetailMutation object of the builder.
func (tdc *TransactionDetailCreate) Mutation() *TransactionDetailMutation {
	return tdc.mutation
}

// Save creates the TransactionDetail in the database.
func (tdc *TransactionDetailCreate) Save(ctx context.Context) (*TransactionDetail, error) {
	var (
		err  error
		node *TransactionDetail
	)
	tdc.defaults()
	if len(tdc.hooks) == 0 {
		if err = tdc.check(); err != nil {
			return nil, err
		}
		node, err = tdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdc.check(); err != nil {
				return nil, err
			}
			tdc.mutation = mutation
			if node, err = tdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tdc.hooks) - 1; i >= 0; i-- {
			if tdc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TransactionDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TransactionDetailCreate) SaveX(ctx context.Context) *TransactionDetail {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TransactionDetailCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TransactionDetailCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TransactionDetailCreate) defaults() {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := transactiondetail.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		v := transactiondetail.DefaultUpdatedAt()
		tdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tdc.mutation.TransactionType(); !ok {
		v := transactiondetail.DefaultTransactionType
		tdc.mutation.SetTransactionType(v)
	}
	if _, ok := tdc.mutation.DeliveryCost(); !ok {
		v := transactiondetail.DefaultDeliveryCost
		tdc.mutation.SetDeliveryCost(v)
	}
	if _, ok := tdc.mutation.MiscFee(); !ok {
		v := transactiondetail.DefaultMiscFee
		tdc.mutation.SetMiscFee(v)
	}
	if _, ok := tdc.mutation.FuelFee(); !ok {
		v := transactiondetail.DefaultFuelFee
		tdc.mutation.SetFuelFee(v)
	}
	if _, ok := tdc.mutation.RegistrationFee(); !ok {
		v := transactiondetail.DefaultRegistrationFee
		tdc.mutation.SetRegistrationFee(v)
	}
	if _, ok := tdc.mutation.ProcessingFee(); !ok {
		v := transactiondetail.DefaultProcessingFee
		tdc.mutation.SetProcessingFee(v)
	}
	if _, ok := tdc.mutation.PackageFee(); !ok {
		v := transactiondetail.DefaultPackageFee
		tdc.mutation.SetPackageFee(v)
	}
	if _, ok := tdc.mutation.HandlingFee(); !ok {
		v := transactiondetail.DefaultHandlingFee
		tdc.mutation.SetHandlingFee(v)
	}
	if _, ok := tdc.mutation.Vat(); !ok {
		v := transactiondetail.DefaultVat
		tdc.mutation.SetVat(v)
	}
	if _, ok := tdc.mutation.Amount(); !ok {
		v := transactiondetail.DefaultAmount
		tdc.mutation.SetAmount(v)
	}
	if _, ok := tdc.mutation.Weight(); !ok {
		v := transactiondetail.DefaultWeight
		tdc.mutation.SetWeight(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TransactionDetailCreate) check() error {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "TransactionDetail.created_at"`)}
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "TransactionDetail.updated_at"`)}
	}
	if _, ok := tdc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`gen: missing required field "TransactionDetail.order_id"`)}
	}
	if _, ok := tdc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`gen: missing required field "TransactionDetail.transaction_id"`)}
	}
	if _, ok := tdc.mutation.TransactionType(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`gen: missing required field "TransactionDetail.transaction_type"`)}
	}
	if _, ok := tdc.mutation.DeliveryCost(); !ok {
		return &ValidationError{Name: "delivery_cost", err: errors.New(`gen: missing required field "TransactionDetail.delivery_cost"`)}
	}
	if _, ok := tdc.mutation.MiscFee(); !ok {
		return &ValidationError{Name: "misc_fee", err: errors.New(`gen: missing required field "TransactionDetail.misc_fee"`)}
	}
	if _, ok := tdc.mutation.FuelFee(); !ok {
		return &ValidationError{Name: "fuel_fee", err: errors.New(`gen: missing required field "TransactionDetail.fuel_fee"`)}
	}
	if _, ok := tdc.mutation.RegistrationFee(); !ok {
		return &ValidationError{Name: "registration_fee", err: errors.New(`gen: missing required field "TransactionDetail.registration_fee"`)}
	}
	if _, ok := tdc.mutation.ProcessingFee(); !ok {
		return &ValidationError{Name: "processing_fee", err: errors.New(`gen: missing required field "TransactionDetail.processing_fee"`)}
	}
	if _, ok := tdc.mutation.PackageFee(); !ok {
		return &ValidationError{Name: "package_fee", err: errors.New(`gen: missing required field "TransactionDetail.package_fee"`)}
	}
	if _, ok := tdc.mutation.HandlingFee(); !ok {
		return &ValidationError{Name: "handling_fee", err: errors.New(`gen: missing required field "TransactionDetail.handling_fee"`)}
	}
	if _, ok := tdc.mutation.Vat(); !ok {
		return &ValidationError{Name: "vat", err: errors.New(`gen: missing required field "TransactionDetail.vat"`)}
	}
	if _, ok := tdc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`gen: missing required field "TransactionDetail.amount"`)}
	}
	if _, ok := tdc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`gen: missing required field "TransactionDetail.weight"`)}
	}
	return nil
}

func (tdc *TransactionDetailCreate) sqlSave(ctx context.Context) (*TransactionDetail, error) {
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tdc *TransactionDetailCreate) createSpec() (*TransactionDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionDetail{config: tdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transactiondetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transactiondetail.FieldID,
			},
		}
	)
	_spec.Schema = tdc.schemaConfig.TransactionDetail
	_spec.OnConflict = tdc.conflict
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(transactiondetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.UpdatedAt(); ok {
		_spec.SetField(transactiondetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tdc.mutation.DeletedAt(); ok {
		_spec.SetField(transactiondetail.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tdc.mutation.OrderID(); ok {
		_spec.SetField(transactiondetail.FieldOrderID, field.TypeInt64, value)
		_node.OrderID = value
	}
	if value, ok := tdc.mutation.TransactionID(); ok {
		_spec.SetField(transactiondetail.FieldTransactionID, field.TypeInt64, value)
		_node.TransactionID = value
	}
	if value, ok := tdc.mutation.TransactionType(); ok {
		_spec.SetField(transactiondetail.FieldTransactionType, field.TypeString, value)
		_node.TransactionType = value
	}
	if value, ok := tdc.mutation.DeliveryCost(); ok {
		_spec.SetField(transactiondetail.FieldDeliveryCost, field.TypeFloat64, value)
		_node.DeliveryCost = value
	}
	if value, ok := tdc.mutation.MiscFee(); ok {
		_spec.SetField(transactiondetail.FieldMiscFee, field.TypeFloat64, value)
		_node.MiscFee = value
	}
	if value, ok := tdc.mutation.FuelFee(); ok {
		_spec.SetField(transactiondetail.FieldFuelFee, field.TypeFloat64, value)
		_node.FuelFee = value
	}
	if value, ok := tdc.mutation.RegistrationFee(); ok {
		_spec.SetField(transactiondetail.FieldRegistrationFee, field.TypeFloat64, value)
		_node.RegistrationFee = value
	}
	if value, ok := tdc.mutation.ProcessingFee(); ok {
		_spec.SetField(transactiondetail.FieldProcessingFee, field.TypeFloat64, value)
		_node.ProcessingFee = value
	}
	if value, ok := tdc.mutation.PackageFee(); ok {
		_spec.SetField(transactiondetail.FieldPackageFee, field.TypeFloat64, value)
		_node.PackageFee = value
	}
	if value, ok := tdc.mutation.HandlingFee(); ok {
		_spec.SetField(transactiondetail.FieldHandlingFee, field.TypeFloat64, value)
		_node.HandlingFee = value
	}
	if value, ok := tdc.mutation.Vat(); ok {
		_spec.SetField(transactiondetail.FieldVat, field.TypeFloat64, value)
		_node.Vat = value
	}
	if value, ok := tdc.mutation.Amount(); ok {
		_spec.SetField(transactiondetail.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tdc.mutation.Weight(); ok {
		_spec.SetField(transactiondetail.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransactionDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tdc *TransactionDetailCreate) OnConflict(opts ...sql.ConflictOption) *TransactionDetailUpsertOne {
	tdc.conflict = opts
	return &TransactionDetailUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TransactionDetailCreate) OnConflictColumns(columns ...string) *TransactionDetailUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TransactionDetailUpsertOne{
		create: tdc,
	}
}

type (
	// TransactionDetailUpsertOne is the builder for "upsert"-ing
	//  one TransactionDetail node.
	TransactionDetailUpsertOne struct {
		create *TransactionDetailCreate
	}

	// TransactionDetailUpsert is the "OnConflict" setter.
	TransactionDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionDetailUpsert) SetUpdatedAt(v time.Time) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateUpdatedAt() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionDetailUpsert) SetDeletedAt(v time.Time) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateDeletedAt() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionDetailUpsert) ClearDeletedAt() *TransactionDetailUpsert {
	u.SetNull(transactiondetail.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *TransactionDetailUpsert) SetOrderID(v int64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateOrderID() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldOrderID)
	return u
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionDetailUpsert) AddOrderID(v int64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldOrderID, v)
	return u
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionDetailUpsert) SetTransactionID(v int64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateTransactionID() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldTransactionID)
	return u
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionDetailUpsert) AddTransactionID(v int64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldTransactionID, v)
	return u
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionDetailUpsert) SetTransactionType(v string) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldTransactionType, v)
	return u
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateTransactionType() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldTransactionType)
	return u
}

// SetDeliveryCost sets the "delivery_cost" field.
func (u *TransactionDetailUpsert) SetDeliveryCost(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldDeliveryCost, v)
	return u
}

// UpdateDeliveryCost sets the "delivery_cost" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateDeliveryCost() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldDeliveryCost)
	return u
}

// AddDeliveryCost adds v to the "delivery_cost" field.
func (u *TransactionDetailUpsert) AddDeliveryCost(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldDeliveryCost, v)
	return u
}

// SetMiscFee sets the "misc_fee" field.
func (u *TransactionDetailUpsert) SetMiscFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldMiscFee, v)
	return u
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateMiscFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldMiscFee)
	return u
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *TransactionDetailUpsert) AddMiscFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldMiscFee, v)
	return u
}

// SetFuelFee sets the "fuel_fee" field.
func (u *TransactionDetailUpsert) SetFuelFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldFuelFee, v)
	return u
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateFuelFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldFuelFee)
	return u
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *TransactionDetailUpsert) AddFuelFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldFuelFee, v)
	return u
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *TransactionDetailUpsert) SetRegistrationFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldRegistrationFee, v)
	return u
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateRegistrationFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldRegistrationFee)
	return u
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *TransactionDetailUpsert) AddRegistrationFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldRegistrationFee, v)
	return u
}

// SetProcessingFee sets the "processing_fee" field.
func (u *TransactionDetailUpsert) SetProcessingFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldProcessingFee, v)
	return u
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateProcessingFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldProcessingFee)
	return u
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *TransactionDetailUpsert) AddProcessingFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldProcessingFee, v)
	return u
}

// SetPackageFee sets the "package_fee" field.
func (u *TransactionDetailUpsert) SetPackageFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldPackageFee, v)
	return u
}

// UpdatePackageFee sets the "package_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdatePackageFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldPackageFee)
	return u
}

// AddPackageFee adds v to the "package_fee" field.
func (u *TransactionDetailUpsert) AddPackageFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldPackageFee, v)
	return u
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TransactionDetailUpsert) SetHandlingFee(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldHandlingFee, v)
	return u
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateHandlingFee() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldHandlingFee)
	return u
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TransactionDetailUpsert) AddHandlingFee(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldHandlingFee, v)
	return u
}

// SetVat sets the "vat" field.
func (u *TransactionDetailUpsert) SetVat(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldVat, v)
	return u
}

// UpdateVat sets the "vat" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateVat() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldVat)
	return u
}

// AddVat adds v to the "vat" field.
func (u *TransactionDetailUpsert) AddVat(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldVat, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransactionDetailUpsert) SetAmount(v float64) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateAmount() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TransactionDetailUpsert) AddAmount(v float64) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldAmount, v)
	return u
}

// SetWeight sets the "weight" field.
func (u *TransactionDetailUpsert) SetWeight(v int) *TransactionDetailUpsert {
	u.Set(transactiondetail.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TransactionDetailUpsert) UpdateWeight() *TransactionDetailUpsert {
	u.SetExcluded(transactiondetail.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *TransactionDetailUpsert) AddWeight(v int) *TransactionDetailUpsert {
	u.Add(transactiondetail.FieldWeight, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transactiondetail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionDetailUpsertOne) UpdateNewValues() *TransactionDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transactiondetail.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transactiondetail.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransactionDetailUpsertOne) Ignore() *TransactionDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionDetailUpsertOne) DoNothing() *TransactionDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionDetailCreate.OnConflict
// documentation for more info.
func (u *TransactionDetailUpsertOne) Update(set func(*TransactionDetailUpsert)) *TransactionDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionDetailUpsertOne) SetUpdatedAt(v time.Time) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateUpdatedAt() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionDetailUpsertOne) SetDeletedAt(v time.Time) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateDeletedAt() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionDetailUpsertOne) ClearDeletedAt() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TransactionDetailUpsertOne) SetOrderID(v int64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionDetailUpsertOne) AddOrderID(v int64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateOrderID() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateOrderID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionDetailUpsertOne) SetTransactionID(v int64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetTransactionID(v)
	})
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionDetailUpsertOne) AddTransactionID(v int64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateTransactionID() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateTransactionID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionDetailUpsertOne) SetTransactionType(v string) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateTransactionType() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateTransactionType()
	})
}

// SetDeliveryCost sets the "delivery_cost" field.
func (u *TransactionDetailUpsertOne) SetDeliveryCost(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetDeliveryCost(v)
	})
}

// AddDeliveryCost adds v to the "delivery_cost" field.
func (u *TransactionDetailUpsertOne) AddDeliveryCost(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddDeliveryCost(v)
	})
}

// UpdateDeliveryCost sets the "delivery_cost" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateDeliveryCost() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateDeliveryCost()
	})
}

// SetMiscFee sets the "misc_fee" field.
func (u *TransactionDetailUpsertOne) SetMiscFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetMiscFee(v)
	})
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *TransactionDetailUpsertOne) AddMiscFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddMiscFee(v)
	})
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateMiscFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateMiscFee()
	})
}

// SetFuelFee sets the "fuel_fee" field.
func (u *TransactionDetailUpsertOne) SetFuelFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetFuelFee(v)
	})
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *TransactionDetailUpsertOne) AddFuelFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddFuelFee(v)
	})
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateFuelFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateFuelFee()
	})
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *TransactionDetailUpsertOne) SetRegistrationFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetRegistrationFee(v)
	})
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *TransactionDetailUpsertOne) AddRegistrationFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddRegistrationFee(v)
	})
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateRegistrationFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateRegistrationFee()
	})
}

// SetProcessingFee sets the "processing_fee" field.
func (u *TransactionDetailUpsertOne) SetProcessingFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetProcessingFee(v)
	})
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *TransactionDetailUpsertOne) AddProcessingFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddProcessingFee(v)
	})
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateProcessingFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateProcessingFee()
	})
}

// SetPackageFee sets the "package_fee" field.
func (u *TransactionDetailUpsertOne) SetPackageFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetPackageFee(v)
	})
}

// AddPackageFee adds v to the "package_fee" field.
func (u *TransactionDetailUpsertOne) AddPackageFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddPackageFee(v)
	})
}

// UpdatePackageFee sets the "package_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdatePackageFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdatePackageFee()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TransactionDetailUpsertOne) SetHandlingFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TransactionDetailUpsertOne) AddHandlingFee(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateHandlingFee() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetVat sets the "vat" field.
func (u *TransactionDetailUpsertOne) SetVat(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetVat(v)
	})
}

// AddVat adds v to the "vat" field.
func (u *TransactionDetailUpsertOne) AddVat(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddVat(v)
	})
}

// UpdateVat sets the "vat" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateVat() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateVat()
	})
}

// SetAmount sets the "amount" field.
func (u *TransactionDetailUpsertOne) SetAmount(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransactionDetailUpsertOne) AddAmount(v float64) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateAmount() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateAmount()
	})
}

// SetWeight sets the "weight" field.
func (u *TransactionDetailUpsertOne) SetWeight(v int) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *TransactionDetailUpsertOne) AddWeight(v int) *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TransactionDetailUpsertOne) UpdateWeight() *TransactionDetailUpsertOne {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateWeight()
	})
}

// Exec executes the query.
func (u *TransactionDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TransactionDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransactionDetailUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransactionDetailUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransactionDetailCreateBulk is the builder for creating many TransactionDetail entities in bulk.
type TransactionDetailCreateBulk struct {
	config
	builders []*TransactionDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the TransactionDetail entities in the database.
func (tdcb *TransactionDetailCreateBulk) Save(ctx context.Context) ([]*TransactionDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TransactionDetail, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TransactionDetailCreateBulk) SaveX(ctx context.Context) []*TransactionDetail {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TransactionDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TransactionDetailCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TransactionDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TransactionDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransactionDetailUpsertBulk {
	tdcb.conflict = opts
	return &TransactionDetailUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TransactionDetailCreateBulk) OnConflictColumns(columns ...string) *TransactionDetailUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TransactionDetailUpsertBulk{
		create: tdcb,
	}
}

// TransactionDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of TransactionDetail nodes.
type TransactionDetailUpsertBulk struct {
	create *TransactionDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transactiondetail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionDetailUpsertBulk) UpdateNewValues() *TransactionDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transactiondetail.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transactiondetail.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TransactionDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransactionDetailUpsertBulk) Ignore() *TransactionDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionDetailUpsertBulk) DoNothing() *TransactionDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionDetailCreateBulk.OnConflict
// documentation for more info.
func (u *TransactionDetailUpsertBulk) Update(set func(*TransactionDetailUpsert)) *TransactionDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionDetailUpsertBulk) SetUpdatedAt(v time.Time) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateUpdatedAt() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionDetailUpsertBulk) SetDeletedAt(v time.Time) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateDeletedAt() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionDetailUpsertBulk) ClearDeletedAt() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TransactionDetailUpsertBulk) SetOrderID(v int64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionDetailUpsertBulk) AddOrderID(v int64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateOrderID() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateOrderID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionDetailUpsertBulk) SetTransactionID(v int64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetTransactionID(v)
	})
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionDetailUpsertBulk) AddTransactionID(v int64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateTransactionID() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateTransactionID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionDetailUpsertBulk) SetTransactionType(v string) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateTransactionType() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateTransactionType()
	})
}

// SetDeliveryCost sets the "delivery_cost" field.
func (u *TransactionDetailUpsertBulk) SetDeliveryCost(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetDeliveryCost(v)
	})
}

// AddDeliveryCost adds v to the "delivery_cost" field.
func (u *TransactionDetailUpsertBulk) AddDeliveryCost(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddDeliveryCost(v)
	})
}

// UpdateDeliveryCost sets the "delivery_cost" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateDeliveryCost() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateDeliveryCost()
	})
}

// SetMiscFee sets the "misc_fee" field.
func (u *TransactionDetailUpsertBulk) SetMiscFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetMiscFee(v)
	})
}

// AddMiscFee adds v to the "misc_fee" field.
func (u *TransactionDetailUpsertBulk) AddMiscFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddMiscFee(v)
	})
}

// UpdateMiscFee sets the "misc_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateMiscFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateMiscFee()
	})
}

// SetFuelFee sets the "fuel_fee" field.
func (u *TransactionDetailUpsertBulk) SetFuelFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetFuelFee(v)
	})
}

// AddFuelFee adds v to the "fuel_fee" field.
func (u *TransactionDetailUpsertBulk) AddFuelFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddFuelFee(v)
	})
}

// UpdateFuelFee sets the "fuel_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateFuelFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateFuelFee()
	})
}

// SetRegistrationFee sets the "registration_fee" field.
func (u *TransactionDetailUpsertBulk) SetRegistrationFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetRegistrationFee(v)
	})
}

// AddRegistrationFee adds v to the "registration_fee" field.
func (u *TransactionDetailUpsertBulk) AddRegistrationFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddRegistrationFee(v)
	})
}

// UpdateRegistrationFee sets the "registration_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateRegistrationFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateRegistrationFee()
	})
}

// SetProcessingFee sets the "processing_fee" field.
func (u *TransactionDetailUpsertBulk) SetProcessingFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetProcessingFee(v)
	})
}

// AddProcessingFee adds v to the "processing_fee" field.
func (u *TransactionDetailUpsertBulk) AddProcessingFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddProcessingFee(v)
	})
}

// UpdateProcessingFee sets the "processing_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateProcessingFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateProcessingFee()
	})
}

// SetPackageFee sets the "package_fee" field.
func (u *TransactionDetailUpsertBulk) SetPackageFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetPackageFee(v)
	})
}

// AddPackageFee adds v to the "package_fee" field.
func (u *TransactionDetailUpsertBulk) AddPackageFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddPackageFee(v)
	})
}

// UpdatePackageFee sets the "package_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdatePackageFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdatePackageFee()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TransactionDetailUpsertBulk) SetHandlingFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TransactionDetailUpsertBulk) AddHandlingFee(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateHandlingFee() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetVat sets the "vat" field.
func (u *TransactionDetailUpsertBulk) SetVat(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetVat(v)
	})
}

// AddVat adds v to the "vat" field.
func (u *TransactionDetailUpsertBulk) AddVat(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddVat(v)
	})
}

// UpdateVat sets the "vat" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateVat() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateVat()
	})
}

// SetAmount sets the "amount" field.
func (u *TransactionDetailUpsertBulk) SetAmount(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TransactionDetailUpsertBulk) AddAmount(v float64) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateAmount() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateAmount()
	})
}

// SetWeight sets the "weight" field.
func (u *TransactionDetailUpsertBulk) SetWeight(v int) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *TransactionDetailUpsertBulk) AddWeight(v int) *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TransactionDetailUpsertBulk) UpdateWeight() *TransactionDetailUpsertBulk {
	return u.Update(func(s *TransactionDetailUpsert) {
		s.UpdateWeight()
	})
}

// Exec executes the query.
func (u *TransactionDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the TransactionDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TransactionDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
