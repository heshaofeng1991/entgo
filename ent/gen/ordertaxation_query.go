// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// OrderTaxationQuery is the builder for querying OrderTaxation entities.
type OrderTaxationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderTaxation
	withOrders *OrderQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderTaxationQuery builder.
func (otq *OrderTaxationQuery) Where(ps ...predicate.OrderTaxation) *OrderTaxationQuery {
	otq.predicates = append(otq.predicates, ps...)
	return otq
}

// Limit adds a limit step to the query.
func (otq *OrderTaxationQuery) Limit(limit int) *OrderTaxationQuery {
	otq.limit = &limit
	return otq
}

// Offset adds an offset step to the query.
func (otq *OrderTaxationQuery) Offset(offset int) *OrderTaxationQuery {
	otq.offset = &offset
	return otq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (otq *OrderTaxationQuery) Unique(unique bool) *OrderTaxationQuery {
	otq.unique = &unique
	return otq
}

// Order adds an order step to the query.
func (otq *OrderTaxationQuery) Order(o ...OrderFunc) *OrderTaxationQuery {
	otq.order = append(otq.order, o...)
	return otq
}

// QueryOrders chains the current query on the "orders" edge.
func (otq *OrderTaxationQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: otq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := otq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := otq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ordertaxation.Table, ordertaxation.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordertaxation.OrdersTable, ordertaxation.OrdersColumn),
		)
		schemaConfig := otq.schemaConfig
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.OrderTaxation
		fromU = sqlgraph.SetNeighbors(otq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderTaxation entity from the query.
// Returns a *NotFoundError when no OrderTaxation was found.
func (otq *OrderTaxationQuery) First(ctx context.Context) (*OrderTaxation, error) {
	nodes, err := otq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ordertaxation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (otq *OrderTaxationQuery) FirstX(ctx context.Context) *OrderTaxation {
	node, err := otq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderTaxation ID from the query.
// Returns a *NotFoundError when no OrderTaxation ID was found.
func (otq *OrderTaxationQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = otq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ordertaxation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (otq *OrderTaxationQuery) FirstIDX(ctx context.Context) int64 {
	id, err := otq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderTaxation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderTaxation entity is found.
// Returns a *NotFoundError when no OrderTaxation entities are found.
func (otq *OrderTaxationQuery) Only(ctx context.Context) (*OrderTaxation, error) {
	nodes, err := otq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ordertaxation.Label}
	default:
		return nil, &NotSingularError{ordertaxation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (otq *OrderTaxationQuery) OnlyX(ctx context.Context) *OrderTaxation {
	node, err := otq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderTaxation ID in the query.
// Returns a *NotSingularError when more than one OrderTaxation ID is found.
// Returns a *NotFoundError when no entities are found.
func (otq *OrderTaxationQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = otq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ordertaxation.Label}
	default:
		err = &NotSingularError{ordertaxation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (otq *OrderTaxationQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := otq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderTaxations.
func (otq *OrderTaxationQuery) All(ctx context.Context) ([]*OrderTaxation, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return otq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (otq *OrderTaxationQuery) AllX(ctx context.Context) []*OrderTaxation {
	nodes, err := otq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderTaxation IDs.
func (otq *OrderTaxationQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := otq.Select(ordertaxation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (otq *OrderTaxationQuery) IDsX(ctx context.Context) []int64 {
	ids, err := otq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (otq *OrderTaxationQuery) Count(ctx context.Context) (int, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return otq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (otq *OrderTaxationQuery) CountX(ctx context.Context) int {
	count, err := otq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (otq *OrderTaxationQuery) Exist(ctx context.Context) (bool, error) {
	if err := otq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return otq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (otq *OrderTaxationQuery) ExistX(ctx context.Context) bool {
	exist, err := otq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderTaxationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (otq *OrderTaxationQuery) Clone() *OrderTaxationQuery {
	if otq == nil {
		return nil
	}
	return &OrderTaxationQuery{
		config:     otq.config,
		limit:      otq.limit,
		offset:     otq.offset,
		order:      append([]OrderFunc{}, otq.order...),
		predicates: append([]predicate.OrderTaxation{}, otq.predicates...),
		withOrders: otq.withOrders.Clone(),
		// clone intermediate query.
		sql:    otq.sql.Clone(),
		path:   otq.path,
		unique: otq.unique,
	}
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (otq *OrderTaxationQuery) WithOrders(opts ...func(*OrderQuery)) *OrderTaxationQuery {
	query := &OrderQuery{config: otq.config}
	for _, opt := range opts {
		opt(query)
	}
	otq.withOrders = query
	return otq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderTaxation.Query().
//		GroupBy(ordertaxation.FieldCreatedAt).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
func (otq *OrderTaxationQuery) GroupBy(field string, fields ...string) *OrderTaxationGroupBy {
	grbuild := &OrderTaxationGroupBy{config: otq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := otq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return otq.sqlQuery(ctx), nil
	}
	grbuild.label = ordertaxation.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OrderTaxation.Query().
//		Select(ordertaxation.FieldCreatedAt).
//		Scan(ctx, &v)
func (otq *OrderTaxationQuery) Select(fields ...string) *OrderTaxationSelect {
	otq.fields = append(otq.fields, fields...)
	selbuild := &OrderTaxationSelect{OrderTaxationQuery: otq}
	selbuild.label = ordertaxation.Label
	selbuild.flds, selbuild.scan = &otq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a OrderTaxationSelect configured with the given aggregations.
func (otq *OrderTaxationQuery) Aggregate(fns ...AggregateFunc) *OrderTaxationSelect {
	return otq.Select().Aggregate(fns...)
}

func (otq *OrderTaxationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range otq.fields {
		if !ordertaxation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if otq.path != nil {
		prev, err := otq.path(ctx)
		if err != nil {
			return err
		}
		otq.sql = prev
	}
	return nil
}

func (otq *OrderTaxationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderTaxation, error) {
	var (
		nodes       = []*OrderTaxation{}
		_spec       = otq.querySpec()
		loadedTypes = [1]bool{
			otq.withOrders != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderTaxation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderTaxation{config: otq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = otq.schemaConfig.OrderTaxation
	ctx = internal.NewSchemaConfigContext(ctx, otq.schemaConfig)
	if len(otq.modifiers) > 0 {
		_spec.Modifiers = otq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, otq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := otq.withOrders; query != nil {
		if err := otq.loadOrders(ctx, query, nodes, nil,
			func(n *OrderTaxation, e *Order) { n.Edges.Orders = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (otq *OrderTaxationQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*OrderTaxation, init func(*OrderTaxation), assign func(*OrderTaxation, *Order)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*OrderTaxation)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (otq *OrderTaxationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := otq.querySpec()
	_spec.Node.Schema = otq.schemaConfig.OrderTaxation
	ctx = internal.NewSchemaConfigContext(ctx, otq.schemaConfig)
	if len(otq.modifiers) > 0 {
		_spec.Modifiers = otq.modifiers
	}
	_spec.Node.Columns = otq.fields
	if len(otq.fields) > 0 {
		_spec.Unique = otq.unique != nil && *otq.unique
	}
	return sqlgraph.CountNodes(ctx, otq.driver, _spec)
}

func (otq *OrderTaxationQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := otq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("gen: check existence: %w", err)
	default:
		return true, nil
	}
}

func (otq *OrderTaxationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertaxation.Table,
			Columns: ordertaxation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordertaxation.FieldID,
			},
		},
		From:   otq.sql,
		Unique: true,
	}
	if unique := otq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := otq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordertaxation.FieldID)
		for i := range fields {
			if fields[i] != ordertaxation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := otq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := otq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := otq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := otq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (otq *OrderTaxationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(otq.driver.Dialect())
	t1 := builder.Table(ordertaxation.Table)
	columns := otq.fields
	if len(columns) == 0 {
		columns = ordertaxation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if otq.sql != nil {
		selector = otq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if otq.unique != nil && *otq.unique {
		selector.Distinct()
	}
	t1.Schema(otq.schemaConfig.OrderTaxation)
	ctx = internal.NewSchemaConfigContext(ctx, otq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range otq.modifiers {
		m(selector)
	}
	for _, p := range otq.predicates {
		p(selector)
	}
	for _, p := range otq.order {
		p(selector)
	}
	if offset := otq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := otq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (otq *OrderTaxationQuery) Modify(modifiers ...func(s *sql.Selector)) *OrderTaxationSelect {
	otq.modifiers = append(otq.modifiers, modifiers...)
	return otq.Select()
}

// OrderTaxationGroupBy is the group-by builder for OrderTaxation entities.
type OrderTaxationGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (otgb *OrderTaxationGroupBy) Aggregate(fns ...AggregateFunc) *OrderTaxationGroupBy {
	otgb.fns = append(otgb.fns, fns...)
	return otgb
}

// Scan applies the group-by query and scans the result into the given value.
func (otgb *OrderTaxationGroupBy) Scan(ctx context.Context, v any) error {
	query, err := otgb.path(ctx)
	if err != nil {
		return err
	}
	otgb.sql = query
	return otgb.sqlScan(ctx, v)
}

func (otgb *OrderTaxationGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range otgb.fields {
		if !ordertaxation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := otgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := otgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (otgb *OrderTaxationGroupBy) sqlQuery() *sql.Selector {
	selector := otgb.sql.Select()
	aggregation := make([]string, 0, len(otgb.fns))
	for _, fn := range otgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(otgb.fields)+len(otgb.fns))
		for _, f := range otgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(otgb.fields...)...)
}

// OrderTaxationSelect is the builder for selecting fields of OrderTaxation entities.
type OrderTaxationSelect struct {
	*OrderTaxationQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ots *OrderTaxationSelect) Aggregate(fns ...AggregateFunc) *OrderTaxationSelect {
	ots.fns = append(ots.fns, fns...)
	return ots
}

// Scan applies the selector query and scans the result into the given value.
func (ots *OrderTaxationSelect) Scan(ctx context.Context, v any) error {
	if err := ots.prepareQuery(ctx); err != nil {
		return err
	}
	ots.sql = ots.OrderTaxationQuery.sqlQuery(ctx)
	return ots.sqlScan(ctx, v)
}

func (ots *OrderTaxationSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ots.fns))
	for _, fn := range ots.fns {
		aggregation = append(aggregation, fn(ots.sql))
	}
	switch n := len(*ots.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ots.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ots.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ots.sql.Query()
	if err := ots.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ots *OrderTaxationSelect) Modify(modifiers ...func(s *sql.Selector)) *OrderTaxationSelect {
	ots.modifiers = append(ots.modifiers, modifiers...)
	return ots
}
