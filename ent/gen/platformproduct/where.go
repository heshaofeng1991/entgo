// Code generated by ent, DO NOT EDIT.

package platformproduct

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// ListingID applies equality check predicate on the "listing_id" field. It's identical to ListingIDEQ.
func ListingID(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingID), v))
	})
}

// CollectionID applies equality check predicate on the "collection_id" field. It's identical to CollectionIDEQ.
func CollectionID(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectionID), v))
	})
}

// ListingSku applies equality check predicate on the "listing_sku" field. It's identical to ListingSkuEQ.
func ListingSku(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingSku), v))
	})
}

// Barcode applies equality check predicate on the "barcode" field. It's identical to BarcodeEQ.
func Barcode(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Images applies equality check predicate on the "images" field. It's identical to ImagesEQ.
func Images(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// Vendor applies equality check predicate on the "vendor" field. It's identical to VendorEQ.
func Vendor(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendor), v))
	})
}

// SellingPrice applies equality check predicate on the "selling_price" field. It's identical to SellingPriceEQ.
func SellingPrice(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// Grams applies equality check predicate on the "grams" field. It's identical to GramsEQ.
func Grams(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// PlatformStatus applies equality check predicate on the "platform_status" field. It's identical to PlatformStatusEQ.
func PlatformStatus(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int64) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int64) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// ListingIDEQ applies the EQ predicate on the "listing_id" field.
func ListingIDEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingID), v))
	})
}

// ListingIDNEQ applies the NEQ predicate on the "listing_id" field.
func ListingIDNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListingID), v))
	})
}

// ListingIDIn applies the In predicate on the "listing_id" field.
func ListingIDIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldListingID), v...))
	})
}

// ListingIDNotIn applies the NotIn predicate on the "listing_id" field.
func ListingIDNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldListingID), v...))
	})
}

// ListingIDGT applies the GT predicate on the "listing_id" field.
func ListingIDGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListingID), v))
	})
}

// ListingIDGTE applies the GTE predicate on the "listing_id" field.
func ListingIDGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListingID), v))
	})
}

// ListingIDLT applies the LT predicate on the "listing_id" field.
func ListingIDLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListingID), v))
	})
}

// ListingIDLTE applies the LTE predicate on the "listing_id" field.
func ListingIDLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListingID), v))
	})
}

// ListingIDContains applies the Contains predicate on the "listing_id" field.
func ListingIDContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldListingID), v))
	})
}

// ListingIDHasPrefix applies the HasPrefix predicate on the "listing_id" field.
func ListingIDHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldListingID), v))
	})
}

// ListingIDHasSuffix applies the HasSuffix predicate on the "listing_id" field.
func ListingIDHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldListingID), v))
	})
}

// ListingIDEqualFold applies the EqualFold predicate on the "listing_id" field.
func ListingIDEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldListingID), v))
	})
}

// ListingIDContainsFold applies the ContainsFold predicate on the "listing_id" field.
func ListingIDContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldListingID), v))
	})
}

// CollectionIDEQ applies the EQ predicate on the "collection_id" field.
func CollectionIDEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectionID), v))
	})
}

// CollectionIDNEQ applies the NEQ predicate on the "collection_id" field.
func CollectionIDNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectionID), v))
	})
}

// CollectionIDIn applies the In predicate on the "collection_id" field.
func CollectionIDIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCollectionID), v...))
	})
}

// CollectionIDNotIn applies the NotIn predicate on the "collection_id" field.
func CollectionIDNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCollectionID), v...))
	})
}

// CollectionIDGT applies the GT predicate on the "collection_id" field.
func CollectionIDGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectionID), v))
	})
}

// CollectionIDGTE applies the GTE predicate on the "collection_id" field.
func CollectionIDGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectionID), v))
	})
}

// CollectionIDLT applies the LT predicate on the "collection_id" field.
func CollectionIDLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectionID), v))
	})
}

// CollectionIDLTE applies the LTE predicate on the "collection_id" field.
func CollectionIDLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectionID), v))
	})
}

// CollectionIDContains applies the Contains predicate on the "collection_id" field.
func CollectionIDContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectionID), v))
	})
}

// CollectionIDHasPrefix applies the HasPrefix predicate on the "collection_id" field.
func CollectionIDHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectionID), v))
	})
}

// CollectionIDHasSuffix applies the HasSuffix predicate on the "collection_id" field.
func CollectionIDHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectionID), v))
	})
}

// CollectionIDEqualFold applies the EqualFold predicate on the "collection_id" field.
func CollectionIDEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectionID), v))
	})
}

// CollectionIDContainsFold applies the ContainsFold predicate on the "collection_id" field.
func CollectionIDContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectionID), v))
	})
}

// ListingSkuEQ applies the EQ predicate on the "listing_sku" field.
func ListingSkuEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListingSku), v))
	})
}

// ListingSkuNEQ applies the NEQ predicate on the "listing_sku" field.
func ListingSkuNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListingSku), v))
	})
}

// ListingSkuIn applies the In predicate on the "listing_sku" field.
func ListingSkuIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldListingSku), v...))
	})
}

// ListingSkuNotIn applies the NotIn predicate on the "listing_sku" field.
func ListingSkuNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldListingSku), v...))
	})
}

// ListingSkuGT applies the GT predicate on the "listing_sku" field.
func ListingSkuGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListingSku), v))
	})
}

// ListingSkuGTE applies the GTE predicate on the "listing_sku" field.
func ListingSkuGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListingSku), v))
	})
}

// ListingSkuLT applies the LT predicate on the "listing_sku" field.
func ListingSkuLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListingSku), v))
	})
}

// ListingSkuLTE applies the LTE predicate on the "listing_sku" field.
func ListingSkuLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListingSku), v))
	})
}

// ListingSkuContains applies the Contains predicate on the "listing_sku" field.
func ListingSkuContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldListingSku), v))
	})
}

// ListingSkuHasPrefix applies the HasPrefix predicate on the "listing_sku" field.
func ListingSkuHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldListingSku), v))
	})
}

// ListingSkuHasSuffix applies the HasSuffix predicate on the "listing_sku" field.
func ListingSkuHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldListingSku), v))
	})
}

// ListingSkuEqualFold applies the EqualFold predicate on the "listing_sku" field.
func ListingSkuEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldListingSku), v))
	})
}

// ListingSkuContainsFold applies the ContainsFold predicate on the "listing_sku" field.
func ListingSkuContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldListingSku), v))
	})
}

// BarcodeEQ applies the EQ predicate on the "barcode" field.
func BarcodeEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBarcode), v))
	})
}

// BarcodeNEQ applies the NEQ predicate on the "barcode" field.
func BarcodeNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBarcode), v))
	})
}

// BarcodeIn applies the In predicate on the "barcode" field.
func BarcodeIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBarcode), v...))
	})
}

// BarcodeNotIn applies the NotIn predicate on the "barcode" field.
func BarcodeNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBarcode), v...))
	})
}

// BarcodeGT applies the GT predicate on the "barcode" field.
func BarcodeGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBarcode), v))
	})
}

// BarcodeGTE applies the GTE predicate on the "barcode" field.
func BarcodeGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBarcode), v))
	})
}

// BarcodeLT applies the LT predicate on the "barcode" field.
func BarcodeLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBarcode), v))
	})
}

// BarcodeLTE applies the LTE predicate on the "barcode" field.
func BarcodeLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBarcode), v))
	})
}

// BarcodeContains applies the Contains predicate on the "barcode" field.
func BarcodeContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBarcode), v))
	})
}

// BarcodeHasPrefix applies the HasPrefix predicate on the "barcode" field.
func BarcodeHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBarcode), v))
	})
}

// BarcodeHasSuffix applies the HasSuffix predicate on the "barcode" field.
func BarcodeHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBarcode), v))
	})
}

// BarcodeEqualFold applies the EqualFold predicate on the "barcode" field.
func BarcodeEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBarcode), v))
	})
}

// BarcodeContainsFold applies the ContainsFold predicate on the "barcode" field.
func BarcodeContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBarcode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ImagesEQ applies the EQ predicate on the "images" field.
func ImagesEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImages), v))
	})
}

// ImagesNEQ applies the NEQ predicate on the "images" field.
func ImagesNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImages), v))
	})
}

// ImagesIn applies the In predicate on the "images" field.
func ImagesIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImages), v...))
	})
}

// ImagesNotIn applies the NotIn predicate on the "images" field.
func ImagesNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImages), v...))
	})
}

// ImagesGT applies the GT predicate on the "images" field.
func ImagesGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImages), v))
	})
}

// ImagesGTE applies the GTE predicate on the "images" field.
func ImagesGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImages), v))
	})
}

// ImagesLT applies the LT predicate on the "images" field.
func ImagesLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImages), v))
	})
}

// ImagesLTE applies the LTE predicate on the "images" field.
func ImagesLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImages), v))
	})
}

// ImagesContains applies the Contains predicate on the "images" field.
func ImagesContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImages), v))
	})
}

// ImagesHasPrefix applies the HasPrefix predicate on the "images" field.
func ImagesHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImages), v))
	})
}

// ImagesHasSuffix applies the HasSuffix predicate on the "images" field.
func ImagesHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImages), v))
	})
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImages)))
	})
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImages)))
	})
}

// ImagesEqualFold applies the EqualFold predicate on the "images" field.
func ImagesEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImages), v))
	})
}

// ImagesContainsFold applies the ContainsFold predicate on the "images" field.
func ImagesContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImages), v))
	})
}

// VendorEQ applies the EQ predicate on the "vendor" field.
func VendorEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendor), v))
	})
}

// VendorNEQ applies the NEQ predicate on the "vendor" field.
func VendorNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendor), v))
	})
}

// VendorIn applies the In predicate on the "vendor" field.
func VendorIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVendor), v...))
	})
}

// VendorNotIn applies the NotIn predicate on the "vendor" field.
func VendorNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVendor), v...))
	})
}

// VendorGT applies the GT predicate on the "vendor" field.
func VendorGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendor), v))
	})
}

// VendorGTE applies the GTE predicate on the "vendor" field.
func VendorGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendor), v))
	})
}

// VendorLT applies the LT predicate on the "vendor" field.
func VendorLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendor), v))
	})
}

// VendorLTE applies the LTE predicate on the "vendor" field.
func VendorLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendor), v))
	})
}

// VendorContains applies the Contains predicate on the "vendor" field.
func VendorContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVendor), v))
	})
}

// VendorHasPrefix applies the HasPrefix predicate on the "vendor" field.
func VendorHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVendor), v))
	})
}

// VendorHasSuffix applies the HasSuffix predicate on the "vendor" field.
func VendorHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVendor), v))
	})
}

// VendorIsNil applies the IsNil predicate on the "vendor" field.
func VendorIsNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVendor)))
	})
}

// VendorNotNil applies the NotNil predicate on the "vendor" field.
func VendorNotNil() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVendor)))
	})
}

// VendorEqualFold applies the EqualFold predicate on the "vendor" field.
func VendorEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVendor), v))
	})
}

// VendorContainsFold applies the ContainsFold predicate on the "vendor" field.
func VendorContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVendor), v))
	})
}

// SellingPriceEQ applies the EQ predicate on the "selling_price" field.
func SellingPriceEQ(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceNEQ applies the NEQ predicate on the "selling_price" field.
func SellingPriceNEQ(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceIn applies the In predicate on the "selling_price" field.
func SellingPriceIn(vs ...float64) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceNotIn applies the NotIn predicate on the "selling_price" field.
func SellingPriceNotIn(vs ...float64) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceGT applies the GT predicate on the "selling_price" field.
func SellingPriceGT(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceGTE applies the GTE predicate on the "selling_price" field.
func SellingPriceGTE(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLT applies the LT predicate on the "selling_price" field.
func SellingPriceLT(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLTE applies the LTE predicate on the "selling_price" field.
func SellingPriceLTE(v float64) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSellingPrice), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// GramsEQ applies the EQ predicate on the "grams" field.
func GramsEQ(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrams), v))
	})
}

// GramsNEQ applies the NEQ predicate on the "grams" field.
func GramsNEQ(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrams), v))
	})
}

// GramsIn applies the In predicate on the "grams" field.
func GramsIn(vs ...int) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGrams), v...))
	})
}

// GramsNotIn applies the NotIn predicate on the "grams" field.
func GramsNotIn(vs ...int) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGrams), v...))
	})
}

// GramsGT applies the GT predicate on the "grams" field.
func GramsGT(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrams), v))
	})
}

// GramsGTE applies the GTE predicate on the "grams" field.
func GramsGTE(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrams), v))
	})
}

// GramsLT applies the LT predicate on the "grams" field.
func GramsLT(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrams), v))
	})
}

// GramsLTE applies the LTE predicate on the "grams" field.
func GramsLTE(v int) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrams), v))
	})
}

// PlatformStatusEQ applies the EQ predicate on the "platform_status" field.
func PlatformStatusEQ(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusNEQ applies the NEQ predicate on the "platform_status" field.
func PlatformStatusNEQ(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusIn applies the In predicate on the "platform_status" field.
func PlatformStatusIn(vs ...int8) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformStatus), v...))
	})
}

// PlatformStatusNotIn applies the NotIn predicate on the "platform_status" field.
func PlatformStatusNotIn(vs ...int8) predicate.PlatformProduct {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformStatus), v...))
	})
}

// PlatformStatusGT applies the GT predicate on the "platform_status" field.
func PlatformStatusGT(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusGTE applies the GTE predicate on the "platform_status" field.
func PlatformStatusGTE(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusLT applies the LT predicate on the "platform_status" field.
func PlatformStatusLT(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformStatus), v))
	})
}

// PlatformStatusLTE applies the LTE predicate on the "platform_status" field.
func PlatformStatusLTE(v int8) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformStatus), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductMappings applies the HasEdge predicate on the "product_mappings" edge.
func HasProductMappings() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductMappingsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductMappingsTable, ProductMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductMappingsWith applies the HasEdge predicate on the "product_mappings" edge with a given conditions (other predicates).
func HasProductMappingsWith(preds ...predicate.ProductMapping) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductMappingsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductMappingsTable, ProductMappingsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ProductMapping
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStores applies the HasEdge predicate on the "stores" edge.
func HasStores() predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoresTable, StoresColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoresWith applies the HasEdge predicate on the "stores" edge with a given conditions (other predicates).
func HasStoresWith(preds ...predicate.Store) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoresTable, StoresColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Store
		step.Edge.Schema = schemaConfig.PlatformProduct
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformProduct) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformProduct) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformProduct) predicate.PlatformProduct {
	return predicate.PlatformProduct(func(s *sql.Selector) {
		p(s.Not())
	})
}
