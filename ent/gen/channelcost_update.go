// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcost"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelCostUpdate is the builder for updating ChannelCost entities.
type ChannelCostUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelCostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelCostUpdate builder.
func (ccu *ChannelCostUpdate) Where(ps ...predicate.ChannelCost) *ChannelCostUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *ChannelCostUpdate) SetUpdatedAt(t time.Time) *ChannelCostUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *ChannelCostUpdate) SetDeletedAt(t time.Time) *ChannelCostUpdate {
	ccu.mutation.SetDeletedAt(t)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableDeletedAt(t *time.Time) *ChannelCostUpdate {
	if t != nil {
		ccu.SetDeletedAt(*t)
	}
	return ccu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccu *ChannelCostUpdate) ClearDeletedAt() *ChannelCostUpdate {
	ccu.mutation.ClearDeletedAt()
	return ccu
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (ccu *ChannelCostUpdate) SetChannelCostBatchID(i int64) *ChannelCostUpdate {
	ccu.mutation.ResetChannelCostBatchID()
	ccu.mutation.SetChannelCostBatchID(i)
	return ccu
}

// AddChannelCostBatchID adds i to the "channel_cost_batch_id" field.
func (ccu *ChannelCostUpdate) AddChannelCostBatchID(i int64) *ChannelCostUpdate {
	ccu.mutation.AddChannelCostBatchID(i)
	return ccu
}

// SetChannelID sets the "channel_id" field.
func (ccu *ChannelCostUpdate) SetChannelID(i int64) *ChannelCostUpdate {
	ccu.mutation.SetChannelID(i)
	return ccu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableChannelID(i *int64) *ChannelCostUpdate {
	if i != nil {
		ccu.SetChannelID(*i)
	}
	return ccu
}

// ClearChannelID clears the value of the "channel_id" field.
func (ccu *ChannelCostUpdate) ClearChannelID() *ChannelCostUpdate {
	ccu.mutation.ClearChannelID()
	return ccu
}

// SetMode sets the "mode" field.
func (ccu *ChannelCostUpdate) SetMode(i int8) *ChannelCostUpdate {
	ccu.mutation.ResetMode()
	ccu.mutation.SetMode(i)
	return ccu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableMode(i *int8) *ChannelCostUpdate {
	if i != nil {
		ccu.SetMode(*i)
	}
	return ccu
}

// AddMode adds i to the "mode" field.
func (ccu *ChannelCostUpdate) AddMode(i int8) *ChannelCostUpdate {
	ccu.mutation.AddMode(i)
	return ccu
}

// SetCountryCode sets the "country_code" field.
func (ccu *ChannelCostUpdate) SetCountryCode(s string) *ChannelCostUpdate {
	ccu.mutation.SetCountryCode(s)
	return ccu
}

// SetZone sets the "zone" field.
func (ccu *ChannelCostUpdate) SetZone(s string) *ChannelCostUpdate {
	ccu.mutation.SetZone(s)
	return ccu
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableZone(s *string) *ChannelCostUpdate {
	if s != nil {
		ccu.SetZone(*s)
	}
	return ccu
}

// SetStartWeight sets the "start_weight" field.
func (ccu *ChannelCostUpdate) SetStartWeight(i int) *ChannelCostUpdate {
	ccu.mutation.ResetStartWeight()
	ccu.mutation.SetStartWeight(i)
	return ccu
}

// AddStartWeight adds i to the "start_weight" field.
func (ccu *ChannelCostUpdate) AddStartWeight(i int) *ChannelCostUpdate {
	ccu.mutation.AddStartWeight(i)
	return ccu
}

// SetEndWeight sets the "end_weight" field.
func (ccu *ChannelCostUpdate) SetEndWeight(i int) *ChannelCostUpdate {
	ccu.mutation.ResetEndWeight()
	ccu.mutation.SetEndWeight(i)
	return ccu
}

// AddEndWeight adds i to the "end_weight" field.
func (ccu *ChannelCostUpdate) AddEndWeight(i int) *ChannelCostUpdate {
	ccu.mutation.AddEndWeight(i)
	return ccu
}

// SetFirstWeight sets the "first_weight" field.
func (ccu *ChannelCostUpdate) SetFirstWeight(i int) *ChannelCostUpdate {
	ccu.mutation.ResetFirstWeight()
	ccu.mutation.SetFirstWeight(i)
	return ccu
}

// SetNillableFirstWeight sets the "first_weight" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableFirstWeight(i *int) *ChannelCostUpdate {
	if i != nil {
		ccu.SetFirstWeight(*i)
	}
	return ccu
}

// AddFirstWeight adds i to the "first_weight" field.
func (ccu *ChannelCostUpdate) AddFirstWeight(i int) *ChannelCostUpdate {
	ccu.mutation.AddFirstWeight(i)
	return ccu
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (ccu *ChannelCostUpdate) SetFirstWeightFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetFirstWeightFee()
	ccu.mutation.SetFirstWeightFee(f)
	return ccu
}

// SetNillableFirstWeightFee sets the "first_weight_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableFirstWeightFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetFirstWeightFee(*f)
	}
	return ccu
}

// AddFirstWeightFee adds f to the "first_weight_fee" field.
func (ccu *ChannelCostUpdate) AddFirstWeightFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddFirstWeightFee(f)
	return ccu
}

// SetUnitWeight sets the "unit_weight" field.
func (ccu *ChannelCostUpdate) SetUnitWeight(i int) *ChannelCostUpdate {
	ccu.mutation.ResetUnitWeight()
	ccu.mutation.SetUnitWeight(i)
	return ccu
}

// AddUnitWeight adds i to the "unit_weight" field.
func (ccu *ChannelCostUpdate) AddUnitWeight(i int) *ChannelCostUpdate {
	ccu.mutation.AddUnitWeight(i)
	return ccu
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (ccu *ChannelCostUpdate) SetUnitWeightFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetUnitWeightFee()
	ccu.mutation.SetUnitWeightFee(f)
	return ccu
}

// SetNillableUnitWeightFee sets the "unit_weight_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableUnitWeightFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetUnitWeightFee(*f)
	}
	return ccu
}

// AddUnitWeightFee adds f to the "unit_weight_fee" field.
func (ccu *ChannelCostUpdate) AddUnitWeightFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddUnitWeightFee(f)
	return ccu
}

// ClearUnitWeightFee clears the value of the "unit_weight_fee" field.
func (ccu *ChannelCostUpdate) ClearUnitWeightFee() *ChannelCostUpdate {
	ccu.mutation.ClearUnitWeightFee()
	return ccu
}

// SetFuelFee sets the "fuel_fee" field.
func (ccu *ChannelCostUpdate) SetFuelFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetFuelFee()
	ccu.mutation.SetFuelFee(f)
	return ccu
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableFuelFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetFuelFee(*f)
	}
	return ccu
}

// AddFuelFee adds f to the "fuel_fee" field.
func (ccu *ChannelCostUpdate) AddFuelFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddFuelFee(f)
	return ccu
}

// SetProcessingFee sets the "processing_fee" field.
func (ccu *ChannelCostUpdate) SetProcessingFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetProcessingFee()
	ccu.mutation.SetProcessingFee(f)
	return ccu
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableProcessingFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetProcessingFee(*f)
	}
	return ccu
}

// AddProcessingFee adds f to the "processing_fee" field.
func (ccu *ChannelCostUpdate) AddProcessingFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddProcessingFee(f)
	return ccu
}

// SetRegistrationFee sets the "registration_fee" field.
func (ccu *ChannelCostUpdate) SetRegistrationFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetRegistrationFee()
	ccu.mutation.SetRegistrationFee(f)
	return ccu
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableRegistrationFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetRegistrationFee(*f)
	}
	return ccu
}

// AddRegistrationFee adds f to the "registration_fee" field.
func (ccu *ChannelCostUpdate) AddRegistrationFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddRegistrationFee(f)
	return ccu
}

// SetMiscFee sets the "misc_fee" field.
func (ccu *ChannelCostUpdate) SetMiscFee(f float64) *ChannelCostUpdate {
	ccu.mutation.ResetMiscFee()
	ccu.mutation.SetMiscFee(f)
	return ccu
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableMiscFee(f *float64) *ChannelCostUpdate {
	if f != nil {
		ccu.SetMiscFee(*f)
	}
	return ccu
}

// AddMiscFee adds f to the "misc_fee" field.
func (ccu *ChannelCostUpdate) AddMiscFee(f float64) *ChannelCostUpdate {
	ccu.mutation.AddMiscFee(f)
	return ccu
}

// SetMinNormalDays sets the "min_normal_days" field.
func (ccu *ChannelCostUpdate) SetMinNormalDays(i int) *ChannelCostUpdate {
	ccu.mutation.ResetMinNormalDays()
	ccu.mutation.SetMinNormalDays(i)
	return ccu
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableMinNormalDays(i *int) *ChannelCostUpdate {
	if i != nil {
		ccu.SetMinNormalDays(*i)
	}
	return ccu
}

// AddMinNormalDays adds i to the "min_normal_days" field.
func (ccu *ChannelCostUpdate) AddMinNormalDays(i int) *ChannelCostUpdate {
	ccu.mutation.AddMinNormalDays(i)
	return ccu
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (ccu *ChannelCostUpdate) SetMaxNormalDays(i int) *ChannelCostUpdate {
	ccu.mutation.ResetMaxNormalDays()
	ccu.mutation.SetMaxNormalDays(i)
	return ccu
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableMaxNormalDays(i *int) *ChannelCostUpdate {
	if i != nil {
		ccu.SetMaxNormalDays(*i)
	}
	return ccu
}

// AddMaxNormalDays adds i to the "max_normal_days" field.
func (ccu *ChannelCostUpdate) AddMaxNormalDays(i int) *ChannelCostUpdate {
	ccu.mutation.AddMaxNormalDays(i)
	return ccu
}

// SetStatus sets the "status" field.
func (ccu *ChannelCostUpdate) SetStatus(i int8) *ChannelCostUpdate {
	ccu.mutation.ResetStatus()
	ccu.mutation.SetStatus(i)
	return ccu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableStatus(i *int8) *ChannelCostUpdate {
	if i != nil {
		ccu.SetStatus(*i)
	}
	return ccu
}

// AddStatus adds i to the "status" field.
func (ccu *ChannelCostUpdate) AddStatus(i int8) *ChannelCostUpdate {
	ccu.mutation.AddStatus(i)
	return ccu
}

// SetAverageDays sets the "average_days" field.
func (ccu *ChannelCostUpdate) SetAverageDays(i int) *ChannelCostUpdate {
	ccu.mutation.ResetAverageDays()
	ccu.mutation.SetAverageDays(i)
	return ccu
}

// SetNillableAverageDays sets the "average_days" field if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableAverageDays(i *int) *ChannelCostUpdate {
	if i != nil {
		ccu.SetAverageDays(*i)
	}
	return ccu
}

// AddAverageDays adds i to the "average_days" field.
func (ccu *ChannelCostUpdate) AddAverageDays(i int) *ChannelCostUpdate {
	ccu.mutation.AddAverageDays(i)
	return ccu
}

// SetChannelsID sets the "channels" edge to the Channel entity by ID.
func (ccu *ChannelCostUpdate) SetChannelsID(id int64) *ChannelCostUpdate {
	ccu.mutation.SetChannelsID(id)
	return ccu
}

// SetNillableChannelsID sets the "channels" edge to the Channel entity by ID if the given value is not nil.
func (ccu *ChannelCostUpdate) SetNillableChannelsID(id *int64) *ChannelCostUpdate {
	if id != nil {
		ccu = ccu.SetChannelsID(*id)
	}
	return ccu
}

// SetChannels sets the "channels" edge to the Channel entity.
func (ccu *ChannelCostUpdate) SetChannels(c *Channel) *ChannelCostUpdate {
	return ccu.SetChannelsID(c.ID)
}

// Mutation returns the ChannelCostMutation object of the builder.
func (ccu *ChannelCostUpdate) Mutation() *ChannelCostMutation {
	return ccu.mutation
}

// ClearChannels clears the "channels" edge to the Channel entity.
func (ccu *ChannelCostUpdate) ClearChannels() *ChannelCostUpdate {
	ccu.mutation.ClearChannels()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ChannelCostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ccu.defaults()
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ChannelCostUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ChannelCostUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ChannelCostUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *ChannelCostUpdate) defaults() {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		v := channelcost.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *ChannelCostUpdate) check() error {
	if v, ok := ccu.mutation.ChannelCostBatchID(); ok {
		if err := channelcost.ChannelCostBatchIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_cost_batch_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_cost_batch_id": %w`, err)}
		}
	}
	if v, ok := ccu.mutation.ChannelID(); ok {
		if err := channelcost.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_id": %w`, err)}
		}
	}
	if v, ok := ccu.mutation.CountryCode(); ok {
		if err := channelcost.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.country_code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *ChannelCostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelCostUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *ChannelCostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelcost.Table,
			Columns: channelcost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcost.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.SetField(channelcost.FieldDeletedAt, field.TypeTime, value)
	}
	if ccu.mutation.DeletedAtCleared() {
		_spec.ClearField(channelcost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.ChannelCostBatchID(); ok {
		_spec.SetField(channelcost.FieldChannelCostBatchID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.AddedChannelCostBatchID(); ok {
		_spec.AddField(channelcost.FieldChannelCostBatchID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.Mode(); ok {
		_spec.SetField(channelcost.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ccu.mutation.AddedMode(); ok {
		_spec.AddField(channelcost.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ccu.mutation.CountryCode(); ok {
		_spec.SetField(channelcost.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Zone(); ok {
		_spec.SetField(channelcost.FieldZone, field.TypeString, value)
	}
	if value, ok := ccu.mutation.StartWeight(); ok {
		_spec.SetField(channelcost.FieldStartWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedStartWeight(); ok {
		_spec.AddField(channelcost.FieldStartWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.EndWeight(); ok {
		_spec.SetField(channelcost.FieldEndWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedEndWeight(); ok {
		_spec.AddField(channelcost.FieldEndWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.FirstWeight(); ok {
		_spec.SetField(channelcost.FieldFirstWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedFirstWeight(); ok {
		_spec.AddField(channelcost.FieldFirstWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.FirstWeightFee(); ok {
		_spec.SetField(channelcost.FieldFirstWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedFirstWeightFee(); ok {
		_spec.AddField(channelcost.FieldFirstWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.UnitWeight(); ok {
		_spec.SetField(channelcost.FieldUnitWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedUnitWeight(); ok {
		_spec.AddField(channelcost.FieldUnitWeight, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.UnitWeightFee(); ok {
		_spec.SetField(channelcost.FieldUnitWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedUnitWeightFee(); ok {
		_spec.AddField(channelcost.FieldUnitWeightFee, field.TypeFloat64, value)
	}
	if ccu.mutation.UnitWeightFeeCleared() {
		_spec.ClearField(channelcost.FieldUnitWeightFee, field.TypeFloat64)
	}
	if value, ok := ccu.mutation.FuelFee(); ok {
		_spec.SetField(channelcost.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedFuelFee(); ok {
		_spec.AddField(channelcost.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.ProcessingFee(); ok {
		_spec.SetField(channelcost.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedProcessingFee(); ok {
		_spec.AddField(channelcost.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.RegistrationFee(); ok {
		_spec.SetField(channelcost.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedRegistrationFee(); ok {
		_spec.AddField(channelcost.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.MiscFee(); ok {
		_spec.SetField(channelcost.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.AddedMiscFee(); ok {
		_spec.AddField(channelcost.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ccu.mutation.MinNormalDays(); ok {
		_spec.SetField(channelcost.FieldMinNormalDays, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedMinNormalDays(); ok {
		_spec.AddField(channelcost.FieldMinNormalDays, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.MaxNormalDays(); ok {
		_spec.SetField(channelcost.FieldMaxNormalDays, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedMaxNormalDays(); ok {
		_spec.AddField(channelcost.FieldMaxNormalDays, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.Status(); ok {
		_spec.SetField(channelcost.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccu.mutation.AddedStatus(); ok {
		_spec.AddField(channelcost.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccu.mutation.AverageDays(); ok {
		_spec.SetField(channelcost.FieldAverageDays, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedAverageDays(); ok {
		_spec.AddField(channelcost.FieldAverageDays, field.TypeInt, value)
	}
	if ccu.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ccu.schemaConfig.ChannelCost
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ccu.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ccu.schemaConfig.ChannelCost
	ctx = internal.NewSchemaConfigContext(ctx, ccu.schemaConfig)
	_spec.AddModifiers(ccu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChannelCostUpdateOne is the builder for updating a single ChannelCost entity.
type ChannelCostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelCostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *ChannelCostUpdateOne) SetUpdatedAt(t time.Time) *ChannelCostUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *ChannelCostUpdateOne) SetDeletedAt(t time.Time) *ChannelCostUpdateOne {
	ccuo.mutation.SetDeletedAt(t)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableDeletedAt(t *time.Time) *ChannelCostUpdateOne {
	if t != nil {
		ccuo.SetDeletedAt(*t)
	}
	return ccuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccuo *ChannelCostUpdateOne) ClearDeletedAt() *ChannelCostUpdateOne {
	ccuo.mutation.ClearDeletedAt()
	return ccuo
}

// SetChannelCostBatchID sets the "channel_cost_batch_id" field.
func (ccuo *ChannelCostUpdateOne) SetChannelCostBatchID(i int64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetChannelCostBatchID()
	ccuo.mutation.SetChannelCostBatchID(i)
	return ccuo
}

// AddChannelCostBatchID adds i to the "channel_cost_batch_id" field.
func (ccuo *ChannelCostUpdateOne) AddChannelCostBatchID(i int64) *ChannelCostUpdateOne {
	ccuo.mutation.AddChannelCostBatchID(i)
	return ccuo
}

// SetChannelID sets the "channel_id" field.
func (ccuo *ChannelCostUpdateOne) SetChannelID(i int64) *ChannelCostUpdateOne {
	ccuo.mutation.SetChannelID(i)
	return ccuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableChannelID(i *int64) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetChannelID(*i)
	}
	return ccuo
}

// ClearChannelID clears the value of the "channel_id" field.
func (ccuo *ChannelCostUpdateOne) ClearChannelID() *ChannelCostUpdateOne {
	ccuo.mutation.ClearChannelID()
	return ccuo
}

// SetMode sets the "mode" field.
func (ccuo *ChannelCostUpdateOne) SetMode(i int8) *ChannelCostUpdateOne {
	ccuo.mutation.ResetMode()
	ccuo.mutation.SetMode(i)
	return ccuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableMode(i *int8) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetMode(*i)
	}
	return ccuo
}

// AddMode adds i to the "mode" field.
func (ccuo *ChannelCostUpdateOne) AddMode(i int8) *ChannelCostUpdateOne {
	ccuo.mutation.AddMode(i)
	return ccuo
}

// SetCountryCode sets the "country_code" field.
func (ccuo *ChannelCostUpdateOne) SetCountryCode(s string) *ChannelCostUpdateOne {
	ccuo.mutation.SetCountryCode(s)
	return ccuo
}

// SetZone sets the "zone" field.
func (ccuo *ChannelCostUpdateOne) SetZone(s string) *ChannelCostUpdateOne {
	ccuo.mutation.SetZone(s)
	return ccuo
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableZone(s *string) *ChannelCostUpdateOne {
	if s != nil {
		ccuo.SetZone(*s)
	}
	return ccuo
}

// SetStartWeight sets the "start_weight" field.
func (ccuo *ChannelCostUpdateOne) SetStartWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetStartWeight()
	ccuo.mutation.SetStartWeight(i)
	return ccuo
}

// AddStartWeight adds i to the "start_weight" field.
func (ccuo *ChannelCostUpdateOne) AddStartWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddStartWeight(i)
	return ccuo
}

// SetEndWeight sets the "end_weight" field.
func (ccuo *ChannelCostUpdateOne) SetEndWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetEndWeight()
	ccuo.mutation.SetEndWeight(i)
	return ccuo
}

// AddEndWeight adds i to the "end_weight" field.
func (ccuo *ChannelCostUpdateOne) AddEndWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddEndWeight(i)
	return ccuo
}

// SetFirstWeight sets the "first_weight" field.
func (ccuo *ChannelCostUpdateOne) SetFirstWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetFirstWeight()
	ccuo.mutation.SetFirstWeight(i)
	return ccuo
}

// SetNillableFirstWeight sets the "first_weight" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableFirstWeight(i *int) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetFirstWeight(*i)
	}
	return ccuo
}

// AddFirstWeight adds i to the "first_weight" field.
func (ccuo *ChannelCostUpdateOne) AddFirstWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddFirstWeight(i)
	return ccuo
}

// SetFirstWeightFee sets the "first_weight_fee" field.
func (ccuo *ChannelCostUpdateOne) SetFirstWeightFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetFirstWeightFee()
	ccuo.mutation.SetFirstWeightFee(f)
	return ccuo
}

// SetNillableFirstWeightFee sets the "first_weight_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableFirstWeightFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetFirstWeightFee(*f)
	}
	return ccuo
}

// AddFirstWeightFee adds f to the "first_weight_fee" field.
func (ccuo *ChannelCostUpdateOne) AddFirstWeightFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddFirstWeightFee(f)
	return ccuo
}

// SetUnitWeight sets the "unit_weight" field.
func (ccuo *ChannelCostUpdateOne) SetUnitWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetUnitWeight()
	ccuo.mutation.SetUnitWeight(i)
	return ccuo
}

// AddUnitWeight adds i to the "unit_weight" field.
func (ccuo *ChannelCostUpdateOne) AddUnitWeight(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddUnitWeight(i)
	return ccuo
}

// SetUnitWeightFee sets the "unit_weight_fee" field.
func (ccuo *ChannelCostUpdateOne) SetUnitWeightFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetUnitWeightFee()
	ccuo.mutation.SetUnitWeightFee(f)
	return ccuo
}

// SetNillableUnitWeightFee sets the "unit_weight_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableUnitWeightFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetUnitWeightFee(*f)
	}
	return ccuo
}

// AddUnitWeightFee adds f to the "unit_weight_fee" field.
func (ccuo *ChannelCostUpdateOne) AddUnitWeightFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddUnitWeightFee(f)
	return ccuo
}

// ClearUnitWeightFee clears the value of the "unit_weight_fee" field.
func (ccuo *ChannelCostUpdateOne) ClearUnitWeightFee() *ChannelCostUpdateOne {
	ccuo.mutation.ClearUnitWeightFee()
	return ccuo
}

// SetFuelFee sets the "fuel_fee" field.
func (ccuo *ChannelCostUpdateOne) SetFuelFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetFuelFee()
	ccuo.mutation.SetFuelFee(f)
	return ccuo
}

// SetNillableFuelFee sets the "fuel_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableFuelFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetFuelFee(*f)
	}
	return ccuo
}

// AddFuelFee adds f to the "fuel_fee" field.
func (ccuo *ChannelCostUpdateOne) AddFuelFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddFuelFee(f)
	return ccuo
}

// SetProcessingFee sets the "processing_fee" field.
func (ccuo *ChannelCostUpdateOne) SetProcessingFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetProcessingFee()
	ccuo.mutation.SetProcessingFee(f)
	return ccuo
}

// SetNillableProcessingFee sets the "processing_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableProcessingFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetProcessingFee(*f)
	}
	return ccuo
}

// AddProcessingFee adds f to the "processing_fee" field.
func (ccuo *ChannelCostUpdateOne) AddProcessingFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddProcessingFee(f)
	return ccuo
}

// SetRegistrationFee sets the "registration_fee" field.
func (ccuo *ChannelCostUpdateOne) SetRegistrationFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetRegistrationFee()
	ccuo.mutation.SetRegistrationFee(f)
	return ccuo
}

// SetNillableRegistrationFee sets the "registration_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableRegistrationFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetRegistrationFee(*f)
	}
	return ccuo
}

// AddRegistrationFee adds f to the "registration_fee" field.
func (ccuo *ChannelCostUpdateOne) AddRegistrationFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddRegistrationFee(f)
	return ccuo
}

// SetMiscFee sets the "misc_fee" field.
func (ccuo *ChannelCostUpdateOne) SetMiscFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.ResetMiscFee()
	ccuo.mutation.SetMiscFee(f)
	return ccuo
}

// SetNillableMiscFee sets the "misc_fee" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableMiscFee(f *float64) *ChannelCostUpdateOne {
	if f != nil {
		ccuo.SetMiscFee(*f)
	}
	return ccuo
}

// AddMiscFee adds f to the "misc_fee" field.
func (ccuo *ChannelCostUpdateOne) AddMiscFee(f float64) *ChannelCostUpdateOne {
	ccuo.mutation.AddMiscFee(f)
	return ccuo
}

// SetMinNormalDays sets the "min_normal_days" field.
func (ccuo *ChannelCostUpdateOne) SetMinNormalDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetMinNormalDays()
	ccuo.mutation.SetMinNormalDays(i)
	return ccuo
}

// SetNillableMinNormalDays sets the "min_normal_days" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableMinNormalDays(i *int) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetMinNormalDays(*i)
	}
	return ccuo
}

// AddMinNormalDays adds i to the "min_normal_days" field.
func (ccuo *ChannelCostUpdateOne) AddMinNormalDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddMinNormalDays(i)
	return ccuo
}

// SetMaxNormalDays sets the "max_normal_days" field.
func (ccuo *ChannelCostUpdateOne) SetMaxNormalDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetMaxNormalDays()
	ccuo.mutation.SetMaxNormalDays(i)
	return ccuo
}

// SetNillableMaxNormalDays sets the "max_normal_days" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableMaxNormalDays(i *int) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetMaxNormalDays(*i)
	}
	return ccuo
}

// AddMaxNormalDays adds i to the "max_normal_days" field.
func (ccuo *ChannelCostUpdateOne) AddMaxNormalDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddMaxNormalDays(i)
	return ccuo
}

// SetStatus sets the "status" field.
func (ccuo *ChannelCostUpdateOne) SetStatus(i int8) *ChannelCostUpdateOne {
	ccuo.mutation.ResetStatus()
	ccuo.mutation.SetStatus(i)
	return ccuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableStatus(i *int8) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetStatus(*i)
	}
	return ccuo
}

// AddStatus adds i to the "status" field.
func (ccuo *ChannelCostUpdateOne) AddStatus(i int8) *ChannelCostUpdateOne {
	ccuo.mutation.AddStatus(i)
	return ccuo
}

// SetAverageDays sets the "average_days" field.
func (ccuo *ChannelCostUpdateOne) SetAverageDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.ResetAverageDays()
	ccuo.mutation.SetAverageDays(i)
	return ccuo
}

// SetNillableAverageDays sets the "average_days" field if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableAverageDays(i *int) *ChannelCostUpdateOne {
	if i != nil {
		ccuo.SetAverageDays(*i)
	}
	return ccuo
}

// AddAverageDays adds i to the "average_days" field.
func (ccuo *ChannelCostUpdateOne) AddAverageDays(i int) *ChannelCostUpdateOne {
	ccuo.mutation.AddAverageDays(i)
	return ccuo
}

// SetChannelsID sets the "channels" edge to the Channel entity by ID.
func (ccuo *ChannelCostUpdateOne) SetChannelsID(id int64) *ChannelCostUpdateOne {
	ccuo.mutation.SetChannelsID(id)
	return ccuo
}

// SetNillableChannelsID sets the "channels" edge to the Channel entity by ID if the given value is not nil.
func (ccuo *ChannelCostUpdateOne) SetNillableChannelsID(id *int64) *ChannelCostUpdateOne {
	if id != nil {
		ccuo = ccuo.SetChannelsID(*id)
	}
	return ccuo
}

// SetChannels sets the "channels" edge to the Channel entity.
func (ccuo *ChannelCostUpdateOne) SetChannels(c *Channel) *ChannelCostUpdateOne {
	return ccuo.SetChannelsID(c.ID)
}

// Mutation returns the ChannelCostMutation object of the builder.
func (ccuo *ChannelCostUpdateOne) Mutation() *ChannelCostMutation {
	return ccuo.mutation
}

// ClearChannels clears the "channels" edge to the Channel entity.
func (ccuo *ChannelCostUpdateOne) ClearChannels() *ChannelCostUpdateOne {
	ccuo.mutation.ClearChannels()
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ChannelCostUpdateOne) Select(field string, fields ...string) *ChannelCostUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ChannelCost entity.
func (ccuo *ChannelCostUpdateOne) Save(ctx context.Context) (*ChannelCost, error) {
	var (
		err  error
		node *ChannelCost
	)
	ccuo.defaults()
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelCost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelCostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ChannelCostUpdateOne) SaveX(ctx context.Context) *ChannelCost {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ChannelCostUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ChannelCostUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *ChannelCostUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		v := channelcost.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *ChannelCostUpdateOne) check() error {
	if v, ok := ccuo.mutation.ChannelCostBatchID(); ok {
		if err := channelcost.ChannelCostBatchIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_cost_batch_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_cost_batch_id": %w`, err)}
		}
	}
	if v, ok := ccuo.mutation.ChannelID(); ok {
		if err := channelcost.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.channel_id": %w`, err)}
		}
	}
	if v, ok := ccuo.mutation.CountryCode(); ok {
		if err := channelcost.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`gen: validator failed for field "ChannelCost.country_code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *ChannelCostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelCostUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *ChannelCostUpdateOne) sqlSave(ctx context.Context) (_node *ChannelCost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelcost.Table,
			Columns: channelcost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcost.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ChannelCost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelcost.FieldID)
		for _, f := range fields {
			if !channelcost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != channelcost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.SetField(channelcost.FieldDeletedAt, field.TypeTime, value)
	}
	if ccuo.mutation.DeletedAtCleared() {
		_spec.ClearField(channelcost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.ChannelCostBatchID(); ok {
		_spec.SetField(channelcost.FieldChannelCostBatchID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.AddedChannelCostBatchID(); ok {
		_spec.AddField(channelcost.FieldChannelCostBatchID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.Mode(); ok {
		_spec.SetField(channelcost.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ccuo.mutation.AddedMode(); ok {
		_spec.AddField(channelcost.FieldMode, field.TypeInt8, value)
	}
	if value, ok := ccuo.mutation.CountryCode(); ok {
		_spec.SetField(channelcost.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Zone(); ok {
		_spec.SetField(channelcost.FieldZone, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.StartWeight(); ok {
		_spec.SetField(channelcost.FieldStartWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedStartWeight(); ok {
		_spec.AddField(channelcost.FieldStartWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.EndWeight(); ok {
		_spec.SetField(channelcost.FieldEndWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedEndWeight(); ok {
		_spec.AddField(channelcost.FieldEndWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.FirstWeight(); ok {
		_spec.SetField(channelcost.FieldFirstWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedFirstWeight(); ok {
		_spec.AddField(channelcost.FieldFirstWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.FirstWeightFee(); ok {
		_spec.SetField(channelcost.FieldFirstWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedFirstWeightFee(); ok {
		_spec.AddField(channelcost.FieldFirstWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.UnitWeight(); ok {
		_spec.SetField(channelcost.FieldUnitWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedUnitWeight(); ok {
		_spec.AddField(channelcost.FieldUnitWeight, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.UnitWeightFee(); ok {
		_spec.SetField(channelcost.FieldUnitWeightFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedUnitWeightFee(); ok {
		_spec.AddField(channelcost.FieldUnitWeightFee, field.TypeFloat64, value)
	}
	if ccuo.mutation.UnitWeightFeeCleared() {
		_spec.ClearField(channelcost.FieldUnitWeightFee, field.TypeFloat64)
	}
	if value, ok := ccuo.mutation.FuelFee(); ok {
		_spec.SetField(channelcost.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedFuelFee(); ok {
		_spec.AddField(channelcost.FieldFuelFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.ProcessingFee(); ok {
		_spec.SetField(channelcost.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedProcessingFee(); ok {
		_spec.AddField(channelcost.FieldProcessingFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.RegistrationFee(); ok {
		_spec.SetField(channelcost.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedRegistrationFee(); ok {
		_spec.AddField(channelcost.FieldRegistrationFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.MiscFee(); ok {
		_spec.SetField(channelcost.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.AddedMiscFee(); ok {
		_spec.AddField(channelcost.FieldMiscFee, field.TypeFloat64, value)
	}
	if value, ok := ccuo.mutation.MinNormalDays(); ok {
		_spec.SetField(channelcost.FieldMinNormalDays, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedMinNormalDays(); ok {
		_spec.AddField(channelcost.FieldMinNormalDays, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.MaxNormalDays(); ok {
		_spec.SetField(channelcost.FieldMaxNormalDays, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedMaxNormalDays(); ok {
		_spec.AddField(channelcost.FieldMaxNormalDays, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.Status(); ok {
		_spec.SetField(channelcost.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccuo.mutation.AddedStatus(); ok {
		_spec.AddField(channelcost.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccuo.mutation.AverageDays(); ok {
		_spec.SetField(channelcost.FieldAverageDays, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedAverageDays(); ok {
		_spec.AddField(channelcost.FieldAverageDays, field.TypeInt, value)
	}
	if ccuo.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ccuo.schemaConfig.ChannelCost
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   channelcost.ChannelsTable,
			Columns: []string{channelcost.ChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: channel.FieldID,
				},
			},
		}
		edge.Schema = ccuo.schemaConfig.ChannelCost
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ccuo.schemaConfig.ChannelCost
	ctx = internal.NewSchemaConfigContext(ctx, ccuo.schemaConfig)
	_spec.AddModifiers(ccuo.modifiers...)
	_node = &ChannelCost{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
