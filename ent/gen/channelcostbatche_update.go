// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcostbatche"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelCostBatcheUpdate is the builder for updating ChannelCostBatche entities.
type ChannelCostBatcheUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelCostBatcheMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelCostBatcheUpdate builder.
func (ccbu *ChannelCostBatcheUpdate) Where(ps ...predicate.ChannelCostBatche) *ChannelCostBatcheUpdate {
	ccbu.mutation.Where(ps...)
	return ccbu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccbu *ChannelCostBatcheUpdate) SetUpdatedAt(t time.Time) *ChannelCostBatcheUpdate {
	ccbu.mutation.SetUpdatedAt(t)
	return ccbu
}

// SetChannelID sets the "channel_id" field.
func (ccbu *ChannelCostBatcheUpdate) SetChannelID(i int64) *ChannelCostBatcheUpdate {
	ccbu.mutation.ResetChannelID()
	ccbu.mutation.SetChannelID(i)
	return ccbu
}

// AddChannelID adds i to the "channel_id" field.
func (ccbu *ChannelCostBatcheUpdate) AddChannelID(i int64) *ChannelCostBatcheUpdate {
	ccbu.mutation.AddChannelID(i)
	return ccbu
}

// SetEffectiveDate sets the "effective_date" field.
func (ccbu *ChannelCostBatcheUpdate) SetEffectiveDate(t time.Time) *ChannelCostBatcheUpdate {
	ccbu.mutation.SetEffectiveDate(t)
	return ccbu
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (ccbu *ChannelCostBatcheUpdate) SetNillableEffectiveDate(t *time.Time) *ChannelCostBatcheUpdate {
	if t != nil {
		ccbu.SetEffectiveDate(*t)
	}
	return ccbu
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (ccbu *ChannelCostBatcheUpdate) ClearEffectiveDate() *ChannelCostBatcheUpdate {
	ccbu.mutation.ClearEffectiveDate()
	return ccbu
}

// SetExpiryDate sets the "expiry_date" field.
func (ccbu *ChannelCostBatcheUpdate) SetExpiryDate(t time.Time) *ChannelCostBatcheUpdate {
	ccbu.mutation.SetExpiryDate(t)
	return ccbu
}

// SetNillableExpiryDate sets the "expiry_date" field if the given value is not nil.
func (ccbu *ChannelCostBatcheUpdate) SetNillableExpiryDate(t *time.Time) *ChannelCostBatcheUpdate {
	if t != nil {
		ccbu.SetExpiryDate(*t)
	}
	return ccbu
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (ccbu *ChannelCostBatcheUpdate) ClearExpiryDate() *ChannelCostBatcheUpdate {
	ccbu.mutation.ClearExpiryDate()
	return ccbu
}

// SetStatus sets the "status" field.
func (ccbu *ChannelCostBatcheUpdate) SetStatus(b bool) *ChannelCostBatcheUpdate {
	ccbu.mutation.SetStatus(b)
	return ccbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccbu *ChannelCostBatcheUpdate) SetNillableStatus(b *bool) *ChannelCostBatcheUpdate {
	if b != nil {
		ccbu.SetStatus(*b)
	}
	return ccbu
}

// Mutation returns the ChannelCostBatcheMutation object of the builder.
func (ccbu *ChannelCostBatcheUpdate) Mutation() *ChannelCostBatcheMutation {
	return ccbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccbu *ChannelCostBatcheUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ccbu.defaults()
	if len(ccbu.hooks) == 0 {
		if err = ccbu.check(); err != nil {
			return 0, err
		}
		affected, err = ccbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostBatcheMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccbu.check(); err != nil {
				return 0, err
			}
			ccbu.mutation = mutation
			affected, err = ccbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccbu.hooks) - 1; i >= 0; i-- {
			if ccbu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccbu *ChannelCostBatcheUpdate) SaveX(ctx context.Context) int {
	affected, err := ccbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccbu *ChannelCostBatcheUpdate) Exec(ctx context.Context) error {
	_, err := ccbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccbu *ChannelCostBatcheUpdate) ExecX(ctx context.Context) {
	if err := ccbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccbu *ChannelCostBatcheUpdate) defaults() {
	if _, ok := ccbu.mutation.UpdatedAt(); !ok {
		v := channelcostbatche.UpdateDefaultUpdatedAt()
		ccbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccbu *ChannelCostBatcheUpdate) check() error {
	if v, ok := ccbu.mutation.ChannelID(); ok {
		if err := channelcostbatche.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCostBatche.channel_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccbu *ChannelCostBatcheUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelCostBatcheUpdate {
	ccbu.modifiers = append(ccbu.modifiers, modifiers...)
	return ccbu
}

func (ccbu *ChannelCostBatcheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelcostbatche.Table,
			Columns: channelcostbatche.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcostbatche.FieldID,
			},
		},
	}
	if ps := ccbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccbu.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcostbatche.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccbu.mutation.ChannelID(); ok {
		_spec.SetField(channelcostbatche.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccbu.mutation.AddedChannelID(); ok {
		_spec.AddField(channelcostbatche.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccbu.mutation.EffectiveDate(); ok {
		_spec.SetField(channelcostbatche.FieldEffectiveDate, field.TypeTime, value)
	}
	if ccbu.mutation.EffectiveDateCleared() {
		_spec.ClearField(channelcostbatche.FieldEffectiveDate, field.TypeTime)
	}
	if value, ok := ccbu.mutation.ExpiryDate(); ok {
		_spec.SetField(channelcostbatche.FieldExpiryDate, field.TypeTime, value)
	}
	if ccbu.mutation.ExpiryDateCleared() {
		_spec.ClearField(channelcostbatche.FieldExpiryDate, field.TypeTime)
	}
	if value, ok := ccbu.mutation.Status(); ok {
		_spec.SetField(channelcostbatche.FieldStatus, field.TypeBool, value)
	}
	_spec.Node.Schema = ccbu.schemaConfig.ChannelCostBatche
	ctx = internal.NewSchemaConfigContext(ctx, ccbu.schemaConfig)
	_spec.AddModifiers(ccbu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ccbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelcostbatche.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChannelCostBatcheUpdateOne is the builder for updating a single ChannelCostBatche entity.
type ChannelCostBatcheUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelCostBatcheMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ccbuo *ChannelCostBatcheUpdateOne) SetUpdatedAt(t time.Time) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.SetUpdatedAt(t)
	return ccbuo
}

// SetChannelID sets the "channel_id" field.
func (ccbuo *ChannelCostBatcheUpdateOne) SetChannelID(i int64) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.ResetChannelID()
	ccbuo.mutation.SetChannelID(i)
	return ccbuo
}

// AddChannelID adds i to the "channel_id" field.
func (ccbuo *ChannelCostBatcheUpdateOne) AddChannelID(i int64) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.AddChannelID(i)
	return ccbuo
}

// SetEffectiveDate sets the "effective_date" field.
func (ccbuo *ChannelCostBatcheUpdateOne) SetEffectiveDate(t time.Time) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.SetEffectiveDate(t)
	return ccbuo
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (ccbuo *ChannelCostBatcheUpdateOne) SetNillableEffectiveDate(t *time.Time) *ChannelCostBatcheUpdateOne {
	if t != nil {
		ccbuo.SetEffectiveDate(*t)
	}
	return ccbuo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (ccbuo *ChannelCostBatcheUpdateOne) ClearEffectiveDate() *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.ClearEffectiveDate()
	return ccbuo
}

// SetExpiryDate sets the "expiry_date" field.
func (ccbuo *ChannelCostBatcheUpdateOne) SetExpiryDate(t time.Time) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.SetExpiryDate(t)
	return ccbuo
}

// SetNillableExpiryDate sets the "expiry_date" field if the given value is not nil.
func (ccbuo *ChannelCostBatcheUpdateOne) SetNillableExpiryDate(t *time.Time) *ChannelCostBatcheUpdateOne {
	if t != nil {
		ccbuo.SetExpiryDate(*t)
	}
	return ccbuo
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (ccbuo *ChannelCostBatcheUpdateOne) ClearExpiryDate() *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.ClearExpiryDate()
	return ccbuo
}

// SetStatus sets the "status" field.
func (ccbuo *ChannelCostBatcheUpdateOne) SetStatus(b bool) *ChannelCostBatcheUpdateOne {
	ccbuo.mutation.SetStatus(b)
	return ccbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccbuo *ChannelCostBatcheUpdateOne) SetNillableStatus(b *bool) *ChannelCostBatcheUpdateOne {
	if b != nil {
		ccbuo.SetStatus(*b)
	}
	return ccbuo
}

// Mutation returns the ChannelCostBatcheMutation object of the builder.
func (ccbuo *ChannelCostBatcheUpdateOne) Mutation() *ChannelCostBatcheMutation {
	return ccbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccbuo *ChannelCostBatcheUpdateOne) Select(field string, fields ...string) *ChannelCostBatcheUpdateOne {
	ccbuo.fields = append([]string{field}, fields...)
	return ccbuo
}

// Save executes the query and returns the updated ChannelCostBatche entity.
func (ccbuo *ChannelCostBatcheUpdateOne) Save(ctx context.Context) (*ChannelCostBatche, error) {
	var (
		err  error
		node *ChannelCostBatche
	)
	ccbuo.defaults()
	if len(ccbuo.hooks) == 0 {
		if err = ccbuo.check(); err != nil {
			return nil, err
		}
		node, err = ccbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostBatcheMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccbuo.check(); err != nil {
				return nil, err
			}
			ccbuo.mutation = mutation
			node, err = ccbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccbuo.hooks) - 1; i >= 0; i-- {
			if ccbuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelCostBatche)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelCostBatcheMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccbuo *ChannelCostBatcheUpdateOne) SaveX(ctx context.Context) *ChannelCostBatche {
	node, err := ccbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccbuo *ChannelCostBatcheUpdateOne) Exec(ctx context.Context) error {
	_, err := ccbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccbuo *ChannelCostBatcheUpdateOne) ExecX(ctx context.Context) {
	if err := ccbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccbuo *ChannelCostBatcheUpdateOne) defaults() {
	if _, ok := ccbuo.mutation.UpdatedAt(); !ok {
		v := channelcostbatche.UpdateDefaultUpdatedAt()
		ccbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccbuo *ChannelCostBatcheUpdateOne) check() error {
	if v, ok := ccbuo.mutation.ChannelID(); ok {
		if err := channelcostbatche.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCostBatche.channel_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccbuo *ChannelCostBatcheUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelCostBatcheUpdateOne {
	ccbuo.modifiers = append(ccbuo.modifiers, modifiers...)
	return ccbuo
}

func (ccbuo *ChannelCostBatcheUpdateOne) sqlSave(ctx context.Context) (_node *ChannelCostBatche, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channelcostbatche.Table,
			Columns: channelcostbatche.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcostbatche.FieldID,
			},
		},
	}
	id, ok := ccbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ChannelCostBatche.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channelcostbatche.FieldID)
		for _, f := range fields {
			if !channelcostbatche.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != channelcostbatche.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcostbatche.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccbuo.mutation.ChannelID(); ok {
		_spec.SetField(channelcostbatche.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccbuo.mutation.AddedChannelID(); ok {
		_spec.AddField(channelcostbatche.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccbuo.mutation.EffectiveDate(); ok {
		_spec.SetField(channelcostbatche.FieldEffectiveDate, field.TypeTime, value)
	}
	if ccbuo.mutation.EffectiveDateCleared() {
		_spec.ClearField(channelcostbatche.FieldEffectiveDate, field.TypeTime)
	}
	if value, ok := ccbuo.mutation.ExpiryDate(); ok {
		_spec.SetField(channelcostbatche.FieldExpiryDate, field.TypeTime, value)
	}
	if ccbuo.mutation.ExpiryDateCleared() {
		_spec.ClearField(channelcostbatche.FieldExpiryDate, field.TypeTime)
	}
	if value, ok := ccbuo.mutation.Status(); ok {
		_spec.SetField(channelcostbatche.FieldStatus, field.TypeBool, value)
	}
	_spec.Node.Schema = ccbuo.schemaConfig.ChannelCostBatche
	ctx = internal.NewSchemaConfigContext(ctx, ccbuo.schemaConfig)
	_spec.AddModifiers(ccbuo.modifiers...)
	_node = &ChannelCostBatche{config: ccbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channelcostbatche.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
