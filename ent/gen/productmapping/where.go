// Code generated by ent, DO NOT EDIT.

package productmapping

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// PlatformProductID applies equality check predicate on the "platform_product_id" field. It's identical to PlatformProductIDEQ.
func PlatformProductID(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformProductID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// PlatformProductIDEQ applies the EQ predicate on the "platform_product_id" field.
func PlatformProductIDEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDNEQ applies the NEQ predicate on the "platform_product_id" field.
func PlatformProductIDNEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformProductID), v))
	})
}

// PlatformProductIDIn applies the In predicate on the "platform_product_id" field.
func PlatformProductIDIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatformProductID), v...))
	})
}

// PlatformProductIDNotIn applies the NotIn predicate on the "platform_product_id" field.
func PlatformProductIDNotIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatformProductID), v...))
	})
}

// PlatformProductIDIsNil applies the IsNil predicate on the "platform_product_id" field.
func PlatformProductIDIsNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatformProductID)))
	})
}

// PlatformProductIDNotNil applies the NotNil predicate on the "platform_product_id" field.
func PlatformProductIDNotNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatformProductID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQty), v))
	})
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQty), v))
	})
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...int) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQty), v...))
	})
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...int) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQty), v...))
	})
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQty), v))
	})
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQty), v))
	})
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQty), v))
	})
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v int) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQty), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.ProductMapping {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// HasPlatformProducts applies the HasEdge predicate on the "platform_products" edge.
func HasPlatformProducts() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlatformProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlatformProductsTable, PlatformProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlatformProductsWith applies the HasEdge predicate on the "platform_products" edge with a given conditions (other predicates).
func HasPlatformProductsWith(preds ...predicate.PlatformProduct) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlatformProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlatformProductsTable, PlatformProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PlatformProduct
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Product
		step.Edge.Schema = schemaConfig.ProductMapping
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductMapping) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductMapping) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductMapping) predicate.ProductMapping {
	return predicate.ProductMapping(func(s *sql.Selector) {
		p(s.Not())
	})
}
