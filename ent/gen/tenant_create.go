// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TenantCreate) SetCreatedAt(t time.Time) *TenantCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreatedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TenantCreate) SetUpdatedAt(t time.Time) *TenantCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdatedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TenantCreate) SetDeletedAt(t time.Time) *TenantCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDeletedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetCode sets the "code" field.
func (tc *TenantCreate) SetCode(s string) *TenantCreate {
	tc.mutation.SetCode(s)
	return tc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCode(s *string) *TenantCreate {
	if s != nil {
		tc.SetCode(*s)
	}
	return tc
}

// SetBalance sets the "balance" field.
func (tc *TenantCreate) SetBalance(f float64) *TenantCreate {
	tc.mutation.SetBalance(f)
	return tc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tc *TenantCreate) SetNillableBalance(f *float64) *TenantCreate {
	if f != nil {
		tc.SetBalance(*f)
	}
	return tc
}

// SetCurrency sets the "currency" field.
func (tc *TenantCreate) SetCurrency(s string) *TenantCreate {
	tc.mutation.SetCurrency(s)
	return tc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCurrency(s *string) *TenantCreate {
	if s != nil {
		tc.SetCurrency(*s)
	}
	return tc
}

// SetHandlingFee sets the "handling_fee" field.
func (tc *TenantCreate) SetHandlingFee(f float64) *TenantCreate {
	tc.mutation.SetHandlingFee(f)
	return tc
}

// SetNillableHandlingFee sets the "handling_fee" field if the given value is not nil.
func (tc *TenantCreate) SetNillableHandlingFee(f *float64) *TenantCreate {
	if f != nil {
		tc.SetHandlingFee(*f)
	}
	return tc
}

// SetShippingOption sets the "shipping_option" field.
func (tc *TenantCreate) SetShippingOption(i int8) *TenantCreate {
	tc.mutation.SetShippingOption(i)
	return tc
}

// SetNillableShippingOption sets the "shipping_option" field if the given value is not nil.
func (tc *TenantCreate) SetNillableShippingOption(i *int8) *TenantCreate {
	if i != nil {
		tc.SetShippingOption(*i)
	}
	return tc
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (tc *TenantCreate) SetPrepayTariff(i int8) *TenantCreate {
	tc.mutation.SetPrepayTariff(i)
	return tc
}

// SetNillablePrepayTariff sets the "prepay_tariff" field if the given value is not nil.
func (tc *TenantCreate) SetNillablePrepayTariff(i *int8) *TenantCreate {
	if i != nil {
		tc.SetPrepayTariff(*i)
	}
	return tc
}

// SetIossNumber sets the "ioss_number" field.
func (tc *TenantCreate) SetIossNumber(s string) *TenantCreate {
	tc.mutation.SetIossNumber(s)
	return tc
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (tc *TenantCreate) SetNillableIossNumber(s *string) *TenantCreate {
	if s != nil {
		tc.SetIossNumber(*s)
	}
	return tc
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (tc *TenantCreate) SetIossCountryCode(s string) *TenantCreate {
	tc.mutation.SetIossCountryCode(s)
	return tc
}

// SetNillableIossCountryCode sets the "ioss_country_code" field if the given value is not nil.
func (tc *TenantCreate) SetNillableIossCountryCode(s *string) *TenantCreate {
	if s != nil {
		tc.SetIossCountryCode(*s)
	}
	return tc
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (tc *TenantCreate) SetUkVatNumber(s string) *TenantCreate {
	tc.mutation.SetUkVatNumber(s)
	return tc
}

// SetNillableUkVatNumber sets the "uk_vat_number" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUkVatNumber(s *string) *TenantCreate {
	if s != nil {
		tc.SetUkVatNumber(*s)
	}
	return tc
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (tc *TenantCreate) SetDefaultWarehouse(i int64) *TenantCreate {
	tc.mutation.SetDefaultWarehouse(i)
	return tc
}

// SetNillableDefaultWarehouse sets the "default_warehouse" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDefaultWarehouse(i *int64) *TenantCreate {
	if i != nil {
		tc.SetDefaultWarehouse(*i)
	}
	return tc
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (tc *TenantCreate) SetPresetChannelIds(s string) *TenantCreate {
	tc.mutation.SetPresetChannelIds(s)
	return tc
}

// SetNillablePresetChannelIds sets the "preset_channel_ids" field if the given value is not nil.
func (tc *TenantCreate) SetNillablePresetChannelIds(s *string) *TenantCreate {
	if s != nil {
		tc.SetPresetChannelIds(*s)
	}
	return tc
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (tc *TenantCreate) SetTestChannelIds(s string) *TenantCreate {
	tc.mutation.SetTestChannelIds(s)
	return tc
}

// SetNillableTestChannelIds sets the "test_channel_ids" field if the given value is not nil.
func (tc *TenantCreate) SetNillableTestChannelIds(s *string) *TenantCreate {
	if s != nil {
		tc.SetTestChannelIds(*s)
	}
	return tc
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (tc *TenantCreate) SetFirstInboundAt(t time.Time) *TenantCreate {
	tc.mutation.SetFirstInboundAt(t)
	return tc
}

// SetNillableFirstInboundAt sets the "first_inbound_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableFirstInboundAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetFirstInboundAt(*t)
	}
	return tc
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (tc *TenantCreate) SetStorageUnitPrice(f float64) *TenantCreate {
	tc.mutation.SetStorageUnitPrice(f)
	return tc
}

// SetNillableStorageUnitPrice sets the "storage_unit_price" field if the given value is not nil.
func (tc *TenantCreate) SetNillableStorageUnitPrice(f *float64) *TenantCreate {
	if f != nil {
		tc.SetStorageUnitPrice(*f)
	}
	return tc
}

// SetCsUserID sets the "cs_user_id" field.
func (tc *TenantCreate) SetCsUserID(i int64) *TenantCreate {
	tc.mutation.SetCsUserID(i)
	return tc
}

// SetNillableCsUserID sets the "cs_user_id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCsUserID(i *int64) *TenantCreate {
	if i != nil {
		tc.SetCsUserID(*i)
	}
	return tc
}

// SetSalesUserID sets the "sales_user_id" field.
func (tc *TenantCreate) SetSalesUserID(i int64) *TenantCreate {
	tc.mutation.SetSalesUserID(i)
	return tc
}

// SetNillableSalesUserID sets the "sales_user_id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableSalesUserID(i *int64) *TenantCreate {
	if i != nil {
		tc.SetSalesUserID(*i)
	}
	return tc
}

// SetInviterUserID sets the "inviter_user_id" field.
func (tc *TenantCreate) SetInviterUserID(i int64) *TenantCreate {
	tc.mutation.SetInviterUserID(i)
	return tc
}

// SetNillableInviterUserID sets the "inviter_user_id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableInviterUserID(i *int64) *TenantCreate {
	if i != nil {
		tc.SetInviterUserID(*i)
	}
	return tc
}

// SetPlatform sets the "platform" field.
func (tc *TenantCreate) SetPlatform(s string) *TenantCreate {
	tc.mutation.SetPlatform(s)
	return tc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tc *TenantCreate) SetNillablePlatform(s *string) *TenantCreate {
	if s != nil {
		tc.SetPlatform(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantCreate) SetID(i int64) *TenantCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TenantMutation object of the builder.
func (tc *TenantCreate) Mutation() *TenantMutation {
	return tc.mutation
}

// Save creates the Tenant in the database.
func (tc *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TenantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tenant.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tenant.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Code(); !ok {
		v := tenant.DefaultCode
		tc.mutation.SetCode(v)
	}
	if _, ok := tc.mutation.Balance(); !ok {
		v := tenant.DefaultBalance
		tc.mutation.SetBalance(v)
	}
	if _, ok := tc.mutation.Currency(); !ok {
		v := tenant.DefaultCurrency
		tc.mutation.SetCurrency(v)
	}
	if _, ok := tc.mutation.HandlingFee(); !ok {
		v := tenant.DefaultHandlingFee
		tc.mutation.SetHandlingFee(v)
	}
	if _, ok := tc.mutation.ShippingOption(); !ok {
		v := tenant.DefaultShippingOption
		tc.mutation.SetShippingOption(v)
	}
	if _, ok := tc.mutation.PrepayTariff(); !ok {
		v := tenant.DefaultPrepayTariff
		tc.mutation.SetPrepayTariff(v)
	}
	if _, ok := tc.mutation.IossNumber(); !ok {
		v := tenant.DefaultIossNumber
		tc.mutation.SetIossNumber(v)
	}
	if _, ok := tc.mutation.IossCountryCode(); !ok {
		v := tenant.DefaultIossCountryCode
		tc.mutation.SetIossCountryCode(v)
	}
	if _, ok := tc.mutation.UkVatNumber(); !ok {
		v := tenant.DefaultUkVatNumber
		tc.mutation.SetUkVatNumber(v)
	}
	if _, ok := tc.mutation.DefaultWarehouse(); !ok {
		v := tenant.DefaultDefaultWarehouse
		tc.mutation.SetDefaultWarehouse(v)
	}
	if _, ok := tc.mutation.StorageUnitPrice(); !ok {
		v := tenant.DefaultStorageUnitPrice
		tc.mutation.SetStorageUnitPrice(v)
	}
	if _, ok := tc.mutation.Platform(); !ok {
		v := tenant.DefaultPlatform
		tc.mutation.SetPlatform(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Tenant.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Tenant.updated_at"`)}
	}
	if _, ok := tc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "Tenant.code"`)}
	}
	if _, ok := tc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`gen: missing required field "Tenant.balance"`)}
	}
	if _, ok := tc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`gen: missing required field "Tenant.currency"`)}
	}
	if _, ok := tc.mutation.HandlingFee(); !ok {
		return &ValidationError{Name: "handling_fee", err: errors.New(`gen: missing required field "Tenant.handling_fee"`)}
	}
	if _, ok := tc.mutation.ShippingOption(); !ok {
		return &ValidationError{Name: "shipping_option", err: errors.New(`gen: missing required field "Tenant.shipping_option"`)}
	}
	if _, ok := tc.mutation.PrepayTariff(); !ok {
		return &ValidationError{Name: "prepay_tariff", err: errors.New(`gen: missing required field "Tenant.prepay_tariff"`)}
	}
	if _, ok := tc.mutation.IossNumber(); !ok {
		return &ValidationError{Name: "ioss_number", err: errors.New(`gen: missing required field "Tenant.ioss_number"`)}
	}
	if _, ok := tc.mutation.IossCountryCode(); !ok {
		return &ValidationError{Name: "ioss_country_code", err: errors.New(`gen: missing required field "Tenant.ioss_country_code"`)}
	}
	if _, ok := tc.mutation.UkVatNumber(); !ok {
		return &ValidationError{Name: "uk_vat_number", err: errors.New(`gen: missing required field "Tenant.uk_vat_number"`)}
	}
	if _, ok := tc.mutation.DefaultWarehouse(); !ok {
		return &ValidationError{Name: "default_warehouse", err: errors.New(`gen: missing required field "Tenant.default_warehouse"`)}
	}
	if _, ok := tc.mutation.StorageUnitPrice(); !ok {
		return &ValidationError{Name: "storage_unit_price", err: errors.New(`gen: missing required field "Tenant.storage_unit_price"`)}
	}
	if _, ok := tc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`gen: missing required field "Tenant.platform"`)}
	}
	return nil
}

func (tc *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tc *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tenant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		}
	)
	_spec.Schema = tc.schemaConfig.Tenant
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tenant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tc.mutation.Balance(); ok {
		_spec.SetField(tenant.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := tc.mutation.Currency(); ok {
		_spec.SetField(tenant.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := tc.mutation.HandlingFee(); ok {
		_spec.SetField(tenant.FieldHandlingFee, field.TypeFloat64, value)
		_node.HandlingFee = value
	}
	if value, ok := tc.mutation.ShippingOption(); ok {
		_spec.SetField(tenant.FieldShippingOption, field.TypeInt8, value)
		_node.ShippingOption = value
	}
	if value, ok := tc.mutation.PrepayTariff(); ok {
		_spec.SetField(tenant.FieldPrepayTariff, field.TypeInt8, value)
		_node.PrepayTariff = value
	}
	if value, ok := tc.mutation.IossNumber(); ok {
		_spec.SetField(tenant.FieldIossNumber, field.TypeString, value)
		_node.IossNumber = value
	}
	if value, ok := tc.mutation.IossCountryCode(); ok {
		_spec.SetField(tenant.FieldIossCountryCode, field.TypeString, value)
		_node.IossCountryCode = value
	}
	if value, ok := tc.mutation.UkVatNumber(); ok {
		_spec.SetField(tenant.FieldUkVatNumber, field.TypeString, value)
		_node.UkVatNumber = value
	}
	if value, ok := tc.mutation.DefaultWarehouse(); ok {
		_spec.SetField(tenant.FieldDefaultWarehouse, field.TypeInt64, value)
		_node.DefaultWarehouse = value
	}
	if value, ok := tc.mutation.PresetChannelIds(); ok {
		_spec.SetField(tenant.FieldPresetChannelIds, field.TypeString, value)
		_node.PresetChannelIds = value
	}
	if value, ok := tc.mutation.TestChannelIds(); ok {
		_spec.SetField(tenant.FieldTestChannelIds, field.TypeString, value)
		_node.TestChannelIds = value
	}
	if value, ok := tc.mutation.FirstInboundAt(); ok {
		_spec.SetField(tenant.FieldFirstInboundAt, field.TypeTime, value)
		_node.FirstInboundAt = value
	}
	if value, ok := tc.mutation.StorageUnitPrice(); ok {
		_spec.SetField(tenant.FieldStorageUnitPrice, field.TypeFloat64, value)
		_node.StorageUnitPrice = value
	}
	if value, ok := tc.mutation.CsUserID(); ok {
		_spec.SetField(tenant.FieldCsUserID, field.TypeInt64, value)
		_node.CsUserID = value
	}
	if value, ok := tc.mutation.SalesUserID(); ok {
		_spec.SetField(tenant.FieldSalesUserID, field.TypeInt64, value)
		_node.SalesUserID = value
	}
	if value, ok := tc.mutation.InviterUserID(); ok {
		_spec.SetField(tenant.FieldInviterUserID, field.TypeInt64, value)
		_node.InviterUserID = value
	}
	if value, ok := tc.mutation.Platform(); ok {
		_spec.SetField(tenant.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TenantCreate) OnConflict(opts ...sql.ConflictOption) *TenantUpsertOne {
	tc.conflict = opts
	return &TenantUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TenantCreate) OnConflictColumns(columns ...string) *TenantUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertOne{
		create: tc,
	}
}

type (
	// TenantUpsertOne is the builder for "upsert"-ing
	//  one Tenant node.
	TenantUpsertOne struct {
		create *TenantCreate
	}

	// TenantUpsert is the "OnConflict" setter.
	TenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsert) SetUpdatedAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdatedAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsert) SetDeletedAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateDeletedAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsert) ClearDeletedAt() *TenantUpsert {
	u.SetNull(tenant.FieldDeletedAt)
	return u
}

// SetCode sets the "code" field.
func (u *TenantUpsert) SetCode(v string) *TenantUpsert {
	u.Set(tenant.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCode() *TenantUpsert {
	u.SetExcluded(tenant.FieldCode)
	return u
}

// SetBalance sets the "balance" field.
func (u *TenantUpsert) SetBalance(v float64) *TenantUpsert {
	u.Set(tenant.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TenantUpsert) UpdateBalance() *TenantUpsert {
	u.SetExcluded(tenant.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *TenantUpsert) AddBalance(v float64) *TenantUpsert {
	u.Add(tenant.FieldBalance, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *TenantUpsert) SetCurrency(v string) *TenantUpsert {
	u.Set(tenant.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCurrency() *TenantUpsert {
	u.SetExcluded(tenant.FieldCurrency)
	return u
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TenantUpsert) SetHandlingFee(v float64) *TenantUpsert {
	u.Set(tenant.FieldHandlingFee, v)
	return u
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TenantUpsert) UpdateHandlingFee() *TenantUpsert {
	u.SetExcluded(tenant.FieldHandlingFee)
	return u
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TenantUpsert) AddHandlingFee(v float64) *TenantUpsert {
	u.Add(tenant.FieldHandlingFee, v)
	return u
}

// SetShippingOption sets the "shipping_option" field.
func (u *TenantUpsert) SetShippingOption(v int8) *TenantUpsert {
	u.Set(tenant.FieldShippingOption, v)
	return u
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *TenantUpsert) UpdateShippingOption() *TenantUpsert {
	u.SetExcluded(tenant.FieldShippingOption)
	return u
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *TenantUpsert) AddShippingOption(v int8) *TenantUpsert {
	u.Add(tenant.FieldShippingOption, v)
	return u
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *TenantUpsert) SetPrepayTariff(v int8) *TenantUpsert {
	u.Set(tenant.FieldPrepayTariff, v)
	return u
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *TenantUpsert) UpdatePrepayTariff() *TenantUpsert {
	u.SetExcluded(tenant.FieldPrepayTariff)
	return u
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *TenantUpsert) AddPrepayTariff(v int8) *TenantUpsert {
	u.Add(tenant.FieldPrepayTariff, v)
	return u
}

// SetIossNumber sets the "ioss_number" field.
func (u *TenantUpsert) SetIossNumber(v string) *TenantUpsert {
	u.Set(tenant.FieldIossNumber, v)
	return u
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *TenantUpsert) UpdateIossNumber() *TenantUpsert {
	u.SetExcluded(tenant.FieldIossNumber)
	return u
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *TenantUpsert) SetIossCountryCode(v string) *TenantUpsert {
	u.Set(tenant.FieldIossCountryCode, v)
	return u
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *TenantUpsert) UpdateIossCountryCode() *TenantUpsert {
	u.SetExcluded(tenant.FieldIossCountryCode)
	return u
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *TenantUpsert) SetUkVatNumber(v string) *TenantUpsert {
	u.Set(tenant.FieldUkVatNumber, v)
	return u
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUkVatNumber() *TenantUpsert {
	u.SetExcluded(tenant.FieldUkVatNumber)
	return u
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *TenantUpsert) SetDefaultWarehouse(v int64) *TenantUpsert {
	u.Set(tenant.FieldDefaultWarehouse, v)
	return u
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *TenantUpsert) UpdateDefaultWarehouse() *TenantUpsert {
	u.SetExcluded(tenant.FieldDefaultWarehouse)
	return u
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *TenantUpsert) AddDefaultWarehouse(v int64) *TenantUpsert {
	u.Add(tenant.FieldDefaultWarehouse, v)
	return u
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *TenantUpsert) SetPresetChannelIds(v string) *TenantUpsert {
	u.Set(tenant.FieldPresetChannelIds, v)
	return u
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *TenantUpsert) UpdatePresetChannelIds() *TenantUpsert {
	u.SetExcluded(tenant.FieldPresetChannelIds)
	return u
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *TenantUpsert) ClearPresetChannelIds() *TenantUpsert {
	u.SetNull(tenant.FieldPresetChannelIds)
	return u
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *TenantUpsert) SetTestChannelIds(v string) *TenantUpsert {
	u.Set(tenant.FieldTestChannelIds, v)
	return u
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *TenantUpsert) UpdateTestChannelIds() *TenantUpsert {
	u.SetExcluded(tenant.FieldTestChannelIds)
	return u
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *TenantUpsert) ClearTestChannelIds() *TenantUpsert {
	u.SetNull(tenant.FieldTestChannelIds)
	return u
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *TenantUpsert) SetFirstInboundAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldFirstInboundAt, v)
	return u
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateFirstInboundAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldFirstInboundAt)
	return u
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *TenantUpsert) ClearFirstInboundAt() *TenantUpsert {
	u.SetNull(tenant.FieldFirstInboundAt)
	return u
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *TenantUpsert) SetStorageUnitPrice(v float64) *TenantUpsert {
	u.Set(tenant.FieldStorageUnitPrice, v)
	return u
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *TenantUpsert) UpdateStorageUnitPrice() *TenantUpsert {
	u.SetExcluded(tenant.FieldStorageUnitPrice)
	return u
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *TenantUpsert) AddStorageUnitPrice(v float64) *TenantUpsert {
	u.Add(tenant.FieldStorageUnitPrice, v)
	return u
}

// SetCsUserID sets the "cs_user_id" field.
func (u *TenantUpsert) SetCsUserID(v int64) *TenantUpsert {
	u.Set(tenant.FieldCsUserID, v)
	return u
}

// UpdateCsUserID sets the "cs_user_id" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCsUserID() *TenantUpsert {
	u.SetExcluded(tenant.FieldCsUserID)
	return u
}

// AddCsUserID adds v to the "cs_user_id" field.
func (u *TenantUpsert) AddCsUserID(v int64) *TenantUpsert {
	u.Add(tenant.FieldCsUserID, v)
	return u
}

// ClearCsUserID clears the value of the "cs_user_id" field.
func (u *TenantUpsert) ClearCsUserID() *TenantUpsert {
	u.SetNull(tenant.FieldCsUserID)
	return u
}

// SetSalesUserID sets the "sales_user_id" field.
func (u *TenantUpsert) SetSalesUserID(v int64) *TenantUpsert {
	u.Set(tenant.FieldSalesUserID, v)
	return u
}

// UpdateSalesUserID sets the "sales_user_id" field to the value that was provided on create.
func (u *TenantUpsert) UpdateSalesUserID() *TenantUpsert {
	u.SetExcluded(tenant.FieldSalesUserID)
	return u
}

// AddSalesUserID adds v to the "sales_user_id" field.
func (u *TenantUpsert) AddSalesUserID(v int64) *TenantUpsert {
	u.Add(tenant.FieldSalesUserID, v)
	return u
}

// ClearSalesUserID clears the value of the "sales_user_id" field.
func (u *TenantUpsert) ClearSalesUserID() *TenantUpsert {
	u.SetNull(tenant.FieldSalesUserID)
	return u
}

// SetInviterUserID sets the "inviter_user_id" field.
func (u *TenantUpsert) SetInviterUserID(v int64) *TenantUpsert {
	u.Set(tenant.FieldInviterUserID, v)
	return u
}

// UpdateInviterUserID sets the "inviter_user_id" field to the value that was provided on create.
func (u *TenantUpsert) UpdateInviterUserID() *TenantUpsert {
	u.SetExcluded(tenant.FieldInviterUserID)
	return u
}

// AddInviterUserID adds v to the "inviter_user_id" field.
func (u *TenantUpsert) AddInviterUserID(v int64) *TenantUpsert {
	u.Add(tenant.FieldInviterUserID, v)
	return u
}

// ClearInviterUserID clears the value of the "inviter_user_id" field.
func (u *TenantUpsert) ClearInviterUserID() *TenantUpsert {
	u.SetNull(tenant.FieldInviterUserID)
	return u
}

// SetPlatform sets the "platform" field.
func (u *TenantUpsert) SetPlatform(v string) *TenantUpsert {
	u.Set(tenant.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TenantUpsert) UpdatePlatform() *TenantUpsert {
	u.SetExcluded(tenant.FieldPlatform)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertOne) UpdateNewValues() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenant.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tenant.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantUpsertOne) Ignore() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertOne) DoNothing() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreate.OnConflict
// documentation for more info.
func (u *TenantUpsertOne) Update(set func(*TenantUpsert)) *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsertOne) SetUpdatedAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdatedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsertOne) SetDeletedAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateDeletedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsertOne) ClearDeletedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenantUpsertOne) SetCode(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCode() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCode()
	})
}

// SetBalance sets the "balance" field.
func (u *TenantUpsertOne) SetBalance(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *TenantUpsertOne) AddBalance(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateBalance() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrency sets the "currency" field.
func (u *TenantUpsertOne) SetCurrency(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCurrency() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCurrency()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TenantUpsertOne) SetHandlingFee(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TenantUpsertOne) AddHandlingFee(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateHandlingFee() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetShippingOption sets the "shipping_option" field.
func (u *TenantUpsertOne) SetShippingOption(v int8) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetShippingOption(v)
	})
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *TenantUpsertOne) AddShippingOption(v int8) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddShippingOption(v)
	})
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateShippingOption() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateShippingOption()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *TenantUpsertOne) SetPrepayTariff(v int8) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetPrepayTariff(v)
	})
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *TenantUpsertOne) AddPrepayTariff(v int8) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdatePrepayTariff() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetIossNumber sets the "ioss_number" field.
func (u *TenantUpsertOne) SetIossNumber(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetIossNumber(v)
	})
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateIossNumber() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIossNumber()
	})
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *TenantUpsertOne) SetIossCountryCode(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetIossCountryCode(v)
	})
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateIossCountryCode() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIossCountryCode()
	})
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *TenantUpsertOne) SetUkVatNumber(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUkVatNumber(v)
	})
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUkVatNumber() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUkVatNumber()
	})
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *TenantUpsertOne) SetDefaultWarehouse(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetDefaultWarehouse(v)
	})
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *TenantUpsertOne) AddDefaultWarehouse(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddDefaultWarehouse(v)
	})
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateDefaultWarehouse() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDefaultWarehouse()
	})
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *TenantUpsertOne) SetPresetChannelIds(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetPresetChannelIds(v)
	})
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdatePresetChannelIds() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePresetChannelIds()
	})
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *TenantUpsertOne) ClearPresetChannelIds() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearPresetChannelIds()
	})
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *TenantUpsertOne) SetTestChannelIds(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetTestChannelIds(v)
	})
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateTestChannelIds() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateTestChannelIds()
	})
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *TenantUpsertOne) ClearTestChannelIds() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearTestChannelIds()
	})
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *TenantUpsertOne) SetFirstInboundAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetFirstInboundAt(v)
	})
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateFirstInboundAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateFirstInboundAt()
	})
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *TenantUpsertOne) ClearFirstInboundAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearFirstInboundAt()
	})
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *TenantUpsertOne) SetStorageUnitPrice(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetStorageUnitPrice(v)
	})
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *TenantUpsertOne) AddStorageUnitPrice(v float64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddStorageUnitPrice(v)
	})
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateStorageUnitPrice() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStorageUnitPrice()
	})
}

// SetCsUserID sets the "cs_user_id" field.
func (u *TenantUpsertOne) SetCsUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCsUserID(v)
	})
}

// AddCsUserID adds v to the "cs_user_id" field.
func (u *TenantUpsertOne) AddCsUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddCsUserID(v)
	})
}

// UpdateCsUserID sets the "cs_user_id" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCsUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCsUserID()
	})
}

// ClearCsUserID clears the value of the "cs_user_id" field.
func (u *TenantUpsertOne) ClearCsUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCsUserID()
	})
}

// SetSalesUserID sets the "sales_user_id" field.
func (u *TenantUpsertOne) SetSalesUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetSalesUserID(v)
	})
}

// AddSalesUserID adds v to the "sales_user_id" field.
func (u *TenantUpsertOne) AddSalesUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddSalesUserID(v)
	})
}

// UpdateSalesUserID sets the "sales_user_id" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateSalesUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSalesUserID()
	})
}

// ClearSalesUserID clears the value of the "sales_user_id" field.
func (u *TenantUpsertOne) ClearSalesUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSalesUserID()
	})
}

// SetInviterUserID sets the "inviter_user_id" field.
func (u *TenantUpsertOne) SetInviterUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetInviterUserID(v)
	})
}

// AddInviterUserID adds v to the "inviter_user_id" field.
func (u *TenantUpsertOne) AddInviterUserID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddInviterUserID(v)
	})
}

// UpdateInviterUserID sets the "inviter_user_id" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateInviterUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateInviterUserID()
	})
}

// ClearInviterUserID clears the value of the "inviter_user_id" field.
func (u *TenantUpsertOne) ClearInviterUserID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearInviterUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *TenantUpsertOne) SetPlatform(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdatePlatform() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePlatform()
	})
}

// Exec executes the query.
func (u *TenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	builders []*TenantCreate
	conflict []sql.ConflictOption
}

// Save creates the Tenant entities in the database.
func (tcb *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUpsertBulk {
	tcb.conflict = opts
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflictColumns(columns ...string) *TenantUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// TenantUpsertBulk is the builder for "upsert"-ing
// a bulk of Tenant nodes.
type TenantUpsertBulk struct {
	create *TenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertBulk) UpdateNewValues() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenant.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tenant.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantUpsertBulk) Ignore() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertBulk) DoNothing() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUpsertBulk) Update(set func(*TenantUpsert)) *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsertBulk) SetUpdatedAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdatedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsertBulk) SetDeletedAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateDeletedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsertBulk) ClearDeletedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenantUpsertBulk) SetCode(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCode() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCode()
	})
}

// SetBalance sets the "balance" field.
func (u *TenantUpsertBulk) SetBalance(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *TenantUpsertBulk) AddBalance(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateBalance() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateBalance()
	})
}

// SetCurrency sets the "currency" field.
func (u *TenantUpsertBulk) SetCurrency(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCurrency() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCurrency()
	})
}

// SetHandlingFee sets the "handling_fee" field.
func (u *TenantUpsertBulk) SetHandlingFee(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetHandlingFee(v)
	})
}

// AddHandlingFee adds v to the "handling_fee" field.
func (u *TenantUpsertBulk) AddHandlingFee(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddHandlingFee(v)
	})
}

// UpdateHandlingFee sets the "handling_fee" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateHandlingFee() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateHandlingFee()
	})
}

// SetShippingOption sets the "shipping_option" field.
func (u *TenantUpsertBulk) SetShippingOption(v int8) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetShippingOption(v)
	})
}

// AddShippingOption adds v to the "shipping_option" field.
func (u *TenantUpsertBulk) AddShippingOption(v int8) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddShippingOption(v)
	})
}

// UpdateShippingOption sets the "shipping_option" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateShippingOption() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateShippingOption()
	})
}

// SetPrepayTariff sets the "prepay_tariff" field.
func (u *TenantUpsertBulk) SetPrepayTariff(v int8) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetPrepayTariff(v)
	})
}

// AddPrepayTariff adds v to the "prepay_tariff" field.
func (u *TenantUpsertBulk) AddPrepayTariff(v int8) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddPrepayTariff(v)
	})
}

// UpdatePrepayTariff sets the "prepay_tariff" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdatePrepayTariff() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePrepayTariff()
	})
}

// SetIossNumber sets the "ioss_number" field.
func (u *TenantUpsertBulk) SetIossNumber(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetIossNumber(v)
	})
}

// UpdateIossNumber sets the "ioss_number" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateIossNumber() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIossNumber()
	})
}

// SetIossCountryCode sets the "ioss_country_code" field.
func (u *TenantUpsertBulk) SetIossCountryCode(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetIossCountryCode(v)
	})
}

// UpdateIossCountryCode sets the "ioss_country_code" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateIossCountryCode() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateIossCountryCode()
	})
}

// SetUkVatNumber sets the "uk_vat_number" field.
func (u *TenantUpsertBulk) SetUkVatNumber(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUkVatNumber(v)
	})
}

// UpdateUkVatNumber sets the "uk_vat_number" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUkVatNumber() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUkVatNumber()
	})
}

// SetDefaultWarehouse sets the "default_warehouse" field.
func (u *TenantUpsertBulk) SetDefaultWarehouse(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetDefaultWarehouse(v)
	})
}

// AddDefaultWarehouse adds v to the "default_warehouse" field.
func (u *TenantUpsertBulk) AddDefaultWarehouse(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddDefaultWarehouse(v)
	})
}

// UpdateDefaultWarehouse sets the "default_warehouse" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateDefaultWarehouse() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDefaultWarehouse()
	})
}

// SetPresetChannelIds sets the "preset_channel_ids" field.
func (u *TenantUpsertBulk) SetPresetChannelIds(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetPresetChannelIds(v)
	})
}

// UpdatePresetChannelIds sets the "preset_channel_ids" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdatePresetChannelIds() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePresetChannelIds()
	})
}

// ClearPresetChannelIds clears the value of the "preset_channel_ids" field.
func (u *TenantUpsertBulk) ClearPresetChannelIds() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearPresetChannelIds()
	})
}

// SetTestChannelIds sets the "test_channel_ids" field.
func (u *TenantUpsertBulk) SetTestChannelIds(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetTestChannelIds(v)
	})
}

// UpdateTestChannelIds sets the "test_channel_ids" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateTestChannelIds() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateTestChannelIds()
	})
}

// ClearTestChannelIds clears the value of the "test_channel_ids" field.
func (u *TenantUpsertBulk) ClearTestChannelIds() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearTestChannelIds()
	})
}

// SetFirstInboundAt sets the "first_inbound_at" field.
func (u *TenantUpsertBulk) SetFirstInboundAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetFirstInboundAt(v)
	})
}

// UpdateFirstInboundAt sets the "first_inbound_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateFirstInboundAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateFirstInboundAt()
	})
}

// ClearFirstInboundAt clears the value of the "first_inbound_at" field.
func (u *TenantUpsertBulk) ClearFirstInboundAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearFirstInboundAt()
	})
}

// SetStorageUnitPrice sets the "storage_unit_price" field.
func (u *TenantUpsertBulk) SetStorageUnitPrice(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetStorageUnitPrice(v)
	})
}

// AddStorageUnitPrice adds v to the "storage_unit_price" field.
func (u *TenantUpsertBulk) AddStorageUnitPrice(v float64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddStorageUnitPrice(v)
	})
}

// UpdateStorageUnitPrice sets the "storage_unit_price" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateStorageUnitPrice() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStorageUnitPrice()
	})
}

// SetCsUserID sets the "cs_user_id" field.
func (u *TenantUpsertBulk) SetCsUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCsUserID(v)
	})
}

// AddCsUserID adds v to the "cs_user_id" field.
func (u *TenantUpsertBulk) AddCsUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddCsUserID(v)
	})
}

// UpdateCsUserID sets the "cs_user_id" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCsUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCsUserID()
	})
}

// ClearCsUserID clears the value of the "cs_user_id" field.
func (u *TenantUpsertBulk) ClearCsUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCsUserID()
	})
}

// SetSalesUserID sets the "sales_user_id" field.
func (u *TenantUpsertBulk) SetSalesUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetSalesUserID(v)
	})
}

// AddSalesUserID adds v to the "sales_user_id" field.
func (u *TenantUpsertBulk) AddSalesUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddSalesUserID(v)
	})
}

// UpdateSalesUserID sets the "sales_user_id" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateSalesUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateSalesUserID()
	})
}

// ClearSalesUserID clears the value of the "sales_user_id" field.
func (u *TenantUpsertBulk) ClearSalesUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearSalesUserID()
	})
}

// SetInviterUserID sets the "inviter_user_id" field.
func (u *TenantUpsertBulk) SetInviterUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetInviterUserID(v)
	})
}

// AddInviterUserID adds v to the "inviter_user_id" field.
func (u *TenantUpsertBulk) AddInviterUserID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddInviterUserID(v)
	})
}

// UpdateInviterUserID sets the "inviter_user_id" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateInviterUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateInviterUserID()
	})
}

// ClearInviterUserID clears the value of the "inviter_user_id" field.
func (u *TenantUpsertBulk) ClearInviterUserID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearInviterUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *TenantUpsertBulk) SetPlatform(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdatePlatform() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdatePlatform()
	})
}

// Exec executes the query.
func (u *TenantUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the TenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
