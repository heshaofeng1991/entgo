// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// OrderTaxationUpdate is the builder for updating OrderTaxation entities.
type OrderTaxationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderTaxationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderTaxationUpdate builder.
func (otu *OrderTaxationUpdate) Where(ps ...predicate.OrderTaxation) *OrderTaxationUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetUpdatedAt sets the "updated_at" field.
func (otu *OrderTaxationUpdate) SetUpdatedAt(t time.Time) *OrderTaxationUpdate {
	otu.mutation.SetUpdatedAt(t)
	return otu
}

// SetDeletedAt sets the "deleted_at" field.
func (otu *OrderTaxationUpdate) SetDeletedAt(t time.Time) *OrderTaxationUpdate {
	otu.mutation.SetDeletedAt(t)
	return otu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otu *OrderTaxationUpdate) SetNillableDeletedAt(t *time.Time) *OrderTaxationUpdate {
	if t != nil {
		otu.SetDeletedAt(*t)
	}
	return otu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (otu *OrderTaxationUpdate) ClearDeletedAt() *OrderTaxationUpdate {
	otu.mutation.ClearDeletedAt()
	return otu
}

// SetOrderID sets the "order_id" field.
func (otu *OrderTaxationUpdate) SetOrderID(i int64) *OrderTaxationUpdate {
	otu.mutation.SetOrderID(i)
	return otu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (otu *OrderTaxationUpdate) SetNillableOrderID(i *int64) *OrderTaxationUpdate {
	if i != nil {
		otu.SetOrderID(*i)
	}
	return otu
}

// ClearOrderID clears the value of the "order_id" field.
func (otu *OrderTaxationUpdate) ClearOrderID() *OrderTaxationUpdate {
	otu.mutation.ClearOrderID()
	return otu
}

// SetType sets the "type" field.
func (otu *OrderTaxationUpdate) SetType(s string) *OrderTaxationUpdate {
	otu.mutation.SetType(s)
	return otu
}

// SetCountryCode sets the "country_code" field.
func (otu *OrderTaxationUpdate) SetCountryCode(s string) *OrderTaxationUpdate {
	otu.mutation.SetCountryCode(s)
	return otu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (otu *OrderTaxationUpdate) SetNillableCountryCode(s *string) *OrderTaxationUpdate {
	if s != nil {
		otu.SetCountryCode(*s)
	}
	return otu
}

// ClearCountryCode clears the value of the "country_code" field.
func (otu *OrderTaxationUpdate) ClearCountryCode() *OrderTaxationUpdate {
	otu.mutation.ClearCountryCode()
	return otu
}

// SetNumber sets the "number" field.
func (otu *OrderTaxationUpdate) SetNumber(s string) *OrderTaxationUpdate {
	otu.mutation.SetNumber(s)
	return otu
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (otu *OrderTaxationUpdate) SetOrdersID(id int64) *OrderTaxationUpdate {
	otu.mutation.SetOrdersID(id)
	return otu
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (otu *OrderTaxationUpdate) SetNillableOrdersID(id *int64) *OrderTaxationUpdate {
	if id != nil {
		otu = otu.SetOrdersID(*id)
	}
	return otu
}

// SetOrders sets the "orders" edge to the Order entity.
func (otu *OrderTaxationUpdate) SetOrders(o *Order) *OrderTaxationUpdate {
	return otu.SetOrdersID(o.ID)
}

// Mutation returns the OrderTaxationMutation object of the builder.
func (otu *OrderTaxationUpdate) Mutation() *OrderTaxationMutation {
	return otu.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (otu *OrderTaxationUpdate) ClearOrders() *OrderTaxationUpdate {
	otu.mutation.ClearOrders()
	return otu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OrderTaxationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	otu.defaults()
	if len(otu.hooks) == 0 {
		affected, err = otu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderTaxationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			otu.mutation = mutation
			affected, err = otu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(otu.hooks) - 1; i >= 0; i-- {
			if otu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = otu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OrderTaxationUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OrderTaxationUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OrderTaxationUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otu *OrderTaxationUpdate) defaults() {
	if _, ok := otu.mutation.UpdatedAt(); !ok {
		v := ordertaxation.UpdateDefaultUpdatedAt()
		otu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otu *OrderTaxationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderTaxationUpdate {
	otu.modifiers = append(otu.modifiers, modifiers...)
	return otu
}

func (otu *OrderTaxationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertaxation.Table,
			Columns: ordertaxation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordertaxation.FieldID,
			},
		},
	}
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertaxation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otu.mutation.DeletedAt(); ok {
		_spec.SetField(ordertaxation.FieldDeletedAt, field.TypeTime, value)
	}
	if otu.mutation.DeletedAtCleared() {
		_spec.ClearField(ordertaxation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := otu.mutation.GetType(); ok {
		_spec.SetField(ordertaxation.FieldType, field.TypeString, value)
	}
	if value, ok := otu.mutation.CountryCode(); ok {
		_spec.SetField(ordertaxation.FieldCountryCode, field.TypeString, value)
	}
	if otu.mutation.CountryCodeCleared() {
		_spec.ClearField(ordertaxation.FieldCountryCode, field.TypeString)
	}
	if value, ok := otu.mutation.Number(); ok {
		_spec.SetField(ordertaxation.FieldNumber, field.TypeString, value)
	}
	if otu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = otu.schemaConfig.OrderTaxation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = otu.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = otu.schemaConfig.OrderTaxation
	ctx = internal.NewSchemaConfigContext(ctx, otu.schemaConfig)
	_spec.AddModifiers(otu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordertaxation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderTaxationUpdateOne is the builder for updating a single OrderTaxation entity.
type OrderTaxationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderTaxationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (otuo *OrderTaxationUpdateOne) SetUpdatedAt(t time.Time) *OrderTaxationUpdateOne {
	otuo.mutation.SetUpdatedAt(t)
	return otuo
}

// SetDeletedAt sets the "deleted_at" field.
func (otuo *OrderTaxationUpdateOne) SetDeletedAt(t time.Time) *OrderTaxationUpdateOne {
	otuo.mutation.SetDeletedAt(t)
	return otuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otuo *OrderTaxationUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderTaxationUpdateOne {
	if t != nil {
		otuo.SetDeletedAt(*t)
	}
	return otuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (otuo *OrderTaxationUpdateOne) ClearDeletedAt() *OrderTaxationUpdateOne {
	otuo.mutation.ClearDeletedAt()
	return otuo
}

// SetOrderID sets the "order_id" field.
func (otuo *OrderTaxationUpdateOne) SetOrderID(i int64) *OrderTaxationUpdateOne {
	otuo.mutation.SetOrderID(i)
	return otuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (otuo *OrderTaxationUpdateOne) SetNillableOrderID(i *int64) *OrderTaxationUpdateOne {
	if i != nil {
		otuo.SetOrderID(*i)
	}
	return otuo
}

// ClearOrderID clears the value of the "order_id" field.
func (otuo *OrderTaxationUpdateOne) ClearOrderID() *OrderTaxationUpdateOne {
	otuo.mutation.ClearOrderID()
	return otuo
}

// SetType sets the "type" field.
func (otuo *OrderTaxationUpdateOne) SetType(s string) *OrderTaxationUpdateOne {
	otuo.mutation.SetType(s)
	return otuo
}

// SetCountryCode sets the "country_code" field.
func (otuo *OrderTaxationUpdateOne) SetCountryCode(s string) *OrderTaxationUpdateOne {
	otuo.mutation.SetCountryCode(s)
	return otuo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (otuo *OrderTaxationUpdateOne) SetNillableCountryCode(s *string) *OrderTaxationUpdateOne {
	if s != nil {
		otuo.SetCountryCode(*s)
	}
	return otuo
}

// ClearCountryCode clears the value of the "country_code" field.
func (otuo *OrderTaxationUpdateOne) ClearCountryCode() *OrderTaxationUpdateOne {
	otuo.mutation.ClearCountryCode()
	return otuo
}

// SetNumber sets the "number" field.
func (otuo *OrderTaxationUpdateOne) SetNumber(s string) *OrderTaxationUpdateOne {
	otuo.mutation.SetNumber(s)
	return otuo
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (otuo *OrderTaxationUpdateOne) SetOrdersID(id int64) *OrderTaxationUpdateOne {
	otuo.mutation.SetOrdersID(id)
	return otuo
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (otuo *OrderTaxationUpdateOne) SetNillableOrdersID(id *int64) *OrderTaxationUpdateOne {
	if id != nil {
		otuo = otuo.SetOrdersID(*id)
	}
	return otuo
}

// SetOrders sets the "orders" edge to the Order entity.
func (otuo *OrderTaxationUpdateOne) SetOrders(o *Order) *OrderTaxationUpdateOne {
	return otuo.SetOrdersID(o.ID)
}

// Mutation returns the OrderTaxationMutation object of the builder.
func (otuo *OrderTaxationUpdateOne) Mutation() *OrderTaxationMutation {
	return otuo.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (otuo *OrderTaxationUpdateOne) ClearOrders() *OrderTaxationUpdateOne {
	otuo.mutation.ClearOrders()
	return otuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OrderTaxationUpdateOne) Select(field string, fields ...string) *OrderTaxationUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OrderTaxation entity.
func (otuo *OrderTaxationUpdateOne) Save(ctx context.Context) (*OrderTaxation, error) {
	var (
		err  error
		node *OrderTaxation
	)
	otuo.defaults()
	if len(otuo.hooks) == 0 {
		node, err = otuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderTaxationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			otuo.mutation = mutation
			node, err = otuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(otuo.hooks) - 1; i >= 0; i-- {
			if otuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = otuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, otuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderTaxation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderTaxationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OrderTaxationUpdateOne) SaveX(ctx context.Context) *OrderTaxation {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OrderTaxationUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OrderTaxationUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otuo *OrderTaxationUpdateOne) defaults() {
	if _, ok := otuo.mutation.UpdatedAt(); !ok {
		v := ordertaxation.UpdateDefaultUpdatedAt()
		otuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (otuo *OrderTaxationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderTaxationUpdateOne {
	otuo.modifiers = append(otuo.modifiers, modifiers...)
	return otuo
}

func (otuo *OrderTaxationUpdateOne) sqlSave(ctx context.Context) (_node *OrderTaxation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertaxation.Table,
			Columns: ordertaxation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordertaxation.FieldID,
			},
		},
	}
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "OrderTaxation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordertaxation.FieldID)
		for _, f := range fields {
			if !ordertaxation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != ordertaxation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertaxation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otuo.mutation.DeletedAt(); ok {
		_spec.SetField(ordertaxation.FieldDeletedAt, field.TypeTime, value)
	}
	if otuo.mutation.DeletedAtCleared() {
		_spec.ClearField(ordertaxation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := otuo.mutation.GetType(); ok {
		_spec.SetField(ordertaxation.FieldType, field.TypeString, value)
	}
	if value, ok := otuo.mutation.CountryCode(); ok {
		_spec.SetField(ordertaxation.FieldCountryCode, field.TypeString, value)
	}
	if otuo.mutation.CountryCodeCleared() {
		_spec.ClearField(ordertaxation.FieldCountryCode, field.TypeString)
	}
	if value, ok := otuo.mutation.Number(); ok {
		_spec.SetField(ordertaxation.FieldNumber, field.TypeString, value)
	}
	if otuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = otuo.schemaConfig.OrderTaxation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := otuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = otuo.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = otuo.schemaConfig.OrderTaxation
	ctx = internal.NewSchemaConfigContext(ctx, otuo.schemaConfig)
	_spec.AddModifiers(otuo.modifiers...)
	_node = &OrderTaxation{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordertaxation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
