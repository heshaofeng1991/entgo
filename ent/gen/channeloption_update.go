// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channeloption"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ChannelOptionUpdate is the builder for updating ChannelOption entities.
type ChannelOptionUpdate struct {
	config
	hooks     []Hook
	mutation  *ChannelOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChannelOptionUpdate builder.
func (cou *ChannelOptionUpdate) Where(ps ...predicate.ChannelOption) *ChannelOptionUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetOrderID sets the "order_id" field.
func (cou *ChannelOptionUpdate) SetOrderID(i int64) *ChannelOptionUpdate {
	cou.mutation.ResetOrderID()
	cou.mutation.SetOrderID(i)
	return cou
}

// AddOrderID adds i to the "order_id" field.
func (cou *ChannelOptionUpdate) AddOrderID(i int64) *ChannelOptionUpdate {
	cou.mutation.AddOrderID(i)
	return cou
}

// SetChannelID sets the "channel_id" field.
func (cou *ChannelOptionUpdate) SetChannelID(i int64) *ChannelOptionUpdate {
	cou.mutation.ResetChannelID()
	cou.mutation.SetChannelID(i)
	return cou
}

// AddChannelID adds i to the "channel_id" field.
func (cou *ChannelOptionUpdate) AddChannelID(i int64) *ChannelOptionUpdate {
	cou.mutation.AddChannelID(i)
	return cou
}

// SetCountryCode sets the "country_code" field.
func (cou *ChannelOptionUpdate) SetCountryCode(s string) *ChannelOptionUpdate {
	cou.mutation.SetCountryCode(s)
	return cou
}

// SetCreatedAt sets the "created_at" field.
func (cou *ChannelOptionUpdate) SetCreatedAt(t time.Time) *ChannelOptionUpdate {
	cou.mutation.SetCreatedAt(t)
	return cou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cou *ChannelOptionUpdate) SetNillableCreatedAt(t *time.Time) *ChannelOptionUpdate {
	if t != nil {
		cou.SetCreatedAt(*t)
	}
	return cou
}

// SetUpdatedAt sets the "updated_at" field.
func (cou *ChannelOptionUpdate) SetUpdatedAt(t time.Time) *ChannelOptionUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// SetDeletedAt sets the "deleted_at" field.
func (cou *ChannelOptionUpdate) SetDeletedAt(t time.Time) *ChannelOptionUpdate {
	cou.mutation.SetDeletedAt(t)
	return cou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cou *ChannelOptionUpdate) SetNillableDeletedAt(t *time.Time) *ChannelOptionUpdate {
	if t != nil {
		cou.SetDeletedAt(*t)
	}
	return cou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cou *ChannelOptionUpdate) ClearDeletedAt() *ChannelOptionUpdate {
	cou.mutation.ClearDeletedAt()
	return cou
}

// Mutation returns the ChannelOptionMutation object of the builder.
func (cou *ChannelOptionUpdate) Mutation() *ChannelOptionMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *ChannelOptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cou.defaults()
	if len(cou.hooks) == 0 {
		affected, err = cou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cou.mutation = mutation
			affected, err = cou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cou.hooks) - 1; i >= 0; i-- {
			if cou.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cou *ChannelOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *ChannelOptionUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *ChannelOptionUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *ChannelOptionUpdate) defaults() {
	if _, ok := cou.mutation.UpdatedAt(); !ok {
		v := channeloption.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cou *ChannelOptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelOptionUpdate {
	cou.modifiers = append(cou.modifiers, modifiers...)
	return cou
}

func (cou *ChannelOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channeloption.Table,
			Columns: channeloption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channeloption.FieldID,
			},
		},
	}
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.OrderID(); ok {
		_spec.SetField(channeloption.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedOrderID(); ok {
		_spec.AddField(channeloption.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.ChannelID(); ok {
		_spec.SetField(channeloption.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedChannelID(); ok {
		_spec.AddField(channeloption.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.CountryCode(); ok {
		_spec.SetField(channeloption.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := cou.mutation.CreatedAt(); ok {
		_spec.SetField(channeloption.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(channeloption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.DeletedAt(); ok {
		_spec.SetField(channeloption.FieldDeletedAt, field.TypeTime, value)
	}
	if cou.mutation.DeletedAtCleared() {
		_spec.ClearField(channeloption.FieldDeletedAt, field.TypeTime)
	}
	_spec.Node.Schema = cou.schemaConfig.ChannelOption
	ctx = internal.NewSchemaConfigContext(ctx, cou.schemaConfig)
	_spec.AddModifiers(cou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channeloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChannelOptionUpdateOne is the builder for updating a single ChannelOption entity.
type ChannelOptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChannelOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrderID sets the "order_id" field.
func (couo *ChannelOptionUpdateOne) SetOrderID(i int64) *ChannelOptionUpdateOne {
	couo.mutation.ResetOrderID()
	couo.mutation.SetOrderID(i)
	return couo
}

// AddOrderID adds i to the "order_id" field.
func (couo *ChannelOptionUpdateOne) AddOrderID(i int64) *ChannelOptionUpdateOne {
	couo.mutation.AddOrderID(i)
	return couo
}

// SetChannelID sets the "channel_id" field.
func (couo *ChannelOptionUpdateOne) SetChannelID(i int64) *ChannelOptionUpdateOne {
	couo.mutation.ResetChannelID()
	couo.mutation.SetChannelID(i)
	return couo
}

// AddChannelID adds i to the "channel_id" field.
func (couo *ChannelOptionUpdateOne) AddChannelID(i int64) *ChannelOptionUpdateOne {
	couo.mutation.AddChannelID(i)
	return couo
}

// SetCountryCode sets the "country_code" field.
func (couo *ChannelOptionUpdateOne) SetCountryCode(s string) *ChannelOptionUpdateOne {
	couo.mutation.SetCountryCode(s)
	return couo
}

// SetCreatedAt sets the "created_at" field.
func (couo *ChannelOptionUpdateOne) SetCreatedAt(t time.Time) *ChannelOptionUpdateOne {
	couo.mutation.SetCreatedAt(t)
	return couo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (couo *ChannelOptionUpdateOne) SetNillableCreatedAt(t *time.Time) *ChannelOptionUpdateOne {
	if t != nil {
		couo.SetCreatedAt(*t)
	}
	return couo
}

// SetUpdatedAt sets the "updated_at" field.
func (couo *ChannelOptionUpdateOne) SetUpdatedAt(t time.Time) *ChannelOptionUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// SetDeletedAt sets the "deleted_at" field.
func (couo *ChannelOptionUpdateOne) SetDeletedAt(t time.Time) *ChannelOptionUpdateOne {
	couo.mutation.SetDeletedAt(t)
	return couo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (couo *ChannelOptionUpdateOne) SetNillableDeletedAt(t *time.Time) *ChannelOptionUpdateOne {
	if t != nil {
		couo.SetDeletedAt(*t)
	}
	return couo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (couo *ChannelOptionUpdateOne) ClearDeletedAt() *ChannelOptionUpdateOne {
	couo.mutation.ClearDeletedAt()
	return couo
}

// Mutation returns the ChannelOptionMutation object of the builder.
func (couo *ChannelOptionUpdateOne) Mutation() *ChannelOptionMutation {
	return couo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *ChannelOptionUpdateOne) Select(field string, fields ...string) *ChannelOptionUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated ChannelOption entity.
func (couo *ChannelOptionUpdateOne) Save(ctx context.Context) (*ChannelOption, error) {
	var (
		err  error
		node *ChannelOption
	)
	couo.defaults()
	if len(couo.hooks) == 0 {
		node, err = couo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelOptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			couo.mutation = mutation
			node, err = couo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(couo.hooks) - 1; i >= 0; i-- {
			if couo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = couo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, couo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelOption)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelOptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (couo *ChannelOptionUpdateOne) SaveX(ctx context.Context) *ChannelOption {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *ChannelOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *ChannelOptionUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *ChannelOptionUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdatedAt(); !ok {
		v := channeloption.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (couo *ChannelOptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChannelOptionUpdateOne {
	couo.modifiers = append(couo.modifiers, modifiers...)
	return couo
}

func (couo *ChannelOptionUpdateOne) sqlSave(ctx context.Context) (_node *ChannelOption, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   channeloption.Table,
			Columns: channeloption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channeloption.FieldID,
			},
		},
	}
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ChannelOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channeloption.FieldID)
		for _, f := range fields {
			if !channeloption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != channeloption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.OrderID(); ok {
		_spec.SetField(channeloption.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedOrderID(); ok {
		_spec.AddField(channeloption.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.ChannelID(); ok {
		_spec.SetField(channeloption.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedChannelID(); ok {
		_spec.AddField(channeloption.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.CountryCode(); ok {
		_spec.SetField(channeloption.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := couo.mutation.CreatedAt(); ok {
		_spec.SetField(channeloption.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(channeloption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.DeletedAt(); ok {
		_spec.SetField(channeloption.FieldDeletedAt, field.TypeTime, value)
	}
	if couo.mutation.DeletedAtCleared() {
		_spec.ClearField(channeloption.FieldDeletedAt, field.TypeTime)
	}
	_spec.Node.Schema = couo.schemaConfig.ChannelOption
	ctx = internal.NewSchemaConfigContext(ctx, couo.schemaConfig)
	_spec.AddModifiers(couo.modifiers...)
	_node = &ChannelOption{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channeloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
