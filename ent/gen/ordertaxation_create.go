// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/ordertaxation"
)

// OrderTaxationCreate is the builder for creating a OrderTaxation entity.
type OrderTaxationCreate struct {
	config
	mutation *OrderTaxationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (otc *OrderTaxationCreate) SetCreatedAt(t time.Time) *OrderTaxationCreate {
	otc.mutation.SetCreatedAt(t)
	return otc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableCreatedAt(t *time.Time) *OrderTaxationCreate {
	if t != nil {
		otc.SetCreatedAt(*t)
	}
	return otc
}

// SetUpdatedAt sets the "updated_at" field.
func (otc *OrderTaxationCreate) SetUpdatedAt(t time.Time) *OrderTaxationCreate {
	otc.mutation.SetUpdatedAt(t)
	return otc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableUpdatedAt(t *time.Time) *OrderTaxationCreate {
	if t != nil {
		otc.SetUpdatedAt(*t)
	}
	return otc
}

// SetDeletedAt sets the "deleted_at" field.
func (otc *OrderTaxationCreate) SetDeletedAt(t time.Time) *OrderTaxationCreate {
	otc.mutation.SetDeletedAt(t)
	return otc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableDeletedAt(t *time.Time) *OrderTaxationCreate {
	if t != nil {
		otc.SetDeletedAt(*t)
	}
	return otc
}

// SetOrderID sets the "order_id" field.
func (otc *OrderTaxationCreate) SetOrderID(i int64) *OrderTaxationCreate {
	otc.mutation.SetOrderID(i)
	return otc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableOrderID(i *int64) *OrderTaxationCreate {
	if i != nil {
		otc.SetOrderID(*i)
	}
	return otc
}

// SetType sets the "type" field.
func (otc *OrderTaxationCreate) SetType(s string) *OrderTaxationCreate {
	otc.mutation.SetType(s)
	return otc
}

// SetCountryCode sets the "country_code" field.
func (otc *OrderTaxationCreate) SetCountryCode(s string) *OrderTaxationCreate {
	otc.mutation.SetCountryCode(s)
	return otc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableCountryCode(s *string) *OrderTaxationCreate {
	if s != nil {
		otc.SetCountryCode(*s)
	}
	return otc
}

// SetNumber sets the "number" field.
func (otc *OrderTaxationCreate) SetNumber(s string) *OrderTaxationCreate {
	otc.mutation.SetNumber(s)
	return otc
}

// SetID sets the "id" field.
func (otc *OrderTaxationCreate) SetID(i int64) *OrderTaxationCreate {
	otc.mutation.SetID(i)
	return otc
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (otc *OrderTaxationCreate) SetOrdersID(id int64) *OrderTaxationCreate {
	otc.mutation.SetOrdersID(id)
	return otc
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (otc *OrderTaxationCreate) SetNillableOrdersID(id *int64) *OrderTaxationCreate {
	if id != nil {
		otc = otc.SetOrdersID(*id)
	}
	return otc
}

// SetOrders sets the "orders" edge to the Order entity.
func (otc *OrderTaxationCreate) SetOrders(o *Order) *OrderTaxationCreate {
	return otc.SetOrdersID(o.ID)
}

// Mutation returns the OrderTaxationMutation object of the builder.
func (otc *OrderTaxationCreate) Mutation() *OrderTaxationMutation {
	return otc.mutation
}

// Save creates the OrderTaxation in the database.
func (otc *OrderTaxationCreate) Save(ctx context.Context) (*OrderTaxation, error) {
	var (
		err  error
		node *OrderTaxation
	)
	otc.defaults()
	if len(otc.hooks) == 0 {
		if err = otc.check(); err != nil {
			return nil, err
		}
		node, err = otc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderTaxationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otc.check(); err != nil {
				return nil, err
			}
			otc.mutation = mutation
			if node, err = otc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(otc.hooks) - 1; i >= 0; i-- {
			if otc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = otc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, otc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderTaxation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderTaxationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OrderTaxationCreate) SaveX(ctx context.Context) *OrderTaxation {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OrderTaxationCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OrderTaxationCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OrderTaxationCreate) defaults() {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		v := ordertaxation.DefaultCreatedAt()
		otc.mutation.SetCreatedAt(v)
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		v := ordertaxation.DefaultUpdatedAt()
		otc.mutation.SetUpdatedAt(v)
	}
	if _, ok := otc.mutation.CountryCode(); !ok {
		v := ordertaxation.DefaultCountryCode
		otc.mutation.SetCountryCode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otc *OrderTaxationCreate) check() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "OrderTaxation.created_at"`)}
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "OrderTaxation.updated_at"`)}
	}
	if _, ok := otc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "OrderTaxation.type"`)}
	}
	if _, ok := otc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`gen: missing required field "OrderTaxation.number"`)}
	}
	return nil
}

func (otc *OrderTaxationCreate) sqlSave(ctx context.Context) (*OrderTaxation, error) {
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (otc *OrderTaxationCreate) createSpec() (*OrderTaxation, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderTaxation{config: otc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordertaxation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ordertaxation.FieldID,
			},
		}
	)
	_spec.Schema = otc.schemaConfig.OrderTaxation
	_spec.OnConflict = otc.conflict
	if id, ok := otc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := otc.mutation.CreatedAt(); ok {
		_spec.SetField(ordertaxation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := otc.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertaxation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := otc.mutation.DeletedAt(); ok {
		_spec.SetField(ordertaxation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := otc.mutation.GetType(); ok {
		_spec.SetField(ordertaxation.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := otc.mutation.CountryCode(); ok {
		_spec.SetField(ordertaxation.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := otc.mutation.Number(); ok {
		_spec.SetField(ordertaxation.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if nodes := otc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertaxation.OrdersTable,
			Columns: []string{ordertaxation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = otc.schemaConfig.OrderTaxation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderTaxation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderTaxationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otc *OrderTaxationCreate) OnConflict(opts ...sql.ConflictOption) *OrderTaxationUpsertOne {
	otc.conflict = opts
	return &OrderTaxationUpsertOne{
		create: otc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otc *OrderTaxationCreate) OnConflictColumns(columns ...string) *OrderTaxationUpsertOne {
	otc.conflict = append(otc.conflict, sql.ConflictColumns(columns...))
	return &OrderTaxationUpsertOne{
		create: otc,
	}
}

type (
	// OrderTaxationUpsertOne is the builder for "upsert"-ing
	//  one OrderTaxation node.
	OrderTaxationUpsertOne struct {
		create *OrderTaxationCreate
	}

	// OrderTaxationUpsert is the "OnConflict" setter.
	OrderTaxationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderTaxationUpsert) SetUpdatedAt(v time.Time) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateUpdatedAt() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderTaxationUpsert) SetDeletedAt(v time.Time) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateDeletedAt() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderTaxationUpsert) ClearDeletedAt() *OrderTaxationUpsert {
	u.SetNull(ordertaxation.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderTaxationUpsert) SetOrderID(v int64) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateOrderID() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderTaxationUpsert) ClearOrderID() *OrderTaxationUpsert {
	u.SetNull(ordertaxation.FieldOrderID)
	return u
}

// SetType sets the "type" field.
func (u *OrderTaxationUpsert) SetType(v string) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateType() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldType)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *OrderTaxationUpsert) SetCountryCode(v string) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateCountryCode() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldCountryCode)
	return u
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrderTaxationUpsert) ClearCountryCode() *OrderTaxationUpsert {
	u.SetNull(ordertaxation.FieldCountryCode)
	return u
}

// SetNumber sets the "number" field.
func (u *OrderTaxationUpsert) SetNumber(v string) *OrderTaxationUpsert {
	u.Set(ordertaxation.FieldNumber, v)
	return u
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *OrderTaxationUpsert) UpdateNumber() *OrderTaxationUpsert {
	u.SetExcluded(ordertaxation.FieldNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordertaxation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderTaxationUpsertOne) UpdateNewValues() *OrderTaxationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ordertaxation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ordertaxation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderTaxationUpsertOne) Ignore() *OrderTaxationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderTaxationUpsertOne) DoNothing() *OrderTaxationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderTaxationCreate.OnConflict
// documentation for more info.
func (u *OrderTaxationUpsertOne) Update(set func(*OrderTaxationUpsert)) *OrderTaxationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderTaxationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderTaxationUpsertOne) SetUpdatedAt(v time.Time) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateUpdatedAt() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderTaxationUpsertOne) SetDeletedAt(v time.Time) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateDeletedAt() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderTaxationUpsertOne) ClearDeletedAt() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderTaxationUpsertOne) SetOrderID(v int64) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateOrderID() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderTaxationUpsertOne) ClearOrderID() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearOrderID()
	})
}

// SetType sets the "type" field.
func (u *OrderTaxationUpsertOne) SetType(v string) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateType() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateType()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *OrderTaxationUpsertOne) SetCountryCode(v string) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateCountryCode() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrderTaxationUpsertOne) ClearCountryCode() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearCountryCode()
	})
}

// SetNumber sets the "number" field.
func (u *OrderTaxationUpsertOne) SetNumber(v string) *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *OrderTaxationUpsertOne) UpdateNumber() *OrderTaxationUpsertOne {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateNumber()
	})
}

// Exec executes the query.
func (u *OrderTaxationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for OrderTaxationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderTaxationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderTaxationUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderTaxationUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderTaxationCreateBulk is the builder for creating many OrderTaxation entities in bulk.
type OrderTaxationCreateBulk struct {
	config
	builders []*OrderTaxationCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderTaxation entities in the database.
func (otcb *OrderTaxationCreateBulk) Save(ctx context.Context) ([]*OrderTaxation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OrderTaxation, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderTaxationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = otcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OrderTaxationCreateBulk) SaveX(ctx context.Context) []*OrderTaxation {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OrderTaxationCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OrderTaxationCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderTaxation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderTaxationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (otcb *OrderTaxationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderTaxationUpsertBulk {
	otcb.conflict = opts
	return &OrderTaxationUpsertBulk{
		create: otcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (otcb *OrderTaxationCreateBulk) OnConflictColumns(columns ...string) *OrderTaxationUpsertBulk {
	otcb.conflict = append(otcb.conflict, sql.ConflictColumns(columns...))
	return &OrderTaxationUpsertBulk{
		create: otcb,
	}
}

// OrderTaxationUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderTaxation nodes.
type OrderTaxationUpsertBulk struct {
	create *OrderTaxationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordertaxation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderTaxationUpsertBulk) UpdateNewValues() *OrderTaxationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ordertaxation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ordertaxation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderTaxation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderTaxationUpsertBulk) Ignore() *OrderTaxationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderTaxationUpsertBulk) DoNothing() *OrderTaxationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderTaxationCreateBulk.OnConflict
// documentation for more info.
func (u *OrderTaxationUpsertBulk) Update(set func(*OrderTaxationUpsert)) *OrderTaxationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderTaxationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderTaxationUpsertBulk) SetUpdatedAt(v time.Time) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateUpdatedAt() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderTaxationUpsertBulk) SetDeletedAt(v time.Time) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateDeletedAt() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderTaxationUpsertBulk) ClearDeletedAt() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderTaxationUpsertBulk) SetOrderID(v int64) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateOrderID() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *OrderTaxationUpsertBulk) ClearOrderID() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearOrderID()
	})
}

// SetType sets the "type" field.
func (u *OrderTaxationUpsertBulk) SetType(v string) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateType() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateType()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *OrderTaxationUpsertBulk) SetCountryCode(v string) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateCountryCode() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrderTaxationUpsertBulk) ClearCountryCode() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.ClearCountryCode()
	})
}

// SetNumber sets the "number" field.
func (u *OrderTaxationUpsertBulk) SetNumber(v string) *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.SetNumber(v)
	})
}

// UpdateNumber sets the "number" field to the value that was provided on create.
func (u *OrderTaxationUpsertBulk) UpdateNumber() *OrderTaxationUpsertBulk {
	return u.Update(func(s *OrderTaxationUpsert) {
		s.UpdateNumber()
	})
}

// Exec executes the query.
func (u *OrderTaxationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the OrderTaxationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for OrderTaxationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderTaxationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
