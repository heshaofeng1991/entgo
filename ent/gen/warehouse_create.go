// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/order"
	"github.com/heshaofeng1991/entgo/ent/gen/warehouse"
)

// WarehouseCreate is the builder for creating a Warehouse entity.
type WarehouseCreate struct {
	config
	mutation *WarehouseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WarehouseCreate) SetCreatedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableCreatedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WarehouseCreate) SetUpdatedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableUpdatedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WarehouseCreate) SetDeletedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableDeletedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetCode sets the "code" field.
func (wc *WarehouseCreate) SetCode(s string) *WarehouseCreate {
	wc.mutation.SetCode(s)
	return wc
}

// SetQuicktronCode sets the "quicktron_code" field.
func (wc *WarehouseCreate) SetQuicktronCode(s string) *WarehouseCreate {
	wc.mutation.SetQuicktronCode(s)
	return wc
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (wc *WarehouseCreate) SetEnableQuicktron(i int) *WarehouseCreate {
	wc.mutation.SetEnableQuicktron(i)
	return wc
}

// SetName sets the "name" field.
func (wc *WarehouseCreate) SetName(s string) *WarehouseCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetCompany sets the "company" field.
func (wc *WarehouseCreate) SetCompany(s string) *WarehouseCreate {
	wc.mutation.SetCompany(s)
	return wc
}

// SetFirstName sets the "first_name" field.
func (wc *WarehouseCreate) SetFirstName(s string) *WarehouseCreate {
	wc.mutation.SetFirstName(s)
	return wc
}

// SetLastName sets the "last_name" field.
func (wc *WarehouseCreate) SetLastName(s string) *WarehouseCreate {
	wc.mutation.SetLastName(s)
	return wc
}

// SetAddress1 sets the "address1" field.
func (wc *WarehouseCreate) SetAddress1(s string) *WarehouseCreate {
	wc.mutation.SetAddress1(s)
	return wc
}

// SetAddress2 sets the "address2" field.
func (wc *WarehouseCreate) SetAddress2(s string) *WarehouseCreate {
	wc.mutation.SetAddress2(s)
	return wc
}

// SetCountryCode sets the "country_code" field.
func (wc *WarehouseCreate) SetCountryCode(s string) *WarehouseCreate {
	wc.mutation.SetCountryCode(s)
	return wc
}

// SetCountryName sets the "country_name" field.
func (wc *WarehouseCreate) SetCountryName(s string) *WarehouseCreate {
	wc.mutation.SetCountryName(s)
	return wc
}

// SetProvince sets the "province" field.
func (wc *WarehouseCreate) SetProvince(s string) *WarehouseCreate {
	wc.mutation.SetProvince(s)
	return wc
}

// SetCity sets the "city" field.
func (wc *WarehouseCreate) SetCity(s string) *WarehouseCreate {
	wc.mutation.SetCity(s)
	return wc
}

// SetZipCode sets the "zip_code" field.
func (wc *WarehouseCreate) SetZipCode(s string) *WarehouseCreate {
	wc.mutation.SetZipCode(s)
	return wc
}

// SetPhone sets the "phone" field.
func (wc *WarehouseCreate) SetPhone(s string) *WarehouseCreate {
	wc.mutation.SetPhone(s)
	return wc
}

// SetStatus sets the "status" field.
func (wc *WarehouseCreate) SetStatus(i int) *WarehouseCreate {
	wc.mutation.SetStatus(i)
	return wc
}

// SetID sets the "id" field.
func (wc *WarehouseCreate) SetID(i int64) *WarehouseCreate {
	wc.mutation.SetID(i)
	return wc
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (wc *WarehouseCreate) AddOrderIDs(ids ...int64) *WarehouseCreate {
	wc.mutation.AddOrderIDs(ids...)
	return wc
}

// AddOrders adds the "orders" edges to the Order entity.
func (wc *WarehouseCreate) AddOrders(o ...*Order) *WarehouseCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wc.AddOrderIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wc *WarehouseCreate) Mutation() *WarehouseMutation {
	return wc.mutation
}

// Save creates the Warehouse in the database.
func (wc *WarehouseCreate) Save(ctx context.Context) (*Warehouse, error) {
	var (
		err  error
		node *Warehouse
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WarehouseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Warehouse)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WarehouseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WarehouseCreate) SaveX(ctx context.Context) *Warehouse {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WarehouseCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WarehouseCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WarehouseCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := warehouse.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := warehouse.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WarehouseCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Warehouse.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Warehouse.updated_at"`)}
	}
	if _, ok := wc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`gen: missing required field "Warehouse.code"`)}
	}
	if _, ok := wc.mutation.QuicktronCode(); !ok {
		return &ValidationError{Name: "quicktron_code", err: errors.New(`gen: missing required field "Warehouse.quicktron_code"`)}
	}
	if _, ok := wc.mutation.EnableQuicktron(); !ok {
		return &ValidationError{Name: "enable_quicktron", err: errors.New(`gen: missing required field "Warehouse.enable_quicktron"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Warehouse.name"`)}
	}
	if _, ok := wc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`gen: missing required field "Warehouse.company"`)}
	}
	if _, ok := wc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`gen: missing required field "Warehouse.first_name"`)}
	}
	if _, ok := wc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`gen: missing required field "Warehouse.last_name"`)}
	}
	if _, ok := wc.mutation.Address1(); !ok {
		return &ValidationError{Name: "address1", err: errors.New(`gen: missing required field "Warehouse.address1"`)}
	}
	if _, ok := wc.mutation.Address2(); !ok {
		return &ValidationError{Name: "address2", err: errors.New(`gen: missing required field "Warehouse.address2"`)}
	}
	if _, ok := wc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`gen: missing required field "Warehouse.country_code"`)}
	}
	if _, ok := wc.mutation.CountryName(); !ok {
		return &ValidationError{Name: "country_name", err: errors.New(`gen: missing required field "Warehouse.country_name"`)}
	}
	if _, ok := wc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`gen: missing required field "Warehouse.province"`)}
	}
	if _, ok := wc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`gen: missing required field "Warehouse.city"`)}
	}
	if _, ok := wc.mutation.ZipCode(); !ok {
		return &ValidationError{Name: "zip_code", err: errors.New(`gen: missing required field "Warehouse.zip_code"`)}
	}
	if _, ok := wc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`gen: missing required field "Warehouse.phone"`)}
	}
	if _, ok := wc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Warehouse.status"`)}
	}
	return nil
}

func (wc *WarehouseCreate) sqlSave(ctx context.Context) (*Warehouse, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (wc *WarehouseCreate) createSpec() (*Warehouse, *sqlgraph.CreateSpec) {
	var (
		_node = &Warehouse{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: warehouse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: warehouse.FieldID,
			},
		}
	)
	_spec.Schema = wc.schemaConfig.Warehouse
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(warehouse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := wc.mutation.Code(); ok {
		_spec.SetField(warehouse.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := wc.mutation.QuicktronCode(); ok {
		_spec.SetField(warehouse.FieldQuicktronCode, field.TypeString, value)
		_node.QuicktronCode = value
	}
	if value, ok := wc.mutation.EnableQuicktron(); ok {
		_spec.SetField(warehouse.FieldEnableQuicktron, field.TypeInt, value)
		_node.EnableQuicktron = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Company(); ok {
		_spec.SetField(warehouse.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := wc.mutation.FirstName(); ok {
		_spec.SetField(warehouse.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := wc.mutation.LastName(); ok {
		_spec.SetField(warehouse.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := wc.mutation.Address1(); ok {
		_spec.SetField(warehouse.FieldAddress1, field.TypeString, value)
		_node.Address1 = value
	}
	if value, ok := wc.mutation.Address2(); ok {
		_spec.SetField(warehouse.FieldAddress2, field.TypeString, value)
		_node.Address2 = value
	}
	if value, ok := wc.mutation.CountryCode(); ok {
		_spec.SetField(warehouse.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := wc.mutation.CountryName(); ok {
		_spec.SetField(warehouse.FieldCountryName, field.TypeString, value)
		_node.CountryName = value
	}
	if value, ok := wc.mutation.Province(); ok {
		_spec.SetField(warehouse.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := wc.mutation.City(); ok {
		_spec.SetField(warehouse.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := wc.mutation.ZipCode(); ok {
		_spec.SetField(warehouse.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	if value, ok := wc.mutation.Phone(); ok {
		_spec.SetField(warehouse.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := wc.mutation.Status(); ok {
		_spec.SetField(warehouse.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if nodes := wc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   warehouse.OrdersTable,
			Columns: []string{warehouse.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: order.FieldID,
				},
			},
		}
		edge.Schema = wc.schemaConfig.Order
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Warehouse.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarehouseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wc *WarehouseCreate) OnConflict(opts ...sql.ConflictOption) *WarehouseUpsertOne {
	wc.conflict = opts
	return &WarehouseUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WarehouseCreate) OnConflictColumns(columns ...string) *WarehouseUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WarehouseUpsertOne{
		create: wc,
	}
}

type (
	// WarehouseUpsertOne is the builder for "upsert"-ing
	//  one Warehouse node.
	WarehouseUpsertOne struct {
		create *WarehouseCreate
	}

	// WarehouseUpsert is the "OnConflict" setter.
	WarehouseUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsert) SetUpdatedAt(v time.Time) *WarehouseUpsert {
	u.Set(warehouse.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateUpdatedAt() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsert) SetDeletedAt(v time.Time) *WarehouseUpsert {
	u.Set(warehouse.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateDeletedAt() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsert) ClearDeletedAt() *WarehouseUpsert {
	u.SetNull(warehouse.FieldDeletedAt)
	return u
}

// SetCode sets the "code" field.
func (u *WarehouseUpsert) SetCode(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCode() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCode)
	return u
}

// SetQuicktronCode sets the "quicktron_code" field.
func (u *WarehouseUpsert) SetQuicktronCode(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldQuicktronCode, v)
	return u
}

// UpdateQuicktronCode sets the "quicktron_code" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateQuicktronCode() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldQuicktronCode)
	return u
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (u *WarehouseUpsert) SetEnableQuicktron(v int) *WarehouseUpsert {
	u.Set(warehouse.FieldEnableQuicktron, v)
	return u
}

// UpdateEnableQuicktron sets the "enable_quicktron" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateEnableQuicktron() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldEnableQuicktron)
	return u
}

// AddEnableQuicktron adds v to the "enable_quicktron" field.
func (u *WarehouseUpsert) AddEnableQuicktron(v int) *WarehouseUpsert {
	u.Add(warehouse.FieldEnableQuicktron, v)
	return u
}

// SetName sets the "name" field.
func (u *WarehouseUpsert) SetName(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateName() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldName)
	return u
}

// SetCompany sets the "company" field.
func (u *WarehouseUpsert) SetCompany(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCompany() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCompany)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *WarehouseUpsert) SetFirstName(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateFirstName() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *WarehouseUpsert) SetLastName(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateLastName() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldLastName)
	return u
}

// SetAddress1 sets the "address1" field.
func (u *WarehouseUpsert) SetAddress1(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldAddress1, v)
	return u
}

// UpdateAddress1 sets the "address1" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateAddress1() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldAddress1)
	return u
}

// SetAddress2 sets the "address2" field.
func (u *WarehouseUpsert) SetAddress2(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldAddress2, v)
	return u
}

// UpdateAddress2 sets the "address2" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateAddress2() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldAddress2)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *WarehouseUpsert) SetCountryCode(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCountryCode() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCountryCode)
	return u
}

// SetCountryName sets the "country_name" field.
func (u *WarehouseUpsert) SetCountryName(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldCountryName, v)
	return u
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCountryName() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCountryName)
	return u
}

// SetProvince sets the "province" field.
func (u *WarehouseUpsert) SetProvince(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateProvince() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldProvince)
	return u
}

// SetCity sets the "city" field.
func (u *WarehouseUpsert) SetCity(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCity() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCity)
	return u
}

// SetZipCode sets the "zip_code" field.
func (u *WarehouseUpsert) SetZipCode(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldZipCode, v)
	return u
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateZipCode() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldZipCode)
	return u
}

// SetPhone sets the "phone" field.
func (u *WarehouseUpsert) SetPhone(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdatePhone() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldPhone)
	return u
}

// SetStatus sets the "status" field.
func (u *WarehouseUpsert) SetStatus(v int) *WarehouseUpsert {
	u.Set(warehouse.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateStatus() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *WarehouseUpsert) AddStatus(v int) *WarehouseUpsert {
	u.Add(warehouse.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warehouse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarehouseUpsertOne) UpdateNewValues() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(warehouse.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warehouse.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarehouseUpsertOne) Ignore() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarehouseUpsertOne) DoNothing() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarehouseCreate.OnConflict
// documentation for more info.
func (u *WarehouseUpsertOne) Update(set func(*WarehouseUpsert)) *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarehouseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsertOne) SetUpdatedAt(v time.Time) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateUpdatedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsertOne) SetDeletedAt(v time.Time) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateDeletedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsertOne) ClearDeletedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCode sets the "code" field.
func (u *WarehouseUpsertOne) SetCode(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCode() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCode()
	})
}

// SetQuicktronCode sets the "quicktron_code" field.
func (u *WarehouseUpsertOne) SetQuicktronCode(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetQuicktronCode(v)
	})
}

// UpdateQuicktronCode sets the "quicktron_code" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateQuicktronCode() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateQuicktronCode()
	})
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (u *WarehouseUpsertOne) SetEnableQuicktron(v int) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetEnableQuicktron(v)
	})
}

// AddEnableQuicktron adds v to the "enable_quicktron" field.
func (u *WarehouseUpsertOne) AddEnableQuicktron(v int) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddEnableQuicktron(v)
	})
}

// UpdateEnableQuicktron sets the "enable_quicktron" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateEnableQuicktron() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateEnableQuicktron()
	})
}

// SetName sets the "name" field.
func (u *WarehouseUpsertOne) SetName(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateName() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateName()
	})
}

// SetCompany sets the "company" field.
func (u *WarehouseUpsertOne) SetCompany(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCompany() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCompany()
	})
}

// SetFirstName sets the "first_name" field.
func (u *WarehouseUpsertOne) SetFirstName(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateFirstName() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *WarehouseUpsertOne) SetLastName(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateLastName() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLastName()
	})
}

// SetAddress1 sets the "address1" field.
func (u *WarehouseUpsertOne) SetAddress1(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress1(v)
	})
}

// UpdateAddress1 sets the "address1" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateAddress1() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress1()
	})
}

// SetAddress2 sets the "address2" field.
func (u *WarehouseUpsertOne) SetAddress2(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress2(v)
	})
}

// UpdateAddress2 sets the "address2" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateAddress2() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress2()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *WarehouseUpsertOne) SetCountryCode(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCountryCode() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCountryCode()
	})
}

// SetCountryName sets the "country_name" field.
func (u *WarehouseUpsertOne) SetCountryName(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCountryName() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCountryName()
	})
}

// SetProvince sets the "province" field.
func (u *WarehouseUpsertOne) SetProvince(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateProvince() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *WarehouseUpsertOne) SetCity(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCity() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCity()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *WarehouseUpsertOne) SetZipCode(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateZipCode() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateZipCode()
	})
}

// SetPhone sets the "phone" field.
func (u *WarehouseUpsertOne) SetPhone(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdatePhone() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdatePhone()
	})
}

// SetStatus sets the "status" field.
func (u *WarehouseUpsertOne) SetStatus(v int) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *WarehouseUpsertOne) AddStatus(v int) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateStatus() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarehouseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for WarehouseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarehouseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarehouseUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarehouseUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarehouseCreateBulk is the builder for creating many Warehouse entities in bulk.
type WarehouseCreateBulk struct {
	config
	builders []*WarehouseCreate
	conflict []sql.ConflictOption
}

// Save creates the Warehouse entities in the database.
func (wcb *WarehouseCreateBulk) Save(ctx context.Context) ([]*Warehouse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Warehouse, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarehouseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WarehouseCreateBulk) SaveX(ctx context.Context) []*Warehouse {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WarehouseCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WarehouseCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Warehouse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarehouseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wcb *WarehouseCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarehouseUpsertBulk {
	wcb.conflict = opts
	return &WarehouseUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WarehouseCreateBulk) OnConflictColumns(columns ...string) *WarehouseUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WarehouseUpsertBulk{
		create: wcb,
	}
}

// WarehouseUpsertBulk is the builder for "upsert"-ing
// a bulk of Warehouse nodes.
type WarehouseUpsertBulk struct {
	create *WarehouseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(warehouse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WarehouseUpsertBulk) UpdateNewValues() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(warehouse.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warehouse.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarehouseUpsertBulk) Ignore() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarehouseUpsertBulk) DoNothing() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarehouseCreateBulk.OnConflict
// documentation for more info.
func (u *WarehouseUpsertBulk) Update(set func(*WarehouseUpsert)) *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarehouseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsertBulk) SetUpdatedAt(v time.Time) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateUpdatedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsertBulk) SetDeletedAt(v time.Time) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateDeletedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsertBulk) ClearDeletedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCode sets the "code" field.
func (u *WarehouseUpsertBulk) SetCode(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCode() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCode()
	})
}

// SetQuicktronCode sets the "quicktron_code" field.
func (u *WarehouseUpsertBulk) SetQuicktronCode(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetQuicktronCode(v)
	})
}

// UpdateQuicktronCode sets the "quicktron_code" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateQuicktronCode() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateQuicktronCode()
	})
}

// SetEnableQuicktron sets the "enable_quicktron" field.
func (u *WarehouseUpsertBulk) SetEnableQuicktron(v int) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetEnableQuicktron(v)
	})
}

// AddEnableQuicktron adds v to the "enable_quicktron" field.
func (u *WarehouseUpsertBulk) AddEnableQuicktron(v int) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddEnableQuicktron(v)
	})
}

// UpdateEnableQuicktron sets the "enable_quicktron" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateEnableQuicktron() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateEnableQuicktron()
	})
}

// SetName sets the "name" field.
func (u *WarehouseUpsertBulk) SetName(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateName() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateName()
	})
}

// SetCompany sets the "company" field.
func (u *WarehouseUpsertBulk) SetCompany(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCompany() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCompany()
	})
}

// SetFirstName sets the "first_name" field.
func (u *WarehouseUpsertBulk) SetFirstName(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateFirstName() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *WarehouseUpsertBulk) SetLastName(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateLastName() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLastName()
	})
}

// SetAddress1 sets the "address1" field.
func (u *WarehouseUpsertBulk) SetAddress1(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress1(v)
	})
}

// UpdateAddress1 sets the "address1" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateAddress1() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress1()
	})
}

// SetAddress2 sets the "address2" field.
func (u *WarehouseUpsertBulk) SetAddress2(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress2(v)
	})
}

// UpdateAddress2 sets the "address2" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateAddress2() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress2()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *WarehouseUpsertBulk) SetCountryCode(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCountryCode() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCountryCode()
	})
}

// SetCountryName sets the "country_name" field.
func (u *WarehouseUpsertBulk) SetCountryName(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCountryName() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCountryName()
	})
}

// SetProvince sets the "province" field.
func (u *WarehouseUpsertBulk) SetProvince(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateProvince() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateProvince()
	})
}

// SetCity sets the "city" field.
func (u *WarehouseUpsertBulk) SetCity(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCity() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCity()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *WarehouseUpsertBulk) SetZipCode(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateZipCode() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateZipCode()
	})
}

// SetPhone sets the "phone" field.
func (u *WarehouseUpsertBulk) SetPhone(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdatePhone() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdatePhone()
	})
}

// SetStatus sets the "status" field.
func (u *WarehouseUpsertBulk) SetStatus(v int) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *WarehouseUpsertBulk) AddStatus(v int) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateStatus() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *WarehouseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the WarehouseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for WarehouseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarehouseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
