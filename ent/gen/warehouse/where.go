// Code generated by ent, DO NOT EDIT.

package warehouse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// QuicktronCode applies equality check predicate on the "quicktron_code" field. It's identical to QuicktronCodeEQ.
func QuicktronCode(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronCode), v))
	})
}

// EnableQuicktron applies equality check predicate on the "enable_quicktron" field. It's identical to EnableQuicktronEQ.
func EnableQuicktron(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableQuicktron), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Address1 applies equality check predicate on the "address1" field. It's identical to Address1EQ.
func Address1(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress1), v))
	})
}

// Address2 applies equality check predicate on the "address2" field. It's identical to Address2EQ.
func Address2(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress2), v))
	})
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryName applies equality check predicate on the "country_name" field. It's identical to CountryNameEQ.
func CountryName(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryName), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// QuicktronCodeEQ applies the EQ predicate on the "quicktron_code" field.
func QuicktronCodeEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeNEQ applies the NEQ predicate on the "quicktron_code" field.
func QuicktronCodeNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeIn applies the In predicate on the "quicktron_code" field.
func QuicktronCodeIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuicktronCode), v...))
	})
}

// QuicktronCodeNotIn applies the NotIn predicate on the "quicktron_code" field.
func QuicktronCodeNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuicktronCode), v...))
	})
}

// QuicktronCodeGT applies the GT predicate on the "quicktron_code" field.
func QuicktronCodeGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeGTE applies the GTE predicate on the "quicktron_code" field.
func QuicktronCodeGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeLT applies the LT predicate on the "quicktron_code" field.
func QuicktronCodeLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeLTE applies the LTE predicate on the "quicktron_code" field.
func QuicktronCodeLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeContains applies the Contains predicate on the "quicktron_code" field.
func QuicktronCodeContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeHasPrefix applies the HasPrefix predicate on the "quicktron_code" field.
func QuicktronCodeHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeHasSuffix applies the HasSuffix predicate on the "quicktron_code" field.
func QuicktronCodeHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeEqualFold applies the EqualFold predicate on the "quicktron_code" field.
func QuicktronCodeEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuicktronCode), v))
	})
}

// QuicktronCodeContainsFold applies the ContainsFold predicate on the "quicktron_code" field.
func QuicktronCodeContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuicktronCode), v))
	})
}

// EnableQuicktronEQ applies the EQ predicate on the "enable_quicktron" field.
func EnableQuicktronEQ(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableQuicktron), v))
	})
}

// EnableQuicktronNEQ applies the NEQ predicate on the "enable_quicktron" field.
func EnableQuicktronNEQ(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableQuicktron), v))
	})
}

// EnableQuicktronIn applies the In predicate on the "enable_quicktron" field.
func EnableQuicktronIn(vs ...int) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnableQuicktron), v...))
	})
}

// EnableQuicktronNotIn applies the NotIn predicate on the "enable_quicktron" field.
func EnableQuicktronNotIn(vs ...int) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnableQuicktron), v...))
	})
}

// EnableQuicktronGT applies the GT predicate on the "enable_quicktron" field.
func EnableQuicktronGT(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnableQuicktron), v))
	})
}

// EnableQuicktronGTE applies the GTE predicate on the "enable_quicktron" field.
func EnableQuicktronGTE(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnableQuicktron), v))
	})
}

// EnableQuicktronLT applies the LT predicate on the "enable_quicktron" field.
func EnableQuicktronLT(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnableQuicktron), v))
	})
}

// EnableQuicktronLTE applies the LTE predicate on the "enable_quicktron" field.
func EnableQuicktronLTE(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnableQuicktron), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompany), v))
	})
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCompany), v...))
	})
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCompany), v...))
	})
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompany), v))
	})
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompany), v))
	})
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompany), v))
	})
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompany), v))
	})
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompany), v))
	})
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompany), v))
	})
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompany), v))
	})
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompany), v))
	})
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompany), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// Address1EQ applies the EQ predicate on the "address1" field.
func Address1EQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress1), v))
	})
}

// Address1NEQ applies the NEQ predicate on the "address1" field.
func Address1NEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress1), v))
	})
}

// Address1In applies the In predicate on the "address1" field.
func Address1In(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress1), v...))
	})
}

// Address1NotIn applies the NotIn predicate on the "address1" field.
func Address1NotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress1), v...))
	})
}

// Address1GT applies the GT predicate on the "address1" field.
func Address1GT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress1), v))
	})
}

// Address1GTE applies the GTE predicate on the "address1" field.
func Address1GTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress1), v))
	})
}

// Address1LT applies the LT predicate on the "address1" field.
func Address1LT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress1), v))
	})
}

// Address1LTE applies the LTE predicate on the "address1" field.
func Address1LTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress1), v))
	})
}

// Address1Contains applies the Contains predicate on the "address1" field.
func Address1Contains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress1), v))
	})
}

// Address1HasPrefix applies the HasPrefix predicate on the "address1" field.
func Address1HasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress1), v))
	})
}

// Address1HasSuffix applies the HasSuffix predicate on the "address1" field.
func Address1HasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress1), v))
	})
}

// Address1EqualFold applies the EqualFold predicate on the "address1" field.
func Address1EqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress1), v))
	})
}

// Address1ContainsFold applies the ContainsFold predicate on the "address1" field.
func Address1ContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress1), v))
	})
}

// Address2EQ applies the EQ predicate on the "address2" field.
func Address2EQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress2), v))
	})
}

// Address2NEQ applies the NEQ predicate on the "address2" field.
func Address2NEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress2), v))
	})
}

// Address2In applies the In predicate on the "address2" field.
func Address2In(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress2), v...))
	})
}

// Address2NotIn applies the NotIn predicate on the "address2" field.
func Address2NotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress2), v...))
	})
}

// Address2GT applies the GT predicate on the "address2" field.
func Address2GT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress2), v))
	})
}

// Address2GTE applies the GTE predicate on the "address2" field.
func Address2GTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress2), v))
	})
}

// Address2LT applies the LT predicate on the "address2" field.
func Address2LT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress2), v))
	})
}

// Address2LTE applies the LTE predicate on the "address2" field.
func Address2LTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress2), v))
	})
}

// Address2Contains applies the Contains predicate on the "address2" field.
func Address2Contains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress2), v))
	})
}

// Address2HasPrefix applies the HasPrefix predicate on the "address2" field.
func Address2HasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress2), v))
	})
}

// Address2HasSuffix applies the HasSuffix predicate on the "address2" field.
func Address2HasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress2), v))
	})
}

// Address2EqualFold applies the EqualFold predicate on the "address2" field.
func Address2EqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress2), v))
	})
}

// Address2ContainsFold applies the ContainsFold predicate on the "address2" field.
func Address2ContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress2), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryCode), v))
	})
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryCode), v))
	})
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryCode), v))
	})
}

// CountryNameEQ applies the EQ predicate on the "country_name" field.
func CountryNameEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryName), v))
	})
}

// CountryNameNEQ applies the NEQ predicate on the "country_name" field.
func CountryNameNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryName), v))
	})
}

// CountryNameIn applies the In predicate on the "country_name" field.
func CountryNameIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryName), v...))
	})
}

// CountryNameNotIn applies the NotIn predicate on the "country_name" field.
func CountryNameNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryName), v...))
	})
}

// CountryNameGT applies the GT predicate on the "country_name" field.
func CountryNameGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryName), v))
	})
}

// CountryNameGTE applies the GTE predicate on the "country_name" field.
func CountryNameGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryName), v))
	})
}

// CountryNameLT applies the LT predicate on the "country_name" field.
func CountryNameLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryName), v))
	})
}

// CountryNameLTE applies the LTE predicate on the "country_name" field.
func CountryNameLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryName), v))
	})
}

// CountryNameContains applies the Contains predicate on the "country_name" field.
func CountryNameContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountryName), v))
	})
}

// CountryNameHasPrefix applies the HasPrefix predicate on the "country_name" field.
func CountryNameHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountryName), v))
	})
}

// CountryNameHasSuffix applies the HasSuffix predicate on the "country_name" field.
func CountryNameHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountryName), v))
	})
}

// CountryNameEqualFold applies the EqualFold predicate on the "country_name" field.
func CountryNameEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountryName), v))
	})
}

// CountryNameContainsFold applies the ContainsFold predicate on the "country_name" field.
func CountryNameContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountryName), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldZipCode), v...))
	})
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldZipCode), v...))
	})
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZipCode), v))
	})
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZipCode), v))
	})
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZipCode), v))
	})
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZipCode), v))
	})
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZipCode), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Warehouse {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Order
		step.Edge.Schema = schemaConfig.Order
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Warehouse) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Warehouse) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Warehouse) predicate.Warehouse {
	return predicate.Warehouse(func(s *sql.Selector) {
		p(s.Not())
	})
}
