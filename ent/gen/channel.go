// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/channel"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// WarehouseID holds the value of the "warehouse_id" field.
	WarehouseID int64 `json:"warehouse_id,omitempty"`
	// CourierPlatform holds the value of the "courier_platform" field.
	CourierPlatform string `json:"courier_platform,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Type holds the value of the "type" field.
	Type int8 `json:"type,omitempty"`
	// QuotationCurrency holds the value of the "quotation_currency" field.
	QuotationCurrency string `json:"quotation_currency,omitempty"`
	// 材积系数
	VolumeFactor int32 `json:"volume_factor,omitempty"`
	// EnName holds the value of the "en_name" field.
	EnName string `json:"en_name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// HasTrackingNumber holds the value of the "has_tracking_number" field.
	HasTrackingNumber int8 `json:"has_tracking_number,omitempty"`
	// MinNormalDays holds the value of the "min_normal_days" field.
	MinNormalDays int32 `json:"min_normal_days,omitempty"`
	// MaxNormalDays holds the value of the "max_normal_days" field.
	MaxNormalDays int32 `json:"max_normal_days,omitempty"`
	// Gram
	MaxWeight int `json:"max_weight,omitempty"`
	// MaxLength holds the value of the "max_length" field.
	MaxLength int `json:"max_length,omitempty"`
	// MinLength holds the value of the "min_length" field.
	MinLength int `json:"min_length,omitempty"`
	// MaxThreeSideSum holds the value of the "max_three_side_sum" field.
	MaxThreeSideSum int `json:"max_three_side_sum,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// 流水线出口
	SortingPort int32 `json:"sorting_port,omitempty"`
	// PrepayTariff holds the value of the "prepay_tariff" field.
	PrepayTariff bool `json:"prepay_tariff,omitempty"`
	// 1=>启用；0=>禁用
	Status int8 `json:"status,omitempty"`
	// Test holds the value of the "test" field.
	Test bool `json:"test,omitempty"`
	// Options holds the value of the "options" field.
	Options string `json:"options,omitempty"`
	// ExcludeAttributes holds the value of the "exclude_attributes" field.
	ExcludeAttributes string `json:"exclude_attributes,omitempty"`
	// Battery holds the value of the "battery" field.
	Battery int8 `json:"battery,omitempty"`
	// Virtual holds the value of the "virtual" field.
	Virtual int8 `json:"virtual,omitempty"`
	// ChannelType holds the value of the "channel_type" field.
	ChannelType int8 `json:"channel_type,omitempty"`
	// DeliverDuty holds the value of the "deliver_duty" field.
	DeliverDuty string `json:"deliver_duty,omitempty"`
	// Special holds the value of the "special" field.
	Special int8 `json:"special,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges ChannelEdges `json:"edges"`
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// ChannelCosts holds the value of the channel_costs edge.
	ChannelCosts []*ChannelCost `json:"channel_costs,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChannelCostsOrErr returns the ChannelCosts value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) ChannelCostsOrErr() ([]*ChannelCost, error) {
	if e.loadedTypes[0] {
		return e.ChannelCosts, nil
	}
	return nil, &NotLoadedError{edge: "channel_costs"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldPrepayTariff, channel.FieldTest:
			values[i] = new(sql.NullBool)
		case channel.FieldID, channel.FieldWarehouseID, channel.FieldType, channel.FieldVolumeFactor, channel.FieldHasTrackingNumber, channel.FieldMinNormalDays, channel.FieldMaxNormalDays, channel.FieldMaxWeight, channel.FieldMaxLength, channel.FieldMinLength, channel.FieldMaxThreeSideSum, channel.FieldSortingPort, channel.FieldStatus, channel.FieldBattery, channel.FieldVirtual, channel.FieldChannelType, channel.FieldSpecial:
			values[i] = new(sql.NullInt64)
		case channel.FieldCourierPlatform, channel.FieldName, channel.FieldCode, channel.FieldQuotationCurrency, channel.FieldEnName, channel.FieldDisplayName, channel.FieldDescription, channel.FieldOptions, channel.FieldExcludeAttributes, channel.FieldDeliverDuty:
			values[i] = new(sql.NullString)
		case channel.FieldCreatedAt, channel.FieldUpdatedAt, channel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Channel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case channel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case channel.FieldWarehouseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_id", values[i])
			} else if value.Valid {
				c.WarehouseID = value.Int64
			}
		case channel.FieldCourierPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field courier_platform", values[i])
			} else if value.Valid {
				c.CourierPlatform = value.String
			}
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case channel.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case channel.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int8(value.Int64)
			}
		case channel.FieldQuotationCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quotation_currency", values[i])
			} else if value.Valid {
				c.QuotationCurrency = value.String
			}
		case channel.FieldVolumeFactor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volume_factor", values[i])
			} else if value.Valid {
				c.VolumeFactor = int32(value.Int64)
			}
		case channel.FieldEnName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field en_name", values[i])
			} else if value.Valid {
				c.EnName = value.String
			}
		case channel.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				c.DisplayName = value.String
			}
		case channel.FieldHasTrackingNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field has_tracking_number", values[i])
			} else if value.Valid {
				c.HasTrackingNumber = int8(value.Int64)
			}
		case channel.FieldMinNormalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_normal_days", values[i])
			} else if value.Valid {
				c.MinNormalDays = int32(value.Int64)
			}
		case channel.FieldMaxNormalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_normal_days", values[i])
			} else if value.Valid {
				c.MaxNormalDays = int32(value.Int64)
			}
		case channel.FieldMaxWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_weight", values[i])
			} else if value.Valid {
				c.MaxWeight = int(value.Int64)
			}
		case channel.FieldMaxLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_length", values[i])
			} else if value.Valid {
				c.MaxLength = int(value.Int64)
			}
		case channel.FieldMinLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_length", values[i])
			} else if value.Valid {
				c.MinLength = int(value.Int64)
			}
		case channel.FieldMaxThreeSideSum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_three_side_sum", values[i])
			} else if value.Valid {
				c.MaxThreeSideSum = int(value.Int64)
			}
		case channel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case channel.FieldSortingPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sorting_port", values[i])
			} else if value.Valid {
				c.SortingPort = int32(value.Int64)
			}
		case channel.FieldPrepayTariff:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prepay_tariff", values[i])
			} else if value.Valid {
				c.PrepayTariff = value.Bool
			}
		case channel.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = int8(value.Int64)
			}
		case channel.FieldTest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				c.Test = value.Bool
			}
		case channel.FieldOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value.Valid {
				c.Options = value.String
			}
		case channel.FieldExcludeAttributes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exclude_attributes", values[i])
			} else if value.Valid {
				c.ExcludeAttributes = value.String
			}
		case channel.FieldBattery:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery", values[i])
			} else if value.Valid {
				c.Battery = int8(value.Int64)
			}
		case channel.FieldVirtual:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field virtual", values[i])
			} else if value.Valid {
				c.Virtual = int8(value.Int64)
			}
		case channel.FieldChannelType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_type", values[i])
			} else if value.Valid {
				c.ChannelType = int8(value.Int64)
			}
		case channel.FieldDeliverDuty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deliver_duty", values[i])
			} else if value.Valid {
				c.DeliverDuty = value.String
			}
		case channel.FieldSpecial:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field special", values[i])
			} else if value.Valid {
				c.Special = int8(value.Int64)
			}
		}
	}
	return nil
}

// QueryChannelCosts queries the "channel_costs" edge of the Channel entity.
func (c *Channel) QueryChannelCosts() *ChannelCostQuery {
	return (&ChannelClient{config: c.config}).QueryChannelCosts(c)
}

// QueryOrders queries the "orders" edge of the Channel entity.
func (c *Channel) QueryOrders() *OrderQuery {
	return (&ChannelClient{config: c.config}).QueryOrders(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return (&ChannelClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("gen: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("warehouse_id=")
	builder.WriteString(fmt.Sprintf("%v", c.WarehouseID))
	builder.WriteString(", ")
	builder.WriteString("courier_platform=")
	builder.WriteString(c.CourierPlatform)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("quotation_currency=")
	builder.WriteString(c.QuotationCurrency)
	builder.WriteString(", ")
	builder.WriteString("volume_factor=")
	builder.WriteString(fmt.Sprintf("%v", c.VolumeFactor))
	builder.WriteString(", ")
	builder.WriteString("en_name=")
	builder.WriteString(c.EnName)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(c.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("has_tracking_number=")
	builder.WriteString(fmt.Sprintf("%v", c.HasTrackingNumber))
	builder.WriteString(", ")
	builder.WriteString("min_normal_days=")
	builder.WriteString(fmt.Sprintf("%v", c.MinNormalDays))
	builder.WriteString(", ")
	builder.WriteString("max_normal_days=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxNormalDays))
	builder.WriteString(", ")
	builder.WriteString("max_weight=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxWeight))
	builder.WriteString(", ")
	builder.WriteString("max_length=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxLength))
	builder.WriteString(", ")
	builder.WriteString("min_length=")
	builder.WriteString(fmt.Sprintf("%v", c.MinLength))
	builder.WriteString(", ")
	builder.WriteString("max_three_side_sum=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxThreeSideSum))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("sorting_port=")
	builder.WriteString(fmt.Sprintf("%v", c.SortingPort))
	builder.WriteString(", ")
	builder.WriteString("prepay_tariff=")
	builder.WriteString(fmt.Sprintf("%v", c.PrepayTariff))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("test=")
	builder.WriteString(fmt.Sprintf("%v", c.Test))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(c.Options)
	builder.WriteString(", ")
	builder.WriteString("exclude_attributes=")
	builder.WriteString(c.ExcludeAttributes)
	builder.WriteString(", ")
	builder.WriteString("battery=")
	builder.WriteString(fmt.Sprintf("%v", c.Battery))
	builder.WriteString(", ")
	builder.WriteString("virtual=")
	builder.WriteString(fmt.Sprintf("%v", c.Virtual))
	builder.WriteString(", ")
	builder.WriteString("channel_type=")
	builder.WriteString(fmt.Sprintf("%v", c.ChannelType))
	builder.WriteString(", ")
	builder.WriteString("deliver_duty=")
	builder.WriteString(c.DeliverDuty)
	builder.WriteString(", ")
	builder.WriteString("special=")
	builder.WriteString(fmt.Sprintf("%v", c.Special))
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel

func (c Channels) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
