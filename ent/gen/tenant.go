// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// HandlingFee holds the value of the "handling_fee" field.
	HandlingFee float64 `json:"handling_fee,omitempty"`
	// ShippingOption holds the value of the "shipping_option" field.
	ShippingOption int8 `json:"shipping_option,omitempty"`
	// PrepayTariff holds the value of the "prepay_tariff" field.
	PrepayTariff int8 `json:"prepay_tariff,omitempty"`
	// IossNumber holds the value of the "ioss_number" field.
	IossNumber string `json:"ioss_number,omitempty"`
	// IossCountryCode holds the value of the "ioss_country_code" field.
	IossCountryCode string `json:"ioss_country_code,omitempty"`
	// UkVatNumber holds the value of the "uk_vat_number" field.
	UkVatNumber string `json:"uk_vat_number,omitempty"`
	// DefaultWarehouse holds the value of the "default_warehouse" field.
	DefaultWarehouse int64 `json:"default_warehouse,omitempty"`
	// PresetChannelIds holds the value of the "preset_channel_ids" field.
	PresetChannelIds string `json:"preset_channel_ids,omitempty"`
	// TestChannelIds holds the value of the "test_channel_ids" field.
	TestChannelIds string `json:"test_channel_ids,omitempty"`
	// 第一次入库时间
	FirstInboundAt time.Time `json:"first_inbound_at,omitempty"`
	// $1.25/day/立方米
	StorageUnitPrice float64 `json:"storage_unit_price,omitempty"`
	// 客服用户 ID
	CsUserID int64 `json:"cs_user_id,omitempty"`
	// 销售用户 ID
	SalesUserID int64 `json:"sales_user_id,omitempty"`
	// 推荐人客户 ID
	InviterUserID int64 `json:"inviter_user_id,omitempty"`
	// 平台
	Platform string `json:"platform,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldBalance, tenant.FieldHandlingFee, tenant.FieldStorageUnitPrice:
			values[i] = new(sql.NullFloat64)
		case tenant.FieldID, tenant.FieldShippingOption, tenant.FieldPrepayTariff, tenant.FieldDefaultWarehouse, tenant.FieldCsUserID, tenant.FieldSalesUserID, tenant.FieldInviterUserID:
			values[i] = new(sql.NullInt64)
		case tenant.FieldCode, tenant.FieldCurrency, tenant.FieldIossNumber, tenant.FieldIossCountryCode, tenant.FieldUkVatNumber, tenant.FieldPresetChannelIds, tenant.FieldTestChannelIds, tenant.FieldPlatform:
			values[i] = new(sql.NullString)
		case tenant.FieldCreatedAt, tenant.FieldUpdatedAt, tenant.FieldDeletedAt, tenant.FieldFirstInboundAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tenant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case tenant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tenant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tenant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Time
			}
		case tenant.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case tenant.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				t.Balance = value.Float64
			}
		case tenant.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				t.Currency = value.String
			}
		case tenant.FieldHandlingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field handling_fee", values[i])
			} else if value.Valid {
				t.HandlingFee = value.Float64
			}
		case tenant.FieldShippingOption:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_option", values[i])
			} else if value.Valid {
				t.ShippingOption = int8(value.Int64)
			}
		case tenant.FieldPrepayTariff:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prepay_tariff", values[i])
			} else if value.Valid {
				t.PrepayTariff = int8(value.Int64)
			}
		case tenant.FieldIossNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_number", values[i])
			} else if value.Valid {
				t.IossNumber = value.String
			}
		case tenant.FieldIossCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_country_code", values[i])
			} else if value.Valid {
				t.IossCountryCode = value.String
			}
		case tenant.FieldUkVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uk_vat_number", values[i])
			} else if value.Valid {
				t.UkVatNumber = value.String
			}
		case tenant.FieldDefaultWarehouse:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_warehouse", values[i])
			} else if value.Valid {
				t.DefaultWarehouse = value.Int64
			}
		case tenant.FieldPresetChannelIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preset_channel_ids", values[i])
			} else if value.Valid {
				t.PresetChannelIds = value.String
			}
		case tenant.FieldTestChannelIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_channel_ids", values[i])
			} else if value.Valid {
				t.TestChannelIds = value.String
			}
		case tenant.FieldFirstInboundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_inbound_at", values[i])
			} else if value.Valid {
				t.FirstInboundAt = value.Time
			}
		case tenant.FieldStorageUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_unit_price", values[i])
			} else if value.Valid {
				t.StorageUnitPrice = value.Float64
			}
		case tenant.FieldCsUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cs_user_id", values[i])
			} else if value.Valid {
				t.CsUserID = value.Int64
			}
		case tenant.FieldSalesUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_user_id", values[i])
			} else if value.Valid {
				t.SalesUserID = value.Int64
			}
		case tenant.FieldInviterUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inviter_user_id", values[i])
			} else if value.Valid {
				t.InviterUserID = value.Int64
			}
		case tenant.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				t.Platform = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return (&TenantClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("gen: Tenant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", t.Balance))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(t.Currency)
	builder.WriteString(", ")
	builder.WriteString("handling_fee=")
	builder.WriteString(fmt.Sprintf("%v", t.HandlingFee))
	builder.WriteString(", ")
	builder.WriteString("shipping_option=")
	builder.WriteString(fmt.Sprintf("%v", t.ShippingOption))
	builder.WriteString(", ")
	builder.WriteString("prepay_tariff=")
	builder.WriteString(fmt.Sprintf("%v", t.PrepayTariff))
	builder.WriteString(", ")
	builder.WriteString("ioss_number=")
	builder.WriteString(t.IossNumber)
	builder.WriteString(", ")
	builder.WriteString("ioss_country_code=")
	builder.WriteString(t.IossCountryCode)
	builder.WriteString(", ")
	builder.WriteString("uk_vat_number=")
	builder.WriteString(t.UkVatNumber)
	builder.WriteString(", ")
	builder.WriteString("default_warehouse=")
	builder.WriteString(fmt.Sprintf("%v", t.DefaultWarehouse))
	builder.WriteString(", ")
	builder.WriteString("preset_channel_ids=")
	builder.WriteString(t.PresetChannelIds)
	builder.WriteString(", ")
	builder.WriteString("test_channel_ids=")
	builder.WriteString(t.TestChannelIds)
	builder.WriteString(", ")
	builder.WriteString("first_inbound_at=")
	builder.WriteString(t.FirstInboundAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("storage_unit_price=")
	builder.WriteString(fmt.Sprintf("%v", t.StorageUnitPrice))
	builder.WriteString(", ")
	builder.WriteString("cs_user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CsUserID))
	builder.WriteString(", ")
	builder.WriteString("sales_user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SalesUserID))
	builder.WriteString(", ")
	builder.WriteString("inviter_user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.InviterUserID))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(t.Platform)
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant

func (t Tenants) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
