// Code generated by ent, DO NOT EDIT.

package taskschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// FuncName applies equality check predicate on the "func_name" field. It's identical to FuncNameEQ.
func FuncName(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuncName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocked), v))
	})
}

// LockedTimes applies equality check predicate on the "locked_times" field. It's identical to LockedTimesEQ.
func LockedTimes(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLockedTimes), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// LastAccessAt applies equality check predicate on the "last_access_at" field. It's identical to LastAccessAtEQ.
func LastAccessAt(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastAccessAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...int64) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...int64) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDGT applies the GT predicate on the "store_id" field.
func StoreIDGT(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreID), v))
	})
}

// StoreIDGTE applies the GTE predicate on the "store_id" field.
func StoreIDGTE(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreID), v))
	})
}

// StoreIDLT applies the LT predicate on the "store_id" field.
func StoreIDLT(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreID), v))
	})
}

// StoreIDLTE applies the LTE predicate on the "store_id" field.
func StoreIDLTE(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreID), v))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// FuncNameEQ applies the EQ predicate on the "func_name" field.
func FuncNameEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuncName), v))
	})
}

// FuncNameNEQ applies the NEQ predicate on the "func_name" field.
func FuncNameNEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFuncName), v))
	})
}

// FuncNameIn applies the In predicate on the "func_name" field.
func FuncNameIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFuncName), v...))
	})
}

// FuncNameNotIn applies the NotIn predicate on the "func_name" field.
func FuncNameNotIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFuncName), v...))
	})
}

// FuncNameGT applies the GT predicate on the "func_name" field.
func FuncNameGT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFuncName), v))
	})
}

// FuncNameGTE applies the GTE predicate on the "func_name" field.
func FuncNameGTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFuncName), v))
	})
}

// FuncNameLT applies the LT predicate on the "func_name" field.
func FuncNameLT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFuncName), v))
	})
}

// FuncNameLTE applies the LTE predicate on the "func_name" field.
func FuncNameLTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFuncName), v))
	})
}

// FuncNameContains applies the Contains predicate on the "func_name" field.
func FuncNameContains(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFuncName), v))
	})
}

// FuncNameHasPrefix applies the HasPrefix predicate on the "func_name" field.
func FuncNameHasPrefix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFuncName), v))
	})
}

// FuncNameHasSuffix applies the HasSuffix predicate on the "func_name" field.
func FuncNameHasSuffix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFuncName), v))
	})
}

// FuncNameEqualFold applies the EqualFold predicate on the "func_name" field.
func FuncNameEqualFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFuncName), v))
	})
}

// FuncNameContainsFold applies the ContainsFold predicate on the "func_name" field.
func FuncNameContainsFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFuncName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocked), v))
	})
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocked), v))
	})
}

// LockedTimesEQ applies the EQ predicate on the "locked_times" field.
func LockedTimesEQ(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLockedTimes), v))
	})
}

// LockedTimesNEQ applies the NEQ predicate on the "locked_times" field.
func LockedTimesNEQ(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLockedTimes), v))
	})
}

// LockedTimesIn applies the In predicate on the "locked_times" field.
func LockedTimesIn(vs ...int64) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLockedTimes), v...))
	})
}

// LockedTimesNotIn applies the NotIn predicate on the "locked_times" field.
func LockedTimesNotIn(vs ...int64) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLockedTimes), v...))
	})
}

// LockedTimesGT applies the GT predicate on the "locked_times" field.
func LockedTimesGT(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLockedTimes), v))
	})
}

// LockedTimesGTE applies the GTE predicate on the "locked_times" field.
func LockedTimesGTE(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLockedTimes), v))
	})
}

// LockedTimesLT applies the LT predicate on the "locked_times" field.
func LockedTimesLT(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLockedTimes), v))
	})
}

// LockedTimesLTE applies the LTE predicate on the "locked_times" field.
func LockedTimesLTE(v int64) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLockedTimes), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// LastAccessAtEQ applies the EQ predicate on the "last_access_at" field.
func LastAccessAtEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtNEQ applies the NEQ predicate on the "last_access_at" field.
func LastAccessAtNEQ(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtIn applies the In predicate on the "last_access_at" field.
func LastAccessAtIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastAccessAt), v...))
	})
}

// LastAccessAtNotIn applies the NotIn predicate on the "last_access_at" field.
func LastAccessAtNotIn(vs ...time.Time) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastAccessAt), v...))
	})
}

// LastAccessAtGT applies the GT predicate on the "last_access_at" field.
func LastAccessAtGT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtGTE applies the GTE predicate on the "last_access_at" field.
func LastAccessAtGTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtLT applies the LT predicate on the "last_access_at" field.
func LastAccessAtLT(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtLTE applies the LTE predicate on the "last_access_at" field.
func LastAccessAtLTE(v time.Time) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastAccessAt), v))
	})
}

// LastAccessAtIsNil applies the IsNil predicate on the "last_access_at" field.
func LastAccessAtIsNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastAccessAt)))
	})
}

// LastAccessAtNotNil applies the NotNil predicate on the "last_access_at" field.
func LastAccessAtNotNil() predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastAccessAt)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.TaskSchedule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskSchedule) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskSchedule) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskSchedule) predicate.TaskSchedule {
	return predicate.TaskSchedule(func(s *sql.Selector) {
		p(s.Not())
	})
}
