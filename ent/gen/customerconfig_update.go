// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/customerconfig"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// CustomerConfigUpdate is the builder for updating CustomerConfig entities.
type CustomerConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerConfigUpdate builder.
func (ccu *CustomerConfigUpdate) Where(ps ...predicate.CustomerConfig) *CustomerConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CustomerConfigUpdate) SetUpdatedAt(t time.Time) *CustomerConfigUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CustomerConfigUpdate) SetDeletedAt(t time.Time) *CustomerConfigUpdate {
	ccu.mutation.SetDeletedAt(t)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CustomerConfigUpdate) SetNillableDeletedAt(t *time.Time) *CustomerConfigUpdate {
	if t != nil {
		ccu.SetDeletedAt(*t)
	}
	return ccu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccu *CustomerConfigUpdate) ClearDeletedAt() *CustomerConfigUpdate {
	ccu.mutation.ClearDeletedAt()
	return ccu
}

// SetChannelID sets the "channel_id" field.
func (ccu *CustomerConfigUpdate) SetChannelID(i int64) *CustomerConfigUpdate {
	ccu.mutation.ResetChannelID()
	ccu.mutation.SetChannelID(i)
	return ccu
}

// AddChannelID adds i to the "channel_id" field.
func (ccu *CustomerConfigUpdate) AddChannelID(i int64) *CustomerConfigUpdate {
	ccu.mutation.AddChannelID(i)
	return ccu
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (ccu *CustomerConfigUpdate) SetExcludeCountryCode(s string) *CustomerConfigUpdate {
	ccu.mutation.SetExcludeCountryCode(s)
	return ccu
}

// SetStatus sets the "status" field.
func (ccu *CustomerConfigUpdate) SetStatus(i int8) *CustomerConfigUpdate {
	ccu.mutation.ResetStatus()
	ccu.mutation.SetStatus(i)
	return ccu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccu *CustomerConfigUpdate) SetNillableStatus(i *int8) *CustomerConfigUpdate {
	if i != nil {
		ccu.SetStatus(*i)
	}
	return ccu
}

// AddStatus adds i to the "status" field.
func (ccu *CustomerConfigUpdate) AddStatus(i int8) *CustomerConfigUpdate {
	ccu.mutation.AddStatus(i)
	return ccu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ccu *CustomerConfigUpdate) SetTenantID(id int64) *CustomerConfigUpdate {
	ccu.mutation.SetTenantID(id)
	return ccu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccu *CustomerConfigUpdate) SetTenant(t *Tenant) *CustomerConfigUpdate {
	return ccu.SetTenantID(t.ID)
}

// Mutation returns the CustomerConfigMutation object of the builder.
func (ccu *CustomerConfigUpdate) Mutation() *CustomerConfigMutation {
	return ccu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ccu *CustomerConfigUpdate) ClearTenant() *CustomerConfigUpdate {
	ccu.mutation.ClearTenant()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CustomerConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ccu.defaults(); err != nil {
		return 0, err
	}
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CustomerConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CustomerConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CustomerConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CustomerConfigUpdate) defaults() error {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		if customerconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized customerconfig.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := customerconfig.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CustomerConfigUpdate) check() error {
	if _, ok := ccu.mutation.TenantID(); ccu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "CustomerConfig.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *CustomerConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerConfigUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *CustomerConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customerconfig.Table,
			Columns: customerconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customerconfig.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.SetField(customerconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if ccu.mutation.DeletedAtCleared() {
		_spec.ClearField(customerconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.ChannelID(); ok {
		_spec.SetField(customerconfig.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.AddedChannelID(); ok {
		_spec.AddField(customerconfig.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccu.mutation.ExcludeCountryCode(); ok {
		_spec.SetField(customerconfig.FieldExcludeCountryCode, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Status(); ok {
		_spec.SetField(customerconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccu.mutation.AddedStatus(); ok {
		_spec.AddField(customerconfig.FieldStatus, field.TypeInt8, value)
	}
	if ccu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ccu.schemaConfig.CustomerConfig
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ccu.schemaConfig.CustomerConfig
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ccu.schemaConfig.CustomerConfig
	ctx = internal.NewSchemaConfigContext(ctx, ccu.schemaConfig)
	_spec.AddModifiers(ccu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CustomerConfigUpdateOne is the builder for updating a single CustomerConfig entity.
type CustomerConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CustomerConfigUpdateOne) SetUpdatedAt(t time.Time) *CustomerConfigUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CustomerConfigUpdateOne) SetDeletedAt(t time.Time) *CustomerConfigUpdateOne {
	ccuo.mutation.SetDeletedAt(t)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CustomerConfigUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerConfigUpdateOne {
	if t != nil {
		ccuo.SetDeletedAt(*t)
	}
	return ccuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccuo *CustomerConfigUpdateOne) ClearDeletedAt() *CustomerConfigUpdateOne {
	ccuo.mutation.ClearDeletedAt()
	return ccuo
}

// SetChannelID sets the "channel_id" field.
func (ccuo *CustomerConfigUpdateOne) SetChannelID(i int64) *CustomerConfigUpdateOne {
	ccuo.mutation.ResetChannelID()
	ccuo.mutation.SetChannelID(i)
	return ccuo
}

// AddChannelID adds i to the "channel_id" field.
func (ccuo *CustomerConfigUpdateOne) AddChannelID(i int64) *CustomerConfigUpdateOne {
	ccuo.mutation.AddChannelID(i)
	return ccuo
}

// SetExcludeCountryCode sets the "exclude_country_code" field.
func (ccuo *CustomerConfigUpdateOne) SetExcludeCountryCode(s string) *CustomerConfigUpdateOne {
	ccuo.mutation.SetExcludeCountryCode(s)
	return ccuo
}

// SetStatus sets the "status" field.
func (ccuo *CustomerConfigUpdateOne) SetStatus(i int8) *CustomerConfigUpdateOne {
	ccuo.mutation.ResetStatus()
	ccuo.mutation.SetStatus(i)
	return ccuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccuo *CustomerConfigUpdateOne) SetNillableStatus(i *int8) *CustomerConfigUpdateOne {
	if i != nil {
		ccuo.SetStatus(*i)
	}
	return ccuo
}

// AddStatus adds i to the "status" field.
func (ccuo *CustomerConfigUpdateOne) AddStatus(i int8) *CustomerConfigUpdateOne {
	ccuo.mutation.AddStatus(i)
	return ccuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (ccuo *CustomerConfigUpdateOne) SetTenantID(id int64) *CustomerConfigUpdateOne {
	ccuo.mutation.SetTenantID(id)
	return ccuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccuo *CustomerConfigUpdateOne) SetTenant(t *Tenant) *CustomerConfigUpdateOne {
	return ccuo.SetTenantID(t.ID)
}

// Mutation returns the CustomerConfigMutation object of the builder.
func (ccuo *CustomerConfigUpdateOne) Mutation() *CustomerConfigMutation {
	return ccuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ccuo *CustomerConfigUpdateOne) ClearTenant() *CustomerConfigUpdateOne {
	ccuo.mutation.ClearTenant()
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CustomerConfigUpdateOne) Select(field string, fields ...string) *CustomerConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CustomerConfig entity.
func (ccuo *CustomerConfigUpdateOne) Save(ctx context.Context) (*CustomerConfig, error) {
	var (
		err  error
		node *CustomerConfig
	)
	if err := ccuo.defaults(); err != nil {
		return nil, err
	}
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CustomerConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CustomerConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CustomerConfigUpdateOne) SaveX(ctx context.Context) *CustomerConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CustomerConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CustomerConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CustomerConfigUpdateOne) defaults() error {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		if customerconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized customerconfig.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := customerconfig.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CustomerConfigUpdateOne) check() error {
	if _, ok := ccuo.mutation.TenantID(); ccuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "CustomerConfig.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *CustomerConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerConfigUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *CustomerConfigUpdateOne) sqlSave(ctx context.Context) (_node *CustomerConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customerconfig.Table,
			Columns: customerconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customerconfig.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "CustomerConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerconfig.FieldID)
		for _, f := range fields {
			if !customerconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != customerconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.SetField(customerconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if ccuo.mutation.DeletedAtCleared() {
		_spec.ClearField(customerconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.ChannelID(); ok {
		_spec.SetField(customerconfig.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.AddedChannelID(); ok {
		_spec.AddField(customerconfig.FieldChannelID, field.TypeInt64, value)
	}
	if value, ok := ccuo.mutation.ExcludeCountryCode(); ok {
		_spec.SetField(customerconfig.FieldExcludeCountryCode, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Status(); ok {
		_spec.SetField(customerconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ccuo.mutation.AddedStatus(); ok {
		_spec.AddField(customerconfig.FieldStatus, field.TypeInt8, value)
	}
	if ccuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ccuo.schemaConfig.CustomerConfig
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerconfig.TenantTable,
			Columns: []string{customerconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = ccuo.schemaConfig.CustomerConfig
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ccuo.schemaConfig.CustomerConfig
	ctx = internal.NewSchemaConfigContext(ctx, ccuo.schemaConfig)
	_spec.AddModifiers(ccuo.modifiers...)
	_node = &CustomerConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
