// Code generated by ent, DO NOT EDIT.

package sequence

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Prefix applies equality check predicate on the "prefix" field. It's identical to PrefixEQ.
func Prefix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefix), v))
	})
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// DisplayValue applies equality check predicate on the "display_value" field. It's identical to DisplayValueEQ.
func DisplayValue(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayValue), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PrefixEQ applies the EQ predicate on the "prefix" field.
func PrefixEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefix), v))
	})
}

// PrefixNEQ applies the NEQ predicate on the "prefix" field.
func PrefixNEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrefix), v))
	})
}

// PrefixIn applies the In predicate on the "prefix" field.
func PrefixIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrefix), v...))
	})
}

// PrefixNotIn applies the NotIn predicate on the "prefix" field.
func PrefixNotIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrefix), v...))
	})
}

// PrefixGT applies the GT predicate on the "prefix" field.
func PrefixGT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrefix), v))
	})
}

// PrefixGTE applies the GTE predicate on the "prefix" field.
func PrefixGTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrefix), v))
	})
}

// PrefixLT applies the LT predicate on the "prefix" field.
func PrefixLT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrefix), v))
	})
}

// PrefixLTE applies the LTE predicate on the "prefix" field.
func PrefixLTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrefix), v))
	})
}

// PrefixContains applies the Contains predicate on the "prefix" field.
func PrefixContains(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrefix), v))
	})
}

// PrefixHasPrefix applies the HasPrefix predicate on the "prefix" field.
func PrefixHasPrefix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrefix), v))
	})
}

// PrefixHasSuffix applies the HasSuffix predicate on the "prefix" field.
func PrefixHasSuffix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrefix), v))
	})
}

// PrefixEqualFold applies the EqualFold predicate on the "prefix" field.
func PrefixEqualFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrefix), v))
	})
}

// PrefixContainsFold applies the ContainsFold predicate on the "prefix" field.
func PrefixContainsFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrefix), v))
	})
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...int64) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...int64) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v int64) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// DisplayValueEQ applies the EQ predicate on the "display_value" field.
func DisplayValueEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueNEQ applies the NEQ predicate on the "display_value" field.
func DisplayValueNEQ(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueIn applies the In predicate on the "display_value" field.
func DisplayValueIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayValue), v...))
	})
}

// DisplayValueNotIn applies the NotIn predicate on the "display_value" field.
func DisplayValueNotIn(vs ...string) predicate.Sequence {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayValue), v...))
	})
}

// DisplayValueGT applies the GT predicate on the "display_value" field.
func DisplayValueGT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueGTE applies the GTE predicate on the "display_value" field.
func DisplayValueGTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueLT applies the LT predicate on the "display_value" field.
func DisplayValueLT(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueLTE applies the LTE predicate on the "display_value" field.
func DisplayValueLTE(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueContains applies the Contains predicate on the "display_value" field.
func DisplayValueContains(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueHasPrefix applies the HasPrefix predicate on the "display_value" field.
func DisplayValueHasPrefix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueHasSuffix applies the HasSuffix predicate on the "display_value" field.
func DisplayValueHasSuffix(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueIsNil applies the IsNil predicate on the "display_value" field.
func DisplayValueIsNil() predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayValue)))
	})
}

// DisplayValueNotNil applies the NotNil predicate on the "display_value" field.
func DisplayValueNotNil() predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayValue)))
	})
}

// DisplayValueEqualFold applies the EqualFold predicate on the "display_value" field.
func DisplayValueEqualFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayValue), v))
	})
}

// DisplayValueContainsFold applies the ContainsFold predicate on the "display_value" field.
func DisplayValueContainsFold(v string) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayValue), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Sequence
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Sequence
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sequence) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sequence) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sequence) predicate.Sequence {
	return predicate.Sequence(func(s *sql.Selector) {
		p(s.Not())
	})
}
