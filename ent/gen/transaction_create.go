// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/transaction"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransactionCreate) SetCreatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransactionCreate) SetUpdatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransactionCreate) SetDeletedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableDeletedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetOrderID sets the "order_id" field.
func (tc *TransactionCreate) SetOrderID(i int64) *TransactionCreate {
	tc.mutation.SetOrderID(i)
	return tc
}

// SetTransactionType sets the "transaction_type" field.
func (tc *TransactionCreate) SetTransactionType(s string) *TransactionCreate {
	tc.mutation.SetTransactionType(s)
	return tc
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTransactionType(s *string) *TransactionCreate {
	if s != nil {
		tc.SetTransactionType(*s)
	}
	return tc
}

// SetTransactionAmount sets the "transaction_amount" field.
func (tc *TransactionCreate) SetTransactionAmount(f float64) *TransactionCreate {
	tc.mutation.SetTransactionAmount(f)
	return tc
}

// SetNillableTransactionAmount sets the "transaction_amount" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTransactionAmount(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetTransactionAmount(*f)
	}
	return tc
}

// SetBalance sets the "balance" field.
func (tc *TransactionCreate) SetBalance(f float64) *TransactionCreate {
	tc.mutation.SetBalance(f)
	return tc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableBalance(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetBalance(*f)
	}
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TransactionCreate) SetRemark(s string) *TransactionCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableRemark(s *string) *TransactionCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransactionCreate) SetStatus(i int8) *TransactionCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableStatus(i *int8) *TransactionCreate {
	if i != nil {
		tc.SetStatus(*i)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TransactionCreate) SetCreatedBy(i int8) *TransactionCreate {
	tc.mutation.SetCreatedBy(i)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedBy(i *int8) *TransactionCreate {
	if i != nil {
		tc.SetCreatedBy(*i)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TransactionCreate) SetUpdatedBy(i int8) *TransactionCreate {
	tc.mutation.SetUpdatedBy(i)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedBy(i *int8) *TransactionCreate {
	if i != nil {
		tc.SetUpdatedBy(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(i int64) *TransactionCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (tc *TransactionCreate) SetTenantID(id int64) *TransactionCreate {
	tc.mutation.SetTenantID(id)
	return tc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (tc *TransactionCreate) SetTenant(t *Tenant) *TransactionCreate {
	return tc.SetTenantID(t.ID)
}

// AddDetailIDs adds the "details" edge to the TransactionDetail entity by IDs.
func (tc *TransactionCreate) AddDetailIDs(ids ...int64) *TransactionCreate {
	tc.mutation.AddDetailIDs(ids...)
	return tc
}

// AddDetails adds the "details" edges to the TransactionDetail entity.
func (tc *TransactionCreate) AddDetails(t ...*TransactionDetail) *TransactionCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddDetailIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if transaction.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized transaction.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := transaction.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if transaction.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized transaction.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := transaction.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.TransactionType(); !ok {
		v := transaction.DefaultTransactionType
		tc.mutation.SetTransactionType(v)
	}
	if _, ok := tc.mutation.TransactionAmount(); !ok {
		v := transaction.DefaultTransactionAmount
		tc.mutation.SetTransactionAmount(v)
	}
	if _, ok := tc.mutation.Balance(); !ok {
		v := transaction.DefaultBalance
		tc.mutation.SetBalance(v)
	}
	if _, ok := tc.mutation.Remark(); !ok {
		v := transaction.DefaultRemark
		tc.mutation.SetRemark(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := transaction.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		v := transaction.DefaultCreatedBy
		tc.mutation.SetCreatedBy(v)
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		v := transaction.DefaultUpdatedBy
		tc.mutation.SetUpdatedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Transaction.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Transaction.updated_at"`)}
	}
	if _, ok := tc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`gen: missing required field "Transaction.order_id"`)}
	}
	if _, ok := tc.mutation.TransactionType(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`gen: missing required field "Transaction.transaction_type"`)}
	}
	if _, ok := tc.mutation.TransactionAmount(); !ok {
		return &ValidationError{Name: "transaction_amount", err: errors.New(`gen: missing required field "Transaction.transaction_amount"`)}
	}
	if _, ok := tc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`gen: missing required field "Transaction.balance"`)}
	}
	if _, ok := tc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`gen: missing required field "Transaction.remark"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Transaction.status"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`gen: missing required field "Transaction.created_by"`)}
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`gen: missing required field "Transaction.updated_by"`)}
	}
	if _, ok := tc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required edge "Transaction.tenant"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transaction.FieldID,
			},
		}
	)
	_spec.Schema = tc.schemaConfig.Transaction
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.OrderID(); ok {
		_spec.SetField(transaction.FieldOrderID, field.TypeInt64, value)
		_node.OrderID = value
	}
	if value, ok := tc.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeString, value)
		_node.TransactionType = value
	}
	if value, ok := tc.mutation.TransactionAmount(); ok {
		_spec.SetField(transaction.FieldTransactionAmount, field.TypeFloat64, value)
		_node.TransactionAmount = value
	}
	if value, ok := tc.mutation.Balance(); ok {
		_spec.SetField(transaction.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.SetField(transaction.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(transaction.FieldCreatedBy, field.TypeInt8, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(transaction.FieldUpdatedBy, field.TypeInt8, value)
		_node.UpdatedBy = value
	}
	if nodes := tc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = tc.schemaConfig.Transaction
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transaction_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tc.schemaConfig.TransactionDetail
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertOne {
	tc.conflict = opts
	return &TransactionUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflictColumns(columns ...string) *TransactionUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertOne{
		create: tc,
	}
}

type (
	// TransactionUpsertOne is the builder for "upsert"-ing
	//  one Transaction node.
	TransactionUpsertOne struct {
		create *TransactionCreate
	}

	// TransactionUpsert is the "OnConflict" setter.
	TransactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsert) SetUpdatedAt(v time.Time) *TransactionUpsert {
	u.Set(transaction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateUpdatedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsert) SetDeletedAt(v time.Time) *TransactionUpsert {
	u.Set(transaction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateDeletedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionUpsert) ClearDeletedAt() *TransactionUpsert {
	u.SetNull(transaction.FieldDeletedAt)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *TransactionUpsert) SetOrderID(v int64) *TransactionUpsert {
	u.Set(transaction.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateOrderID() *TransactionUpsert {
	u.SetExcluded(transaction.FieldOrderID)
	return u
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionUpsert) AddOrderID(v int64) *TransactionUpsert {
	u.Add(transaction.FieldOrderID, v)
	return u
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsert) SetTransactionType(v string) *TransactionUpsert {
	u.Set(transaction.FieldTransactionType, v)
	return u
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTransactionType() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTransactionType)
	return u
}

// SetTransactionAmount sets the "transaction_amount" field.
func (u *TransactionUpsert) SetTransactionAmount(v float64) *TransactionUpsert {
	u.Set(transaction.FieldTransactionAmount, v)
	return u
}

// UpdateTransactionAmount sets the "transaction_amount" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTransactionAmount() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTransactionAmount)
	return u
}

// AddTransactionAmount adds v to the "transaction_amount" field.
func (u *TransactionUpsert) AddTransactionAmount(v float64) *TransactionUpsert {
	u.Add(transaction.FieldTransactionAmount, v)
	return u
}

// SetBalance sets the "balance" field.
func (u *TransactionUpsert) SetBalance(v float64) *TransactionUpsert {
	u.Set(transaction.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateBalance() *TransactionUpsert {
	u.SetExcluded(transaction.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *TransactionUpsert) AddBalance(v float64) *TransactionUpsert {
	u.Add(transaction.FieldBalance, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *TransactionUpsert) SetRemark(v string) *TransactionUpsert {
	u.Set(transaction.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateRemark() *TransactionUpsert {
	u.SetExcluded(transaction.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *TransactionUpsert) SetStatus(v int8) *TransactionUpsert {
	u.Set(transaction.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateStatus() *TransactionUpsert {
	u.SetExcluded(transaction.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TransactionUpsert) AddStatus(v int8) *TransactionUpsert {
	u.Add(transaction.FieldStatus, v)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TransactionUpsert) SetCreatedBy(v int8) *TransactionUpsert {
	u.Set(transaction.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateCreatedBy() *TransactionUpsert {
	u.SetExcluded(transaction.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransactionUpsert) AddCreatedBy(v int8) *TransactionUpsert {
	u.Add(transaction.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransactionUpsert) SetUpdatedBy(v int8) *TransactionUpsert {
	u.Set(transaction.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateUpdatedBy() *TransactionUpsert {
	u.SetExcluded(transaction.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransactionUpsert) AddUpdatedBy(v int8) *TransactionUpsert {
	u.Add(transaction.FieldUpdatedBy, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertOne) UpdateNewValues() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transaction.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transaction.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransactionUpsertOne) Ignore() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertOne) DoNothing() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreate.OnConflict
// documentation for more info.
func (u *TransactionUpsertOne) Update(set func(*TransactionUpsert)) *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertOne) SetUpdatedAt(v time.Time) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateUpdatedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsertOne) SetDeletedAt(v time.Time) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateDeletedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionUpsertOne) ClearDeletedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TransactionUpsertOne) SetOrderID(v int64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionUpsertOne) AddOrderID(v int64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateOrderID() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateOrderID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsertOne) SetTransactionType(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTransactionType() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionType()
	})
}

// SetTransactionAmount sets the "transaction_amount" field.
func (u *TransactionUpsertOne) SetTransactionAmount(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionAmount(v)
	})
}

// AddTransactionAmount adds v to the "transaction_amount" field.
func (u *TransactionUpsertOne) AddTransactionAmount(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTransactionAmount(v)
	})
}

// UpdateTransactionAmount sets the "transaction_amount" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTransactionAmount() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionAmount()
	})
}

// SetBalance sets the "balance" field.
func (u *TransactionUpsertOne) SetBalance(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *TransactionUpsertOne) AddBalance(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateBalance() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateBalance()
	})
}

// SetRemark sets the "remark" field.
func (u *TransactionUpsertOne) SetRemark(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateRemark() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *TransactionUpsertOne) SetStatus(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TransactionUpsertOne) AddStatus(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateStatus() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TransactionUpsertOne) SetCreatedBy(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransactionUpsertOne) AddCreatedBy(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateCreatedBy() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransactionUpsertOne) SetUpdatedBy(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransactionUpsertOne) AddUpdatedBy(v int8) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateUpdatedBy() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *TransactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TransactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransactionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransactionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	builders []*TransactionCreate
	conflict []sql.ConflictOption
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertBulk {
	tcb.conflict = opts
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflictColumns(columns ...string) *TransactionUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// TransactionUpsertBulk is the builder for "upsert"-ing
// a bulk of Transaction nodes.
type TransactionUpsertBulk struct {
	create *TransactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertBulk) UpdateNewValues() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transaction.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transaction.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransactionUpsertBulk) Ignore() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertBulk) DoNothing() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreateBulk.OnConflict
// documentation for more info.
func (u *TransactionUpsertBulk) Update(set func(*TransactionUpsert)) *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertBulk) SetUpdatedAt(v time.Time) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateUpdatedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsertBulk) SetDeletedAt(v time.Time) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateDeletedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TransactionUpsertBulk) ClearDeletedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *TransactionUpsertBulk) SetOrderID(v int64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *TransactionUpsertBulk) AddOrderID(v int64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateOrderID() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateOrderID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsertBulk) SetTransactionType(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTransactionType() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionType()
	})
}

// SetTransactionAmount sets the "transaction_amount" field.
func (u *TransactionUpsertBulk) SetTransactionAmount(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionAmount(v)
	})
}

// AddTransactionAmount adds v to the "transaction_amount" field.
func (u *TransactionUpsertBulk) AddTransactionAmount(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTransactionAmount(v)
	})
}

// UpdateTransactionAmount sets the "transaction_amount" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTransactionAmount() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionAmount()
	})
}

// SetBalance sets the "balance" field.
func (u *TransactionUpsertBulk) SetBalance(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *TransactionUpsertBulk) AddBalance(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateBalance() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateBalance()
	})
}

// SetRemark sets the "remark" field.
func (u *TransactionUpsertBulk) SetRemark(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateRemark() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateRemark()
	})
}

// SetStatus sets the "status" field.
func (u *TransactionUpsertBulk) SetStatus(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TransactionUpsertBulk) AddStatus(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateStatus() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TransactionUpsertBulk) SetCreatedBy(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TransactionUpsertBulk) AddCreatedBy(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateCreatedBy() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransactionUpsertBulk) SetUpdatedBy(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TransactionUpsertBulk) AddUpdatedBy(v int8) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateUpdatedBy() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *TransactionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the TransactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for TransactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
