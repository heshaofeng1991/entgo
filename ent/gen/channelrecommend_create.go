// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channelrecommend"
)

// ChannelRecommendCreate is the builder for creating a ChannelRecommend entity.
type ChannelRecommendCreate struct {
	config
	mutation *ChannelRecommendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (crc *ChannelRecommendCreate) SetCreatedAt(t time.Time) *ChannelRecommendCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableCreatedAt(t *time.Time) *ChannelRecommendCreate {
	if t != nil {
		crc.SetCreatedAt(*t)
	}
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *ChannelRecommendCreate) SetUpdatedAt(t time.Time) *ChannelRecommendCreate {
	crc.mutation.SetUpdatedAt(t)
	return crc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableUpdatedAt(t *time.Time) *ChannelRecommendCreate {
	if t != nil {
		crc.SetUpdatedAt(*t)
	}
	return crc
}

// SetDeletedAt sets the "deleted_at" field.
func (crc *ChannelRecommendCreate) SetDeletedAt(t time.Time) *ChannelRecommendCreate {
	crc.mutation.SetDeletedAt(t)
	return crc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableDeletedAt(t *time.Time) *ChannelRecommendCreate {
	if t != nil {
		crc.SetDeletedAt(*t)
	}
	return crc
}

// SetCountryCode sets the "country_code" field.
func (crc *ChannelRecommendCreate) SetCountryCode(s string) *ChannelRecommendCreate {
	crc.mutation.SetCountryCode(s)
	return crc
}

// SetChannelID sets the "channel_id" field.
func (crc *ChannelRecommendCreate) SetChannelID(i int64) *ChannelRecommendCreate {
	crc.mutation.SetChannelID(i)
	return crc
}

// SetIsRecommended sets the "is_recommended" field.
func (crc *ChannelRecommendCreate) SetIsRecommended(i int8) *ChannelRecommendCreate {
	crc.mutation.SetIsRecommended(i)
	return crc
}

// SetNillableIsRecommended sets the "is_recommended" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableIsRecommended(i *int8) *ChannelRecommendCreate {
	if i != nil {
		crc.SetIsRecommended(*i)
	}
	return crc
}

// SetStatus sets the "status" field.
func (crc *ChannelRecommendCreate) SetStatus(i int8) *ChannelRecommendCreate {
	crc.mutation.SetStatus(i)
	return crc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableStatus(i *int8) *ChannelRecommendCreate {
	if i != nil {
		crc.SetStatus(*i)
	}
	return crc
}

// SetValue sets the "value" field.
func (crc *ChannelRecommendCreate) SetValue(s string) *ChannelRecommendCreate {
	crc.mutation.SetValue(s)
	return crc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (crc *ChannelRecommendCreate) SetNillableValue(s *string) *ChannelRecommendCreate {
	if s != nil {
		crc.SetValue(*s)
	}
	return crc
}

// SetID sets the "id" field.
func (crc *ChannelRecommendCreate) SetID(i int64) *ChannelRecommendCreate {
	crc.mutation.SetID(i)
	return crc
}

// Mutation returns the ChannelRecommendMutation object of the builder.
func (crc *ChannelRecommendCreate) Mutation() *ChannelRecommendMutation {
	return crc.mutation
}

// Save creates the ChannelRecommend in the database.
func (crc *ChannelRecommendCreate) Save(ctx context.Context) (*ChannelRecommend, error) {
	var (
		err  error
		node *ChannelRecommend
	)
	crc.defaults()
	if len(crc.hooks) == 0 {
		if err = crc.check(); err != nil {
			return nil, err
		}
		node, err = crc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelRecommendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = crc.check(); err != nil {
				return nil, err
			}
			crc.mutation = mutation
			if node, err = crc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(crc.hooks) - 1; i >= 0; i-- {
			if crc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = crc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, crc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelRecommend)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelRecommendMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (crc *ChannelRecommendCreate) SaveX(ctx context.Context) *ChannelRecommend {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *ChannelRecommendCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *ChannelRecommendCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *ChannelRecommendCreate) defaults() {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		v := channelrecommend.DefaultCreatedAt()
		crc.mutation.SetCreatedAt(v)
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		v := channelrecommend.DefaultUpdatedAt()
		crc.mutation.SetUpdatedAt(v)
	}
	if _, ok := crc.mutation.IsRecommended(); !ok {
		v := channelrecommend.DefaultIsRecommended
		crc.mutation.SetIsRecommended(v)
	}
	if _, ok := crc.mutation.Status(); !ok {
		v := channelrecommend.DefaultStatus
		crc.mutation.SetStatus(v)
	}
	if _, ok := crc.mutation.Value(); !ok {
		v := channelrecommend.DefaultValue
		crc.mutation.SetValue(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *ChannelRecommendCreate) check() error {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ChannelRecommend.created_at"`)}
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ChannelRecommend.updated_at"`)}
	}
	if _, ok := crc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`gen: missing required field "ChannelRecommend.country_code"`)}
	}
	if _, ok := crc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`gen: missing required field "ChannelRecommend.channel_id"`)}
	}
	if _, ok := crc.mutation.IsRecommended(); !ok {
		return &ValidationError{Name: "is_recommended", err: errors.New(`gen: missing required field "ChannelRecommend.is_recommended"`)}
	}
	if _, ok := crc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "ChannelRecommend.status"`)}
	}
	if _, ok := crc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`gen: missing required field "ChannelRecommend.value"`)}
	}
	return nil
}

func (crc *ChannelRecommendCreate) sqlSave(ctx context.Context) (*ChannelRecommend, error) {
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (crc *ChannelRecommendCreate) createSpec() (*ChannelRecommend, *sqlgraph.CreateSpec) {
	var (
		_node = &ChannelRecommend{config: crc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: channelrecommend.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelrecommend.FieldID,
			},
		}
	)
	_spec.Schema = crc.schemaConfig.ChannelRecommend
	_spec.OnConflict = crc.conflict
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(channelrecommend.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(channelrecommend.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crc.mutation.DeletedAt(); ok {
		_spec.SetField(channelrecommend.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := crc.mutation.CountryCode(); ok {
		_spec.SetField(channelrecommend.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := crc.mutation.ChannelID(); ok {
		_spec.SetField(channelrecommend.FieldChannelID, field.TypeInt64, value)
		_node.ChannelID = value
	}
	if value, ok := crc.mutation.IsRecommended(); ok {
		_spec.SetField(channelrecommend.FieldIsRecommended, field.TypeInt8, value)
		_node.IsRecommended = value
	}
	if value, ok := crc.mutation.Status(); ok {
		_spec.SetField(channelrecommend.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := crc.mutation.Value(); ok {
		_spec.SetField(channelrecommend.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelRecommend.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelRecommendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (crc *ChannelRecommendCreate) OnConflict(opts ...sql.ConflictOption) *ChannelRecommendUpsertOne {
	crc.conflict = opts
	return &ChannelRecommendUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crc *ChannelRecommendCreate) OnConflictColumns(columns ...string) *ChannelRecommendUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &ChannelRecommendUpsertOne{
		create: crc,
	}
}

type (
	// ChannelRecommendUpsertOne is the builder for "upsert"-ing
	//  one ChannelRecommend node.
	ChannelRecommendUpsertOne struct {
		create *ChannelRecommendCreate
	}

	// ChannelRecommendUpsert is the "OnConflict" setter.
	ChannelRecommendUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelRecommendUpsert) SetUpdatedAt(v time.Time) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateUpdatedAt() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelRecommendUpsert) SetDeletedAt(v time.Time) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateDeletedAt() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelRecommendUpsert) ClearDeletedAt() *ChannelRecommendUpsert {
	u.SetNull(channelrecommend.FieldDeletedAt)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelRecommendUpsert) SetCountryCode(v string) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateCountryCode() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldCountryCode)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelRecommendUpsert) SetChannelID(v int64) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateChannelID() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldChannelID)
	return u
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelRecommendUpsert) AddChannelID(v int64) *ChannelRecommendUpsert {
	u.Add(channelrecommend.FieldChannelID, v)
	return u
}

// SetIsRecommended sets the "is_recommended" field.
func (u *ChannelRecommendUpsert) SetIsRecommended(v int8) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldIsRecommended, v)
	return u
}

// UpdateIsRecommended sets the "is_recommended" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateIsRecommended() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldIsRecommended)
	return u
}

// AddIsRecommended adds v to the "is_recommended" field.
func (u *ChannelRecommendUpsert) AddIsRecommended(v int8) *ChannelRecommendUpsert {
	u.Add(channelrecommend.FieldIsRecommended, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ChannelRecommendUpsert) SetStatus(v int8) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateStatus() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ChannelRecommendUpsert) AddStatus(v int8) *ChannelRecommendUpsert {
	u.Add(channelrecommend.FieldStatus, v)
	return u
}

// SetValue sets the "value" field.
func (u *ChannelRecommendUpsert) SetValue(v string) *ChannelRecommendUpsert {
	u.Set(channelrecommend.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChannelRecommendUpsert) UpdateValue() *ChannelRecommendUpsert {
	u.SetExcluded(channelrecommend.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelrecommend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelRecommendUpsertOne) UpdateNewValues() *ChannelRecommendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channelrecommend.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channelrecommend.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelRecommendUpsertOne) Ignore() *ChannelRecommendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelRecommendUpsertOne) DoNothing() *ChannelRecommendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelRecommendCreate.OnConflict
// documentation for more info.
func (u *ChannelRecommendUpsertOne) Update(set func(*ChannelRecommendUpsert)) *ChannelRecommendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelRecommendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelRecommendUpsertOne) SetUpdatedAt(v time.Time) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateUpdatedAt() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelRecommendUpsertOne) SetDeletedAt(v time.Time) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateDeletedAt() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelRecommendUpsertOne) ClearDeletedAt() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelRecommendUpsertOne) SetCountryCode(v string) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateCountryCode() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateCountryCode()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelRecommendUpsertOne) SetChannelID(v int64) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelRecommendUpsertOne) AddChannelID(v int64) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateChannelID() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateChannelID()
	})
}

// SetIsRecommended sets the "is_recommended" field.
func (u *ChannelRecommendUpsertOne) SetIsRecommended(v int8) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetIsRecommended(v)
	})
}

// AddIsRecommended adds v to the "is_recommended" field.
func (u *ChannelRecommendUpsertOne) AddIsRecommended(v int8) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddIsRecommended(v)
	})
}

// UpdateIsRecommended sets the "is_recommended" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateIsRecommended() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateIsRecommended()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelRecommendUpsertOne) SetStatus(v int8) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelRecommendUpsertOne) AddStatus(v int8) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateStatus() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateStatus()
	})
}

// SetValue sets the "value" field.
func (u *ChannelRecommendUpsertOne) SetValue(v string) *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChannelRecommendUpsertOne) UpdateValue() *ChannelRecommendUpsertOne {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ChannelRecommendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelRecommendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelRecommendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelRecommendUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelRecommendUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelRecommendCreateBulk is the builder for creating many ChannelRecommend entities in bulk.
type ChannelRecommendCreateBulk struct {
	config
	builders []*ChannelRecommendCreate
	conflict []sql.ConflictOption
}

// Save creates the ChannelRecommend entities in the database.
func (crcb *ChannelRecommendCreateBulk) Save(ctx context.Context) ([]*ChannelRecommend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*ChannelRecommend, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelRecommendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *ChannelRecommendCreateBulk) SaveX(ctx context.Context) []*ChannelRecommend {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *ChannelRecommendCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *ChannelRecommendCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelRecommend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelRecommendUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (crcb *ChannelRecommendCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelRecommendUpsertBulk {
	crcb.conflict = opts
	return &ChannelRecommendUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crcb *ChannelRecommendCreateBulk) OnConflictColumns(columns ...string) *ChannelRecommendUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &ChannelRecommendUpsertBulk{
		create: crcb,
	}
}

// ChannelRecommendUpsertBulk is the builder for "upsert"-ing
// a bulk of ChannelRecommend nodes.
type ChannelRecommendUpsertBulk struct {
	create *ChannelRecommendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelrecommend.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelRecommendUpsertBulk) UpdateNewValues() *ChannelRecommendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channelrecommend.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channelrecommend.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelRecommend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelRecommendUpsertBulk) Ignore() *ChannelRecommendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelRecommendUpsertBulk) DoNothing() *ChannelRecommendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelRecommendCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelRecommendUpsertBulk) Update(set func(*ChannelRecommendUpsert)) *ChannelRecommendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelRecommendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelRecommendUpsertBulk) SetUpdatedAt(v time.Time) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateUpdatedAt() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChannelRecommendUpsertBulk) SetDeletedAt(v time.Time) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateDeletedAt() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChannelRecommendUpsertBulk) ClearDeletedAt() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ChannelRecommendUpsertBulk) SetCountryCode(v string) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateCountryCode() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateCountryCode()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelRecommendUpsertBulk) SetChannelID(v int64) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelRecommendUpsertBulk) AddChannelID(v int64) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateChannelID() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateChannelID()
	})
}

// SetIsRecommended sets the "is_recommended" field.
func (u *ChannelRecommendUpsertBulk) SetIsRecommended(v int8) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetIsRecommended(v)
	})
}

// AddIsRecommended adds v to the "is_recommended" field.
func (u *ChannelRecommendUpsertBulk) AddIsRecommended(v int8) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddIsRecommended(v)
	})
}

// UpdateIsRecommended sets the "is_recommended" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateIsRecommended() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateIsRecommended()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelRecommendUpsertBulk) SetStatus(v int8) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChannelRecommendUpsertBulk) AddStatus(v int8) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateStatus() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateStatus()
	})
}

// SetValue sets the "value" field.
func (u *ChannelRecommendUpsertBulk) SetValue(v string) *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChannelRecommendUpsertBulk) UpdateValue() *ChannelRecommendUpsertBulk {
	return u.Update(func(s *ChannelRecommendUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ChannelRecommendUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ChannelRecommendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelRecommendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelRecommendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
