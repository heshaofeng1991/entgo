// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/inbound"
	"github.com/heshaofeng1991/entgo/ent/gen/inbounditem"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
)

// InboundUpdate is the builder for updating Inbound entities.
type InboundUpdate struct {
	config
	hooks     []Hook
	mutation  *InboundMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InboundUpdate builder.
func (iu *InboundUpdate) Where(ps ...predicate.Inbound) *InboundUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InboundUpdate) SetUpdatedAt(t time.Time) *InboundUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InboundUpdate) SetDeletedAt(t time.Time) *InboundUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableDeletedAt(t *time.Time) *InboundUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InboundUpdate) ClearDeletedAt() *InboundUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (iu *InboundUpdate) SetCustomerOrderID(s string) *InboundUpdate {
	iu.mutation.SetCustomerOrderID(s)
	return iu
}

// SetNillableCustomerOrderID sets the "customer_order_id" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableCustomerOrderID(s *string) *InboundUpdate {
	if s != nil {
		iu.SetCustomerOrderID(*s)
	}
	return iu
}

// SetCustomerCode sets the "customer_code" field.
func (iu *InboundUpdate) SetCustomerCode(s string) *InboundUpdate {
	iu.mutation.SetCustomerCode(s)
	return iu
}

// SetNillableCustomerCode sets the "customer_code" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableCustomerCode(s *string) *InboundUpdate {
	if s != nil {
		iu.SetCustomerCode(*s)
	}
	return iu
}

// SetTrackingNumber sets the "tracking_number" field.
func (iu *InboundUpdate) SetTrackingNumber(s string) *InboundUpdate {
	iu.mutation.SetTrackingNumber(s)
	return iu
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableTrackingNumber(s *string) *InboundUpdate {
	if s != nil {
		iu.SetTrackingNumber(*s)
	}
	return iu
}

// SetWarehouseID sets the "warehouse_id" field.
func (iu *InboundUpdate) SetWarehouseID(i int64) *InboundUpdate {
	iu.mutation.ResetWarehouseID()
	iu.mutation.SetWarehouseID(i)
	return iu
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (iu *InboundUpdate) AddWarehouseID(i int64) *InboundUpdate {
	iu.mutation.AddWarehouseID(i)
	return iu
}

// SetDescription sets the "description" field.
func (iu *InboundUpdate) SetDescription(s string) *InboundUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableDescription(s *string) *InboundUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *InboundUpdate) ClearDescription() *InboundUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (iu *InboundUpdate) SetEstimatedArrivalAt(t time.Time) *InboundUpdate {
	iu.mutation.SetEstimatedArrivalAt(t)
	return iu
}

// SetNillableEstimatedArrivalAt sets the "estimated_arrival_at" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableEstimatedArrivalAt(t *time.Time) *InboundUpdate {
	if t != nil {
		iu.SetEstimatedArrivalAt(*t)
	}
	return iu
}

// ClearEstimatedArrivalAt clears the value of the "estimated_arrival_at" field.
func (iu *InboundUpdate) ClearEstimatedArrivalAt() *InboundUpdate {
	iu.mutation.ClearEstimatedArrivalAt()
	return iu
}

// SetShippedAt sets the "shipped_at" field.
func (iu *InboundUpdate) SetShippedAt(t time.Time) *InboundUpdate {
	iu.mutation.SetShippedAt(t)
	return iu
}

// SetNillableShippedAt sets the "shipped_at" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableShippedAt(t *time.Time) *InboundUpdate {
	if t != nil {
		iu.SetShippedAt(*t)
	}
	return iu
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (iu *InboundUpdate) ClearShippedAt() *InboundUpdate {
	iu.mutation.ClearShippedAt()
	return iu
}

// SetStatus sets the "status" field.
func (iu *InboundUpdate) SetStatus(i int8) *InboundUpdate {
	iu.mutation.ResetStatus()
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableStatus(i *int8) *InboundUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// AddStatus adds i to the "status" field.
func (iu *InboundUpdate) AddStatus(i int8) *InboundUpdate {
	iu.mutation.AddStatus(i)
	return iu
}

// SetType sets the "type" field.
func (iu *InboundUpdate) SetType(i int8) *InboundUpdate {
	iu.mutation.ResetType()
	iu.mutation.SetType(i)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableType(i *int8) *InboundUpdate {
	if i != nil {
		iu.SetType(*i)
	}
	return iu
}

// AddType adds i to the "type" field.
func (iu *InboundUpdate) AddType(i int8) *InboundUpdate {
	iu.mutation.AddType(i)
	return iu
}

// SetIsPickup sets the "is_pickup" field.
func (iu *InboundUpdate) SetIsPickup(i int8) *InboundUpdate {
	iu.mutation.ResetIsPickup()
	iu.mutation.SetIsPickup(i)
	return iu
}

// SetNillableIsPickup sets the "is_pickup" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableIsPickup(i *int8) *InboundUpdate {
	if i != nil {
		iu.SetIsPickup(*i)
	}
	return iu
}

// AddIsPickup adds i to the "is_pickup" field.
func (iu *InboundUpdate) AddIsPickup(i int8) *InboundUpdate {
	iu.mutation.AddIsPickup(i)
	return iu
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (iu *InboundUpdate) SetShippingMarkURL(s string) *InboundUpdate {
	iu.mutation.SetShippingMarkURL(s)
	return iu
}

// SetNillableShippingMarkURL sets the "shipping_mark_url" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableShippingMarkURL(s *string) *InboundUpdate {
	if s != nil {
		iu.SetShippingMarkURL(*s)
	}
	return iu
}

// ClearShippingMarkURL clears the value of the "shipping_mark_url" field.
func (iu *InboundUpdate) ClearShippingMarkURL() *InboundUpdate {
	iu.mutation.ClearShippingMarkURL()
	return iu
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (iu *InboundUpdate) SetPickupOrderID(i int64) *InboundUpdate {
	iu.mutation.ResetPickupOrderID()
	iu.mutation.SetPickupOrderID(i)
	return iu
}

// AddPickupOrderID adds i to the "pickup_order_id" field.
func (iu *InboundUpdate) AddPickupOrderID(i int64) *InboundUpdate {
	iu.mutation.AddPickupOrderID(i)
	return iu
}

// SetCarrierName sets the "carrier_name" field.
func (iu *InboundUpdate) SetCarrierName(s string) *InboundUpdate {
	iu.mutation.SetCarrierName(s)
	return iu
}

// SetNillableCarrierName sets the "carrier_name" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableCarrierName(s *string) *InboundUpdate {
	if s != nil {
		iu.SetCarrierName(*s)
	}
	return iu
}

// SetOrderNumber sets the "order_number" field.
func (iu *InboundUpdate) SetOrderNumber(s string) *InboundUpdate {
	iu.mutation.SetOrderNumber(s)
	return iu
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (iu *InboundUpdate) SetNillableOrderNumber(s *string) *InboundUpdate {
	if s != nil {
		iu.SetOrderNumber(*s)
	}
	return iu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iu *InboundUpdate) SetTenantID(id int64) *InboundUpdate {
	iu.mutation.SetTenantID(id)
	return iu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iu *InboundUpdate) SetTenant(t *Tenant) *InboundUpdate {
	return iu.SetTenantID(t.ID)
}

// AddInboundItemIDs adds the "inbound_items" edge to the InboundItem entity by IDs.
func (iu *InboundUpdate) AddInboundItemIDs(ids ...int64) *InboundUpdate {
	iu.mutation.AddInboundItemIDs(ids...)
	return iu
}

// AddInboundItems adds the "inbound_items" edges to the InboundItem entity.
func (iu *InboundUpdate) AddInboundItems(i ...*InboundItem) *InboundUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddInboundItemIDs(ids...)
}

// Mutation returns the InboundMutation object of the builder.
func (iu *InboundUpdate) Mutation() *InboundMutation {
	return iu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iu *InboundUpdate) ClearTenant() *InboundUpdate {
	iu.mutation.ClearTenant()
	return iu
}

// ClearInboundItems clears all "inbound_items" edges to the InboundItem entity.
func (iu *InboundUpdate) ClearInboundItems() *InboundUpdate {
	iu.mutation.ClearInboundItems()
	return iu
}

// RemoveInboundItemIDs removes the "inbound_items" edge to InboundItem entities by IDs.
func (iu *InboundUpdate) RemoveInboundItemIDs(ids ...int64) *InboundUpdate {
	iu.mutation.RemoveInboundItemIDs(ids...)
	return iu
}

// RemoveInboundItems removes "inbound_items" edges to InboundItem entities.
func (iu *InboundUpdate) RemoveInboundItems(i ...*InboundItem) *InboundUpdate {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveInboundItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InboundUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InboundUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InboundUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InboundUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InboundUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if inbound.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbound.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbound.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iu *InboundUpdate) check() error {
	if _, ok := iu.mutation.TenantID(); iu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Inbound.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InboundUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InboundUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InboundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inbound.Table,
			Columns: inbound.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbound.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inbound.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(inbound.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(inbound.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.CustomerOrderID(); ok {
		_spec.SetField(inbound.FieldCustomerOrderID, field.TypeString, value)
	}
	if value, ok := iu.mutation.CustomerCode(); ok {
		_spec.SetField(inbound.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := iu.mutation.TrackingNumber(); ok {
		_spec.SetField(inbound.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := iu.mutation.WarehouseID(); ok {
		_spec.SetField(inbound.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedWarehouseID(); ok {
		_spec.AddField(inbound.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(inbound.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(inbound.FieldDescription, field.TypeString)
	}
	if value, ok := iu.mutation.EstimatedArrivalAt(); ok {
		_spec.SetField(inbound.FieldEstimatedArrivalAt, field.TypeTime, value)
	}
	if iu.mutation.EstimatedArrivalAtCleared() {
		_spec.ClearField(inbound.FieldEstimatedArrivalAt, field.TypeTime)
	}
	if value, ok := iu.mutation.ShippedAt(); ok {
		_spec.SetField(inbound.FieldShippedAt, field.TypeTime, value)
	}
	if iu.mutation.ShippedAtCleared() {
		_spec.ClearField(inbound.FieldShippedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(inbound.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.AddedStatus(); ok {
		_spec.AddField(inbound.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(inbound.FieldType, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.AddedType(); ok {
		_spec.AddField(inbound.FieldType, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.IsPickup(); ok {
		_spec.SetField(inbound.FieldIsPickup, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.AddedIsPickup(); ok {
		_spec.AddField(inbound.FieldIsPickup, field.TypeInt8, value)
	}
	if value, ok := iu.mutation.ShippingMarkURL(); ok {
		_spec.SetField(inbound.FieldShippingMarkURL, field.TypeString, value)
	}
	if iu.mutation.ShippingMarkURLCleared() {
		_spec.ClearField(inbound.FieldShippingMarkURL, field.TypeString)
	}
	if value, ok := iu.mutation.PickupOrderID(); ok {
		_spec.SetField(inbound.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedPickupOrderID(); ok {
		_spec.AddField(inbound.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.CarrierName(); ok {
		_spec.SetField(inbound.FieldCarrierName, field.TypeString, value)
	}
	if value, ok := iu.mutation.OrderNumber(); ok {
		_spec.SetField(inbound.FieldOrderNumber, field.TypeString, value)
	}
	if iu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inbound
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.Inbound
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.InboundItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedInboundItemsIDs(); len(nodes) > 0 && !iu.mutation.InboundItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InboundItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iu.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iu.schemaConfig.Inbound
	ctx = internal.NewSchemaConfigContext(ctx, iu.schemaConfig)
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inbound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InboundUpdateOne is the builder for updating a single Inbound entity.
type InboundUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InboundMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InboundUpdateOne) SetUpdatedAt(t time.Time) *InboundUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InboundUpdateOne) SetDeletedAt(t time.Time) *InboundUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableDeletedAt(t *time.Time) *InboundUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InboundUpdateOne) ClearDeletedAt() *InboundUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetCustomerOrderID sets the "customer_order_id" field.
func (iuo *InboundUpdateOne) SetCustomerOrderID(s string) *InboundUpdateOne {
	iuo.mutation.SetCustomerOrderID(s)
	return iuo
}

// SetNillableCustomerOrderID sets the "customer_order_id" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableCustomerOrderID(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetCustomerOrderID(*s)
	}
	return iuo
}

// SetCustomerCode sets the "customer_code" field.
func (iuo *InboundUpdateOne) SetCustomerCode(s string) *InboundUpdateOne {
	iuo.mutation.SetCustomerCode(s)
	return iuo
}

// SetNillableCustomerCode sets the "customer_code" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableCustomerCode(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetCustomerCode(*s)
	}
	return iuo
}

// SetTrackingNumber sets the "tracking_number" field.
func (iuo *InboundUpdateOne) SetTrackingNumber(s string) *InboundUpdateOne {
	iuo.mutation.SetTrackingNumber(s)
	return iuo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableTrackingNumber(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetTrackingNumber(*s)
	}
	return iuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (iuo *InboundUpdateOne) SetWarehouseID(i int64) *InboundUpdateOne {
	iuo.mutation.ResetWarehouseID()
	iuo.mutation.SetWarehouseID(i)
	return iuo
}

// AddWarehouseID adds i to the "warehouse_id" field.
func (iuo *InboundUpdateOne) AddWarehouseID(i int64) *InboundUpdateOne {
	iuo.mutation.AddWarehouseID(i)
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *InboundUpdateOne) SetDescription(s string) *InboundUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableDescription(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *InboundUpdateOne) ClearDescription() *InboundUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetEstimatedArrivalAt sets the "estimated_arrival_at" field.
func (iuo *InboundUpdateOne) SetEstimatedArrivalAt(t time.Time) *InboundUpdateOne {
	iuo.mutation.SetEstimatedArrivalAt(t)
	return iuo
}

// SetNillableEstimatedArrivalAt sets the "estimated_arrival_at" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableEstimatedArrivalAt(t *time.Time) *InboundUpdateOne {
	if t != nil {
		iuo.SetEstimatedArrivalAt(*t)
	}
	return iuo
}

// ClearEstimatedArrivalAt clears the value of the "estimated_arrival_at" field.
func (iuo *InboundUpdateOne) ClearEstimatedArrivalAt() *InboundUpdateOne {
	iuo.mutation.ClearEstimatedArrivalAt()
	return iuo
}

// SetShippedAt sets the "shipped_at" field.
func (iuo *InboundUpdateOne) SetShippedAt(t time.Time) *InboundUpdateOne {
	iuo.mutation.SetShippedAt(t)
	return iuo
}

// SetNillableShippedAt sets the "shipped_at" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableShippedAt(t *time.Time) *InboundUpdateOne {
	if t != nil {
		iuo.SetShippedAt(*t)
	}
	return iuo
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (iuo *InboundUpdateOne) ClearShippedAt() *InboundUpdateOne {
	iuo.mutation.ClearShippedAt()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InboundUpdateOne) SetStatus(i int8) *InboundUpdateOne {
	iuo.mutation.ResetStatus()
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableStatus(i *int8) *InboundUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// AddStatus adds i to the "status" field.
func (iuo *InboundUpdateOne) AddStatus(i int8) *InboundUpdateOne {
	iuo.mutation.AddStatus(i)
	return iuo
}

// SetType sets the "type" field.
func (iuo *InboundUpdateOne) SetType(i int8) *InboundUpdateOne {
	iuo.mutation.ResetType()
	iuo.mutation.SetType(i)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableType(i *int8) *InboundUpdateOne {
	if i != nil {
		iuo.SetType(*i)
	}
	return iuo
}

// AddType adds i to the "type" field.
func (iuo *InboundUpdateOne) AddType(i int8) *InboundUpdateOne {
	iuo.mutation.AddType(i)
	return iuo
}

// SetIsPickup sets the "is_pickup" field.
func (iuo *InboundUpdateOne) SetIsPickup(i int8) *InboundUpdateOne {
	iuo.mutation.ResetIsPickup()
	iuo.mutation.SetIsPickup(i)
	return iuo
}

// SetNillableIsPickup sets the "is_pickup" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableIsPickup(i *int8) *InboundUpdateOne {
	if i != nil {
		iuo.SetIsPickup(*i)
	}
	return iuo
}

// AddIsPickup adds i to the "is_pickup" field.
func (iuo *InboundUpdateOne) AddIsPickup(i int8) *InboundUpdateOne {
	iuo.mutation.AddIsPickup(i)
	return iuo
}

// SetShippingMarkURL sets the "shipping_mark_url" field.
func (iuo *InboundUpdateOne) SetShippingMarkURL(s string) *InboundUpdateOne {
	iuo.mutation.SetShippingMarkURL(s)
	return iuo
}

// SetNillableShippingMarkURL sets the "shipping_mark_url" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableShippingMarkURL(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetShippingMarkURL(*s)
	}
	return iuo
}

// ClearShippingMarkURL clears the value of the "shipping_mark_url" field.
func (iuo *InboundUpdateOne) ClearShippingMarkURL() *InboundUpdateOne {
	iuo.mutation.ClearShippingMarkURL()
	return iuo
}

// SetPickupOrderID sets the "pickup_order_id" field.
func (iuo *InboundUpdateOne) SetPickupOrderID(i int64) *InboundUpdateOne {
	iuo.mutation.ResetPickupOrderID()
	iuo.mutation.SetPickupOrderID(i)
	return iuo
}

// AddPickupOrderID adds i to the "pickup_order_id" field.
func (iuo *InboundUpdateOne) AddPickupOrderID(i int64) *InboundUpdateOne {
	iuo.mutation.AddPickupOrderID(i)
	return iuo
}

// SetCarrierName sets the "carrier_name" field.
func (iuo *InboundUpdateOne) SetCarrierName(s string) *InboundUpdateOne {
	iuo.mutation.SetCarrierName(s)
	return iuo
}

// SetNillableCarrierName sets the "carrier_name" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableCarrierName(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetCarrierName(*s)
	}
	return iuo
}

// SetOrderNumber sets the "order_number" field.
func (iuo *InboundUpdateOne) SetOrderNumber(s string) *InboundUpdateOne {
	iuo.mutation.SetOrderNumber(s)
	return iuo
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (iuo *InboundUpdateOne) SetNillableOrderNumber(s *string) *InboundUpdateOne {
	if s != nil {
		iuo.SetOrderNumber(*s)
	}
	return iuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (iuo *InboundUpdateOne) SetTenantID(id int64) *InboundUpdateOne {
	iuo.mutation.SetTenantID(id)
	return iuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iuo *InboundUpdateOne) SetTenant(t *Tenant) *InboundUpdateOne {
	return iuo.SetTenantID(t.ID)
}

// AddInboundItemIDs adds the "inbound_items" edge to the InboundItem entity by IDs.
func (iuo *InboundUpdateOne) AddInboundItemIDs(ids ...int64) *InboundUpdateOne {
	iuo.mutation.AddInboundItemIDs(ids...)
	return iuo
}

// AddInboundItems adds the "inbound_items" edges to the InboundItem entity.
func (iuo *InboundUpdateOne) AddInboundItems(i ...*InboundItem) *InboundUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddInboundItemIDs(ids...)
}

// Mutation returns the InboundMutation object of the builder.
func (iuo *InboundUpdateOne) Mutation() *InboundMutation {
	return iuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iuo *InboundUpdateOne) ClearTenant() *InboundUpdateOne {
	iuo.mutation.ClearTenant()
	return iuo
}

// ClearInboundItems clears all "inbound_items" edges to the InboundItem entity.
func (iuo *InboundUpdateOne) ClearInboundItems() *InboundUpdateOne {
	iuo.mutation.ClearInboundItems()
	return iuo
}

// RemoveInboundItemIDs removes the "inbound_items" edge to InboundItem entities by IDs.
func (iuo *InboundUpdateOne) RemoveInboundItemIDs(ids ...int64) *InboundUpdateOne {
	iuo.mutation.RemoveInboundItemIDs(ids...)
	return iuo
}

// RemoveInboundItems removes "inbound_items" edges to InboundItem entities.
func (iuo *InboundUpdateOne) RemoveInboundItems(i ...*InboundItem) *InboundUpdateOne {
	ids := make([]int64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveInboundItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InboundUpdateOne) Select(field string, fields ...string) *InboundUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inbound entity.
func (iuo *InboundUpdateOne) Save(ctx context.Context) (*Inbound, error) {
	var (
		err  error
		node *Inbound
	)
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InboundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Inbound)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InboundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InboundUpdateOne) SaveX(ctx context.Context) *Inbound {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InboundUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InboundUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InboundUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if inbound.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized inbound.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := inbound.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InboundUpdateOne) check() error {
	if _, ok := iuo.mutation.TenantID(); iuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Inbound.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InboundUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InboundUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InboundUpdateOne) sqlSave(ctx context.Context) (_node *Inbound, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inbound.Table,
			Columns: inbound.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: inbound.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Inbound.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inbound.FieldID)
		for _, f := range fields {
			if !inbound.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != inbound.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inbound.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(inbound.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inbound.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.CustomerOrderID(); ok {
		_spec.SetField(inbound.FieldCustomerOrderID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CustomerCode(); ok {
		_spec.SetField(inbound.FieldCustomerCode, field.TypeString, value)
	}
	if value, ok := iuo.mutation.TrackingNumber(); ok {
		_spec.SetField(inbound.FieldTrackingNumber, field.TypeString, value)
	}
	if value, ok := iuo.mutation.WarehouseID(); ok {
		_spec.SetField(inbound.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedWarehouseID(); ok {
		_spec.AddField(inbound.FieldWarehouseID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(inbound.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(inbound.FieldDescription, field.TypeString)
	}
	if value, ok := iuo.mutation.EstimatedArrivalAt(); ok {
		_spec.SetField(inbound.FieldEstimatedArrivalAt, field.TypeTime, value)
	}
	if iuo.mutation.EstimatedArrivalAtCleared() {
		_spec.ClearField(inbound.FieldEstimatedArrivalAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.ShippedAt(); ok {
		_spec.SetField(inbound.FieldShippedAt, field.TypeTime, value)
	}
	if iuo.mutation.ShippedAtCleared() {
		_spec.ClearField(inbound.FieldShippedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(inbound.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.AddedStatus(); ok {
		_spec.AddField(inbound.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(inbound.FieldType, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.AddedType(); ok {
		_spec.AddField(inbound.FieldType, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.IsPickup(); ok {
		_spec.SetField(inbound.FieldIsPickup, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.AddedIsPickup(); ok {
		_spec.AddField(inbound.FieldIsPickup, field.TypeInt8, value)
	}
	if value, ok := iuo.mutation.ShippingMarkURL(); ok {
		_spec.SetField(inbound.FieldShippingMarkURL, field.TypeString, value)
	}
	if iuo.mutation.ShippingMarkURLCleared() {
		_spec.ClearField(inbound.FieldShippingMarkURL, field.TypeString)
	}
	if value, ok := iuo.mutation.PickupOrderID(); ok {
		_spec.SetField(inbound.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedPickupOrderID(); ok {
		_spec.AddField(inbound.FieldPickupOrderID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.CarrierName(); ok {
		_spec.SetField(inbound.FieldCarrierName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.OrderNumber(); ok {
		_spec.SetField(inbound.FieldOrderNumber, field.TypeString, value)
	}
	if iuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inbound
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inbound.TenantTable,
			Columns: []string{inbound.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.Inbound
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.InboundItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.InboundItem
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedInboundItemsIDs(); len(nodes) > 0 && !iuo.mutation.InboundItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InboundItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inbound.InboundItemsTable,
			Columns: []string{inbound.InboundItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: inbounditem.FieldID,
				},
			},
		}
		edge.Schema = iuo.schemaConfig.InboundItem
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iuo.schemaConfig.Inbound
	ctx = internal.NewSchemaConfigContext(ctx, iuo.schemaConfig)
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Inbound{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inbound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
