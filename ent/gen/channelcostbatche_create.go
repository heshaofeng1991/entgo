// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/channelcostbatche"
)

// ChannelCostBatcheCreate is the builder for creating a ChannelCostBatche entity.
type ChannelCostBatcheCreate struct {
	config
	mutation *ChannelCostBatcheMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccbc *ChannelCostBatcheCreate) SetCreatedAt(t time.Time) *ChannelCostBatcheCreate {
	ccbc.mutation.SetCreatedAt(t)
	return ccbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccbc *ChannelCostBatcheCreate) SetNillableCreatedAt(t *time.Time) *ChannelCostBatcheCreate {
	if t != nil {
		ccbc.SetCreatedAt(*t)
	}
	return ccbc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccbc *ChannelCostBatcheCreate) SetUpdatedAt(t time.Time) *ChannelCostBatcheCreate {
	ccbc.mutation.SetUpdatedAt(t)
	return ccbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccbc *ChannelCostBatcheCreate) SetNillableUpdatedAt(t *time.Time) *ChannelCostBatcheCreate {
	if t != nil {
		ccbc.SetUpdatedAt(*t)
	}
	return ccbc
}

// SetChannelID sets the "channel_id" field.
func (ccbc *ChannelCostBatcheCreate) SetChannelID(i int64) *ChannelCostBatcheCreate {
	ccbc.mutation.SetChannelID(i)
	return ccbc
}

// SetEffectiveDate sets the "effective_date" field.
func (ccbc *ChannelCostBatcheCreate) SetEffectiveDate(t time.Time) *ChannelCostBatcheCreate {
	ccbc.mutation.SetEffectiveDate(t)
	return ccbc
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (ccbc *ChannelCostBatcheCreate) SetNillableEffectiveDate(t *time.Time) *ChannelCostBatcheCreate {
	if t != nil {
		ccbc.SetEffectiveDate(*t)
	}
	return ccbc
}

// SetExpiryDate sets the "expiry_date" field.
func (ccbc *ChannelCostBatcheCreate) SetExpiryDate(t time.Time) *ChannelCostBatcheCreate {
	ccbc.mutation.SetExpiryDate(t)
	return ccbc
}

// SetNillableExpiryDate sets the "expiry_date" field if the given value is not nil.
func (ccbc *ChannelCostBatcheCreate) SetNillableExpiryDate(t *time.Time) *ChannelCostBatcheCreate {
	if t != nil {
		ccbc.SetExpiryDate(*t)
	}
	return ccbc
}

// SetStatus sets the "status" field.
func (ccbc *ChannelCostBatcheCreate) SetStatus(b bool) *ChannelCostBatcheCreate {
	ccbc.mutation.SetStatus(b)
	return ccbc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ccbc *ChannelCostBatcheCreate) SetNillableStatus(b *bool) *ChannelCostBatcheCreate {
	if b != nil {
		ccbc.SetStatus(*b)
	}
	return ccbc
}

// SetID sets the "id" field.
func (ccbc *ChannelCostBatcheCreate) SetID(i int64) *ChannelCostBatcheCreate {
	ccbc.mutation.SetID(i)
	return ccbc
}

// Mutation returns the ChannelCostBatcheMutation object of the builder.
func (ccbc *ChannelCostBatcheCreate) Mutation() *ChannelCostBatcheMutation {
	return ccbc.mutation
}

// Save creates the ChannelCostBatche in the database.
func (ccbc *ChannelCostBatcheCreate) Save(ctx context.Context) (*ChannelCostBatche, error) {
	var (
		err  error
		node *ChannelCostBatche
	)
	ccbc.defaults()
	if len(ccbc.hooks) == 0 {
		if err = ccbc.check(); err != nil {
			return nil, err
		}
		node, err = ccbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChannelCostBatcheMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccbc.check(); err != nil {
				return nil, err
			}
			ccbc.mutation = mutation
			if node, err = ccbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccbc.hooks) - 1; i >= 0; i-- {
			if ccbc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ccbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChannelCostBatche)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChannelCostBatcheMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccbc *ChannelCostBatcheCreate) SaveX(ctx context.Context) *ChannelCostBatche {
	v, err := ccbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccbc *ChannelCostBatcheCreate) Exec(ctx context.Context) error {
	_, err := ccbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccbc *ChannelCostBatcheCreate) ExecX(ctx context.Context) {
	if err := ccbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccbc *ChannelCostBatcheCreate) defaults() {
	if _, ok := ccbc.mutation.CreatedAt(); !ok {
		v := channelcostbatche.DefaultCreatedAt()
		ccbc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccbc.mutation.UpdatedAt(); !ok {
		v := channelcostbatche.DefaultUpdatedAt()
		ccbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccbc.mutation.Status(); !ok {
		v := channelcostbatche.DefaultStatus
		ccbc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccbc *ChannelCostBatcheCreate) check() error {
	if _, ok := ccbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ChannelCostBatche.created_at"`)}
	}
	if _, ok := ccbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ChannelCostBatche.updated_at"`)}
	}
	if _, ok := ccbc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`gen: missing required field "ChannelCostBatche.channel_id"`)}
	}
	if v, ok := ccbc.mutation.ChannelID(); ok {
		if err := channelcostbatche.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`gen: validator failed for field "ChannelCostBatche.channel_id": %w`, err)}
		}
	}
	if _, ok := ccbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "ChannelCostBatche.status"`)}
	}
	return nil
}

func (ccbc *ChannelCostBatcheCreate) sqlSave(ctx context.Context) (*ChannelCostBatche, error) {
	_node, _spec := ccbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ccbc *ChannelCostBatcheCreate) createSpec() (*ChannelCostBatche, *sqlgraph.CreateSpec) {
	var (
		_node = &ChannelCostBatche{config: ccbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: channelcostbatche.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: channelcostbatche.FieldID,
			},
		}
	)
	_spec.Schema = ccbc.schemaConfig.ChannelCostBatche
	_spec.OnConflict = ccbc.conflict
	if id, ok := ccbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccbc.mutation.CreatedAt(); ok {
		_spec.SetField(channelcostbatche.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccbc.mutation.UpdatedAt(); ok {
		_spec.SetField(channelcostbatche.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccbc.mutation.ChannelID(); ok {
		_spec.SetField(channelcostbatche.FieldChannelID, field.TypeInt64, value)
		_node.ChannelID = value
	}
	if value, ok := ccbc.mutation.EffectiveDate(); ok {
		_spec.SetField(channelcostbatche.FieldEffectiveDate, field.TypeTime, value)
		_node.EffectiveDate = value
	}
	if value, ok := ccbc.mutation.ExpiryDate(); ok {
		_spec.SetField(channelcostbatche.FieldExpiryDate, field.TypeTime, value)
		_node.ExpiryDate = value
	}
	if value, ok := ccbc.mutation.Status(); ok {
		_spec.SetField(channelcostbatche.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelCostBatche.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelCostBatcheUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccbc *ChannelCostBatcheCreate) OnConflict(opts ...sql.ConflictOption) *ChannelCostBatcheUpsertOne {
	ccbc.conflict = opts
	return &ChannelCostBatcheUpsertOne{
		create: ccbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccbc *ChannelCostBatcheCreate) OnConflictColumns(columns ...string) *ChannelCostBatcheUpsertOne {
	ccbc.conflict = append(ccbc.conflict, sql.ConflictColumns(columns...))
	return &ChannelCostBatcheUpsertOne{
		create: ccbc,
	}
}

type (
	// ChannelCostBatcheUpsertOne is the builder for "upsert"-ing
	//  one ChannelCostBatche node.
	ChannelCostBatcheUpsertOne struct {
		create *ChannelCostBatcheCreate
	}

	// ChannelCostBatcheUpsert is the "OnConflict" setter.
	ChannelCostBatcheUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostBatcheUpsert) SetUpdatedAt(v time.Time) *ChannelCostBatcheUpsert {
	u.Set(channelcostbatche.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsert) UpdateUpdatedAt() *ChannelCostBatcheUpsert {
	u.SetExcluded(channelcostbatche.FieldUpdatedAt)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostBatcheUpsert) SetChannelID(v int64) *ChannelCostBatcheUpsert {
	u.Set(channelcostbatche.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsert) UpdateChannelID() *ChannelCostBatcheUpsert {
	u.SetExcluded(channelcostbatche.FieldChannelID)
	return u
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelCostBatcheUpsert) AddChannelID(v int64) *ChannelCostBatcheUpsert {
	u.Add(channelcostbatche.FieldChannelID, v)
	return u
}

// SetEffectiveDate sets the "effective_date" field.
func (u *ChannelCostBatcheUpsert) SetEffectiveDate(v time.Time) *ChannelCostBatcheUpsert {
	u.Set(channelcostbatche.FieldEffectiveDate, v)
	return u
}

// UpdateEffectiveDate sets the "effective_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsert) UpdateEffectiveDate() *ChannelCostBatcheUpsert {
	u.SetExcluded(channelcostbatche.FieldEffectiveDate)
	return u
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (u *ChannelCostBatcheUpsert) ClearEffectiveDate() *ChannelCostBatcheUpsert {
	u.SetNull(channelcostbatche.FieldEffectiveDate)
	return u
}

// SetExpiryDate sets the "expiry_date" field.
func (u *ChannelCostBatcheUpsert) SetExpiryDate(v time.Time) *ChannelCostBatcheUpsert {
	u.Set(channelcostbatche.FieldExpiryDate, v)
	return u
}

// UpdateExpiryDate sets the "expiry_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsert) UpdateExpiryDate() *ChannelCostBatcheUpsert {
	u.SetExcluded(channelcostbatche.FieldExpiryDate)
	return u
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (u *ChannelCostBatcheUpsert) ClearExpiryDate() *ChannelCostBatcheUpsert {
	u.SetNull(channelcostbatche.FieldExpiryDate)
	return u
}

// SetStatus sets the "status" field.
func (u *ChannelCostBatcheUpsert) SetStatus(v bool) *ChannelCostBatcheUpsert {
	u.Set(channelcostbatche.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsert) UpdateStatus() *ChannelCostBatcheUpsert {
	u.SetExcluded(channelcostbatche.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelcostbatche.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelCostBatcheUpsertOne) UpdateNewValues() *ChannelCostBatcheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(channelcostbatche.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channelcostbatche.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelCostBatcheUpsertOne) Ignore() *ChannelCostBatcheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelCostBatcheUpsertOne) DoNothing() *ChannelCostBatcheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCostBatcheCreate.OnConflict
// documentation for more info.
func (u *ChannelCostBatcheUpsertOne) Update(set func(*ChannelCostBatcheUpsert)) *ChannelCostBatcheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelCostBatcheUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostBatcheUpsertOne) SetUpdatedAt(v time.Time) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertOne) UpdateUpdatedAt() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostBatcheUpsertOne) SetChannelID(v int64) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelCostBatcheUpsertOne) AddChannelID(v int64) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertOne) UpdateChannelID() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateChannelID()
	})
}

// SetEffectiveDate sets the "effective_date" field.
func (u *ChannelCostBatcheUpsertOne) SetEffectiveDate(v time.Time) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetEffectiveDate(v)
	})
}

// UpdateEffectiveDate sets the "effective_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertOne) UpdateEffectiveDate() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateEffectiveDate()
	})
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (u *ChannelCostBatcheUpsertOne) ClearEffectiveDate() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.ClearEffectiveDate()
	})
}

// SetExpiryDate sets the "expiry_date" field.
func (u *ChannelCostBatcheUpsertOne) SetExpiryDate(v time.Time) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetExpiryDate(v)
	})
}

// UpdateExpiryDate sets the "expiry_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertOne) UpdateExpiryDate() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateExpiryDate()
	})
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (u *ChannelCostBatcheUpsertOne) ClearExpiryDate() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.ClearExpiryDate()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelCostBatcheUpsertOne) SetStatus(v bool) *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertOne) UpdateStatus() *ChannelCostBatcheUpsertOne {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ChannelCostBatcheUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCostBatcheCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelCostBatcheUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelCostBatcheUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelCostBatcheUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelCostBatcheCreateBulk is the builder for creating many ChannelCostBatche entities in bulk.
type ChannelCostBatcheCreateBulk struct {
	config
	builders []*ChannelCostBatcheCreate
	conflict []sql.ConflictOption
}

// Save creates the ChannelCostBatche entities in the database.
func (ccbcb *ChannelCostBatcheCreateBulk) Save(ctx context.Context) ([]*ChannelCostBatche, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccbcb.builders))
	nodes := make([]*ChannelCostBatche, len(ccbcb.builders))
	mutators := make([]Mutator, len(ccbcb.builders))
	for i := range ccbcb.builders {
		func(i int, root context.Context) {
			builder := ccbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelCostBatcheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccbcb *ChannelCostBatcheCreateBulk) SaveX(ctx context.Context) []*ChannelCostBatche {
	v, err := ccbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccbcb *ChannelCostBatcheCreateBulk) Exec(ctx context.Context) error {
	_, err := ccbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccbcb *ChannelCostBatcheCreateBulk) ExecX(ctx context.Context) {
	if err := ccbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChannelCostBatche.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelCostBatcheUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccbcb *ChannelCostBatcheCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelCostBatcheUpsertBulk {
	ccbcb.conflict = opts
	return &ChannelCostBatcheUpsertBulk{
		create: ccbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccbcb *ChannelCostBatcheCreateBulk) OnConflictColumns(columns ...string) *ChannelCostBatcheUpsertBulk {
	ccbcb.conflict = append(ccbcb.conflict, sql.ConflictColumns(columns...))
	return &ChannelCostBatcheUpsertBulk{
		create: ccbcb,
	}
}

// ChannelCostBatcheUpsertBulk is the builder for "upsert"-ing
// a bulk of ChannelCostBatche nodes.
type ChannelCostBatcheUpsertBulk struct {
	create *ChannelCostBatcheCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(channelcostbatche.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChannelCostBatcheUpsertBulk) UpdateNewValues() *ChannelCostBatcheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(channelcostbatche.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channelcostbatche.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChannelCostBatche.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelCostBatcheUpsertBulk) Ignore() *ChannelCostBatcheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelCostBatcheUpsertBulk) DoNothing() *ChannelCostBatcheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCostBatcheCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelCostBatcheUpsertBulk) Update(set func(*ChannelCostBatcheUpsert)) *ChannelCostBatcheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelCostBatcheUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelCostBatcheUpsertBulk) SetUpdatedAt(v time.Time) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertBulk) UpdateUpdatedAt() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *ChannelCostBatcheUpsertBulk) SetChannelID(v int64) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetChannelID(v)
	})
}

// AddChannelID adds v to the "channel_id" field.
func (u *ChannelCostBatcheUpsertBulk) AddChannelID(v int64) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.AddChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertBulk) UpdateChannelID() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateChannelID()
	})
}

// SetEffectiveDate sets the "effective_date" field.
func (u *ChannelCostBatcheUpsertBulk) SetEffectiveDate(v time.Time) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetEffectiveDate(v)
	})
}

// UpdateEffectiveDate sets the "effective_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertBulk) UpdateEffectiveDate() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateEffectiveDate()
	})
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (u *ChannelCostBatcheUpsertBulk) ClearEffectiveDate() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.ClearEffectiveDate()
	})
}

// SetExpiryDate sets the "expiry_date" field.
func (u *ChannelCostBatcheUpsertBulk) SetExpiryDate(v time.Time) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetExpiryDate(v)
	})
}

// UpdateExpiryDate sets the "expiry_date" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertBulk) UpdateExpiryDate() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateExpiryDate()
	})
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (u *ChannelCostBatcheUpsertBulk) ClearExpiryDate() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.ClearExpiryDate()
	})
}

// SetStatus sets the "status" field.
func (u *ChannelCostBatcheUpsertBulk) SetStatus(v bool) *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChannelCostBatcheUpsertBulk) UpdateStatus() *ChannelCostBatcheUpsertBulk {
	return u.Update(func(s *ChannelCostBatcheUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ChannelCostBatcheUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ChannelCostBatcheCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChannelCostBatcheCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelCostBatcheUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
