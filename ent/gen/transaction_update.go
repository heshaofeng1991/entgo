// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heshaofeng1991/entgo/ent/gen/internal"
	"github.com/heshaofeng1991/entgo/ent/gen/predicate"
	"github.com/heshaofeng1991/entgo/ent/gen/tenant"
	"github.com/heshaofeng1991/entgo/ent/gen/transaction"
	"github.com/heshaofeng1991/entgo/ent/gen/transactiondetail"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransactionUpdate) SetDeletedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDeletedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TransactionUpdate) ClearDeletedAt() *TransactionUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetOrderID sets the "order_id" field.
func (tu *TransactionUpdate) SetOrderID(i int64) *TransactionUpdate {
	tu.mutation.ResetOrderID()
	tu.mutation.SetOrderID(i)
	return tu
}

// AddOrderID adds i to the "order_id" field.
func (tu *TransactionUpdate) AddOrderID(i int64) *TransactionUpdate {
	tu.mutation.AddOrderID(i)
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(s string) *TransactionUpdate {
	tu.mutation.SetTransactionType(s)
	return tu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionType(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetTransactionType(*s)
	}
	return tu
}

// SetTransactionAmount sets the "transaction_amount" field.
func (tu *TransactionUpdate) SetTransactionAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetTransactionAmount()
	tu.mutation.SetTransactionAmount(f)
	return tu
}

// SetNillableTransactionAmount sets the "transaction_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionAmount(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetTransactionAmount(*f)
	}
	return tu
}

// AddTransactionAmount adds f to the "transaction_amount" field.
func (tu *TransactionUpdate) AddTransactionAmount(f float64) *TransactionUpdate {
	tu.mutation.AddTransactionAmount(f)
	return tu
}

// SetBalance sets the "balance" field.
func (tu *TransactionUpdate) SetBalance(f float64) *TransactionUpdate {
	tu.mutation.ResetBalance()
	tu.mutation.SetBalance(f)
	return tu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableBalance(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetBalance(*f)
	}
	return tu
}

// AddBalance adds f to the "balance" field.
func (tu *TransactionUpdate) AddBalance(f float64) *TransactionUpdate {
	tu.mutation.AddBalance(f)
	return tu
}

// SetRemark sets the "remark" field.
func (tu *TransactionUpdate) SetRemark(s string) *TransactionUpdate {
	tu.mutation.SetRemark(s)
	return tu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableRemark(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetRemark(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(i int8) *TransactionUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(i *int8) *TransactionUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TransactionUpdate) AddStatus(i int8) *TransactionUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TransactionUpdate) SetCreatedBy(i int8) *TransactionUpdate {
	tu.mutation.ResetCreatedBy()
	tu.mutation.SetCreatedBy(i)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedBy(i *int8) *TransactionUpdate {
	if i != nil {
		tu.SetCreatedBy(*i)
	}
	return tu
}

// AddCreatedBy adds i to the "created_by" field.
func (tu *TransactionUpdate) AddCreatedBy(i int8) *TransactionUpdate {
	tu.mutation.AddCreatedBy(i)
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TransactionUpdate) SetUpdatedBy(i int8) *TransactionUpdate {
	tu.mutation.ResetUpdatedBy()
	tu.mutation.SetUpdatedBy(i)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUpdatedBy(i *int8) *TransactionUpdate {
	if i != nil {
		tu.SetUpdatedBy(*i)
	}
	return tu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tu *TransactionUpdate) AddUpdatedBy(i int8) *TransactionUpdate {
	tu.mutation.AddUpdatedBy(i)
	return tu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (tu *TransactionUpdate) SetTenantID(id int64) *TransactionUpdate {
	tu.mutation.SetTenantID(id)
	return tu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (tu *TransactionUpdate) SetTenant(t *Tenant) *TransactionUpdate {
	return tu.SetTenantID(t.ID)
}

// AddDetailIDs adds the "details" edge to the TransactionDetail entity by IDs.
func (tu *TransactionUpdate) AddDetailIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.AddDetailIDs(ids...)
	return tu
}

// AddDetails adds the "details" edges to the TransactionDetail entity.
func (tu *TransactionUpdate) AddDetails(t ...*TransactionDetail) *TransactionUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddDetailIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (tu *TransactionUpdate) ClearTenant() *TransactionUpdate {
	tu.mutation.ClearTenant()
	return tu
}

// ClearDetails clears all "details" edges to the TransactionDetail entity.
func (tu *TransactionUpdate) ClearDetails() *TransactionUpdate {
	tu.mutation.ClearDetails()
	return tu
}

// RemoveDetailIDs removes the "details" edge to TransactionDetail entities by IDs.
func (tu *TransactionUpdate) RemoveDetailIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.RemoveDetailIDs(ids...)
	return tu
}

// RemoveDetails removes "details" edges to TransactionDetail entities.
func (tu *TransactionUpdate) RemoveDetails(t ...*TransactionDetail) *TransactionUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if transaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized transaction.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if _, ok := tu.mutation.TenantID(); tu.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Transaction.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransactionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.OrderID(); ok {
		_spec.SetField(transaction.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedOrderID(); ok {
		_spec.AddField(transaction.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeString, value)
	}
	if value, ok := tu.mutation.TransactionAmount(); ok {
		_spec.SetField(transaction.FieldTransactionAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedTransactionAmount(); ok {
		_spec.AddField(transaction.FieldTransactionAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Balance(); ok {
		_spec.SetField(transaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedBalance(); ok {
		_spec.AddField(transaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Remark(); ok {
		_spec.SetField(transaction.FieldRemark, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(transaction.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(transaction.FieldCreatedBy, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(transaction.FieldCreatedBy, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(transaction.FieldUpdatedBy, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(transaction.FieldUpdatedBy, field.TypeInt8, value)
	}
	if tu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.Transaction
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.Transaction
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.TransactionDetail
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !tu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.TransactionDetail
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.TransactionDetail
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tu.schemaConfig.Transaction
	ctx = internal.NewSchemaConfigContext(ctx, tu.schemaConfig)
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransactionUpdateOne) SetDeletedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDeletedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TransactionUpdateOne) ClearDeletedAt() *TransactionUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetOrderID sets the "order_id" field.
func (tuo *TransactionUpdateOne) SetOrderID(i int64) *TransactionUpdateOne {
	tuo.mutation.ResetOrderID()
	tuo.mutation.SetOrderID(i)
	return tuo
}

// AddOrderID adds i to the "order_id" field.
func (tuo *TransactionUpdateOne) AddOrderID(i int64) *TransactionUpdateOne {
	tuo.mutation.AddOrderID(i)
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionType(s)
	return tuo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionType(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetTransactionType(*s)
	}
	return tuo
}

// SetTransactionAmount sets the "transaction_amount" field.
func (tuo *TransactionUpdateOne) SetTransactionAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetTransactionAmount()
	tuo.mutation.SetTransactionAmount(f)
	return tuo
}

// SetNillableTransactionAmount sets the "transaction_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionAmount(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetTransactionAmount(*f)
	}
	return tuo
}

// AddTransactionAmount adds f to the "transaction_amount" field.
func (tuo *TransactionUpdateOne) AddTransactionAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddTransactionAmount(f)
	return tuo
}

// SetBalance sets the "balance" field.
func (tuo *TransactionUpdateOne) SetBalance(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetBalance()
	tuo.mutation.SetBalance(f)
	return tuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableBalance(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetBalance(*f)
	}
	return tuo
}

// AddBalance adds f to the "balance" field.
func (tuo *TransactionUpdateOne) AddBalance(f float64) *TransactionUpdateOne {
	tuo.mutation.AddBalance(f)
	return tuo
}

// SetRemark sets the "remark" field.
func (tuo *TransactionUpdateOne) SetRemark(s string) *TransactionUpdateOne {
	tuo.mutation.SetRemark(s)
	return tuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableRemark(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetRemark(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(i int8) *TransactionUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(i *int8) *TransactionUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TransactionUpdateOne) AddStatus(i int8) *TransactionUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TransactionUpdateOne) SetCreatedBy(i int8) *TransactionUpdateOne {
	tuo.mutation.ResetCreatedBy()
	tuo.mutation.SetCreatedBy(i)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedBy(i *int8) *TransactionUpdateOne {
	if i != nil {
		tuo.SetCreatedBy(*i)
	}
	return tuo
}

// AddCreatedBy adds i to the "created_by" field.
func (tuo *TransactionUpdateOne) AddCreatedBy(i int8) *TransactionUpdateOne {
	tuo.mutation.AddCreatedBy(i)
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TransactionUpdateOne) SetUpdatedBy(i int8) *TransactionUpdateOne {
	tuo.mutation.ResetUpdatedBy()
	tuo.mutation.SetUpdatedBy(i)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUpdatedBy(i *int8) *TransactionUpdateOne {
	if i != nil {
		tuo.SetUpdatedBy(*i)
	}
	return tuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tuo *TransactionUpdateOne) AddUpdatedBy(i int8) *TransactionUpdateOne {
	tuo.mutation.AddUpdatedBy(i)
	return tuo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (tuo *TransactionUpdateOne) SetTenantID(id int64) *TransactionUpdateOne {
	tuo.mutation.SetTenantID(id)
	return tuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (tuo *TransactionUpdateOne) SetTenant(t *Tenant) *TransactionUpdateOne {
	return tuo.SetTenantID(t.ID)
}

// AddDetailIDs adds the "details" edge to the TransactionDetail entity by IDs.
func (tuo *TransactionUpdateOne) AddDetailIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.AddDetailIDs(ids...)
	return tuo
}

// AddDetails adds the "details" edges to the TransactionDetail entity.
func (tuo *TransactionUpdateOne) AddDetails(t ...*TransactionDetail) *TransactionUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddDetailIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (tuo *TransactionUpdateOne) ClearTenant() *TransactionUpdateOne {
	tuo.mutation.ClearTenant()
	return tuo
}

// ClearDetails clears all "details" edges to the TransactionDetail entity.
func (tuo *TransactionUpdateOne) ClearDetails() *TransactionUpdateOne {
	tuo.mutation.ClearDetails()
	return tuo
}

// RemoveDetailIDs removes the "details" edge to TransactionDetail entities by IDs.
func (tuo *TransactionUpdateOne) RemoveDetailIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.RemoveDetailIDs(ids...)
	return tuo
}

// RemoveDetails removes "details" edges to TransactionDetail entities.
func (tuo *TransactionUpdateOne) RemoveDetails(t ...*TransactionDetail) *TransactionUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveDetailIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if transaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized transaction.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if _, ok := tuo.mutation.TenantID(); tuo.mutation.TenantCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Transaction.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransactionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.OrderID(); ok {
		_spec.SetField(transaction.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedOrderID(); ok {
		_spec.AddField(transaction.FieldOrderID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TransactionAmount(); ok {
		_spec.SetField(transaction.FieldTransactionAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedTransactionAmount(); ok {
		_spec.AddField(transaction.FieldTransactionAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Balance(); ok {
		_spec.SetField(transaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedBalance(); ok {
		_spec.AddField(transaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Remark(); ok {
		_spec.SetField(transaction.FieldRemark, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(transaction.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(transaction.FieldCreatedBy, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(transaction.FieldCreatedBy, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(transaction.FieldUpdatedBy, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(transaction.FieldUpdatedBy, field.TypeInt8, value)
	}
	if tuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.Transaction
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TenantTable,
			Columns: []string{transaction.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tenant.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.Transaction
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.TransactionDetail
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !tuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.TransactionDetail
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.DetailsTable,
			Columns: []string{transaction.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: transactiondetail.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.TransactionDetail
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tuo.schemaConfig.Transaction
	ctx = internal.NewSchemaConfigContext(ctx, tuo.schemaConfig)
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
